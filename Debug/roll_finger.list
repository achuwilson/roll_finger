
roll_finger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800a7e0  0800a7e0  0001a7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa38  0800aa38  00020270  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa38  0800aa38  00020270  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa38  0800aa38  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa38  0800aa38  0001aa38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa3c  0800aa3c  0001aa3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800aa40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b90  20000270  0800acb0  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e00  0800acb0  00021e00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195bd  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b95  00000000  00000000  00039856  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  0003d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  0003e948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b971  00000000  00000000  0003fd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011c7d  00000000  00000000  0005b691  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bfe2  00000000  00000000  0006d30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001092f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d84  00000000  00000000  0010936c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000270 	.word	0x20000270
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a7c8 	.word	0x0800a7c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000274 	.word	0x20000274
 800014c:	0800a7c8 	.word	0x0800a7c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <vApplicationGetIdleTaskMemory+0x28>)
 800095c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <vApplicationGetIdleTaskMemory+0x2c>)
 8000962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	2000028c 	.word	0x2000028c
 8000978:	200002e0 	.word	0x200002e0

0800097c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800098c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <vApplicationGetTimerTaskMemory+0x30>)
 8000992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200004e0 	.word	0x200004e0
 80009ac:	20000534 	.word	0x20000534

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	db0b      	blt.n	80009f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	f003 021f 	and.w	r2, r3, #31
 80009e4:	4906      	ldr	r1, [pc, #24]	; (8000a00 <__NVIC_EnableIRQ+0x34>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	095b      	lsrs	r3, r3, #5
 80009ec:	2001      	movs	r0, #1
 80009ee:	fa00 f202 	lsl.w	r2, r0, r2
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	615a      	str	r2, [r3, #20]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	2b20      	cmp	r3, #32
 8000b16:	bf0c      	ite	eq
 8000b18:	2301      	moveq	r3, #1
 8000b1a:	2300      	movne	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b38:	2b80      	cmp	r3, #128	; 0x80
 8000b3a:	bf0c      	ite	eq
 8000b3c:	2301      	moveq	r3, #1
 8000b3e:	2300      	movne	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	f043 0220 	orr.w	r2, r3, #32
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60da      	str	r2, [r3, #12]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60da      	str	r2, [r3, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60da      	str	r2, [r3, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	2b80      	cmp	r3, #128	; 0x80
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000bee:	78fa      	ldrb	r2, [r7, #3]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	605a      	str	r2, [r3, #4]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c0a:	699a      	ldr	r2, [r3, #24]
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <lightupLED1>:
int data_fl_real, data_fr_real, data_fl_noise,data_fr_noise,data_fl,data_fr;


// set the RGB LEDs on Finger 1
void lightupLED1(struct pixel *framebuffer)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e01a      	b.n	8000c74 <lightupLED1+0x44>
	{
		framebuffer[i].r=0;
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	dde1      	ble.n	8000c3e <lightupLED1+0xe>
	}
	for(int i=5;i<12;i++)
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	e01a      	b.n	8000cb6 <lightupLED1+0x86>
	{
		framebuffer[i].r=0;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	22ff      	movs	r2, #255	; 0xff
 8000c9e:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b0b      	cmp	r3, #11
 8000cba:	dde1      	ble.n	8000c80 <lightupLED1+0x50>
	}
	for(int i=12;i<17;i++)
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	e01a      	b.n	8000cf8 <lightupLED1+0xc8>
	{
		framebuffer[i].r=0;
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	2200      	movs	r2, #0
 8000cd0:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<17;i++)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b10      	cmp	r3, #16
 8000cfc:	dde1      	ble.n	8000cc2 <lightupLED1+0x92>
	}
	for(int i=17;i<24;i++)
 8000cfe:	2311      	movs	r3, #17
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	e01a      	b.n	8000d3a <lightupLED1+0x10a>
	{
		framebuffer[i].r=255;
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	22ff      	movs	r2, #255	; 0xff
 8000d12:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4413      	add	r3, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	709a      	strb	r2, [r3, #2]
	for(int i=17;i<24;i++)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	3301      	adds	r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b17      	cmp	r3, #23
 8000d3e:	dde1      	ble.n	8000d04 <lightupLED1+0xd4>
	}
}
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <lightupLED2>:
// set the RGB LEDs on Finger 2
void lightupLED2(struct pixel *framebuffer)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b087      	sub	sp, #28
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	e01a      	b.n	8000d8e <lightupLED2+0x44>
	{
		framebuffer[i].r=0;
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	22ff      	movs	r2, #255	; 0xff
 8000d86:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	dde1      	ble.n	8000d58 <lightupLED2+0xe>
	}
	for(int i=5;i<12;i++)
 8000d94:	2305      	movs	r3, #5
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	e01a      	b.n	8000dd0 <lightupLED2+0x86>
	{
		framebuffer[i].r=0;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	2200      	movs	r2, #0
 8000da8:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	2b0b      	cmp	r3, #11
 8000dd4:	dde1      	ble.n	8000d9a <lightupLED2+0x50>
	}
	for(int i=12;i<19;i++)
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e01a      	b.n	8000e12 <lightupLED2+0xc8>
	{
		framebuffer[i].r=255;
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4413      	add	r3, r2
 8000de8:	22ff      	movs	r2, #255	; 0xff
 8000dea:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<19;i++)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b12      	cmp	r3, #18
 8000e16:	dde1      	ble.n	8000ddc <lightupLED2+0x92>
	}
}
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
	...

08000e24 <open_gripper>:

void open_gripper(int pwmval)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	6078      	str	r0, [r7, #4]

	if((adc_value[3]>M1MinPos)||(adc_value[4]>M2MinPos))
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <open_gripper+0x78>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <open_gripper+0x7c>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d805      	bhi.n	8000e44 <open_gripper+0x20>
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <open_gripper+0x78>)
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <open_gripper+0x80>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d926      	bls.n	8000e92 <open_gripper+0x6e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <open_gripper+0x84>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 ff13 	bl	8006c78 <osSemaphoreWait>
		mgo=1;
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <open_gripper+0x88>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000e58:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2264      	movs	r2, #100	; 0x64
 8000e62:	2100      	movs	r1, #0
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 fa51 	bl	800130c <scale_val>
 8000e6a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwmval);
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <open_gripper+0x8c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <open_gripper+0x90>)
 8000e7a:	f003 fdaf 	bl	80049dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2108      	movs	r1, #8
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <open_gripper+0x90>)
 8000e84:	f003 fdaa 	bl	80049dc <HAL_GPIO_WritePin>
		osSemaphoreRelease(BinSemHandle);
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <open_gripper+0x84>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 ff41 	bl	8006d14 <osSemaphoreRelease>
	}
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20001a40 	.word	0x20001a40
 8000ea0:	20000010 	.word	0x20000010
 8000ea4:	20000018 	.word	0x20000018
 8000ea8:	20001c30 	.word	0x20001c30
 8000eac:	20000948 	.word	0x20000948
 8000eb0:	20001b04 	.word	0x20001b04
 8000eb4:	40010c00 	.word	0x40010c00

08000eb8 <close_gripper>:

void close_gripper(int pwmval)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]

	if((adc_value[3]<M1MaxPos)||(adc_value[4]<M2MaxPos))
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <close_gripper+0x78>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <close_gripper+0x7c>)
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d305      	bcc.n	8000ed8 <close_gripper+0x20>
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <close_gripper+0x78>)
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <close_gripper+0x80>)
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d226      	bcs.n	8000f26 <close_gripper+0x6e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <close_gripper+0x84>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f005 fec9 	bl	8006c78 <osSemaphoreWait>
		mgc=1;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <close_gripper+0x88>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000eec:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2264      	movs	r2, #100	; 0x64
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 fa07 	bl	800130c <scale_val>
 8000efe:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwmval);
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <close_gripper+0x8c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	480e      	ldr	r0, [pc, #56]	; (8000f48 <close_gripper+0x90>)
 8000f0e:	f003 fd65 	bl	80049dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2110      	movs	r1, #16
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <close_gripper+0x90>)
 8000f18:	f003 fd60 	bl	80049dc <HAL_GPIO_WritePin>
		osSemaphoreRelease(BinSemHandle);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <close_gripper+0x84>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f005 fef7 	bl	8006d14 <osSemaphoreRelease>

	}

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20001a40 	.word	0x20001a40
 8000f34:	20000014 	.word	0x20000014
 8000f38:	2000001c 	.word	0x2000001c
 8000f3c:	20001c30 	.word	0x20001c30
 8000f40:	2000094c 	.word	0x2000094c
 8000f44:	20001b04 	.word	0x20001b04
 8000f48:	40010c00 	.word	0x40010c00

08000f4c <brake_lf>:
void brake_lf()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 2800);
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <brake_lf+0x20>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 2800);
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <brake_lf+0x20>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000f62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20001864 	.word	0x20001864

08000f70 <brake_rf>:
void brake_rf()
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 2800);
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <brake_rf+0x20>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 2800);
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <brake_rf+0x20>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	20001864 	.word	0x20001864

08000f94 <stop_lf>:
void stop_lf()
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <stop_lf+0x1c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <stop_lf+0x1c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20001864 	.word	0x20001864

08000fb4 <stop_rf>:

void stop_rf()
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <stop_rf+0x1c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <stop_rf+0x1c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20001864 	.word	0x20001864

08000fd4 <brake_gripper>:
void brake_gripper()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <brake_gripper+0x28>)
 8000fde:	f003 fcfd 	bl	80049dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <brake_gripper+0x28>)
 8000fe8:	f003 fcf8 	bl	80049dc <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 2800);
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <brake_gripper+0x2c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	20001b04 	.word	0x20001b04

08001004 <stop_gripper>:
void stop_gripper()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2110      	movs	r1, #16
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <stop_gripper+0x24>)
 800100e:	f003 fce5 	bl	80049dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2108      	movs	r1, #8
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <stop_gripper+0x24>)
 8001018:	f003 fce0 	bl	80049dc <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <stop_gripper+0x28>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010c00 	.word	0x40010c00
 800102c:	20001b04 	.word	0x20001b04

08001030 <move_lf>:
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);

}

void move_lf(int pwmval)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[6]<LFMaxPos)
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <move_lf+0x60>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a15      	ldr	r2, [pc, #84]	; (8001094 <move_lf+0x64>)
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	4293      	cmp	r3, r2
 8001042:	d220      	bcs.n	8001086 <move_lf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <move_lf+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fe13 	bl	8006c78 <osSemaphoreWait>
		// set the moving flag
		lfw= 1;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <move_lf+0x6c>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8001058:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	2100      	movs	r1, #0
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f951 	bl	800130c <scale_val>
 800106a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <move_lf+0x70>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwmval);
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <move_lf+0x70>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <move_lf+0x68>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f005 fe47 	bl	8006d14 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20001a40 	.word	0x20001a40
 8001094:	20000000 	.word	0x20000000
 8001098:	20001c30 	.word	0x20001c30
 800109c:	2000093c 	.word	0x2000093c
 80010a0:	20001864 	.word	0x20001864

080010a4 <move_lb>:

void move_lb(int pwmval)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
	if(adc_value[6]>LFMinPos)
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <move_lb+0x60>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a15      	ldr	r2, [pc, #84]	; (8001108 <move_lb+0x64>)
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d920      	bls.n	80010fa <move_lb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <move_lb+0x68>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 fdd9 	bl	8006c78 <osSemaphoreWait>
		//isMoveB_LF = 1;
		lrw=1;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <move_lb+0x6c>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 80010cc:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	2264      	movs	r2, #100	; 0x64
 80010d6:	2100      	movs	r1, #0
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f917 	bl	800130c <scale_val>
 80010de:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwmval);
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <move_lb+0x70>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <move_lb+0x70>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <move_lb+0x68>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fe0d 	bl	8006d14 <osSemaphoreRelease>

	}

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20001a40 	.word	0x20001a40
 8001108:	20000004 	.word	0x20000004
 800110c:	20001c30 	.word	0x20001c30
 8001110:	20000938 	.word	0x20000938
 8001114:	20001864 	.word	0x20001864

08001118 <move_rf>:

void move_rf(int pwmval)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af02      	add	r7, sp, #8
 800111e:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[5]<RFMaxPos)
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <move_rf+0x60>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <move_rf+0x64>)
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	4293      	cmp	r3, r2
 800112a:	d220      	bcs.n	800116e <move_rf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <move_rf+0x68>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fd9f 	bl	8006c78 <osSemaphoreWait>
		// set the moving flag
		rfw= 1;
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <move_rf+0x6c>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8001140:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	2264      	movs	r2, #100	; 0x64
 800114a:	2100      	movs	r1, #0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f8dd 	bl	800130c <scale_val>
 8001152:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <move_rf+0x70>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwmval);
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <move_rf+0x70>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <move_rf+0x68>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f005 fdd3 	bl	8006d14 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20001a40 	.word	0x20001a40
 800117c:	20000008 	.word	0x20000008
 8001180:	20001c30 	.word	0x20001c30
 8001184:	20000940 	.word	0x20000940
 8001188:	20001864 	.word	0x20001864

0800118c <move_rb>:

void move_rb(int pwmval)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
	if(adc_value[5]>RFMinPos)
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <move_rb+0x60>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <move_rb+0x64>)
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	4293      	cmp	r3, r2
 800119e:	d920      	bls.n	80011e2 <move_rb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <move_rb+0x68>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 fd65 	bl	8006c78 <osSemaphoreWait>
		//isMoveB_LF = 1;
		rrw=1;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <move_rb+0x6c>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 80011b4:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	2264      	movs	r2, #100	; 0x64
 80011be:	2100      	movs	r1, #0
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f8a3 	bl	800130c <scale_val>
 80011c6:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwmval);
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <move_rb+0x70>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <move_rb+0x70>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <move_rb+0x68>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f005 fd99 	bl	8006d14 <osSemaphoreRelease>

	}

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20001a40 	.word	0x20001a40
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	20001c30 	.word	0x20001c30
 80011f8:	20000944 	.word	0x20000944
 80011fc:	20001864 	.word	0x20001864

08001200 <ir_led_on>:

void ir_led_on()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2120      	movs	r1, #32
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <ir_led_on+0x14>)
 800120a:	f003 fbe7 	bl	80049dc <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40010c00 	.word	0x40010c00

08001218 <ir_led_off>:

void ir_led_off()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2120      	movs	r1, #32
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <ir_led_off+0x14>)
 8001222:	f003 fbdb 	bl	80049dc <HAL_GPIO_WritePin>

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010c00 	.word	0x40010c00

08001230 <set_mux_fl>:



void set_mux_fl(value)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value & 0b0001);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <set_mux_fl+0x68>)
 800124a:	f003 fbc7 	bl	80049dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value & 0b0010);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <set_mux_fl+0x68>)
 8001260:	f003 fbbc 	bl	80049dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value & 0b0100);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	b2db      	uxtb	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <set_mux_fl+0x68>)
 8001276:	f003 fbb1 	bl	80049dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, value & 0b1000);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <set_mux_fl+0x68>)
 800128c:	f003 fba6 	bl	80049dc <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010c00 	.word	0x40010c00

0800129c <set_mux_fr>:
void set_mux_fr(value)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value & 0b0001);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <set_mux_fr+0x68>)
 80012b6:	f003 fb91 	bl	80049dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value & 0b0010);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <set_mux_fr+0x68>)
 80012cc:	f003 fb86 	bl	80049dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value & 0b0100);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <set_mux_fr+0x6c>)
 80012e2:	f003 fb7b 	bl	80049dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value & 0b1000);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <set_mux_fr+0x6c>)
 80012f8:	f003 fb70 	bl	80049dc <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40010c00 	.word	0x40010c00
 8001308:	40010800 	.word	0x40010800

0800130c <scale_val>:

int scale_val(int inval, int inmin, int inmax, int outmin, int outmax)
{
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
	if (inval>=inmax)
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	db02      	blt.n	8001328 <scale_val+0x1c>
	{
		inval = inmax;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e005      	b.n	8001334 <scale_val+0x28>
	}
	else if(inval<=inmin)
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	429a      	cmp	r2, r3
 800132e:	dc01      	bgt.n	8001334 <scale_val+0x28>
	{
		inval =inmin;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60fb      	str	r3, [r7, #12]
	}

	double slope = 1.0 * (outmax - outmin) / (inmax - inmin);
 8001334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f862 	bl	8000404 <__aeabi_i2d>
 8001340:	4604      	mov	r4, r0
 8001342:	460d      	mov	r5, r1
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f85a 	bl	8000404 <__aeabi_i2d>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4620      	mov	r0, r4
 8001356:	4629      	mov	r1, r5
 8001358:	f7ff f9e8 	bl	800072c <__aeabi_ddiv>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return outmin + slope * (inval - inmin);
 8001364:	6838      	ldr	r0, [r7, #0]
 8001366:	f7ff f84d 	bl	8000404 <__aeabi_i2d>
 800136a:	4604      	mov	r4, r0
 800136c:	460d      	mov	r5, r1
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f845 	bl	8000404 <__aeabi_i2d>
 800137a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800137e:	f7ff f8ab 	bl	80004d8 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7fe feef 	bl	800016c <__adddf3>
 800138e:	4603      	mov	r3, r0
 8001390:	460c      	mov	r4, r1
 8001392:	4618      	mov	r0, r3
 8001394:	4621      	mov	r1, r4
 8001396:	f7ff fab1 	bl	80008fc <__aeabi_d2iz>
 800139a:	4603      	mov	r3, r0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}

080013a4 <clamp_val>:

int clamp_val(int inval, int minval, int maxval)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	if(inval<minval)
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	da01      	bge.n	80013bc <clamp_val+0x18>
	{
		return minval;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	e006      	b.n	80013ca <clamp_val+0x26>
	}
	else if(inval>maxval)
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dd01      	ble.n	80013c8 <clamp_val+0x24>
	{
		return maxval;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	e000      	b.n	80013ca <clamp_val+0x26>
	}
	else
		return inval;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <sendData>:

// send data to uart
uint8_t sendData(char* str)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	// check whether the buffer is empty after previous transmission
	if(uartTXBufferLength==0)
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <sendData+0x80>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d131      	bne.n	8001448 <sendData+0x74>
	{
		uartTXBufferLength = strlen(str);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7fe feb3 	bl	8000150 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <sendData+0x80>)
 80013f0:	801a      	strh	r2, [r3, #0]
		uartTXBufferIndex = 0;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <sendData+0x84>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	801a      	strh	r2, [r3, #0]
		for(int i = 0;i<uartTXBufferLength;i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	e00c      	b.n	8001418 <sendData+0x44>
		{
			uartTXBuffer[i]=*str;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7819      	ldrb	r1, [r3, #0]
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <sendData+0x88>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	460a      	mov	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]
			++str;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
		for(int i = 0;i<uartTXBufferLength;i++)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3301      	adds	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <sendData+0x80>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4293      	cmp	r3, r2
 8001422:	dbec      	blt.n	80013fe <sendData+0x2a>
		}
		//Transmit the first byte, and increment the index
		LL_USART_TransmitData8(USART1, uartTXBuffer[uartTXBufferIndex++]);
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <sendData+0x84>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	b291      	uxth	r1, r2
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <sendData+0x84>)
 800142e:	8011      	strh	r1, [r2, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <sendData+0x88>)
 8001434:	5c9b      	ldrb	r3, [r3, r2]
 8001436:	4619      	mov	r1, r3
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <sendData+0x8c>)
 800143a:	f7ff fbd2 	bl	8000be2 <LL_USART_TransmitData8>
		// Enable Interrupt and let it handle the rest
		LL_USART_EnableIT_TXE(USART1);
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <sendData+0x8c>)
 8001440:	f7ff fb93 	bl	8000b6a <LL_USART_EnableIT_TXE>
	else
	{
		// Buffer full, so return error
		return 1;
	}
	return 0 ;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <sendData+0x76>
		return 1;
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000936 	.word	0x20000936
 8001458:	20000934 	.word	0x20000934
 800145c:	200018ac 	.word	0x200018ac
 8001460:	40013800 	.word	0x40013800

08001464 <LL_USART1_IRQHandler>:
/*The following function handles the UART ISR
Open stm32f1xx_it.c and add the following line inside "void USART1_IRQHandler(void)"
 	 LL_USART1_IRQHandler();
*/
void LL_USART1_IRQHandler()
{	// RX Interrupt
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART1) == 0x01)
 800146a:	4820      	ldr	r0, [pc, #128]	; (80014ec <LL_USART1_IRQHandler+0x88>)
 800146c:	f7ff fb4a 	bl	8000b04 <LL_USART_IsActiveFlag_RXNE>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d10c      	bne.n	8001490 <LL_USART1_IRQHandler+0x2c>
		{
			int data = LL_USART_ReceiveData8(USART1);
 8001476:	481d      	ldr	r0, [pc, #116]	; (80014ec <LL_USART1_IRQHandler+0x88>)
 8001478:	f7ff fba7 	bl	8000bca <LL_USART_ReceiveData8>
 800147c:	4603      	mov	r3, r0
 800147e:	607b      	str	r3, [r7, #4]
			osMessagePut(myQueue01Handle, data, osWaitForever);
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <LL_USART1_IRQHandler+0x8c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148a:	4618      	mov	r0, r3
 800148c:	f005 fca2 	bl	8006dd4 <osMessagePut>
		}
	// TX Interrupt
	if(LL_USART_IsEnabledIT_TXE(USART1) == 0x01 && LL_USART_IsActiveFlag_TXE(USART1) == 0x01)
 8001490:	4816      	ldr	r0, [pc, #88]	; (80014ec <LL_USART1_IRQHandler+0x88>)
 8001492:	f7ff fb88 	bl	8000ba6 <LL_USART_IsEnabledIT_TXE>
 8001496:	4603      	mov	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d122      	bne.n	80014e2 <LL_USART1_IRQHandler+0x7e>
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <LL_USART1_IRQHandler+0x88>)
 800149e:	f7ff fb43 	bl	8000b28 <LL_USART_IsActiveFlag_TXE>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d11c      	bne.n	80014e2 <LL_USART1_IRQHandler+0x7e>
		{
		//check whether we have transmitted all data in the TX  buffer
		if(uartTXBufferIndex>=uartTXBufferLength)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <LL_USART1_IRQHandler+0x90>)
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <LL_USART1_IRQHandler+0x94>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d309      	bcc.n	80014c8 <LL_USART1_IRQHandler+0x64>
			{
			//if so, reset the buffer length and index
			uartTXBufferLength = 0;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <LL_USART1_IRQHandler+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
			uartTXBufferIndex = 0;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <LL_USART1_IRQHandler+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
			//Disable TX done interrupt
			LL_USART_DisableIT_TXE(USART1);
 80014c0:	480a      	ldr	r0, [pc, #40]	; (80014ec <LL_USART1_IRQHandler+0x88>)
 80014c2:	f7ff fb61 	bl	8000b88 <LL_USART_DisableIT_TXE>
			{
			//Transmit another byte
			LL_USART_TransmitData8(USART1, uartTXBuffer[uartTXBufferIndex++]);
			}
		}
}
 80014c6:	e00c      	b.n	80014e2 <LL_USART1_IRQHandler+0x7e>
			LL_USART_TransmitData8(USART1, uartTXBuffer[uartTXBufferIndex++]);
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <LL_USART1_IRQHandler+0x90>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	b291      	uxth	r1, r2
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <LL_USART1_IRQHandler+0x90>)
 80014d2:	8011      	strh	r1, [r2, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <LL_USART1_IRQHandler+0x98>)
 80014d8:	5c9b      	ldrb	r3, [r3, r2]
 80014da:	4619      	mov	r1, r3
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <LL_USART1_IRQHandler+0x88>)
 80014de:	f7ff fb80 	bl	8000be2 <LL_USART_TransmitData8>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40013800 	.word	0x40013800
 80014f0:	20001b54 	.word	0x20001b54
 80014f4:	20000934 	.word	0x20000934
 80014f8:	20000936 	.word	0x20000936
 80014fc:	200018ac 	.word	0x200018ac

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b09c      	sub	sp, #112	; 0x70
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001506:	f002 f9ef 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150a:	f000 f8f5 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150e:	f000 fc41 	bl	8001d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001512:	f000 fc09 	bl	8001d28 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001516:	f000 fb99 	bl	8001c4c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800151a:	f000 f949 	bl	80017b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800151e:	f000 fa7f 	bl	8001a20 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001522:	f000 fafb 	bl	8001b1c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001526:	f000 f9db 	bl	80018e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //start ADC conversations
  HAL_ADC_Start_DMA(&hadc1, adc_value, 7);
 800152a:	2207      	movs	r2, #7
 800152c:	495f      	ldr	r1, [pc, #380]	; (80016ac <main+0x1ac>)
 800152e:	4860      	ldr	r0, [pc, #384]	; (80016b0 <main+0x1b0>)
 8001530:	f002 fb06 	bl	8003b40 <HAL_ADC_Start_DMA>
   *		TIM4->CCR1 = pwm_value;
   *		or
   *		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_value);
   *
   */
  HAL_TIM_Base_Start(&htim4);
 8001534:	485f      	ldr	r0, [pc, #380]	; (80016b4 <main+0x1b4>)
 8001536:	f003 ffa7 	bl	8005488 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 800153a:	485f      	ldr	r0, [pc, #380]	; (80016b8 <main+0x1b8>)
 800153c:	f003 ffa4 	bl	8005488 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001540:	2100      	movs	r1, #0
 8001542:	485c      	ldr	r0, [pc, #368]	; (80016b4 <main+0x1b4>)
 8001544:	f004 f894 	bl	8005670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001548:	2104      	movs	r1, #4
 800154a:	485a      	ldr	r0, [pc, #360]	; (80016b4 <main+0x1b4>)
 800154c:	f004 f890 	bl	8005670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001550:	2108      	movs	r1, #8
 8001552:	4858      	ldr	r0, [pc, #352]	; (80016b4 <main+0x1b4>)
 8001554:	f004 f88c 	bl	8005670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001558:	210c      	movs	r1, #12
 800155a:	4856      	ldr	r0, [pc, #344]	; (80016b4 <main+0x1b4>)
 800155c:	f004 f888 	bl	8005670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001560:	2100      	movs	r1, #0
 8001562:	4855      	ldr	r0, [pc, #340]	; (80016b8 <main+0x1b8>)
 8001564:	f004 f884 	bl	8005670 <HAL_TIM_PWM_Start>


  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001568:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <main+0x1b4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <main+0x1b4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8001578:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <main+0x1b4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2200      	movs	r2, #0
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8001580:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <main+0x1b4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8001588:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <main+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	; 0x34


  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

  HAL_Delay(200);
 8001590:	20c8      	movs	r0, #200	; 0xc8
 8001592:	f002 f9db 	bl	800394c <HAL_Delay>

//INITIALIZE NEOPIXELS
      //channel 0
      led_channels[0].framebuffer = channel_framebuffers[0];
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <main+0x1bc>)
 8001598:	663b      	str	r3, [r7, #96]	; 0x60
      led_channels[0].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 800159a:	2348      	movs	r3, #72	; 0x48
 800159c:	667b      	str	r3, [r7, #100]	; 0x64

      //channel1
      led_channels[1].framebuffer = channel_framebuffers[1];
 800159e:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <main+0x1c0>)
 80015a0:	66bb      	str	r3, [r7, #104]	; 0x68
      led_channels[1].length = FRAMEBUFFER2_SIZE * sizeof(struct pixel);
 80015a2:	2339      	movs	r3, #57	; 0x39
 80015a4:	66fb      	str	r3, [r7, #108]	; 0x6c

      HAL_Delay(200);
 80015a6:	20c8      	movs	r0, #200	; 0xc8
 80015a8:	f002 f9d0 	bl	800394c <HAL_Delay>
      ws2812_init();
 80015ac:	f002 f950 	bl	8003850 <ws2812_init>
      HAL_Delay(200);
 80015b0:	20c8      	movs	r0, #200	; 0xc8
 80015b2:	f002 f9cb 	bl	800394c <HAL_Delay>
      // SETUP LED COLORS
      lightupLED1(channel_framebuffers[0]);
 80015b6:	4841      	ldr	r0, [pc, #260]	; (80016bc <main+0x1bc>)
 80015b8:	f7ff fb3a 	bl	8000c30 <lightupLED1>
      lightupLED2(channel_framebuffers[1]);
 80015bc:	4840      	ldr	r0, [pc, #256]	; (80016c0 <main+0x1c0>)
 80015be:	f7ff fbc4 	bl	8000d4a <lightupLED2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c2:	b672      	cpsid	i
      // we have to disable interrupts while refreshing LEDs
   	  __disable_irq();
   	  ws2812_refresh(led_channels, GPIOB);
 80015c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015c8:	493e      	ldr	r1, [pc, #248]	; (80016c4 <main+0x1c4>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 ffe6 	bl	800359c <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 80015d0:	b662      	cpsie	i
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 80015d2:	2300      	movs	r3, #0
 80015d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80015d6:	2300      	movs	r3, #0
 80015d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 80015da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015de:	2101      	movs	r1, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 fb15 	bl	8006c10 <osSemaphoreCreate>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <main+0x1c8>)
 80015ea:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of pidTimer */
  osTimerDef(pidTimer, pid_timer);
 80015ec:	4b37      	ldr	r3, [pc, #220]	; (80016cc <main+0x1cc>)
 80015ee:	653b      	str	r3, [r7, #80]	; 0x50
 80015f0:	2300      	movs	r3, #0
 80015f2:	657b      	str	r3, [r7, #84]	; 0x54
  pidTimerHandle = osTimerCreate(osTimer(pidTimer), osTimerPeriodic, NULL);
 80015f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015f8:	2200      	movs	r2, #0
 80015fa:	2101      	movs	r1, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	f005 fa8d 	bl	8006b1c <osTimerCreate>
 8001602:	4602      	mov	r2, r0
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <main+0x1d0>)
 8001606:	601a      	str	r2, [r3, #0]

  /* definition and creation of statusUpdate */
  osTimerDef(statusUpdate, status_update_timer);
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <main+0x1d4>)
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
 800160c:	2300      	movs	r3, #0
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  statusUpdateHandle = osTimerCreate(osTimer(statusUpdate), osTimerPeriodic, NULL);
 8001610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	4618      	mov	r0, r3
 800161a:	f005 fa7f 	bl	8006b1c <osTimerCreate>
 800161e:	4602      	mov	r2, r0
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <main+0x1d8>)
 8001622:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  // PID timer runs at 100hz
  osTimerStart(pidTimerHandle, pid_time_period);
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <main+0x1d0>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <main+0x1dc>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f005 faa8 	bl	8006b84 <osTimerStart>
  //status update timer runs at 100 hz
  osTimerStart(statusUpdateHandle, 10);
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <main+0x1d8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	210a      	movs	r1, #10
 800163a:	4618      	mov	r0, r3
 800163c:	f005 faa2 	bl	8006b84 <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 128, uint16_t);
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <main+0x1e0>)
 8001642:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800164c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f005 fb94 	bl	8006d80 <osMessageCreate>
 8001658:	4602      	mov	r2, r0
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <main+0x1e4>)
 800165c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adcreader */
  osThreadDef(adcreader, adc_reader_task, osPriorityNormal, 0, 128);
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <main+0x1e8>)
 8001660:	f107 041c 	add.w	r4, r7, #28
 8001664:	461d      	mov	r5, r3
 8001666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800166e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcreaderHandle = osThreadCreate(osThread(adcreader), NULL);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f005 f9ee 	bl	8006a5a <osThreadCreate>
 800167e:	4602      	mov	r2, r0
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <main+0x1ec>)
 8001682:	601a      	str	r2, [r3, #0]

  /* definition and creation of serialreader */
  osThreadDef(serialreader, serial_reader_task, osPriorityHigh, 0, 128);
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <main+0x1f0>)
 8001686:	463c      	mov	r4, r7
 8001688:	461d      	mov	r5, r3
 800168a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialreaderHandle = osThreadCreate(osThread(serialreader), NULL);
 8001696:	463b      	mov	r3, r7
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f005 f9dd 	bl	8006a5a <osThreadCreate>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <main+0x1f4>)
 80016a4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016a6:	f005 f9d1 	bl	8006a4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <main+0x1aa>
 80016ac:	20001a40 	.word	0x20001a40
 80016b0:	20001a84 	.word	0x20001a84
 80016b4:	20001864 	.word	0x20001864
 80016b8:	20001b04 	.word	0x20001b04
 80016bc:	20001ba0 	.word	0x20001ba0
 80016c0:	20001be8 	.word	0x20001be8
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	20001c30 	.word	0x20001c30
 80016cc:	08002301 	.word	0x08002301
 80016d0:	20001ab4 	.word	0x20001ab4
 80016d4:	08002a9d 	.word	0x08002a9d
 80016d8:	20001ab8 	.word	0x20001ab8
 80016dc:	20000050 	.word	0x20000050
 80016e0:	0800a7e0 	.word	0x0800a7e0
 80016e4:	20001b54 	.word	0x20001b54
 80016e8:	0800a7fc 	.word	0x0800a7fc
 80016ec:	20001a3c 	.word	0x20001a3c
 80016f0:	0800a828 	.word	0x0800a828
 80016f4:	200019f4 	.word	0x200019f4

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b094      	sub	sp, #80	; 0x50
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	2228      	movs	r2, #40	; 0x28
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f008 fb99 	bl	8009e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001728:	2301      	movs	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001736:	2301      	movs	r3, #1
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001744:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8001748:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f95c 	bl	8004a0c <HAL_RCC_OscConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800175a:	f001 fa8b 	bl	8002c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175e:	230f      	movs	r3, #15
 8001760:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2102      	movs	r1, #2
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fbc6 	bl	8004f0c <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001786:	f001 fa75 	bl	8002c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800178a:	2302      	movs	r3, #2
 800178c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800178e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001792:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fd70 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017a2:	f001 fa67 	bl	8002c74 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3750      	adds	r7, #80	; 0x50
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017c0:	4b45      	ldr	r3, [pc, #276]	; (80018d8 <MX_ADC1_Init+0x128>)
 80017c2:	4a46      	ldr	r2, [pc, #280]	; (80018dc <MX_ADC1_Init+0x12c>)
 80017c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017c6:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <MX_ADC1_Init+0x128>)
 80017c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <MX_ADC1_Init+0x128>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <MX_ADC1_Init+0x128>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <MX_ADC1_Init+0x128>)
 80017dc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <MX_ADC1_Init+0x128>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <MX_ADC1_Init+0x128>)
 80017ea:	2207      	movs	r2, #7
 80017ec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ee:	483a      	ldr	r0, [pc, #232]	; (80018d8 <MX_ADC1_Init+0x128>)
 80017f0:	f002 f8ce 	bl	8003990 <HAL_ADC_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80017fa:	f001 fa3b 	bl	8002c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001802:	2301      	movs	r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001806:	2304      	movs	r3, #4
 8001808:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4832      	ldr	r0, [pc, #200]	; (80018d8 <MX_ADC1_Init+0x128>)
 8001810:	f002 fa90 	bl	8003d34 <HAL_ADC_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800181a:	f001 fa2b 	bl	8002c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800181e:	2301      	movs	r3, #1
 8001820:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001822:	2302      	movs	r3, #2
 8001824:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	482b      	ldr	r0, [pc, #172]	; (80018d8 <MX_ADC1_Init+0x128>)
 800182c:	f002 fa82 	bl	8003d34 <HAL_ADC_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001836:	f001 fa1d 	bl	8002c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800183a:	2302      	movs	r3, #2
 800183c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800183e:	2303      	movs	r3, #3
 8001840:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001842:	2305      	movs	r3, #5
 8001844:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4823      	ldr	r0, [pc, #140]	; (80018d8 <MX_ADC1_Init+0x128>)
 800184c:	f002 fa72 	bl	8003d34 <HAL_ADC_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001856:	f001 fa0d 	bl	8002c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800185a:	2303      	movs	r3, #3
 800185c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800185e:	2304      	movs	r3, #4
 8001860:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001862:	2304      	movs	r3, #4
 8001864:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	481b      	ldr	r0, [pc, #108]	; (80018d8 <MX_ADC1_Init+0x128>)
 800186c:	f002 fa62 	bl	8003d34 <HAL_ADC_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001876:	f001 f9fd 	bl	8002c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800187a:	2304      	movs	r3, #4
 800187c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800187e:	2305      	movs	r3, #5
 8001880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4814      	ldr	r0, [pc, #80]	; (80018d8 <MX_ADC1_Init+0x128>)
 8001888:	f002 fa54 	bl	8003d34 <HAL_ADC_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001892:	f001 f9ef 	bl	8002c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001896:	2307      	movs	r3, #7
 8001898:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800189a:	2306      	movs	r3, #6
 800189c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_ADC1_Init+0x128>)
 80018a4:	f002 fa46 	bl	8003d34 <HAL_ADC_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80018ae:	f001 f9e1 	bl	8002c74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018b2:	2306      	movs	r3, #6
 80018b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80018b6:	2307      	movs	r3, #7
 80018b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <MX_ADC1_Init+0x128>)
 80018c0:	f002 fa38 	bl	8003d34 <HAL_ADC_ConfigChannel>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80018ca:	f001 f9d3 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20001a84 	.word	0x20001a84
 80018dc:	40012400 	.word	0x40012400

080018e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b096      	sub	sp, #88	; 0x58
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2220      	movs	r2, #32
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f008 fa90 	bl	8009e3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191e:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001920:	4a3e      	ldr	r2, [pc, #248]	; (8001a1c <MX_TIM1_Init+0x13c>)
 8001922:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001924:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <MX_TIM1_Init+0x138>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2799;
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001932:	f640 22ef 	movw	r2, #2799	; 0xaef
 8001936:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <MX_TIM1_Init+0x138>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800194a:	4833      	ldr	r0, [pc, #204]	; (8001a18 <MX_TIM1_Init+0x138>)
 800194c:	f003 fd4c 	bl	80053e8 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001956:	f001 f98d 	bl	8002c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001964:	4619      	mov	r1, r3
 8001966:	482c      	ldr	r0, [pc, #176]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001968:	f004 f8ea 	bl	8005b40 <HAL_TIM_ConfigClockSource>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001972:	f001 f97f 	bl	8002c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001976:	4828      	ldr	r0, [pc, #160]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001978:	f003 fe22 	bl	80055c0 <HAL_TIM_PWM_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001982:	f001 f977 	bl	8002c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800198e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001992:	4619      	mov	r1, r3
 8001994:	4820      	ldr	r0, [pc, #128]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001996:	f004 fc53 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019a0:	f001 f968 	bl	8002c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a4:	2360      	movs	r3, #96	; 0x60
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4813      	ldr	r0, [pc, #76]	; (8001a18 <MX_TIM1_Init+0x138>)
 80019ca:	f003 fffb 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019d4:	f001 f94e 	bl	8002c74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM1_Init+0x138>)
 80019fc:	f004 fc7e 	bl	80062fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001a06:	f001 f935 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM1_Init+0x138>)
 8001a0c:	f001 faaa 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8001a10:	bf00      	nop
 8001a12:	3758      	adds	r7, #88	; 0x58
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20001b04 	.word	0x20001b04
 8001a1c:	40012c00 	.word	0x40012c00

08001a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	615a      	str	r2, [r3, #20]
 8001a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a50:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a78:	4827      	ldr	r0, [pc, #156]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001a7a:	f003 fcb5 	bl	80053e8 <HAL_TIM_Base_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a84:	f001 f8f6 	bl	8002c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a92:	4619      	mov	r1, r3
 8001a94:	4820      	ldr	r0, [pc, #128]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001a96:	f004 f853 	bl	8005b40 <HAL_TIM_ConfigClockSource>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001aa0:	f001 f8e8 	bl	8002c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aa4:	481c      	ldr	r0, [pc, #112]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001aa6:	f003 fd8b 	bl	80055c0 <HAL_TIM_PWM_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ab0:	f001 f8e0 	bl	8002c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4815      	ldr	r0, [pc, #84]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001ac4:	f004 fbbc 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ace:	f001 f8d1 	bl	8002c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad2:	2360      	movs	r3, #96	; 0x60
 8001ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001aea:	f003 ff6b 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001af4:	f001 f8be 	bl	8002c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2204      	movs	r2, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <MX_TIM2_Init+0xf8>)
 8001b00:	f003 ff60 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001b0a:	f001 f8b3 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	3738      	adds	r7, #56	; 0x38
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20001b58 	.word	0x20001b58

08001b1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08e      	sub	sp, #56	; 0x38
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	f107 0320 	add.w	r3, r7, #32
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b4c:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	; (8001c48 <MX_TIM4_Init+0x12c>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b52:	4b3c      	ldr	r3, [pc, #240]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2799;
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001b60:	f640 22ef 	movw	r2, #2799	; 0xaef
 8001b64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b72:	4834      	ldr	r0, [pc, #208]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001b74:	f003 fc38 	bl	80053e8 <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b7e:	f001 f879 	bl	8002c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	482d      	ldr	r0, [pc, #180]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001b90:	f003 ffd6 	bl	8005b40 <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b9a:	f001 f86b 	bl	8002c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b9e:	4829      	ldr	r0, [pc, #164]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001ba0:	f003 fd0e 	bl	80055c0 <HAL_TIM_PWM_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001baa:	f001 f863 	bl	8002c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4821      	ldr	r0, [pc, #132]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001bbe:	f004 fb3f 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bc8:	f001 f854 	bl	8002c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bcc:	2360      	movs	r3, #96	; 0x60
 8001bce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	4619      	mov	r1, r3
 8001be2:	4818      	ldr	r0, [pc, #96]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001be4:	f003 feee 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bee:	f001 f841 	bl	8002c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4812      	ldr	r0, [pc, #72]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001bfa:	f003 fee3 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c04:	f001 f836 	bl	8002c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001c10:	f003 fed8 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c1a:	f001 f82b 	bl	8002c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	220c      	movs	r2, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001c26:	f003 fecd 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c30:	f001 f820 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <MX_TIM4_Init+0x128>)
 8001c36:	f001 f995 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8001c3a:	bf00      	nop
 8001c3c:	3738      	adds	r7, #56	; 0x38
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20001864 	.word	0x20001864
 8001c48:	40000800 	.word	0x40000800

08001c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	463b      	mov	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001c74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c78:	f7fe ffc2 	bl	8000c00 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001c7c:	2004      	movs	r0, #4
 8001c7e:	f7fe ffbf 	bl	8000c00 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <MX_USART1_UART_Init+0xcc>)
 8001c84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c86:	2309      	movs	r3, #9
 8001c88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	463b      	mov	r3, r7
 8001c94:	4619      	mov	r1, r3
 8001c96:	4821      	ldr	r0, [pc, #132]	; (8001d1c <MX_USART1_UART_Init+0xd0>)
 8001c98:	f004 fc4b 	bl	8006532 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <MX_USART1_UART_Init+0xd4>)
 8001c9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	481c      	ldr	r0, [pc, #112]	; (8001d1c <MX_USART1_UART_Init+0xd0>)
 8001caa:	f004 fc42 	bl	8006532 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001cae:	f7fe fe7f 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2105      	movs	r1, #5
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fecd 	bl	8000a58 <NVIC_EncodePriority>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	2025      	movs	r0, #37	; 0x25
 8001cc4:	f7fe fe9e 	bl	8000a04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001cc8:	2025      	movs	r0, #37	; 0x25
 8001cca:	f7fe fe7f 	bl	80009cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */
  // enable the RX and TX interrupts
  LL_USART_EnableIT_RXNE(USART1);
 8001cce:	4815      	ldr	r0, [pc, #84]	; (8001d24 <MX_USART1_UART_Init+0xd8>)
 8001cd0:	f7fe ff3c 	bl	8000b4c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_TXE(USART1);
 8001cd4:	4813      	ldr	r0, [pc, #76]	; (8001d24 <MX_USART1_UART_Init+0xd8>)
 8001cd6:	f7fe ff48 	bl	8000b6a <LL_USART_EnableIT_TXE>

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001cda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cde:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001cec:	230c      	movs	r3, #12
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <MX_USART1_UART_Init+0xd8>)
 8001d00:	f004 fe1c 	bl	800693c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001d04:	4807      	ldr	r0, [pc, #28]	; (8001d24 <MX_USART1_UART_Init+0xd8>)
 8001d06:	f7fe fee8 	bl	8000ada <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001d0a:	4806      	ldr	r0, [pc, #24]	; (8001d24 <MX_USART1_UART_Init+0xd8>)
 8001d0c:	f7fe fed6 	bl	8000abc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	3730      	adds	r7, #48	; 0x30
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	04020002 	.word	0x04020002
 8001d1c:	40010800 	.word	0x40010800
 8001d20:	04040004 	.word	0x04040004
 8001d24:	40013800 	.word	0x40013800

08001d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <MX_DMA_Init+0x68>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <MX_DMA_Init+0x68>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6153      	str	r3, [r2, #20]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_DMA_Init+0x68>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	200b      	movs	r0, #11
 8001d4c:	f002 fa91 	bl	8004272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d50:	200b      	movs	r0, #11
 8001d52:	f002 faaa 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	200c      	movs	r0, #12
 8001d5c:	f002 fa89 	bl	8004272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d60:	200c      	movs	r0, #12
 8001d62:	f002 faa2 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f002 fa81 	bl	8004272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d70:	200f      	movs	r0, #15
 8001d72:	f002 fa9a 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	2011      	movs	r0, #17
 8001d7c:	f002 fa79 	bl	8004272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d80:	2011      	movs	r0, #17
 8001d82:	f002 fa92 	bl	80042aa <HAL_NVIC_EnableIRQ>

}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da8:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a38      	ldr	r2, [pc, #224]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc0:	4b33      	ldr	r3, [pc, #204]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001dc6:	f043 0320 	orr.w	r3, r3, #32
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001df6:	f043 0308 	orr.w	r3, r3, #8
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <MX_GPIO_Init+0xfc>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0e:	4821      	ldr	r0, [pc, #132]	; (8001e94 <MX_GPIO_Init+0x100>)
 8001e10:	f002 fde4 	bl	80049dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001e14:	2200      	movs	r2, #0
 8001e16:	f64f 413b 	movw	r1, #64571	; 0xfc3b
 8001e1a:	481f      	ldr	r0, [pc, #124]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001e1c:	f002 fdde 	bl	80049dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001e26:	481d      	ldr	r0, [pc, #116]	; (8001e9c <MX_GPIO_Init+0x108>)
 8001e28:	f002 fdd8 	bl	80049dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	f107 0310 	add.w	r3, r7, #16
 8001e42:	4619      	mov	r1, r3
 8001e44:	4813      	ldr	r0, [pc, #76]	; (8001e94 <MX_GPIO_Init+0x100>)
 8001e46:	f002 fc6f 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001e4a:	f64f 433b 	movw	r3, #64571	; 0xfc3b
 8001e4e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4619      	mov	r1, r3
 8001e62:	480d      	ldr	r0, [pc, #52]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001e64:	f002 fc60 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0310 	add.w	r3, r7, #16
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4806      	ldr	r0, [pc, #24]	; (8001e9c <MX_GPIO_Init+0x108>)
 8001e82:	f002 fc51 	bl	8004728 <HAL_GPIO_Init>

}
 8001e86:	bf00      	nop
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40011000 	.word	0x40011000
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	40010800 	.word	0x40010800

08001ea0 <adc_reader_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_adc_reader_task */
void adc_reader_task(void const * argument)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  for(int i=0;i<num_irsensors;i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e040      	b.n	8001f30 <adc_reader_task+0x90>
	  	  {
	  		  // set IR off
	  		  ir_led_off();
 8001eae:	f7ff f9b3 	bl	8001218 <ir_led_off>

	  		  // select mux channel
	  		  set_mux_fl(i);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff f9bc 	bl	8001230 <set_mux_fl>
	  		  set_mux_fr(i);
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff f9ef 	bl	800129c <set_mux_fr>

	  		  //small delay
	  		  osDelay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f004 fe17 	bl	8006af2 <osDelay>

	  		  // get initial readings
	  		  data_fl_noise = adc_value[0];
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <adc_reader_task+0x9c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <adc_reader_task+0xa0>)
 8001ecc:	601a      	str	r2, [r3, #0]
	  		  data_fr_noise = adc_value[1];
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <adc_reader_task+0x9c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <adc_reader_task+0xa4>)
 8001ed6:	601a      	str	r2, [r3, #0]

	  		  // set IR on
	  		  ir_led_on();
 8001ed8:	f7ff f992 	bl	8001200 <ir_led_on>
	  		  //small delay
	  		  osDelay(1);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f004 fe08 	bl	8006af2 <osDelay>

	  		  // get second readings
	  		  data_fl = adc_value[0];
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <adc_reader_task+0x9c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <adc_reader_task+0xa8>)
 8001eea:	601a      	str	r2, [r3, #0]
	  		  data_fr = adc_value[1];
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <adc_reader_task+0x9c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <adc_reader_task+0xac>)
 8001ef4:	601a      	str	r2, [r3, #0]

	  		  //calculate the real value and set it in ir_data array
	  		  data_fl_real = -1*(data_fl - data_fl_noise);
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <adc_reader_task+0xa0>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <adc_reader_task+0xa8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	4a13      	ldr	r2, [pc, #76]	; (8001f50 <adc_reader_task+0xb0>)
 8001f02:	6013      	str	r3, [r2, #0]
	  		  data_fr_real = -1*(data_fr - data_fr_noise);
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <adc_reader_task+0xa4>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <adc_reader_task+0xac>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <adc_reader_task+0xb4>)
 8001f10:	6013      	str	r3, [r2, #0]

	  		  //fill the IR data buffers
	  		  irdata_fl[i] = data_fl_real;
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <adc_reader_task+0xb0>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4910      	ldr	r1, [pc, #64]	; (8001f58 <adc_reader_task+0xb8>)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  irdata_fr[i] = data_fr_real;
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <adc_reader_task+0xb4>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	490e      	ldr	r1, [pc, #56]	; (8001f5c <adc_reader_task+0xbc>)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<num_irsensors;i++)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <adc_reader_task+0xc0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbb9      	blt.n	8001eae <adc_reader_task+0xe>
 8001f3a:	e7b5      	b.n	8001ea8 <adc_reader_task+0x8>
 8001f3c:	20001a40 	.word	0x20001a40
 8001f40:	20001b50 	.word	0x20001b50
 8001f44:	20001b00 	.word	0x20001b00
 8001f48:	20001818 	.word	0x20001818
 8001f4c:	200019f0 	.word	0x200019f0
 8001f50:	20001b4c 	.word	0x20001b4c
 8001f54:	20001860 	.word	0x20001860
 8001f58:	20001a5c 	.word	0x20001a5c
 8001f5c:	20001c34 	.word	0x20001c34
 8001f60:	2000008c 	.word	0x2000008c

08001f64 <serial_reader_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_reader_task */
void serial_reader_task(void const * argument)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b08f      	sub	sp, #60	; 0x3c
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serial_reader_task */
	osEvent messageHandler;

		int numchr = 7;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
		char data[numchr];
 8001f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f72:	1e43      	subs	r3, r0, #1
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	4603      	mov	r3, r0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f04f 0400 	mov.w	r4, #0
 8001f86:	00d4      	lsls	r4, r2, #3
 8001f88:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f8c:	00cb      	lsls	r3, r1, #3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	f04f 0400 	mov.w	r4, #0
 8001f9e:	00d4      	lsls	r4, r2, #3
 8001fa0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001fa4:	00cb      	lsls	r3, r1, #3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	3307      	adds	r3, #7
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	ebad 0d03 	sub.w	sp, sp, r3
 8001fb2:	ab02      	add	r3, sp, #8
 8001fb4:	3300      	adds	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
		int cmd_val=0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
	   *	cggXXXe - set gripper gap to XXX ( min 0, Max 999)
	   *		  - Reset serial command queue
	   *
	   */

	  messageHandler = osMessageGet(myQueue01Handle, osWaitForever);
 8001fbc:	4ba4      	ldr	r3, [pc, #656]	; (8002250 <serial_reader_task+0x2ec>)
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 ff43 	bl	8006e54 <osMessageGet>

	  for(int i =0;i<(numchr-1);i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd2:	e00b      	b.n	8001fec <serial_reader_task+0x88>
	  	  {
	  		  data[i]=data[i+1];
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	6a3a      	ldr	r2, [r7, #32]
 8001fda:	5cd1      	ldrb	r1, [r2, r3]
 8001fdc:	6a3a      	ldr	r2, [r7, #32]
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	4413      	add	r3, r2
 8001fe2:	460a      	mov	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
	  for(int i =0;i<(numchr-1);i++)
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	3301      	adds	r3, #1
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbee      	blt.n	8001fd4 <serial_reader_task+0x70>
	  	  }
	  data[numchr-1] =messageHandler.value.p;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	6a3a      	ldr	r2, [r7, #32]
 8002002:	54d1      	strb	r1, [r2, r3]
		  //check for start and end characters
		  if(data[0]=='c' && data[6]=='e')
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b63      	cmp	r3, #99	; 0x63
 800200a:	f040 816c 	bne.w	80022e6 <serial_reader_task+0x382>
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	799b      	ldrb	r3, [r3, #6]
 8002012:	2b65      	cmp	r3, #101	; 0x65
 8002014:	f040 8167 	bne.w	80022e6 <serial_reader_task+0x382>
		  {
			  // got command
			  // extract the numerical value
			  char val_ar[4]= {data[3], data[4], data[5], NULL};
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	78db      	ldrb	r3, [r3, #3]
 800201c:	723b      	strb	r3, [r7, #8]
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	727b      	strb	r3, [r7, #9]
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	795b      	ldrb	r3, [r3, #5]
 8002028:	72bb      	strb	r3, [r7, #10]
 800202a:	2300      	movs	r3, #0
 800202c:	72fb      	strb	r3, [r7, #11]
			  cmd_val = atoi(val_ar);
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4618      	mov	r0, r3
 8002034:	f007 feca 	bl	8009dcc <atoi>
 8002038:	61f8      	str	r0, [r7, #28]

			  switch(data[1])
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	3b62      	subs	r3, #98	; 0x62
 8002040:	2b11      	cmp	r3, #17
 8002042:	f200 8150 	bhi.w	80022e6 <serial_reader_task+0x382>
 8002046:	a201      	add	r2, pc, #4	; (adr r2, 800204c <serial_reader_task+0xe8>)
 8002048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204c:	0800211d 	.word	0x0800211d
 8002050:	08002095 	.word	0x08002095
 8002054:	080022e7 	.word	0x080022e7
 8002058:	080022e7 	.word	0x080022e7
 800205c:	080022e7 	.word	0x080022e7
 8002060:	08002217 	.word	0x08002217
 8002064:	080022e7 	.word	0x080022e7
 8002068:	080022e7 	.word	0x080022e7
 800206c:	080022e7 	.word	0x080022e7
 8002070:	080022e7 	.word	0x080022e7
 8002074:	080021c5 	.word	0x080021c5
 8002078:	080022e7 	.word	0x080022e7
 800207c:	080022e7 	.word	0x080022e7
 8002080:	08002149 	.word	0x08002149
 8002084:	080022e7 	.word	0x080022e7
 8002088:	080022e7 	.word	0x080022e7
 800208c:	08002171 	.word	0x08002171
 8002090:	080020f1 	.word	0x080020f1
			  {
			  case 'c': // CLOSE GRIPPER
			  	  	  {   //close in current control mode
			  	  		  if(data[2]=='c')
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	789b      	ldrb	r3, [r3, #2]
 8002098:	2b63      	cmp	r3, #99	; 0x63
 800209a:	d103      	bne.n	80020a4 <serial_reader_task+0x140>
			  	  		  {
			  	  			gPid = 1;
 800209c:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <serial_reader_task+0x2f0>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
			  	  		  {
			  	  			gPid = 3;
			  	  			close_gripper(cmd_val);
			  	  			startTick = HAL_GetTick();
			  	  		  }
			  	  	  }break;
 80020a2:	e113      	b.n	80022cc <serial_reader_task+0x368>
			  	  		  else if(data[2]=='p')
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	789b      	ldrb	r3, [r3, #2]
 80020a8:	2b70      	cmp	r3, #112	; 0x70
 80020aa:	d10f      	bne.n	80020cc <serial_reader_task+0x168>
			  	  			gForceThres = cmd_val;
 80020ac:	4a6a      	ldr	r2, [pc, #424]	; (8002258 <serial_reader_task+0x2f4>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	6013      	str	r3, [r2, #0]
			  	  			gPid = 2;
 80020b2:	4b68      	ldr	r3, [pc, #416]	; (8002254 <serial_reader_task+0x2f0>)
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
			  	  			close_gripper(100);
 80020b8:	2064      	movs	r0, #100	; 0x64
 80020ba:	f7fe fefd 	bl	8000eb8 <close_gripper>
			  	  			startTick = HAL_GetTick();
 80020be:	f001 fc3b 	bl	8003938 <HAL_GetTick>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b65      	ldr	r3, [pc, #404]	; (800225c <serial_reader_task+0x2f8>)
 80020c8:	601a      	str	r2, [r3, #0]
			  	  	  }break;
 80020ca:	e0ff      	b.n	80022cc <serial_reader_task+0x368>
			  	  		  else if(data[2]=='s')
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	789b      	ldrb	r3, [r3, #2]
 80020d0:	2b73      	cmp	r3, #115	; 0x73
 80020d2:	f040 80fb 	bne.w	80022cc <serial_reader_task+0x368>
			  	  			gPid = 3;
 80020d6:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <serial_reader_task+0x2f0>)
 80020d8:	2203      	movs	r2, #3
 80020da:	601a      	str	r2, [r3, #0]
			  	  			close_gripper(cmd_val);
 80020dc:	69f8      	ldr	r0, [r7, #28]
 80020de:	f7fe feeb 	bl	8000eb8 <close_gripper>
			  	  			startTick = HAL_GetTick();
 80020e2:	f001 fc29 	bl	8003938 <HAL_GetTick>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b5c      	ldr	r3, [pc, #368]	; (800225c <serial_reader_task+0x2f8>)
 80020ec:	601a      	str	r2, [r3, #0]
			  	  	  }break;
 80020ee:	e0ed      	b.n	80022cc <serial_reader_task+0x368>
			  case 's': // STOP MOTION
				  	  	// motors inputs disconnected, can move by hand
			  		  {
			  	  		  if(data[2]=='g')
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	789b      	ldrb	r3, [r3, #2]
 80020f4:	2b67      	cmp	r3, #103	; 0x67
 80020f6:	d102      	bne.n	80020fe <serial_reader_task+0x19a>
			  	  		  {
			  	  			 stop_gripper(); // stop all motors
 80020f8:	f7fe ff84 	bl	8001004 <stop_gripper>
			  	  		  {
			  	  			stop_rf(); // stop right finger
			  	  		  }


			  		 }break;
 80020fc:	e0e8      	b.n	80022d0 <serial_reader_task+0x36c>
			  	  		  else if(data[2]=='l')
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	789b      	ldrb	r3, [r3, #2]
 8002102:	2b6c      	cmp	r3, #108	; 0x6c
 8002104:	d102      	bne.n	800210c <serial_reader_task+0x1a8>
			  	  			stop_lf(); // stop left finger
 8002106:	f7fe ff45 	bl	8000f94 <stop_lf>
			  		 }break;
 800210a:	e0e1      	b.n	80022d0 <serial_reader_task+0x36c>
			  	  		  else if(data[2]=='r')
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	789b      	ldrb	r3, [r3, #2]
 8002110:	2b72      	cmp	r3, #114	; 0x72
 8002112:	f040 80dd 	bne.w	80022d0 <serial_reader_task+0x36c>
			  	  			stop_rf(); // stop right finger
 8002116:	f7fe ff4d 	bl	8000fb4 <stop_rf>
			  		 }break;
 800211a:	e0d9      	b.n	80022d0 <serial_reader_task+0x36c>
			  case 'b': // BRAKE MOTORS
				  	  	// motor inputs are shorted. cannot move by hand
			  		  {
			  	  		  if(data[2]=='g')
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	789b      	ldrb	r3, [r3, #2]
 8002120:	2b67      	cmp	r3, #103	; 0x67
 8002122:	d102      	bne.n	800212a <serial_reader_task+0x1c6>
			  	  		  {
			  	  			brake_gripper(); // brake all motors
 8002124:	f7fe ff56 	bl	8000fd4 <brake_gripper>
			  	  		  }
			  	  		  else if(data[2]=='r')
			  	  		  {
			  	  			  brake_rf(); // brake right finger
			  	  		  }
			  		 }break;
 8002128:	e0d4      	b.n	80022d4 <serial_reader_task+0x370>
			  	  		  else if(data[2]=='l')
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	789b      	ldrb	r3, [r3, #2]
 800212e:	2b6c      	cmp	r3, #108	; 0x6c
 8002130:	d102      	bne.n	8002138 <serial_reader_task+0x1d4>
			  	  			  brake_lf(); // brake left finger
 8002132:	f7fe ff0b 	bl	8000f4c <brake_lf>
			  		 }break;
 8002136:	e0cd      	b.n	80022d4 <serial_reader_task+0x370>
			  	  		  else if(data[2]=='r')
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	789b      	ldrb	r3, [r3, #2]
 800213c:	2b72      	cmp	r3, #114	; 0x72
 800213e:	f040 80c9 	bne.w	80022d4 <serial_reader_task+0x370>
			  	  			  brake_rf(); // brake right finger
 8002142:	f7fe ff15 	bl	8000f70 <brake_rf>
			  		 }break;
 8002146:	e0c5      	b.n	80022d4 <serial_reader_task+0x370>
			  case 'o': // OPEN THE GRIPPPER
			  		  {
			  	  		  if(data[2]=='p')
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	789b      	ldrb	r3, [r3, #2]
 800214c:	2b70      	cmp	r3, #112	; 0x70
 800214e:	d106      	bne.n	800215e <serial_reader_task+0x1fa>
			  	  		  {
			  	  			open_gripper(100); // open fully
 8002150:	2064      	movs	r0, #100	; 0x64
 8002152:	f7fe fe67 	bl	8000e24 <open_gripper>
			  	  			sendData("open");
 8002156:	4842      	ldr	r0, [pc, #264]	; (8002260 <serial_reader_task+0x2fc>)
 8002158:	f7ff f93c 	bl	80013d4 <sendData>
			  	  		  }
			  	  		  else if(data[2]=='s')
			  	  		  {
			  	  			open_gripper(cmd_val); // open with speed control
			  	  		  }
			  		 }break;
 800215c:	e0bc      	b.n	80022d8 <serial_reader_task+0x374>
			  	  		  else if(data[2]=='s')
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	789b      	ldrb	r3, [r3, #2]
 8002162:	2b73      	cmp	r3, #115	; 0x73
 8002164:	f040 80b8 	bne.w	80022d8 <serial_reader_task+0x374>
			  	  			open_gripper(cmd_val); // open with speed control
 8002168:	69f8      	ldr	r0, [r7, #28]
 800216a:	f7fe fe5b 	bl	8000e24 <open_gripper>
			  		 }break;
 800216e:	e0b3      	b.n	80022d8 <serial_reader_task+0x374>
			  case 'r': // UP DOWN CONTROL OF RIGHT FINGER
			  		  {
			  	  		  if(data[2]=='p')
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	789b      	ldrb	r3, [r3, #2]
 8002174:	2b70      	cmp	r3, #112	; 0x70
 8002176:	d111      	bne.n	800219c <serial_reader_task+0x238>
			  	  		  {
			  	  			//right finger position control
			  	  			rPid= 1;
 8002178:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <serial_reader_task+0x300>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
			  	  			rPosDesired =  scale_val(cmd_val,0,200,RFMinPos,RFMaxPos);
 800217e:	4b3a      	ldr	r3, [pc, #232]	; (8002268 <serial_reader_task+0x304>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <serial_reader_task+0x308>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	22c8      	movs	r2, #200	; 0xc8
 800218c:	2100      	movs	r1, #0
 800218e:	69f8      	ldr	r0, [r7, #28]
 8002190:	f7ff f8bc 	bl	800130c <scale_val>
 8002194:	4602      	mov	r2, r0
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <serial_reader_task+0x30c>)
 8002198:	601a      	str	r2, [r3, #0]
			  	  			move_rb(cmd_val);
			  	  			rPid=0;

			  	  		  }

			  		 }break;
 800219a:	e09f      	b.n	80022dc <serial_reader_task+0x378>
			  	  		  else if(data[2]=='f')
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	789b      	ldrb	r3, [r3, #2]
 80021a0:	2b66      	cmp	r3, #102	; 0x66
 80021a2:	d103      	bne.n	80021ac <serial_reader_task+0x248>
			  	  			move_rf(cmd_val);
 80021a4:	69f8      	ldr	r0, [r7, #28]
 80021a6:	f7fe ffb7 	bl	8001118 <move_rf>
			  		 }break;
 80021aa:	e097      	b.n	80022dc <serial_reader_task+0x378>
			  	  		  else if(data[2]=='r')
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	789b      	ldrb	r3, [r3, #2]
 80021b0:	2b72      	cmp	r3, #114	; 0x72
 80021b2:	f040 8093 	bne.w	80022dc <serial_reader_task+0x378>
			  	  			move_rb(cmd_val);
 80021b6:	69f8      	ldr	r0, [r7, #28]
 80021b8:	f7fe ffe8 	bl	800118c <move_rb>
			  	  			rPid=0;
 80021bc:	4b29      	ldr	r3, [pc, #164]	; (8002264 <serial_reader_task+0x300>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
			  		 }break;
 80021c2:	e08b      	b.n	80022dc <serial_reader_task+0x378>
			  case 'l': // UP DOWN CONTROL OF LEFT FINGER
			  		  {
			  	  		  if(data[2]=='p')
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	789b      	ldrb	r3, [r3, #2]
 80021c8:	2b70      	cmp	r3, #112	; 0x70
 80021ca:	d111      	bne.n	80021f0 <serial_reader_task+0x28c>
			  	  		  {
			  	  			  //left finger position control
			  	  			lPid = 1;
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <serial_reader_task+0x310>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
			  	  			lPosDesired = scale_val(cmd_val,0,200,LFMinPos,LFMaxPos);
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <serial_reader_task+0x314>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <serial_reader_task+0x318>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	22c8      	movs	r2, #200	; 0xc8
 80021e0:	2100      	movs	r1, #0
 80021e2:	69f8      	ldr	r0, [r7, #28]
 80021e4:	f7ff f892 	bl	800130c <scale_val>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <serial_reader_task+0x31c>)
 80021ec:	601a      	str	r2, [r3, #0]
			  	  			  // move left finger at reverse velocity
			  	  			move_lb(cmd_val);
			  	  			lPid=0;
			  	  		  }

			  		 }break;
 80021ee:	e077      	b.n	80022e0 <serial_reader_task+0x37c>
			  	  		  else if(data[2]=='f')
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	789b      	ldrb	r3, [r3, #2]
 80021f4:	2b66      	cmp	r3, #102	; 0x66
 80021f6:	d103      	bne.n	8002200 <serial_reader_task+0x29c>
			  	  			move_lf(cmd_val);
 80021f8:	69f8      	ldr	r0, [r7, #28]
 80021fa:	f7fe ff19 	bl	8001030 <move_lf>
			  		 }break;
 80021fe:	e06f      	b.n	80022e0 <serial_reader_task+0x37c>
			  	  		  else if(data[2]=='r')
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	789b      	ldrb	r3, [r3, #2]
 8002204:	2b72      	cmp	r3, #114	; 0x72
 8002206:	d16b      	bne.n	80022e0 <serial_reader_task+0x37c>
			  	  			move_lb(cmd_val);
 8002208:	69f8      	ldr	r0, [r7, #28]
 800220a:	f7fe ff4b 	bl	80010a4 <move_lb>
			  	  			lPid=0;
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <serial_reader_task+0x310>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
			  		 }break;
 8002214:	e064      	b.n	80022e0 <serial_reader_task+0x37c>
			  case 'g': // Gripper gap control
			  			  	  	  {
			  			  	  		  //M1z = 234;
			  			  	  		  if(data[2]=='z')
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	789b      	ldrb	r3, [r3, #2]
 800221a:	2b7a      	cmp	r3, #122	; 0x7a
 800221c:	d13e      	bne.n	800229c <serial_reader_task+0x338>
			  			  	  		  {
			  			  	  			  //get the current gap
			  			  	  		int gripper_gap = (M1MaxPos-adc_value[2])+(M2MaxPos-adc_value[3])-(M1MinPos+M2MinPos);
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <serial_reader_task+0x320>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <serial_reader_task+0x324>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	1ad2      	subs	r2, r2, r3
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <serial_reader_task+0x328>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <serial_reader_task+0x324>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	1acb      	subs	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	4a15      	ldr	r2, [pc, #84]	; (8002290 <serial_reader_task+0x32c>)
 800223a:	6811      	ldr	r1, [r2, #0]
 800223c:	4a15      	ldr	r2, [pc, #84]	; (8002294 <serial_reader_task+0x330>)
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	440a      	add	r2, r1
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
			  			  	  		gmin = gripper_gap-55;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	3b37      	subs	r3, #55	; 0x37
 800224a:	4a13      	ldr	r2, [pc, #76]	; (8002298 <serial_reader_task+0x334>)
 800224c:	6013      	str	r3, [r2, #0]
			  			  	  			  gripperGapcmd = scale_val(cmd_val,0,999,gmin,gmax);;
					  			  	  			  gPid = 4;

			  			  	  		  }

			  			  	  	  }break;
 800224e:	e049      	b.n	80022e4 <serial_reader_task+0x380>
 8002250:	20001b54 	.word	0x20001b54
 8002254:	20000958 	.word	0x20000958
 8002258:	20000998 	.word	0x20000998
 800225c:	2000099c 	.word	0x2000099c
 8002260:	0800a844 	.word	0x0800a844
 8002264:	20000954 	.word	0x20000954
 8002268:	2000000c 	.word	0x2000000c
 800226c:	20000008 	.word	0x20000008
 8002270:	20000974 	.word	0x20000974
 8002274:	20000950 	.word	0x20000950
 8002278:	20000004 	.word	0x20000004
 800227c:	20000000 	.word	0x20000000
 8002280:	20000970 	.word	0x20000970
 8002284:	20000014 	.word	0x20000014
 8002288:	20001a40 	.word	0x20001a40
 800228c:	2000001c 	.word	0x2000001c
 8002290:	20000010 	.word	0x20000010
 8002294:	20000018 	.word	0x20000018
 8002298:	20000040 	.word	0x20000040
			  			  	  		  else if(data[2]=='g')
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	789b      	ldrb	r3, [r3, #2]
 80022a0:	2b67      	cmp	r3, #103	; 0x67
 80022a2:	d11f      	bne.n	80022e4 <serial_reader_task+0x380>
			  			  	  			  gripperGapcmd = scale_val(cmd_val,0,999,gmin,gmax);;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <serial_reader_task+0x38c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <serial_reader_task+0x390>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022b4:	2100      	movs	r1, #0
 80022b6:	69f8      	ldr	r0, [r7, #28]
 80022b8:	f7ff f828 	bl	800130c <scale_val>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <serial_reader_task+0x394>)
 80022c0:	601a      	str	r2, [r3, #0]
					  			  	  			  gPid = 4;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <serial_reader_task+0x398>)
 80022c4:	2204      	movs	r2, #4
 80022c6:	601a      	str	r2, [r3, #0]
			  			  	  	  }break;
 80022c8:	bf00      	nop
 80022ca:	e00b      	b.n	80022e4 <serial_reader_task+0x380>
			  	  	  }break;
 80022cc:	bf00      	nop
 80022ce:	e00a      	b.n	80022e6 <serial_reader_task+0x382>
			  		 }break;
 80022d0:	bf00      	nop
 80022d2:	e008      	b.n	80022e6 <serial_reader_task+0x382>
			  		 }break;
 80022d4:	bf00      	nop
 80022d6:	e006      	b.n	80022e6 <serial_reader_task+0x382>
			  		 }break;
 80022d8:	bf00      	nop
 80022da:	e004      	b.n	80022e6 <serial_reader_task+0x382>
			  		 }break;
 80022dc:	bf00      	nop
 80022de:	e002      	b.n	80022e6 <serial_reader_task+0x382>
			  		 }break;
 80022e0:	bf00      	nop
 80022e2:	e000      	b.n	80022e6 <serial_reader_task+0x382>
			  			  	  	  }break;
 80022e4:	bf00      	nop

			  }
		  }

	    osDelay(1);
 80022e6:	2001      	movs	r0, #1
 80022e8:	f004 fc03 	bl	8006af2 <osDelay>
	  messageHandler = osMessageGet(myQueue01Handle, osWaitForever);
 80022ec:	e666      	b.n	8001fbc <serial_reader_task+0x58>
 80022ee:	bf00      	nop
 80022f0:	20000040 	.word	0x20000040
 80022f4:	20000044 	.word	0x20000044
 80022f8:	2000095c 	.word	0x2000095c
 80022fc:	20000958 	.word	0x20000958

08002300 <pid_timer>:
  /* USER CODE END serial_reader_task */
}

/* pid_timer function */
void pid_timer(void const * argument)
{
 8002300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002304:	b08d      	sub	sp, #52	; 0x34
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	// so check whether L finger goes beyond and stop the motion only
	// when L finger is moving forward (and then set lfw=0).
	// if we dont use flags like lfw, lrw, rfw, rrw, mgo, mgc, it will get
	// stuck at a position and cant move

  if((adc_value[6]>LFMaxPos) && (lfw==1))
 800230a:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <pid_timer+0x174>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <pid_timer+0x178>)
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	4293      	cmp	r3, r2
 8002314:	d91b      	bls.n	800234e <pid_timer+0x4e>
 8002316:	4b59      	ldr	r3, [pc, #356]	; (800247c <pid_timer+0x17c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d117      	bne.n	800234e <pid_timer+0x4e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 800231e:	4b58      	ldr	r3, [pc, #352]	; (8002480 <pid_timer+0x180>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002326:	4618      	mov	r0, r3
 8002328:	f004 fca6 	bl	8006c78 <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 800232c:	4b55      	ldr	r3, [pc, #340]	; (8002484 <pid_timer+0x184>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <pid_timer+0x184>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
		lfw=0;
 800233c:	4b4f      	ldr	r3, [pc, #316]	; (800247c <pid_timer+0x17c>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 8002342:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <pid_timer+0x180>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fce4 	bl	8006d14 <osSemaphoreRelease>
 800234c:	e020      	b.n	8002390 <pid_timer+0x90>
	}
	else if((adc_value[6]<LFMinPos) && (lrw==1))
 800234e:	4b49      	ldr	r3, [pc, #292]	; (8002474 <pid_timer+0x174>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <pid_timer+0x188>)
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	4293      	cmp	r3, r2
 8002358:	d21a      	bcs.n	8002390 <pid_timer+0x90>
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <pid_timer+0x18c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d116      	bne.n	8002390 <pid_timer+0x90>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8002362:	4b47      	ldr	r3, [pc, #284]	; (8002480 <pid_timer+0x180>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fc84 	bl	8006c78 <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8002370:	4b44      	ldr	r3, [pc, #272]	; (8002484 <pid_timer+0x184>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2200      	movs	r2, #0
 8002376:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8002378:	4b42      	ldr	r3, [pc, #264]	; (8002484 <pid_timer+0x184>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	639a      	str	r2, [r3, #56]	; 0x38
		lrw=0;
 8002380:	4b42      	ldr	r3, [pc, #264]	; (800248c <pid_timer+0x18c>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 8002386:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <pid_timer+0x180>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f004 fcc2 	bl	8006d14 <osSemaphoreRelease>
	}

	if((adc_value[5]>RFMaxPos) && (rfw==1))
 8002390:	4b38      	ldr	r3, [pc, #224]	; (8002474 <pid_timer+0x174>)
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <pid_timer+0x190>)
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	4293      	cmp	r3, r2
 800239a:	d91b      	bls.n	80023d4 <pid_timer+0xd4>
 800239c:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <pid_timer+0x194>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d117      	bne.n	80023d4 <pid_timer+0xd4>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 80023a4:	4b36      	ldr	r3, [pc, #216]	; (8002480 <pid_timer+0x180>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023ac:	4618      	mov	r0, r3
 80023ae:	f004 fc63 	bl	8006c78 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <pid_timer+0x184>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80023ba:	4b32      	ldr	r3, [pc, #200]	; (8002484 <pid_timer+0x184>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
			rfw=0;
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <pid_timer+0x194>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <pid_timer+0x180>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f004 fca1 	bl	8006d14 <osSemaphoreRelease>
 80023d2:	e020      	b.n	8002416 <pid_timer+0x116>
		}
		else if((adc_value[5]<RFMinPos) && (rrw==1))
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <pid_timer+0x174>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	4a2f      	ldr	r2, [pc, #188]	; (8002498 <pid_timer+0x198>)
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	4293      	cmp	r3, r2
 80023de:	d21a      	bcs.n	8002416 <pid_timer+0x116>
 80023e0:	4b2e      	ldr	r3, [pc, #184]	; (800249c <pid_timer+0x19c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d116      	bne.n	8002416 <pid_timer+0x116>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <pid_timer+0x180>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023f0:	4618      	mov	r0, r3
 80023f2:	f004 fc41 	bl	8006c78 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <pid_timer+0x184>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <pid_timer+0x184>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
			rrw=0;
 8002406:	4b25      	ldr	r3, [pc, #148]	; (800249c <pid_timer+0x19c>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <pid_timer+0x180>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f004 fc7f 	bl	8006d14 <osSemaphoreRelease>
		}

	if((adc_value[3]<M1MinPos) && (mgo==1) &&(adc_value[4]<M2MinPos))
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <pid_timer+0x174>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <pid_timer+0x1a0>)
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	4293      	cmp	r3, r2
 8002420:	d248      	bcs.n	80024b4 <pid_timer+0x1b4>
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <pid_timer+0x1a4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d144      	bne.n	80024b4 <pid_timer+0x1b4>
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <pid_timer+0x174>)
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <pid_timer+0x1a8>)
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4293      	cmp	r3, r2
 8002434:	d23e      	bcs.n	80024b4 <pid_timer+0x1b4>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <pid_timer+0x180>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fc1a 	bl	8006c78 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <pid_timer+0x1ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	2108      	movs	r1, #8
 8002450:	4817      	ldr	r0, [pc, #92]	; (80024b0 <pid_timer+0x1b0>)
 8002452:	f002 fac3 	bl	80049dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	2110      	movs	r1, #16
 800245a:	4815      	ldr	r0, [pc, #84]	; (80024b0 <pid_timer+0x1b0>)
 800245c:	f002 fabe 	bl	80049dc <HAL_GPIO_WritePin>
			mgo=0;
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <pid_timer+0x1a4>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <pid_timer+0x180>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fc52 	bl	8006d14 <osSemaphoreRelease>
 8002470:	e04d      	b.n	800250e <pid_timer+0x20e>
 8002472:	bf00      	nop
 8002474:	20001a40 	.word	0x20001a40
 8002478:	20000000 	.word	0x20000000
 800247c:	2000093c 	.word	0x2000093c
 8002480:	20001c30 	.word	0x20001c30
 8002484:	20001864 	.word	0x20001864
 8002488:	20000004 	.word	0x20000004
 800248c:	20000938 	.word	0x20000938
 8002490:	20000008 	.word	0x20000008
 8002494:	20000940 	.word	0x20000940
 8002498:	2000000c 	.word	0x2000000c
 800249c:	20000944 	.word	0x20000944
 80024a0:	20000010 	.word	0x20000010
 80024a4:	20000948 	.word	0x20000948
 80024a8:	20000018 	.word	0x20000018
 80024ac:	20001b04 	.word	0x20001b04
 80024b0:	40010c00 	.word	0x40010c00
		}
		else if((adc_value[3]>M1MaxPos) && (mgc==1) &&(adc_value[4]>M2MaxPos))
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <pid_timer+0x35c>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a69      	ldr	r2, [pc, #420]	; (8002660 <pid_timer+0x360>)
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4293      	cmp	r3, r2
 80024be:	d926      	bls.n	800250e <pid_timer+0x20e>
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <pid_timer+0x364>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d122      	bne.n	800250e <pid_timer+0x20e>
 80024c8:	4b64      	ldr	r3, [pc, #400]	; (800265c <pid_timer+0x35c>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	4a66      	ldr	r2, [pc, #408]	; (8002668 <pid_timer+0x368>)
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d91c      	bls.n	800250e <pid_timer+0x20e>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 80024d4:	4b65      	ldr	r3, [pc, #404]	; (800266c <pid_timer+0x36c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 fbcb 	bl	8006c78 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <pid_timer+0x370>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2108      	movs	r1, #8
 80024ee:	4861      	ldr	r0, [pc, #388]	; (8002674 <pid_timer+0x374>)
 80024f0:	f002 fa74 	bl	80049dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2110      	movs	r1, #16
 80024f8:	485e      	ldr	r0, [pc, #376]	; (8002674 <pid_timer+0x374>)
 80024fa:	f002 fa6f 	bl	80049dc <HAL_GPIO_WritePin>
			mgc=0;
 80024fe:	4b59      	ldr	r3, [pc, #356]	; (8002664 <pid_timer+0x364>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8002504:	4b59      	ldr	r3, [pc, #356]	; (800266c <pid_timer+0x36c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f004 fc03 	bl	8006d14 <osSemaphoreRelease>
		}

	//PID position control for LFinger
	if(lPid==1)
 800250e:	4b5a      	ldr	r3, [pc, #360]	; (8002678 <pid_timer+0x378>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	f040 80cc 	bne.w	80026b0 <pid_timer+0x3b0>
	{
		// get the commanded position
		// get current position
		// calculate error
		int error = lPosDesired - adc_value[6];
 8002518:	4b58      	ldr	r3, [pc, #352]	; (800267c <pid_timer+0x37c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b4f      	ldr	r3, [pc, #316]	; (800265c <pid_timer+0x35c>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
		l_error_integral = l_error_integral + error;
 8002526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002528:	f7fd ff6c 	bl	8000404 <__aeabi_i2d>
 800252c:	4b54      	ldr	r3, [pc, #336]	; (8002680 <pid_timer+0x380>)
 800252e:	cb18      	ldmia	r3, {r3, r4}
 8002530:	461a      	mov	r2, r3
 8002532:	4623      	mov	r3, r4
 8002534:	f7fd fe1a 	bl	800016c <__adddf3>
 8002538:	4603      	mov	r3, r0
 800253a:	460c      	mov	r4, r1
 800253c:	4a50      	ldr	r2, [pc, #320]	; (8002680 <pid_timer+0x380>)
 800253e:	e9c2 3400 	strd	r3, r4, [r2]
		int l_error_derivative = error  - l_error_prev;
 8002542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002544:	f7fd ff5e 	bl	8000404 <__aeabi_i2d>
 8002548:	4b4e      	ldr	r3, [pc, #312]	; (8002684 <pid_timer+0x384>)
 800254a:	cb18      	ldmia	r3, {r3, r4}
 800254c:	461a      	mov	r2, r3
 800254e:	4623      	mov	r3, r4
 8002550:	f7fd fe0a 	bl	8000168 <__aeabi_dsub>
 8002554:	4603      	mov	r3, r0
 8002556:	460c      	mov	r4, r1
 8002558:	4618      	mov	r0, r3
 800255a:	4621      	mov	r1, r4
 800255c:	f7fe f9ce 	bl	80008fc <__aeabi_d2iz>
 8002560:	4603      	mov	r3, r0
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
		// calculate control value
		int l_ctrl   = (l_Kp * error) + ((l_Kd/pid_time_period)* l_error_derivative) + (l_Ki*l_error_integral*pid_time_period);
 8002564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002566:	f7fd ff4d 	bl	8000404 <__aeabi_i2d>
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <pid_timer+0x388>)
 800256c:	cb18      	ldmia	r3, {r3, r4}
 800256e:	461a      	mov	r2, r3
 8002570:	4623      	mov	r3, r4
 8002572:	f7fd ffb1 	bl	80004d8 <__aeabi_dmul>
 8002576:	4603      	mov	r3, r0
 8002578:	460c      	mov	r4, r1
 800257a:	4698      	mov	r8, r3
 800257c:	46a1      	mov	r9, r4
 800257e:	4b43      	ldr	r3, [pc, #268]	; (800268c <pid_timer+0x38c>)
 8002580:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <pid_timer+0x390>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ff3b 	bl	8000404 <__aeabi_i2d>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fe f8c9 	bl	800072c <__aeabi_ddiv>
 800259a:	4603      	mov	r3, r0
 800259c:	460c      	mov	r4, r1
 800259e:	4625      	mov	r5, r4
 80025a0:	461c      	mov	r4, r3
 80025a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a4:	f7fd ff2e 	bl	8000404 <__aeabi_i2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4620      	mov	r0, r4
 80025ae:	4629      	mov	r1, r5
 80025b0:	f7fd ff92 	bl	80004d8 <__aeabi_dmul>
 80025b4:	4603      	mov	r3, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	461a      	mov	r2, r3
 80025ba:	4623      	mov	r3, r4
 80025bc:	4640      	mov	r0, r8
 80025be:	4649      	mov	r1, r9
 80025c0:	f7fd fdd4 	bl	800016c <__adddf3>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	461d      	mov	r5, r3
 80025ca:	4626      	mov	r6, r4
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <pid_timer+0x394>)
 80025ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <pid_timer+0x380>)
 80025d4:	cb18      	ldmia	r3, {r3, r4}
 80025d6:	461a      	mov	r2, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	f7fd ff7d 	bl	80004d8 <__aeabi_dmul>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	4698      	mov	r8, r3
 80025e4:	46a1      	mov	r9, r4
 80025e6:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <pid_timer+0x390>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff0a 	bl	8000404 <__aeabi_i2d>
 80025f0:	4603      	mov	r3, r0
 80025f2:	460c      	mov	r4, r1
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	4640      	mov	r0, r8
 80025fa:	4649      	mov	r1, r9
 80025fc:	f7fd ff6c 	bl	80004d8 <__aeabi_dmul>
 8002600:	4603      	mov	r3, r0
 8002602:	460c      	mov	r4, r1
 8002604:	461a      	mov	r2, r3
 8002606:	4623      	mov	r3, r4
 8002608:	4628      	mov	r0, r5
 800260a:	4631      	mov	r1, r6
 800260c:	f7fd fdae 	bl	800016c <__adddf3>
 8002610:	4603      	mov	r3, r0
 8002612:	460c      	mov	r4, r1
 8002614:	4618      	mov	r0, r3
 8002616:	4621      	mov	r1, r4
 8002618:	f7fe f970 	bl	80008fc <__aeabi_d2iz>
 800261c:	4603      	mov	r3, r0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
		// ensure control value is within limits
		l_ctrl = clamp_val(abs(l_ctrl), 20, 80);// constrain to max 80 % PWM since its a 6V motor at 12V
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	2b00      	cmp	r3, #0
 8002624:	bfb8      	it	lt
 8002626:	425b      	neglt	r3, r3
 8002628:	2250      	movs	r2, #80	; 0x50
 800262a:	2114      	movs	r1, #20
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe feb9 	bl	80013a4 <clamp_val>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "PID L %d \t %d \t %d \t %d\n", lPosDesired, adc_value[6],error, l_ctrl), 100);
		// move motors
		if(error>lPosDelta)
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <pid_timer+0x398>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263a:	429a      	cmp	r2, r3
 800263c:	dd03      	ble.n	8002646 <pid_timer+0x346>
		{
			//forward
			move_lf(l_ctrl);
 800263e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002640:	f7fe fcf6 	bl	8001030 <move_lf>
 8002644:	e034      	b.n	80026b0 <pid_timer+0x3b0>
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE FWD %d\n", 1), 100);
		}
		else if(error<(-1*lPosDelta))
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <pid_timer+0x398>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	425b      	negs	r3, r3
 800264c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264e:	429a      	cmp	r2, r3
 8002650:	da24      	bge.n	800269c <pid_timer+0x39c>
		{
			move_lb(l_ctrl);
 8002652:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002654:	f7fe fd26 	bl	80010a4 <move_lb>
 8002658:	e02a      	b.n	80026b0 <pid_timer+0x3b0>
 800265a:	bf00      	nop
 800265c:	20001a40 	.word	0x20001a40
 8002660:	20000014 	.word	0x20000014
 8002664:	2000094c 	.word	0x2000094c
 8002668:	2000001c 	.word	0x2000001c
 800266c:	20001c30 	.word	0x20001c30
 8002670:	20001b04 	.word	0x20001b04
 8002674:	40010c00 	.word	0x40010c00
 8002678:	20000950 	.word	0x20000950
 800267c:	20000970 	.word	0x20000970
 8002680:	20000980 	.word	0x20000980
 8002684:	20000978 	.word	0x20000978
 8002688:	20000058 	.word	0x20000058
 800268c:	20000060 	.word	0x20000060
 8002690:	20000050 	.word	0x20000050
 8002694:	20000068 	.word	0x20000068
 8002698:	20000048 	.word	0x20000048
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE BACK %d\n", 1), 100);
		}
		else
		{
			brake_lf();
 800269c:	f7fe fc56 	bl	8000f4c <brake_lf>
			l_error_integral = l_error_prev;
 80026a0:	4b56      	ldr	r3, [pc, #344]	; (80027fc <pid_timer+0x4fc>)
 80026a2:	cb18      	ldmia	r3, {r3, r4}
 80026a4:	4a56      	ldr	r2, [pc, #344]	; (8002800 <pid_timer+0x500>)
 80026a6:	e9c2 3400 	strd	r3, r4, [r2]
			lPid=0;
 80026aa:	4b56      	ldr	r3, [pc, #344]	; (8002804 <pid_timer+0x504>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
		//	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "REACHED L %d \t %d \t %d\n", lPosDesired, l_ctrl, error), 100);

		}
	}
	//PID position control for RFinger
	if(rPid==1)
 80026b0:	4b55      	ldr	r3, [pc, #340]	; (8002808 <pid_timer+0x508>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	f040 80c5 	bne.w	8002844 <pid_timer+0x544>
	{
		// get the commanded position
		// get current position
		// calculate error
		int error = rPosDesired - adc_value[5];
 80026ba:	4b54      	ldr	r3, [pc, #336]	; (800280c <pid_timer+0x50c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <pid_timer+0x510>)
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	623b      	str	r3, [r7, #32]
		r_error_integral = r_error_integral + error;
 80026c8:	6a38      	ldr	r0, [r7, #32]
 80026ca:	f7fd fe9b 	bl	8000404 <__aeabi_i2d>
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <pid_timer+0x514>)
 80026d0:	cb18      	ldmia	r3, {r3, r4}
 80026d2:	461a      	mov	r2, r3
 80026d4:	4623      	mov	r3, r4
 80026d6:	f7fd fd49 	bl	800016c <__adddf3>
 80026da:	4603      	mov	r3, r0
 80026dc:	460c      	mov	r4, r1
 80026de:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <pid_timer+0x514>)
 80026e0:	e9c2 3400 	strd	r3, r4, [r2]
		int r_error_derivative = error  - r_error_prev;
 80026e4:	6a38      	ldr	r0, [r7, #32]
 80026e6:	f7fd fe8d 	bl	8000404 <__aeabi_i2d>
 80026ea:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <pid_timer+0x518>)
 80026ec:	cb18      	ldmia	r3, {r3, r4}
 80026ee:	461a      	mov	r2, r3
 80026f0:	4623      	mov	r3, r4
 80026f2:	f7fd fd39 	bl	8000168 <__aeabi_dsub>
 80026f6:	4603      	mov	r3, r0
 80026f8:	460c      	mov	r4, r1
 80026fa:	4618      	mov	r0, r3
 80026fc:	4621      	mov	r1, r4
 80026fe:	f7fe f8fd 	bl	80008fc <__aeabi_d2iz>
 8002702:	4603      	mov	r3, r0
 8002704:	61fb      	str	r3, [r7, #28]
		// calculate control value
		int r_ctrl   = (r_Kp * error) + ((r_Kd/pid_time_period)* r_error_derivative) + (r_Ki*r_error_integral*pid_time_period);
 8002706:	6a38      	ldr	r0, [r7, #32]
 8002708:	f7fd fe7c 	bl	8000404 <__aeabi_i2d>
 800270c:	4b43      	ldr	r3, [pc, #268]	; (800281c <pid_timer+0x51c>)
 800270e:	cb18      	ldmia	r3, {r3, r4}
 8002710:	461a      	mov	r2, r3
 8002712:	4623      	mov	r3, r4
 8002714:	f7fd fee0 	bl	80004d8 <__aeabi_dmul>
 8002718:	4603      	mov	r3, r0
 800271a:	460c      	mov	r4, r1
 800271c:	4698      	mov	r8, r3
 800271e:	46a1      	mov	r9, r4
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <pid_timer+0x520>)
 8002722:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <pid_timer+0x524>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fe6a 	bl	8000404 <__aeabi_i2d>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fd fff8 	bl	800072c <__aeabi_ddiv>
 800273c:	4603      	mov	r3, r0
 800273e:	460c      	mov	r4, r1
 8002740:	4625      	mov	r5, r4
 8002742:	461c      	mov	r4, r3
 8002744:	69f8      	ldr	r0, [r7, #28]
 8002746:	f7fd fe5d 	bl	8000404 <__aeabi_i2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4620      	mov	r0, r4
 8002750:	4629      	mov	r1, r5
 8002752:	f7fd fec1 	bl	80004d8 <__aeabi_dmul>
 8002756:	4603      	mov	r3, r0
 8002758:	460c      	mov	r4, r1
 800275a:	461a      	mov	r2, r3
 800275c:	4623      	mov	r3, r4
 800275e:	4640      	mov	r0, r8
 8002760:	4649      	mov	r1, r9
 8002762:	f7fd fd03 	bl	800016c <__adddf3>
 8002766:	4603      	mov	r3, r0
 8002768:	460c      	mov	r4, r1
 800276a:	461d      	mov	r5, r3
 800276c:	4626      	mov	r6, r4
 800276e:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <pid_timer+0x528>)
 8002770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <pid_timer+0x514>)
 8002776:	cb18      	ldmia	r3, {r3, r4}
 8002778:	461a      	mov	r2, r3
 800277a:	4623      	mov	r3, r4
 800277c:	f7fd feac 	bl	80004d8 <__aeabi_dmul>
 8002780:	4603      	mov	r3, r0
 8002782:	460c      	mov	r4, r1
 8002784:	4698      	mov	r8, r3
 8002786:	46a1      	mov	r9, r4
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <pid_timer+0x524>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fe39 	bl	8000404 <__aeabi_i2d>
 8002792:	4603      	mov	r3, r0
 8002794:	460c      	mov	r4, r1
 8002796:	461a      	mov	r2, r3
 8002798:	4623      	mov	r3, r4
 800279a:	4640      	mov	r0, r8
 800279c:	4649      	mov	r1, r9
 800279e:	f7fd fe9b 	bl	80004d8 <__aeabi_dmul>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	461a      	mov	r2, r3
 80027a8:	4623      	mov	r3, r4
 80027aa:	4628      	mov	r0, r5
 80027ac:	4631      	mov	r1, r6
 80027ae:	f7fd fcdd 	bl	800016c <__adddf3>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	4618      	mov	r0, r3
 80027b8:	4621      	mov	r1, r4
 80027ba:	f7fe f89f 	bl	80008fc <__aeabi_d2iz>
 80027be:	4603      	mov	r3, r0
 80027c0:	61bb      	str	r3, [r7, #24]
		// ensure control value is within limits
		r_ctrl = clamp_val(abs(r_ctrl), 20, 80);// constrain to max 80 % PWM since its a 6V motor at 12V
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bfb8      	it	lt
 80027c8:	425b      	neglt	r3, r3
 80027ca:	2250      	movs	r2, #80	; 0x50
 80027cc:	2114      	movs	r1, #20
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fde8 	bl	80013a4 <clamp_val>
 80027d4:	61b8      	str	r0, [r7, #24]
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "PID L %d \t %d \t %d \t %d\n", lPosDesired, adc_value[6],error, l_ctrl), 100);
		// move motors
		if(error>rPosDelta)
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <pid_timer+0x52c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a3a      	ldr	r2, [r7, #32]
 80027dc:	429a      	cmp	r2, r3
 80027de:	dd03      	ble.n	80027e8 <pid_timer+0x4e8>
		{
			//forward
			move_rf(r_ctrl);
 80027e0:	69b8      	ldr	r0, [r7, #24]
 80027e2:	f7fe fc99 	bl	8001118 <move_rf>
 80027e6:	e02d      	b.n	8002844 <pid_timer+0x544>
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE FWD %d\n", 1), 100);
		}
		else if(error<(-1*rPosDelta))
 80027e8:	4b10      	ldr	r3, [pc, #64]	; (800282c <pid_timer+0x52c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	425b      	negs	r3, r3
 80027ee:	6a3a      	ldr	r2, [r7, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	da1d      	bge.n	8002830 <pid_timer+0x530>
		{
			move_rb(r_ctrl);
 80027f4:	69b8      	ldr	r0, [r7, #24]
 80027f6:	f7fe fcc9 	bl	800118c <move_rb>
 80027fa:	e023      	b.n	8002844 <pid_timer+0x544>
 80027fc:	20000978 	.word	0x20000978
 8002800:	20000980 	.word	0x20000980
 8002804:	20000950 	.word	0x20000950
 8002808:	20000954 	.word	0x20000954
 800280c:	20000974 	.word	0x20000974
 8002810:	20001a40 	.word	0x20001a40
 8002814:	20000990 	.word	0x20000990
 8002818:	20000988 	.word	0x20000988
 800281c:	20000070 	.word	0x20000070
 8002820:	20000078 	.word	0x20000078
 8002824:	20000050 	.word	0x20000050
 8002828:	20000080 	.word	0x20000080
 800282c:	2000004c 	.word	0x2000004c
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE BACK %d\n", 1), 100);
		}
		else
		{
			brake_rf();
 8002830:	f7fe fb9e 	bl	8000f70 <brake_rf>
			r_error_integral = r_error_prev;
 8002834:	4b85      	ldr	r3, [pc, #532]	; (8002a4c <pid_timer+0x74c>)
 8002836:	cb18      	ldmia	r3, {r3, r4}
 8002838:	4a85      	ldr	r2, [pc, #532]	; (8002a50 <pid_timer+0x750>)
 800283a:	e9c2 3400 	strd	r3, r4, [r2]
			rPid=0;
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <pid_timer+0x754>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

		}
	}

	// control of gripper motors
	if(gPid==2)
 8002844:	4b84      	ldr	r3, [pc, #528]	; (8002a58 <pid_timer+0x758>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d126      	bne.n	800289a <pid_timer+0x59a>
	{  // for mode in which gripper close, check for current and hold position if current> threshold
		// check for current
		if(adc_value[2]>gForceThres)
 800284c:	4b83      	ldr	r3, [pc, #524]	; (8002a5c <pid_timer+0x75c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a83      	ldr	r2, [pc, #524]	; (8002a60 <pid_timer+0x760>)
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	4293      	cmp	r3, r2
 8002856:	d90d      	bls.n	8002874 <pid_timer+0x574>
		{	// verify again after a short delay
			osDelay(2);
 8002858:	2002      	movs	r0, #2
 800285a:	f004 f94a 	bl	8006af2 <osDelay>
			if(adc_value[2]>gForceThres)
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <pid_timer+0x75c>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4a7f      	ldr	r2, [pc, #508]	; (8002a60 <pid_timer+0x760>)
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4293      	cmp	r3, r2
 8002868:	d904      	bls.n	8002874 <pid_timer+0x574>
			{
				// brake
				brake_gripper();
 800286a:	f7fe fbb3 	bl	8000fd4 <brake_gripper>
				gPid = 0;
 800286e:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <pid_timer+0x758>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
			}

		}
		// check for timeout
		if( abs(HAL_GetTick()-startTick)>gTimeOut)
 8002874:	f001 f860 	bl	8003938 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <pid_timer+0x764>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002884:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002888:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <pid_timer+0x768>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	dd04      	ble.n	800289a <pid_timer+0x59a>
		{
			// brake
			brake_gripper();
 8002890:	f7fe fba0 	bl	8000fd4 <brake_gripper>
			gPid = 0;
 8002894:	4b70      	ldr	r3, [pc, #448]	; (8002a58 <pid_timer+0x758>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
		}
	}
	 if(gPid==3)
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <pid_timer+0x758>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d112      	bne.n	80028c8 <pid_timer+0x5c8>
	{ // for velocity move mode, no current checking --<<< WARNING
		// check for timeout
				if( abs(HAL_GetTick()-startTick)>gTimeOut)
 80028a2:	f001 f849 	bl	8003938 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b6e      	ldr	r3, [pc, #440]	; (8002a64 <pid_timer+0x764>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80028b2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80028b6:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <pid_timer+0x768>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	dd04      	ble.n	80028c8 <pid_timer+0x5c8>
				{
					// brake
					brake_gripper();
 80028be:	f7fe fb89 	bl	8000fd4 <brake_gripper>
					gPid = 0;
 80028c2:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <pid_timer+0x758>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
				}
	}
	 if(gPid==4)
 80028c8:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <pid_timer+0x758>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	f040 80b8 	bne.w	8002a42 <pid_timer+0x742>
	 	 {
		 int gripper_gap = (M1MaxPos-adc_value[2])+(M2MaxPos-adc_value[3])-(M1MinPos+M2MinPos);
 80028d2:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <pid_timer+0x76c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b60      	ldr	r3, [pc, #384]	; (8002a5c <pid_timer+0x75c>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	4b64      	ldr	r3, [pc, #400]	; (8002a70 <pid_timer+0x770>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <pid_timer+0x75c>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	1acb      	subs	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	4a61      	ldr	r2, [pc, #388]	; (8002a74 <pid_timer+0x774>)
 80028ee:	6811      	ldr	r1, [r2, #0]
 80028f0:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <pid_timer+0x778>)
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	440a      	add	r2, r1
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
	 		 int gap_error = gripperGapcmd - gripper_gap;
 80028fa:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <pid_timer+0x77c>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	613b      	str	r3, [r7, #16]
	 		// TODO  - implement PID
	 		 g_error_integral = g_error_integral + gap_error;
 8002904:	6938      	ldr	r0, [r7, #16]
 8002906:	f7fd fd7d 	bl	8000404 <__aeabi_i2d>
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <pid_timer+0x780>)
 800290c:	cb18      	ldmia	r3, {r3, r4}
 800290e:	461a      	mov	r2, r3
 8002910:	4623      	mov	r3, r4
 8002912:	f7fd fc2b 	bl	800016c <__adddf3>
 8002916:	4603      	mov	r3, r0
 8002918:	460c      	mov	r4, r1
 800291a:	4a59      	ldr	r2, [pc, #356]	; (8002a80 <pid_timer+0x780>)
 800291c:	e9c2 3400 	strd	r3, r4, [r2]
	 		 		int g_error_derivative = gap_error  - g_error_prev;
 8002920:	6938      	ldr	r0, [r7, #16]
 8002922:	f7fd fd6f 	bl	8000404 <__aeabi_i2d>
 8002926:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <pid_timer+0x784>)
 8002928:	cb18      	ldmia	r3, {r3, r4}
 800292a:	461a      	mov	r2, r3
 800292c:	4623      	mov	r3, r4
 800292e:	f7fd fc1b 	bl	8000168 <__aeabi_dsub>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	4618      	mov	r0, r3
 8002938:	4621      	mov	r1, r4
 800293a:	f7fd ffdf 	bl	80008fc <__aeabi_d2iz>
 800293e:	4603      	mov	r3, r0
 8002940:	60fb      	str	r3, [r7, #12]
	 		 		// calculate control value
	 		 		int g_ctrl   = (g_Kp * gap_error) + ((g_Kd/pid_time_period)* g_error_derivative) + (g_Ki*g_error_integral*pid_time_period);
 8002942:	6938      	ldr	r0, [r7, #16]
 8002944:	f7fd fd5e 	bl	8000404 <__aeabi_i2d>
 8002948:	4b4f      	ldr	r3, [pc, #316]	; (8002a88 <pid_timer+0x788>)
 800294a:	cb18      	ldmia	r3, {r3, r4}
 800294c:	461a      	mov	r2, r3
 800294e:	4623      	mov	r3, r4
 8002950:	f7fd fdc2 	bl	80004d8 <__aeabi_dmul>
 8002954:	4603      	mov	r3, r0
 8002956:	460c      	mov	r4, r1
 8002958:	4698      	mov	r8, r3
 800295a:	46a1      	mov	r9, r4
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <pid_timer+0x78c>)
 800295e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <pid_timer+0x790>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fd4c 	bl	8000404 <__aeabi_i2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7fd feda 	bl	800072c <__aeabi_ddiv>
 8002978:	4603      	mov	r3, r0
 800297a:	460c      	mov	r4, r1
 800297c:	4625      	mov	r5, r4
 800297e:	461c      	mov	r4, r3
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7fd fd3f 	bl	8000404 <__aeabi_i2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4620      	mov	r0, r4
 800298c:	4629      	mov	r1, r5
 800298e:	f7fd fda3 	bl	80004d8 <__aeabi_dmul>
 8002992:	4603      	mov	r3, r0
 8002994:	460c      	mov	r4, r1
 8002996:	461a      	mov	r2, r3
 8002998:	4623      	mov	r3, r4
 800299a:	4640      	mov	r0, r8
 800299c:	4649      	mov	r1, r9
 800299e:	f7fd fbe5 	bl	800016c <__adddf3>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
 80029a6:	461d      	mov	r5, r3
 80029a8:	4626      	mov	r6, r4
 80029aa:	4b3a      	ldr	r3, [pc, #232]	; (8002a94 <pid_timer+0x794>)
 80029ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <pid_timer+0x780>)
 80029b2:	cb18      	ldmia	r3, {r3, r4}
 80029b4:	461a      	mov	r2, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	f7fd fd8e 	bl	80004d8 <__aeabi_dmul>
 80029bc:	4603      	mov	r3, r0
 80029be:	460c      	mov	r4, r1
 80029c0:	4698      	mov	r8, r3
 80029c2:	46a1      	mov	r9, r4
 80029c4:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <pid_timer+0x790>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fd1b 	bl	8000404 <__aeabi_i2d>
 80029ce:	4603      	mov	r3, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	461a      	mov	r2, r3
 80029d4:	4623      	mov	r3, r4
 80029d6:	4640      	mov	r0, r8
 80029d8:	4649      	mov	r1, r9
 80029da:	f7fd fd7d 	bl	80004d8 <__aeabi_dmul>
 80029de:	4603      	mov	r3, r0
 80029e0:	460c      	mov	r4, r1
 80029e2:	461a      	mov	r2, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	4631      	mov	r1, r6
 80029ea:	f7fd fbbf 	bl	800016c <__adddf3>
 80029ee:	4603      	mov	r3, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	4618      	mov	r0, r3
 80029f4:	4621      	mov	r1, r4
 80029f6:	f7fd ff81 	bl	80008fc <__aeabi_d2iz>
 80029fa:	4603      	mov	r3, r0
 80029fc:	60bb      	str	r3, [r7, #8]

	 		 		g_ctrl = clamp_val(abs(g_ctrl), 75, 100);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bfb8      	it	lt
 8002a04:	425b      	neglt	r3, r3
 8002a06:	2264      	movs	r2, #100	; 0x64
 8002a08:	214b      	movs	r1, #75	; 0x4b
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fcca 	bl	80013a4 <clamp_val>
 8002a10:	60b8      	str	r0, [r7, #8]
	 		 		if(gap_error> gripperGapDelta)
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <pid_timer+0x798>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dd03      	ble.n	8002a24 <pid_timer+0x724>
	 		 		{
	 		 			open_gripper(g_ctrl);
 8002a1c:	68b8      	ldr	r0, [r7, #8]
 8002a1e:	f7fe fa01 	bl	8000e24 <open_gripper>
	 		 			brake_gripper();
	 		 			gPid = 0;
	 		 		}
	 	 }
  /* USER CODE END pid_timer */
}
 8002a22:	e00e      	b.n	8002a42 <pid_timer+0x742>
	 		 		else if(gap_error<(-1*gripperGapDelta))
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <pid_timer+0x798>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	425b      	negs	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	da03      	bge.n	8002a38 <pid_timer+0x738>
	 		 			close_gripper(g_ctrl);
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f7fe fa41 	bl	8000eb8 <close_gripper>
}
 8002a36:	e004      	b.n	8002a42 <pid_timer+0x742>
	 		 			brake_gripper();
 8002a38:	f7fe facc 	bl	8000fd4 <brake_gripper>
	 		 			gPid = 0;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <pid_timer+0x758>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3734      	adds	r7, #52	; 0x34
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a4c:	20000988 	.word	0x20000988
 8002a50:	20000990 	.word	0x20000990
 8002a54:	20000954 	.word	0x20000954
 8002a58:	20000958 	.word	0x20000958
 8002a5c:	20001a40 	.word	0x20001a40
 8002a60:	20000998 	.word	0x20000998
 8002a64:	2000099c 	.word	0x2000099c
 8002a68:	20000088 	.word	0x20000088
 8002a6c:	20000014 	.word	0x20000014
 8002a70:	2000001c 	.word	0x2000001c
 8002a74:	20000010 	.word	0x20000010
 8002a78:	20000018 	.word	0x20000018
 8002a7c:	2000095c 	.word	0x2000095c
 8002a80:	20000968 	.word	0x20000968
 8002a84:	20000960 	.word	0x20000960
 8002a88:	20000028 	.word	0x20000028
 8002a8c:	20000030 	.word	0x20000030
 8002a90:	20000050 	.word	0x20000050
 8002a94:	20000038 	.word	0x20000038
 8002a98:	20000020 	.word	0x20000020

08002a9c <status_update_timer>:

/* status_update_timer function */
void status_update_timer(void const * argument)
{
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	b0db      	sub	sp, #364	; 0x16c
 8002aa0:	af18      	add	r7, sp, #96	; 0x60
 8002aa2:	64f8      	str	r0, [r7, #76]	; 0x4c
	 *  M1-2_current, M1Pos, M2Pos, RFPos, LFPos, irsens_left[10], irsens_right[10]
	 *
	 */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

	int gripper_gap = (M1MaxPos-adc_value[2])+(M2MaxPos-adc_value[3])-(M1MinPos+M2MinPos);
 8002aa4:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <status_update_timer+0x17c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b5c      	ldr	r3, [pc, #368]	; (8002c1c <status_update_timer+0x180>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	4b5b      	ldr	r3, [pc, #364]	; (8002c20 <status_update_timer+0x184>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <status_update_timer+0x180>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	1acb      	subs	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	4a59      	ldr	r2, [pc, #356]	; (8002c24 <status_update_timer+0x188>)
 8002ac0:	6811      	ldr	r1, [r2, #0]
 8002ac2:	4a59      	ldr	r2, [pc, #356]	; (8002c28 <status_update_timer+0x18c>)
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	440a      	add	r2, r1
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	// 3600 when closed
	//6456 when fully open
	//int gmin = (M1MinPos+M2MinPos); // TODO - can we estimate this from zero position calibration
	//int gmax = (M1MaxPos-M1MinPos)+(M2MaxPos-M2MinPos)-(M1MinPos+M2MinPos);
gripper_gap =scale_val(gripper_gap, gmin, gmax, 0, 999);
 8002ace:	4b57      	ldr	r3, [pc, #348]	; (8002c2c <status_update_timer+0x190>)
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <status_update_timer+0x194>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002ae2:	f7fe fc13 	bl	800130c <scale_val>
 8002ae6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	char MSG[180];

		sprintf(MSG, "s\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\te\n",
 8002aea:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <status_update_timer+0x180>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002af0:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <status_update_timer+0x180>)
 8002af2:	68d9      	ldr	r1, [r3, #12]
 8002af4:	6479      	str	r1, [r7, #68]	; 0x44
 8002af6:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <status_update_timer+0x180>)
 8002af8:	6918      	ldr	r0, [r3, #16]
 8002afa:	6438      	str	r0, [r7, #64]	; 0x40
				adc_value[2], adc_value[3], adc_value[4], scale_val(adc_value[5],RFMinPos,RFMaxPos,0,200), scale_val(adc_value[6],LFMinPos,LFMaxPos,0,200),
 8002afc:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <status_update_timer+0x180>)
 8002afe:	695b      	ldr	r3, [r3, #20]
		sprintf(MSG, "s\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\te\n",
 8002b00:	4618      	mov	r0, r3
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <status_update_timer+0x198>)
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <status_update_timer+0x19c>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	23c8      	movs	r3, #200	; 0xc8
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f7fe fbfc 	bl	800130c <scale_val>
 8002b14:	63f8      	str	r0, [r7, #60]	; 0x3c
				adc_value[2], adc_value[3], adc_value[4], scale_val(adc_value[5],RFMinPos,RFMaxPos,0,200), scale_val(adc_value[6],LFMinPos,LFMaxPos,0,200),
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <status_update_timer+0x180>)
 8002b18:	699b      	ldr	r3, [r3, #24]
		sprintf(MSG, "s\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\te\n",
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <status_update_timer+0x1a0>)
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <status_update_timer+0x1a4>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	23c8      	movs	r3, #200	; 0xc8
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f7fe fbef 	bl	800130c <scale_val>
 8002b2e:	63b8      	str	r0, [r7, #56]	; 0x38
 8002b30:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <status_update_timer+0x1a8>)
 8002b32:	681c      	ldr	r4, [r3, #0]
 8002b34:	637c      	str	r4, [r7, #52]	; 0x34
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <status_update_timer+0x1a8>)
 8002b38:	685d      	ldr	r5, [r3, #4]
 8002b3a:	633d      	str	r5, [r7, #48]	; 0x30
 8002b3c:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <status_update_timer+0x1a8>)
 8002b3e:	689e      	ldr	r6, [r3, #8]
 8002b40:	62fe      	str	r6, [r7, #44]	; 0x2c
 8002b42:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <status_update_timer+0x1a8>)
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b48:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <status_update_timer+0x1a8>)
 8002b4a:	6919      	ldr	r1, [r3, #16]
 8002b4c:	6279      	str	r1, [r7, #36]	; 0x24
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <status_update_timer+0x1a8>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <status_update_timer+0x1a8>)
 8002b56:	699c      	ldr	r4, [r3, #24]
 8002b58:	61fc      	str	r4, [r7, #28]
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <status_update_timer+0x1a8>)
 8002b5c:	69dd      	ldr	r5, [r3, #28]
 8002b5e:	61bd      	str	r5, [r7, #24]
 8002b60:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <status_update_timer+0x1a8>)
 8002b62:	6a1e      	ldr	r6, [r3, #32]
 8002b64:	617e      	str	r6, [r7, #20]
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <status_update_timer+0x1a8>)
 8002b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b6a:	613a      	str	r2, [r7, #16]
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <status_update_timer+0x1ac>)
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	60f9      	str	r1, [r7, #12]
 8002b72:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <status_update_timer+0x1ac>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <status_update_timer+0x1ac>)
 8002b7a:	6898      	ldr	r0, [r3, #8]
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <status_update_timer+0x1ac>)
 8002b80:	68dc      	ldr	r4, [r3, #12]
 8002b82:	603c      	str	r4, [r7, #0]
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <status_update_timer+0x1ac>)
 8002b86:	691e      	ldr	r6, [r3, #16]
 8002b88:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <status_update_timer+0x1ac>)
 8002b8a:	695d      	ldr	r5, [r3, #20]
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <status_update_timer+0x1ac>)
 8002b8e:	699c      	ldr	r4, [r3, #24]
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <status_update_timer+0x1ac>)
 8002b92:	69d8      	ldr	r0, [r3, #28]
 8002b94:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <status_update_timer+0x1ac>)
 8002b96:	6a19      	ldr	r1, [r3, #32]
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <status_update_timer+0x1ac>)
 8002b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b9c:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8002ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ba4:	9317      	str	r3, [sp, #92]	; 0x5c
 8002ba6:	9216      	str	r2, [sp, #88]	; 0x58
 8002ba8:	9115      	str	r1, [sp, #84]	; 0x54
 8002baa:	9014      	str	r0, [sp, #80]	; 0x50
 8002bac:	9413      	str	r4, [sp, #76]	; 0x4c
 8002bae:	9512      	str	r5, [sp, #72]	; 0x48
 8002bb0:	9611      	str	r6, [sp, #68]	; 0x44
 8002bb2:	683c      	ldr	r4, [r7, #0]
 8002bb4:	9410      	str	r4, [sp, #64]	; 0x40
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	900f      	str	r0, [sp, #60]	; 0x3c
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	930e      	str	r3, [sp, #56]	; 0x38
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	910d      	str	r1, [sp, #52]	; 0x34
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	920c      	str	r2, [sp, #48]	; 0x30
 8002bc6:	697e      	ldr	r6, [r7, #20]
 8002bc8:	960b      	str	r6, [sp, #44]	; 0x2c
 8002bca:	69bd      	ldr	r5, [r7, #24]
 8002bcc:	950a      	str	r5, [sp, #40]	; 0x28
 8002bce:	69fc      	ldr	r4, [r7, #28]
 8002bd0:	9409      	str	r4, [sp, #36]	; 0x24
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	9308      	str	r3, [sp, #32]
 8002bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd8:	9107      	str	r1, [sp, #28]
 8002bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bdc:	9206      	str	r2, [sp, #24]
 8002bde:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8002be0:	9605      	str	r6, [sp, #20]
 8002be2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8002be4:	9504      	str	r5, [sp, #16]
 8002be6:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002be8:	9403      	str	r4, [sp, #12]
 8002bea:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002bec:	9402      	str	r4, [sp, #8]
 8002bee:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002bf0:	9401      	str	r4, [sp, #4]
 8002bf2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002bf4:	9000      	str	r0, [sp, #0]
 8002bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bfa:	4914      	ldr	r1, [pc, #80]	; (8002c4c <status_update_timer+0x1b0>)
 8002bfc:	4660      	mov	r0, ip
 8002bfe:	f007 f927 	bl	8009e50 <siprintf>
					irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6],irdata_fr[7],irdata_fr[8],irdata_fr[9],
					irdata_fl[0],irdata_fl[1], irdata_fl[2], irdata_fl[3], irdata_fl[4], irdata_fl[5], irdata_fl[6],irdata_fl[7],irdata_fl[8],irdata_fl[9], gripper_gap);



	sendData(MSG);
 8002c02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fbe4 	bl	80013d4 <sendData>
	//HAL_UART_Transmit_IT(&huart1, MSG, strlen(MSG));


  /* USER CODE END status_update_timer */
}
 8002c0c:	bf00      	nop
 8002c0e:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000014 	.word	0x20000014
 8002c1c:	20001a40 	.word	0x20001a40
 8002c20:	2000001c 	.word	0x2000001c
 8002c24:	20000010 	.word	0x20000010
 8002c28:	20000018 	.word	0x20000018
 8002c2c:	20000040 	.word	0x20000040
 8002c30:	20000044 	.word	0x20000044
 8002c34:	2000000c 	.word	0x2000000c
 8002c38:	20000008 	.word	0x20000008
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20001c34 	.word	0x20001c34
 8002c48:	20001a5c 	.word	0x20001a5c
 8002c4c:	0800a84c 	.word	0x0800a84c

08002c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c62:	f000 fe57 	bl	8003914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40000400 	.word	0x40000400

08002c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_MspInit+0x68>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <HAL_MspInit+0x68>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6193      	str	r3, [r2, #24]
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <HAL_MspInit+0x68>)
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_MspInit+0x68>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <HAL_MspInit+0x68>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	61d3      	str	r3, [r2, #28]
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <HAL_MspInit+0x68>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	210f      	movs	r1, #15
 8002cba:	f06f 0001 	mvn.w	r0, #1
 8002cbe:	f001 fad8 	bl	8004272 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_MspInit+0x6c>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_MspInit+0x6c>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000

08002cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0310 	add.w	r3, r7, #16
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a28      	ldr	r2, [pc, #160]	; (8002dac <HAL_ADC_MspInit+0xbc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d149      	bne.n	8002da4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_ADC_MspInit+0xc0>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <HAL_ADC_MspInit+0xc0>)
 8002d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d1a:	6193      	str	r3, [r2, #24]
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_ADC_MspInit+0xc0>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_ADC_MspInit+0xc0>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_ADC_MspInit+0xc0>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6193      	str	r3, [r2, #24]
 8002d34:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_ADC_MspInit+0xc0>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002d40:	23ff      	movs	r3, #255	; 0xff
 8002d42:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d44:	2303      	movs	r3, #3
 8002d46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 0310 	add.w	r3, r7, #16
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4819      	ldr	r0, [pc, #100]	; (8002db4 <HAL_ADC_MspInit+0xc4>)
 8002d50:	f001 fcea 	bl	8004728 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d54:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d56:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <HAL_ADC_MspInit+0xcc>)
 8002d58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d7e:	2220      	movs	r2, #32
 8002d80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d88:	480b      	ldr	r0, [pc, #44]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d8a:	f001 fa9d 	bl	80042c8 <HAL_DMA_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002d94:	f7ff ff6e 	bl	8002c74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002d9c:	621a      	str	r2, [r3, #32]
 8002d9e:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <HAL_ADC_MspInit+0xc8>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002da4:	bf00      	nop
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40012400 	.word	0x40012400
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010800 	.word	0x40010800
 8002db8:	20001abc 	.word	0x20001abc
 8002dbc:	40020008 	.word	0x40020008

08002dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5c      	ldr	r2, [pc, #368]	; (8002f40 <HAL_TIM_Base_MspInit+0x180>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10c      	bne.n	8002dec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ddc:	6193      	str	r3, [r2, #24]
 8002dde:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002dea:	e0a4      	b.n	8002f36 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	f040 808e 	bne.w	8002f14 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002df8:	4b52      	ldr	r3, [pc, #328]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a51      	ldr	r2, [pc, #324]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	61d3      	str	r3, [r2, #28]
 8002e04:	4b4f      	ldr	r3, [pc, #316]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002e10:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e12:	4a4e      	ldr	r2, [pc, #312]	; (8002f4c <HAL_TIM_Base_MspInit+0x18c>)
 8002e14:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e16:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e18:	2210      	movs	r2, #16
 8002e1a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e28:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e30:	4b45      	ldr	r3, [pc, #276]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e36:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e3e:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e40:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002e44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002e46:	4840      	ldr	r0, [pc, #256]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e48:	f001 fa3e 	bl	80042c8 <HAL_DMA_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_TIM_Base_MspInit+0x96>
      Error_Handler();
 8002e52:	f7ff ff0f 	bl	8002c74 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e5c:	4a3a      	ldr	r2, [pc, #232]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
 8002e68:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <HAL_TIM_Base_MspInit+0x188>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002e70:	4a38      	ldr	r2, [pc, #224]	; (8002f54 <HAL_TIM_Base_MspInit+0x194>)
 8002e72:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e74:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002e76:	2210      	movs	r2, #16
 8002e78:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7a:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e8c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e8e:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e94:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002e98:	2220      	movs	r2, #32
 8002e9a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e9c:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002e9e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002ea4:	482a      	ldr	r0, [pc, #168]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002ea6:	f001 fa0f 	bl	80042c8 <HAL_DMA_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_TIM_Base_MspInit+0xf4>
      Error_Handler();
 8002eb0:	f7ff fee0 	bl	8002c74 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002eba:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <HAL_TIM_Base_MspInit+0x190>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_up.Instance = DMA1_Channel2;
 8002ec0:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_TIM_Base_MspInit+0x19c>)
 8002ec4:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002ec8:	2210      	movs	r2, #16
 8002eca:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ede:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002eea:	2220      	movs	r2, #32
 8002eec:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002ef0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002ef4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8002ef6:	4818      	ldr	r0, [pc, #96]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002ef8:	f001 f9e6 	bl	80042c8 <HAL_DMA_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_TIM_Base_MspInit+0x146>
      Error_Handler();
 8002f02:	f7ff feb7 	bl	8002c74 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002f0a:	621a      	str	r2, [r3, #32]
 8002f0c:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_TIM_Base_MspInit+0x198>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002f12:	e010      	b.n	8002f36 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <HAL_TIM_Base_MspInit+0x1a0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10b      	bne.n	8002f36 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	61d3      	str	r3, [r2, #28]
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_TIM_Base_MspInit+0x184>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
}
 8002f36:	bf00      	nop
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	200019f8 	.word	0x200019f8
 8002f4c:	40020080 	.word	0x40020080
 8002f50:	2000181c 	.word	0x2000181c
 8002f54:	40020058 	.word	0x40020058
 8002f58:	200019ac 	.word	0x200019ac
 8002f5c:	4002001c 	.word	0x4002001c
 8002f60:	40000800 	.word	0x40000800

08002f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <HAL_TIM_MspPostInit+0x98>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d119      	bne.n	8002fb8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_TIM_MspPostInit+0x9c>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_TIM_MspPostInit+0x9c>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <HAL_TIM_MspPostInit+0x9c>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	f107 0310 	add.w	r3, r7, #16
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4814      	ldr	r0, [pc, #80]	; (8003004 <HAL_TIM_MspPostInit+0xa0>)
 8002fb2:	f001 fbb9 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002fb6:	e01d      	b.n	8002ff4 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a12      	ldr	r2, [pc, #72]	; (8003008 <HAL_TIM_MspPostInit+0xa4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d118      	bne.n	8002ff4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_TIM_MspPostInit+0x9c>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <HAL_TIM_MspPostInit+0x9c>)
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	6193      	str	r3, [r2, #24]
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_TIM_MspPostInit+0x9c>)
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002fda:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	4619      	mov	r1, r3
 8002fee:	4807      	ldr	r0, [pc, #28]	; (800300c <HAL_TIM_MspPostInit+0xa8>)
 8002ff0:	f001 fb9a 	bl	8004728 <HAL_GPIO_Init>
}
 8002ff4:	bf00      	nop
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40021000 	.word	0x40021000
 8003004:	40010800 	.word	0x40010800
 8003008:	40000800 	.word	0x40000800
 800300c:	40010c00 	.word	0x40010c00

08003010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	; 0x30
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	201d      	movs	r0, #29
 8003026:	f001 f924 	bl	8004272 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800302a:	201d      	movs	r0, #29
 800302c:	f001 f93d 	bl	80042aa <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_InitTick+0xa0>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <HAL_InitTick+0xa0>)
 8003036:	f043 0302 	orr.w	r3, r3, #2
 800303a:	61d3      	str	r3, [r2, #28]
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_InitTick+0xa0>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003048:	f107 0210 	add.w	r2, r7, #16
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f002 f8c4 	bl	80051e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003058:	f002 f8ae 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 800305c:	4603      	mov	r3, r0
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <HAL_InitTick+0xa4>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	3b01      	subs	r3, #1
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_InitTick+0xa8>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_InitTick+0xac>)
 8003074:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_InitTick+0xa8>)
 8003078:	f240 32e7 	movw	r2, #999	; 0x3e7
 800307c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_InitTick+0xa8>)
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_InitTick+0xa8>)
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_InitTick+0xa8>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <HAL_InitTick+0xa8>)
 8003092:	f002 f9a9 	bl	80053e8 <HAL_TIM_Base_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800309c:	4806      	ldr	r0, [pc, #24]	; (80030b8 <HAL_InitTick+0xa8>)
 800309e:	f002 fa3d 	bl	800551c <HAL_TIM_Base_Start_IT>
 80030a2:	4603      	mov	r3, r0
 80030a4:	e000      	b.n	80030a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3730      	adds	r7, #48	; 0x30
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	20001c5c 	.word	0x20001c5c
 80030bc:	40000400 	.word	0x40000400

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <HardFault_Handler+0x4>

080030d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <MemManage_Handler+0x4>

080030d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <BusFault_Handler+0x4>

080030de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <UsageFault_Handler+0x4>

080030e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <DMA1_Channel1_IRQHandler+0x10>)
 80030f6:	f001 f9e3 	bl	80044c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20001abc 	.word	0x20001abc

08003104 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <DMA1_Channel2_IRQHandler+0x10>)
 800310a:	f001 f9d9 	bl	80044c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200019ac 	.word	0x200019ac

08003118 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <DMA1_Channel5_IRQHandler+0x10>)
 800311e:	f001 f9cf 	bl	80044c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000181c 	.word	0x2000181c

0800312c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <DMA1_Channel7_IRQHandler+0x10>)
 8003132:	f001 f9c5 	bl	80044c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200019f8 	.word	0x200019f8

08003140 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <TIM3_IRQHandler+0x10>)
 8003146:	f002 fb35 	bl	80057b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20001c5c 	.word	0x20001c5c

08003154 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	LL_USART1_IRQHandler();
 8003158:	f7fe f984 	bl	8001464 <LL_USART1_IRQHandler>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <_sbrk+0x5c>)
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <_sbrk+0x60>)
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <_sbrk+0x64>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <_sbrk+0x64>)
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <_sbrk+0x68>)
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	429a      	cmp	r2, r3
 800318e:	d207      	bcs.n	80031a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003190:	f006 fe20 	bl	8009dd4 <__errno>
 8003194:	4602      	mov	r2, r0
 8003196:	230c      	movs	r3, #12
 8003198:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800319a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800319e:	e009      	b.n	80031b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <_sbrk+0x64>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <_sbrk+0x64>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <_sbrk+0x64>)
 80031b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20005000 	.word	0x20005000
 80031c0:	00000400 	.word	0x00000400
 80031c4:	200009a0 	.word	0x200009a0
 80031c8:	20001e00 	.word	0x20001e00

080031cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <ws2812_timer2_init>:
    WS2812_CH14_GPIO,
    WS2812_CH15_GPIO
};

static void ws2812_timer2_init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08e      	sub	sp, #56	; 0x38
 80031dc:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ec:	f107 0320 	add.w	r3, r7, #32
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
 8003204:	615a      	str	r2, [r3, #20]
 8003206:	619a      	str	r2, [r3, #24]

    htimer2.Instance = TIM2;
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <ws2812_timer2_init+0xc8>)
 800320a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800320e:	601a      	str	r2, [r3, #0]
    htimer2.Init.Prescaler = 0;
 8003210:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <ws2812_timer2_init+0xc8>)
 8003212:	2200      	movs	r2, #0
 8003214:	605a      	str	r2, [r3, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <ws2812_timer2_init+0xc8>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <ws2812_timer2_init+0xc8>)
 800321e:	2246      	movs	r2, #70	; 0x46
 8003220:	60da      	str	r2, [r3, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <ws2812_timer2_init+0xc8>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <ws2812_timer2_init+0xc8>)
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer2);
 800322e:	481c      	ldr	r0, [pc, #112]	; (80032a0 <ws2812_timer2_init+0xc8>)
 8003230:	f002 f8da 	bl	80053e8 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 800323a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800323e:	4619      	mov	r1, r3
 8003240:	4817      	ldr	r0, [pc, #92]	; (80032a0 <ws2812_timer2_init+0xc8>)
 8003242:	f002 fc7d 	bl	8005b40 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8003246:	4816      	ldr	r0, [pc, #88]	; (80032a0 <ws2812_timer2_init+0xc8>)
 8003248:	f002 f9ba 	bl	80055c0 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003250:	2300      	movs	r3, #0
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8003254:	f107 0320 	add.w	r3, r7, #32
 8003258:	4619      	mov	r1, r3
 800325a:	4811      	ldr	r0, [pc, #68]	; (80032a0 <ws2812_timer2_init+0xc8>)
 800325c:	f002 fff0 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003260:	2360      	movs	r3, #96	; 0x60
 8003262:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8003264:	2316      	movs	r3, #22
 8003266:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2200      	movs	r2, #0
 8003274:	4619      	mov	r1, r3
 8003276:	480a      	ldr	r0, [pc, #40]	; (80032a0 <ws2812_timer2_init+0xc8>)
 8003278:	f002 fba4 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800327c:	2360      	movs	r3, #96	; 0x60
 800327e:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8003280:	232c      	movs	r3, #44	; 0x2c
 8003282:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	2204      	movs	r2, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4803      	ldr	r0, [pc, #12]	; (80032a0 <ws2812_timer2_init+0xc8>)
 8003294:	f002 fb96 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
}
 8003298:	bf00      	nop
 800329a:	3738      	adds	r7, #56	; 0x38
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20001d70 	.word	0x20001d70

080032a4 <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ac:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <ws2812_dma_start+0x13c>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4a4b      	ldr	r2, [pc, #300]	; (80033e0 <ws2812_dma_start+0x13c>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	61d3      	str	r3, [r2, #28]
 80032b8:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <ws2812_dma_start+0x13c>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_update.Instance = DMA1_Channel2;
 80032c4:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <ws2812_dma_start+0x140>)
 80032c6:	4a48      	ldr	r2, [pc, #288]	; (80033e8 <ws2812_dma_start+0x144>)
 80032c8:	601a      	str	r2, [r3, #0]
    hdma_tim2_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ca:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <ws2812_dma_start+0x140>)
 80032cc:	2210      	movs	r2, #16
 80032ce:	605a      	str	r2, [r3, #4]
    hdma_tim2_update.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d0:	4b44      	ldr	r3, [pc, #272]	; (80033e4 <ws2812_dma_start+0x140>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
    hdma_tim2_update.Init.MemInc = DMA_MINC_DISABLE;
 80032d6:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <ws2812_dma_start+0x140>)
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]
    hdma_tim2_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032dc:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <ws2812_dma_start+0x140>)
 80032de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e2:	611a      	str	r2, [r3, #16]
    hdma_tim2_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032e4:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <ws2812_dma_start+0x140>)
 80032e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ea:	615a      	str	r2, [r3, #20]
    hdma_tim2_update.Init.Mode = DMA_CIRCULAR;
 80032ec:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <ws2812_dma_start+0x140>)
 80032ee:	2220      	movs	r2, #32
 80032f0:	619a      	str	r2, [r3, #24]
    hdma_tim2_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032f2:	4b3c      	ldr	r3, [pc, #240]	; (80033e4 <ws2812_dma_start+0x140>)
 80032f4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80032f8:	61da      	str	r2, [r3, #28]

    /* TIM2_CH1 Init */
    hdma_tim2_pwm_ch1.Instance = DMA1_Channel5;
 80032fa:	4b3c      	ldr	r3, [pc, #240]	; (80033ec <ws2812_dma_start+0x148>)
 80032fc:	4a3c      	ldr	r2, [pc, #240]	; (80033f0 <ws2812_dma_start+0x14c>)
 80032fe:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <ws2812_dma_start+0x148>)
 8003302:	2210      	movs	r2, #16
 8003304:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <ws2812_dma_start+0x148>)
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800330c:	4b37      	ldr	r3, [pc, #220]	; (80033ec <ws2812_dma_start+0x148>)
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003312:	4b36      	ldr	r3, [pc, #216]	; (80033ec <ws2812_dma_start+0x148>)
 8003314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003318:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800331a:	4b34      	ldr	r3, [pc, #208]	; (80033ec <ws2812_dma_start+0x148>)
 800331c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003320:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch1.Init.Mode = DMA_CIRCULAR;
 8003322:	4b32      	ldr	r3, [pc, #200]	; (80033ec <ws2812_dma_start+0x148>)
 8003324:	2220      	movs	r2, #32
 8003326:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003328:	4b30      	ldr	r3, [pc, #192]	; (80033ec <ws2812_dma_start+0x148>)
 800332a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800332e:	61da      	str	r2, [r3, #28]

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_pwm_ch2.Instance = DMA1_Channel7;
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <ws2812_dma_start+0x150>)
 8003332:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <ws2812_dma_start+0x154>)
 8003334:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003336:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <ws2812_dma_start+0x150>)
 8003338:	2210      	movs	r2, #16
 800333a:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <ws2812_dma_start+0x150>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch2.Init.MemInc = DMA_MINC_DISABLE;
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <ws2812_dma_start+0x150>)
 8003344:	2200      	movs	r2, #0
 8003346:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <ws2812_dma_start+0x150>)
 800334a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334e:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <ws2812_dma_start+0x150>)
 8003352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003356:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch2.Init.Mode = DMA_CIRCULAR;
 8003358:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <ws2812_dma_start+0x150>)
 800335a:	2220      	movs	r2, #32
 800335c:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800335e:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <ws2812_dma_start+0x150>)
 8003360:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003364:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim2_update);
 8003366:	481f      	ldr	r0, [pc, #124]	; (80033e4 <ws2812_dma_start+0x140>)
 8003368:	f000 ffae 	bl	80042c8 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch1);
 800336c:	481f      	ldr	r0, [pc, #124]	; (80033ec <ws2812_dma_start+0x148>)
 800336e:	f000 ffab 	bl	80042c8 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch2);
 8003372:	4820      	ldr	r0, [pc, #128]	; (80033f4 <ws2812_dma_start+0x150>)
 8003374:	f000 ffa8 	bl	80042c8 <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim2_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 8003378:	4920      	ldr	r1, [pc, #128]	; (80033fc <ws2812_dma_start+0x158>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3310      	adds	r3, #16
 800337e:	461a      	mov	r2, r3
 8003380:	2310      	movs	r3, #16
 8003382:	4818      	ldr	r0, [pc, #96]	; (80033e4 <ws2812_dma_start+0x140>)
 8003384:	f000 fffa 	bl	800437c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_pwm_ch1, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 8003388:	491d      	ldr	r1, [pc, #116]	; (8003400 <ws2812_dma_start+0x15c>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3314      	adds	r3, #20
 800338e:	461a      	mov	r2, r3
 8003390:	2310      	movs	r3, #16
 8003392:	4816      	ldr	r0, [pc, #88]	; (80033ec <ws2812_dma_start+0x148>)
 8003394:	f000 fff2 	bl	800437c <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim2_pwm_ch2, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 8003398:	4918      	ldr	r1, [pc, #96]	; (80033fc <ws2812_dma_start+0x158>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3314      	adds	r3, #20
 800339e:	461a      	mov	r2, r3
 80033a0:	2310      	movs	r3, #16
 80033a2:	4814      	ldr	r0, [pc, #80]	; (80033f4 <ws2812_dma_start+0x150>)
 80033a4:	f000 ffea 	bl	800437c <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 80033a8:	4b16      	ldr	r3, [pc, #88]	; (8003404 <ws2812_dma_start+0x160>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <ws2812_dma_start+0x160>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC1);
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <ws2812_dma_start+0x160>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <ws2812_dma_start+0x160>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC2);
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <ws2812_dma_start+0x160>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <ws2812_dma_start+0x160>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d6:	60da      	str	r2, [r3, #12]
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	20001d2c 	.word	0x20001d2c
 80033e8:	4002001c 	.word	0x4002001c
 80033ec:	20001ce8 	.word	0x20001ce8
 80033f0:	40020058 	.word	0x40020058
 80033f4:	20001ca4 	.word	0x20001ca4
 80033f8:	40020080 	.word	0x40020080
 80033fc:	200009a4 	.word	0x200009a4
 8003400:	200009a8 	.word	0x200009a8
 8003404:	20001d70 	.word	0x20001d70

08003408 <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    /* If all channels are the same length, we can skip the 'pos' range check, and speed up our
     * inner loop *substantially*
     */

    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	da07      	bge.n	800342c <get_channel_byte+0x24>
        return channel->framebuffer[pos] ^ 0xff;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	43db      	mvns	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e000      	b.n	800342e <get_channel_byte+0x26>

    return 0xff;
 800342c:	23ff      	movs	r3, #255	; 0xff
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 8003438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800343c:	b087      	sub	sp, #28
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	f04f 0b00 	mov.w	fp, #0
 800344e:	2600      	movs	r6, #0
 8003450:	2500      	movs	r5, #0
 8003452:	2400      	movs	r4, #0
 8003454:	f04f 0a00 	mov.w	sl, #0
 8003458:	f04f 0900 	mov.w	r9, #0
 800345c:	f04f 0800 	mov.w	r8, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffd0 	bl	8003408 <get_channel_byte>
 8003468:	4603      	mov	r3, r0
 800346a:	75fb      	strb	r3, [r7, #23]
 800346c:	7df8      	ldrb	r0, [r7, #23]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	469e      	mov	lr, r3
 8003472:	46dc      	mov	ip, fp
 8003474:	4651      	mov	r1, sl
 8003476:	464a      	mov	r2, r9
 8003478:	4643      	mov	r3, r8
 800347a:	4680      	mov	r8, r0
 800347c:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 8003480:	f360 0e00 	bfi	lr, r0, #0, #1
 8003484:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8003488:	f360 0c00 	bfi	ip, r0, #0, #1
 800348c:	f3c8 1040 	ubfx	r0, r8, #5, #1
 8003490:	f360 0600 	bfi	r6, r0, #0, #1
 8003494:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8003498:	f360 0500 	bfi	r5, r0, #0, #1
 800349c:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 80034a0:	f360 0400 	bfi	r4, r0, #0, #1
 80034a4:	f3c8 0080 	ubfx	r0, r8, #2, #1
 80034a8:	f360 0100 	bfi	r1, r0, #0, #1
 80034ac:	f3c8 0040 	ubfx	r0, r8, #1, #1
 80034b0:	f360 0200 	bfi	r2, r0, #0, #1
 80034b4:	f3c8 0000 	ubfx	r0, r8, #0, #1
 80034b8:	f360 0300 	bfi	r3, r0, #0, #1
 80034bc:	fa1f f08e 	uxth.w	r0, lr
 80034c0:	6038      	str	r0, [r7, #0]
 80034c2:	fa1f fb8c 	uxth.w	fp, ip
 80034c6:	b2b6      	uxth	r6, r6
 80034c8:	b2ad      	uxth	r5, r5
 80034ca:	b2a4      	uxth	r4, r4
 80034cc:	fa1f fa81 	uxth.w	sl, r1
 80034d0:	fa1f f982 	uxth.w	r9, r2
 80034d4:	fa1f f883 	uxth.w	r8, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3308      	adds	r3, #8
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff92 	bl	8003408 <get_channel_byte>
 80034e4:	4603      	mov	r3, r0
 80034e6:	75fb      	strb	r3, [r7, #23]
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	4618      	mov	r0, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	469e      	mov	lr, r3
 80034f0:	46dc      	mov	ip, fp
 80034f2:	4651      	mov	r1, sl
 80034f4:	464a      	mov	r2, r9
 80034f6:	4643      	mov	r3, r8
 80034f8:	4680      	mov	r8, r0
 80034fa:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 80034fe:	f360 0e41 	bfi	lr, r0, #1, #1
 8003502:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8003506:	f360 0c41 	bfi	ip, r0, #1, #1
 800350a:	f3c8 1040 	ubfx	r0, r8, #5, #1
 800350e:	f360 0641 	bfi	r6, r0, #1, #1
 8003512:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8003516:	f360 0541 	bfi	r5, r0, #1, #1
 800351a:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 800351e:	f360 0441 	bfi	r4, r0, #1, #1
 8003522:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8003526:	f360 0141 	bfi	r1, r0, #1, #1
 800352a:	f3c8 0040 	ubfx	r0, r8, #1, #1
 800352e:	f360 0241 	bfi	r2, r0, #1, #1
 8003532:	f3c8 0000 	ubfx	r0, r8, #0, #1
 8003536:	f360 0341 	bfi	r3, r0, #1, #1
 800353a:	fa1f f08e 	uxth.w	r0, lr
 800353e:	fa1f fb8c 	uxth.w	fp, ip
 8003542:	b2b6      	uxth	r6, r6
 8003544:	b2ad      	uxth	r5, r5
 8003546:	b2a4      	uxth	r4, r4
 8003548:	fa1f fa81 	uxth.w	sl, r1
 800354c:	fa1f f982 	uxth.w	r9, r2
 8003550:	fa1f f883 	uxth.w	r8, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4602      	mov	r2, r0
 8003558:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3302      	adds	r3, #2
 800355e:	465a      	mov	r2, fp
 8003560:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3304      	adds	r3, #4
 8003566:	4632      	mov	r2, r6
 8003568:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3306      	adds	r3, #6
 800356e:	462a      	mov	r2, r5
 8003570:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3308      	adds	r3, #8
 8003576:	4622      	mov	r2, r4
 8003578:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	330a      	adds	r3, #10
 800357e:	4652      	mov	r2, sl
 8003580:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	330c      	adds	r3, #12
 8003586:	464a      	mov	r2, r9
 8003588:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	330e      	adds	r3, #14
 800358e:	4642      	mov	r2, r8
 8003590:	801a      	strh	r2, [r3, #0]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800359c <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 80035b2:	4b80      	ldr	r3, [pc, #512]	; (80037b4 <ws2812_refresh+0x218>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e00e      	b.n	80035dc <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4a7d      	ldr	r2, [pc, #500]	; (80037b8 <ws2812_refresh+0x21c>)
 80035c4:	4413      	add	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6979      	ldr	r1, [r7, #20]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff34 	bl	8003438 <fill_dma_buffer>
        pos++;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3301      	adds	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	3308      	adds	r3, #8
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b0f      	cmp	r3, #15
 80035e0:	dded      	ble.n	80035be <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e027      	b.n	8003638 <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	da05      	bge.n	8003604 <ws2812_refresh+0x68>
            max_length = channels[i].length;
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00f      	beq.n	8003632 <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 8003612:	4a6a      	ldr	r2, [pc, #424]	; (80037bc <ws2812_refresh+0x220>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	2301      	movs	r3, #1
 800361e:	4093      	lsls	r3, r2
 8003620:	b21a      	sxth	r2, r3
 8003622:	4b64      	ldr	r3, [pc, #400]	; (80037b4 <ws2812_refresh+0x218>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b21b      	sxth	r3, r3
 8003628:	4313      	orrs	r3, r2
 800362a:	b21b      	sxth	r3, r3
 800362c:	b29a      	uxth	r2, r3
 800362e:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <ws2812_refresh+0x218>)
 8003630:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	3301      	adds	r3, #1
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	ddd4      	ble.n	80035e8 <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	3302      	adds	r3, #2
 8003642:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	3303      	adds	r3, #3
 8003648:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 800364a:	4b5d      	ldr	r3, [pc, #372]	; (80037c0 <ws2812_refresh+0x224>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <ws2812_refresh+0x224>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003658:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC1);
 800365a:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <ws2812_refresh+0x224>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	4b57      	ldr	r3, [pc, #348]	; (80037c0 <ws2812_refresh+0x224>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003668:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC2);
 800366a:	4b55      	ldr	r3, [pc, #340]	; (80037c0 <ws2812_refresh+0x224>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <ws2812_refresh+0x224>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003678:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer2);
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <ws2812_refresh+0x224>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a1a      	ldr	r2, [r3, #32]
 8003680:	f241 1311 	movw	r3, #4369	; 0x1111
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10f      	bne.n	80036aa <ws2812_refresh+0x10e>
 800368a:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <ws2812_refresh+0x224>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a1a      	ldr	r2, [r3, #32]
 8003690:	f240 4344 	movw	r3, #1092	; 0x444
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <ws2812_refresh+0x10e>
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <ws2812_refresh+0x224>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <ws2812_refresh+0x224>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 80036aa:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <ws2812_refresh+0x218>)
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer2);
 80036b4:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <ws2812_refresh+0x224>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <ws2812_refresh+0x224>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 80036c4:	2300      	movs	r3, #0
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	e00f      	b.n	80036ea <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer2, TIM_FLAG_UPDATE));
 80036ca:	bf00      	nop
 80036cc:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <ws2812_refresh+0x224>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d1f8      	bne.n	80036cc <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer2, TIM_FLAG_UPDATE);
 80036da:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <ws2812_refresh+0x224>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f06f 0201 	mvn.w	r2, #1
 80036e2:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2be0      	cmp	r3, #224	; 0xe0
 80036ee:	ddec      	ble.n	80036ca <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer2);
 80036f0:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <ws2812_refresh+0x224>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10f      	bne.n	8003720 <ws2812_refresh+0x184>
 8003700:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <ws2812_refresh+0x224>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6a1a      	ldr	r2, [r3, #32]
 8003706:	f240 4344 	movw	r3, #1092	; 0x444
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <ws2812_refresh+0x184>
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <ws2812_refresh+0x224>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <ws2812_refresh+0x224>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	f7ff fdbf 	bl	80032a4 <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer2, __HAL_TIM_GET_AUTORELOAD(&htimer2) - 10);
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <ws2812_refresh+0x224>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <ws2812_refresh+0x224>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3a0a      	subs	r2, #10
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <ws2812_refresh+0x228>)
 8003736:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800373a:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer2);
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <ws2812_refresh+0x224>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <ws2812_refresh+0x224>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_ISR_TCIF5 | DMA_ISR_HTIF5))) {
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <ws2812_refresh+0x228>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d103      	bne.n	8003760 <ws2812_refresh+0x1c4>
            cycles++;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	3301      	adds	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
            continue;
 800375e:	e027      	b.n	80037b0 <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <ws2812_refresh+0x21c>)
 8003762:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_ISR_TCIF5)
 8003764:	4b17      	ldr	r3, [pc, #92]	; (80037c4 <ws2812_refresh+0x228>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3310      	adds	r3, #16
 8003774:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <ws2812_refresh+0x228>)
 8003778:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800377c:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e00e      	b.n	80037a2 <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6979      	ldr	r1, [r7, #20]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe51 	bl	8003438 <fill_dma_buffer>
            pos++;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3301      	adds	r3, #1
 800379a:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	3308      	adds	r3, #8
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b07      	cmp	r3, #7
 80037a6:	dded      	ble.n	8003784 <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	dc0b      	bgt.n	80037c8 <ws2812_refresh+0x22c>
    while(1) {
 80037b0:	e7cc      	b.n	800374c <ws2812_refresh+0x1b0>
 80037b2:	bf00      	nop
 80037b4:	200009a4 	.word	0x200009a4
 80037b8:	200009a8 	.word	0x200009a8
 80037bc:	0800a8e8 	.word	0x0800a8e8
 80037c0:	20001d70 	.word	0x20001d70
 80037c4:	40020000 	.word	0x40020000
            break;
 80037c8:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer2);
 80037ca:	4b1c      	ldr	r3, [pc, #112]	; (800383c <ws2812_refresh+0x2a0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <ws2812_refresh+0x25e>
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <ws2812_refresh+0x2a0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	f240 4344 	movw	r3, #1092	; 0x444
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d107      	bne.n	80037fa <ws2812_refresh+0x25e>
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <ws2812_refresh+0x2a0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <ws2812_refresh+0x2a0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <ws2812_refresh+0x2a4>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim2_update);
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <ws2812_refresh+0x2a8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <ws2812_refresh+0x2a8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <ws2812_refresh+0x2ac>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <ws2812_refresh+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <ws2812_refresh+0x2b0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <ws2812_refresh+0x2b0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
}
 8003834:	bf00      	nop
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20001d70 	.word	0x20001d70
 8003840:	200009a4 	.word	0x200009a4
 8003844:	20001d2c 	.word	0x20001d2c
 8003848:	20001ce8 	.word	0x20001ce8
 800384c:	20001ca4 	.word	0x20001ca4

08003850 <ws2812_init>:

void ws2812_init()
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <ws2812_init+0x48>)
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	4a0f      	ldr	r2, [pc, #60]	; (8003898 <ws2812_init+0x48>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6153      	str	r3, [r2, #20]
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <ws2812_init+0x48>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	200c      	movs	r0, #12
 8003874:	f000 fcfd 	bl	8004272 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003878:	2200      	movs	r2, #0
 800387a:	2100      	movs	r1, #0
 800387c:	200f      	movs	r0, #15
 800387e:	f000 fcf8 	bl	8004272 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003882:	2200      	movs	r2, #0
 8003884:	2100      	movs	r1, #0
 8003886:	2011      	movs	r0, #17
 8003888:	f000 fcf3 	bl	8004272 <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 800388c:	f7ff fca4 	bl	80031d8 <ws2812_timer2_init>
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000

0800389c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800389c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800389e:	e003      	b.n	80038a8 <LoopCopyDataInit>

080038a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80038a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80038a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80038a6:	3104      	adds	r1, #4

080038a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80038a8:	480a      	ldr	r0, [pc, #40]	; (80038d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80038ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80038ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80038b0:	d3f6      	bcc.n	80038a0 <CopyDataInit>
  ldr r2, =_sbss
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038b4:	e002      	b.n	80038bc <LoopFillZerobss>

080038b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038b8:	f842 3b04 	str.w	r3, [r2], #4

080038bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038c0:	d3f9      	bcc.n	80038b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038c2:	f7ff fc83 	bl	80031cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038c6:	f006 fa8b 	bl	8009de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ca:	f7fd fe19 	bl	8001500 <main>
  bx lr
 80038ce:	4770      	bx	lr
  ldr r3, =_sidata
 80038d0:	0800aa40 	.word	0x0800aa40
  ldr r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038d8:	20000270 	.word	0x20000270
  ldr r2, =_sbss
 80038dc:	20000270 	.word	0x20000270
  ldr r3, = _ebss
 80038e0:	20001e00 	.word	0x20001e00

080038e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038e4:	e7fe      	b.n	80038e4 <ADC1_2_IRQHandler>
	...

080038e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_Init+0x28>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_Init+0x28>)
 80038f2:	f043 0310 	orr.w	r3, r3, #16
 80038f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f8:	2003      	movs	r0, #3
 80038fa:	f000 fcaf 	bl	800425c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038fe:	2000      	movs	r0, #0
 8003900:	f7ff fb86 	bl	8003010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003904:	f7ff f9bc 	bl	8002c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40022000 	.word	0x40022000

08003914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_IncTick+0x1c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_IncTick+0x20>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4413      	add	r3, r2
 8003924:	4a03      	ldr	r2, [pc, #12]	; (8003934 <HAL_IncTick+0x20>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	20000098 	.word	0x20000098
 8003934:	20001db8 	.word	0x20001db8

08003938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return uwTick;
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <HAL_GetTick+0x10>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	20001db8 	.word	0x20001db8

0800394c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003954:	f7ff fff0 	bl	8003938 <HAL_GetTick>
 8003958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003964:	d005      	beq.n	8003972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_Delay+0x40>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003972:	bf00      	nop
 8003974:	f7ff ffe0 	bl	8003938 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	429a      	cmp	r2, r3
 8003982:	d8f7      	bhi.n	8003974 <HAL_Delay+0x28>
  {
  }
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000098 	.word	0x20000098

08003990 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0be      	b.n	8003b30 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff f98e 	bl	8002cf0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 faf7 	bl	8003fc8 <ADC_ConversionStop_Disable>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 8099 	bne.w	8003b1e <HAL_ADC_Init+0x18e>
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 8095 	bne.w	8003b1e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	f043 0202 	orr.w	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7b1b      	ldrb	r3, [r3, #12]
 8003a16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a28:	d003      	beq.n	8003a32 <HAL_ADC_Init+0xa2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d102      	bne.n	8003a38 <HAL_ADC_Init+0xa8>
 8003a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a36:	e000      	b.n	8003a3a <HAL_ADC_Init+0xaa>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7d1b      	ldrb	r3, [r3, #20]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d119      	bne.n	8003a7c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7b1b      	ldrb	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	035a      	lsls	r2, r3, #13
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	e00b      	b.n	8003a7c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	f043 0201 	orr.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <HAL_ADC_Init+0x1a8>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aac:	d003      	beq.n	8003ab6 <HAL_ADC_Init+0x126>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d104      	bne.n	8003ac0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	051b      	lsls	r3, r3, #20
 8003abe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <HAL_ADC_Init+0x1ac>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d10b      	bne.n	8003afc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	f043 0201 	orr.w	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003afa:	e018      	b.n	8003b2e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f023 0312 	bic.w	r3, r3, #18
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b1c:	e007      	b.n	8003b2e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f043 0210 	orr.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	ffe1f7fd 	.word	0xffe1f7fd
 8003b3c:	ff1f0efe 	.word	0xff1f0efe

08003b40 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a64      	ldr	r2, [pc, #400]	; (8003ce8 <HAL_ADC_Start_DMA+0x1a8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_ADC_Start_DMA+0x24>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a63      	ldr	r2, [pc, #396]	; (8003cec <HAL_ADC_Start_DMA+0x1ac>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d106      	bne.n	8003b72 <HAL_ADC_Start_DMA+0x32>
 8003b64:	4b60      	ldr	r3, [pc, #384]	; (8003ce8 <HAL_ADC_Start_DMA+0x1a8>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f040 80b3 	bne.w	8003cd8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_Start_DMA+0x40>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0ae      	b.n	8003cde <HAL_ADC_Start_DMA+0x19e>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f9cb 	bl	8003f24 <ADC_Enable>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 809a 	bne.w	8003cce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4e      	ldr	r2, [pc, #312]	; (8003cec <HAL_ADC_Start_DMA+0x1ac>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d105      	bne.n	8003bc4 <HAL_ADC_Start_DMA+0x84>
 8003bb8:	4b4b      	ldr	r3, [pc, #300]	; (8003ce8 <HAL_ADC_Start_DMA+0x1a8>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d115      	bne.n	8003bf0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d026      	beq.n	8003c2c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003be6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bee:	e01d      	b.n	8003c2c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <HAL_ADC_Start_DMA+0x1a8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_ADC_Start_DMA+0xd0>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a38      	ldr	r2, [pc, #224]	; (8003cec <HAL_ADC_Start_DMA+0x1ac>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10d      	bne.n	8003c2c <HAL_ADC_Start_DMA+0xec>
 8003c10:	4b35      	ldr	r3, [pc, #212]	; (8003ce8 <HAL_ADC_Start_DMA+0x1a8>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f023 0206 	bic.w	r2, r3, #6
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c44:	e002      	b.n	8003c4c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <HAL_ADC_Start_DMA+0x1b0>)
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <HAL_ADC_Start_DMA+0x1b4>)
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <HAL_ADC_Start_DMA+0x1b8>)
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0202 	mvn.w	r2, #2
 8003c74:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c84:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a18      	ldr	r0, [r3, #32]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	334c      	adds	r3, #76	; 0x4c
 8003c90:	4619      	mov	r1, r3
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f000 fbb3 	bl	8004400 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ca4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003ca8:	d108      	bne.n	8003cbc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003cb8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003cba:	e00f      	b.n	8003cdc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003cca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ccc:	e006      	b.n	8003cdc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003cd6:	e001      	b.n	8003cdc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40012400 	.word	0x40012400
 8003cec:	40012800 	.word	0x40012800
 8003cf0:	0800403d 	.word	0x0800403d
 8003cf4:	080040b9 	.word	0x080040b9
 8003cf8:	080040d5 	.word	0x080040d5

08003cfc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
	...

08003d34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x20>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0dc      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x1da>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b06      	cmp	r3, #6
 8003d62:	d81c      	bhi.n	8003d9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	3b05      	subs	r3, #5
 8003d76:	221f      	movs	r2, #31
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	4019      	ands	r1, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3b05      	subs	r3, #5
 8003d90:	fa00 f203 	lsl.w	r2, r0, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d9c:	e03c      	b.n	8003e18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d81c      	bhi.n	8003de0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	3b23      	subs	r3, #35	; 0x23
 8003db8:	221f      	movs	r2, #31
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	4019      	ands	r1, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	3b23      	subs	r3, #35	; 0x23
 8003dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8003dde:	e01b      	b.n	8003e18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	3b41      	subs	r3, #65	; 0x41
 8003df2:	221f      	movs	r2, #31
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	4019      	ands	r1, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	3b41      	subs	r3, #65	; 0x41
 8003e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b09      	cmp	r3, #9
 8003e1e:	d91c      	bls.n	8003e5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68d9      	ldr	r1, [r3, #12]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	3b1e      	subs	r3, #30
 8003e32:	2207      	movs	r2, #7
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	4019      	ands	r1, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6898      	ldr	r0, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	3b1e      	subs	r3, #30
 8003e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	e019      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6919      	ldr	r1, [r3, #16]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	2207      	movs	r2, #7
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	4019      	ands	r1, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6898      	ldr	r0, [r3, #8]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	fa00 f203 	lsl.w	r2, r0, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d003      	beq.n	8003e9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e9a:	2b11      	cmp	r3, #17
 8003e9c:	d132      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_ADC_ConfigChannel+0x1e4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d125      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d126      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ec4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d11a      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ece:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <HAL_ADC_ConfigChannel+0x1e8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <HAL_ADC_ConfigChannel+0x1ec>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	0c9a      	lsrs	r2, r3, #18
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ee4:	e002      	b.n	8003eec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f9      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x1b2>
 8003ef2:	e007      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40012400 	.word	0x40012400
 8003f1c:	20000090 	.word	0x20000090
 8003f20:	431bde83 	.word	0x431bde83

08003f24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d039      	beq.n	8003fb6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f52:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <ADC_Enable+0x9c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <ADC_Enable+0xa0>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	0c9b      	lsrs	r3, r3, #18
 8003f5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f60:	e002      	b.n	8003f68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f9      	bne.n	8003f62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f6e:	f7ff fce3 	bl	8003938 <HAL_GetTick>
 8003f72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f74:	e018      	b.n	8003fa8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f76:	f7ff fcdf 	bl	8003938 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d911      	bls.n	8003fa8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f043 0210 	orr.w	r2, r3, #16
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e007      	b.n	8003fb8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d1df      	bne.n	8003f76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000090 	.word	0x20000090
 8003fc4:	431bde83 	.word	0x431bde83

08003fc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d127      	bne.n	8004032 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ff2:	f7ff fca1 	bl	8003938 <HAL_GetTick>
 8003ff6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ff8:	e014      	b.n	8004024 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ffa:	f7ff fc9d 	bl	8003938 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d90d      	bls.n	8004024 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	f043 0210 	orr.w	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	f043 0201 	orr.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e007      	b.n	8004034 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d0e3      	beq.n	8003ffa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004052:	2b00      	cmp	r3, #0
 8004054:	d127      	bne.n	80040a6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800406c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004070:	d115      	bne.n	800409e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004076:	2b00      	cmp	r3, #0
 8004078:	d111      	bne.n	800409e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	f043 0201 	orr.w	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff fe2c 	bl	8003cfc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80040a4:	e004      	b.n	80040b0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff fe21 	bl	8003d0e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fe10 	bl	8003d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <__NVIC_SetPriorityGrouping>:
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <__NVIC_SetPriorityGrouping+0x44>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004124:	4013      	ands	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800413a:	4a04      	ldr	r2, [pc, #16]	; (800414c <__NVIC_SetPriorityGrouping+0x44>)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	60d3      	str	r3, [r2, #12]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <__NVIC_GetPriorityGrouping>:
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <__NVIC_GetPriorityGrouping+0x18>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	f003 0307 	and.w	r3, r3, #7
}
 800415e:	4618      	mov	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <__NVIC_EnableIRQ>:
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	2b00      	cmp	r3, #0
 800417c:	db0b      	blt.n	8004196 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	f003 021f 	and.w	r2, r3, #31
 8004184:	4906      	ldr	r1, [pc, #24]	; (80041a0 <__NVIC_EnableIRQ+0x34>)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	2001      	movs	r0, #1
 800418e:	fa00 f202 	lsl.w	r2, r0, r2
 8004192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	e000e100 	.word	0xe000e100

080041a4 <__NVIC_SetPriority>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db0a      	blt.n	80041ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	490c      	ldr	r1, [pc, #48]	; (80041f0 <__NVIC_SetPriority+0x4c>)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	440b      	add	r3, r1
 80041c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041cc:	e00a      	b.n	80041e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4908      	ldr	r1, [pc, #32]	; (80041f4 <__NVIC_SetPriority+0x50>)
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	3b04      	subs	r3, #4
 80041dc:	0112      	lsls	r2, r2, #4
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	440b      	add	r3, r1
 80041e2:	761a      	strb	r2, [r3, #24]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e100 	.word	0xe000e100
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <NVIC_EncodePriority>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f1c3 0307 	rsb	r3, r3, #7
 8004212:	2b04      	cmp	r3, #4
 8004214:	bf28      	it	cs
 8004216:	2304      	movcs	r3, #4
 8004218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3304      	adds	r3, #4
 800421e:	2b06      	cmp	r3, #6
 8004220:	d902      	bls.n	8004228 <NVIC_EncodePriority+0x30>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3b03      	subs	r3, #3
 8004226:	e000      	b.n	800422a <NVIC_EncodePriority+0x32>
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800422c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	401a      	ands	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43d9      	mvns	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	4313      	orrs	r3, r2
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff ff4f 	bl	8004108 <__NVIC_SetPriorityGrouping>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004272:	b580      	push	{r7, lr}
 8004274:	b086      	sub	sp, #24
 8004276:	af00      	add	r7, sp, #0
 8004278:	4603      	mov	r3, r0
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004284:	f7ff ff64 	bl	8004150 <__NVIC_GetPriorityGrouping>
 8004288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	6978      	ldr	r0, [r7, #20]
 8004290:	f7ff ffb2 	bl	80041f8 <NVIC_EncodePriority>
 8004294:	4602      	mov	r2, r0
 8004296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff81 	bl	80041a4 <__NVIC_SetPriority>
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	4603      	mov	r3, r0
 80042b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ff57 	bl	800416c <__NVIC_EnableIRQ>
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e043      	b.n	8004366 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_DMA_Init+0xa8>)
 80042e6:	4413      	add	r3, r2
 80042e8:	4a22      	ldr	r2, [pc, #136]	; (8004374 <HAL_DMA_Init+0xac>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	009a      	lsls	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <HAL_DMA_Init+0xb0>)
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004312:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004316:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800432c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	bffdfff8 	.word	0xbffdfff8
 8004374:	cccccccd 	.word	0xcccccccd
 8004378:	40020000 	.word	0x40020000

0800437c <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_DMA_Start+0x20>
 8004398:	2302      	movs	r3, #2
 800439a:	e02d      	b.n	80043f8 <HAL_DMA_Start+0x7c>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d11d      	bne.n	80043ea <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f97a 	bl	80046cc <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e005      	b.n	80043f6 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
 80043f4:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_DMA_Start_IT+0x20>
 800441c:	2302      	movs	r3, #2
 800441e:	e04a      	b.n	80044b6 <HAL_DMA_Start_IT+0xb6>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800442e:	2b01      	cmp	r3, #1
 8004430:	d13a      	bne.n	80044a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f938 	bl	80046cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 020e 	orr.w	r2, r2, #14
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e00f      	b.n	8004496 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0204 	bic.w	r2, r2, #4
 8004484:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 020a 	orr.w	r2, r2, #10
 8004494:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e005      	b.n	80044b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
 80044b2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2204      	movs	r2, #4
 80044de:	409a      	lsls	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d04f      	beq.n	8004588 <HAL_DMA_IRQHandler+0xc8>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04a      	beq.n	8004588 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a66      	ldr	r2, [pc, #408]	; (80046b0 <HAL_DMA_IRQHandler+0x1f0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d029      	beq.n	800456e <HAL_DMA_IRQHandler+0xae>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <HAL_DMA_IRQHandler+0x1f4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_DMA_IRQHandler+0xaa>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a63      	ldr	r2, [pc, #396]	; (80046b8 <HAL_DMA_IRQHandler+0x1f8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01a      	beq.n	8004564 <HAL_DMA_IRQHandler+0xa4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a62      	ldr	r2, [pc, #392]	; (80046bc <HAL_DMA_IRQHandler+0x1fc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d012      	beq.n	800455e <HAL_DMA_IRQHandler+0x9e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a60      	ldr	r2, [pc, #384]	; (80046c0 <HAL_DMA_IRQHandler+0x200>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00a      	beq.n	8004558 <HAL_DMA_IRQHandler+0x98>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a5f      	ldr	r2, [pc, #380]	; (80046c4 <HAL_DMA_IRQHandler+0x204>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d102      	bne.n	8004552 <HAL_DMA_IRQHandler+0x92>
 800454c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004550:	e00e      	b.n	8004570 <HAL_DMA_IRQHandler+0xb0>
 8004552:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004556:	e00b      	b.n	8004570 <HAL_DMA_IRQHandler+0xb0>
 8004558:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800455c:	e008      	b.n	8004570 <HAL_DMA_IRQHandler+0xb0>
 800455e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004562:	e005      	b.n	8004570 <HAL_DMA_IRQHandler+0xb0>
 8004564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004568:	e002      	b.n	8004570 <HAL_DMA_IRQHandler+0xb0>
 800456a:	2340      	movs	r3, #64	; 0x40
 800456c:	e000      	b.n	8004570 <HAL_DMA_IRQHandler+0xb0>
 800456e:	2304      	movs	r3, #4
 8004570:	4a55      	ldr	r2, [pc, #340]	; (80046c8 <HAL_DMA_IRQHandler+0x208>)
 8004572:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8094 	beq.w	80046a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004586:	e08e      	b.n	80046a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	2202      	movs	r2, #2
 800458e:	409a      	lsls	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d056      	beq.n	8004646 <HAL_DMA_IRQHandler+0x186>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d051      	beq.n	8004646 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 020a 	bic.w	r2, r2, #10
 80045be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a38      	ldr	r2, [pc, #224]	; (80046b0 <HAL_DMA_IRQHandler+0x1f0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d029      	beq.n	8004626 <HAL_DMA_IRQHandler+0x166>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a37      	ldr	r2, [pc, #220]	; (80046b4 <HAL_DMA_IRQHandler+0x1f4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_DMA_IRQHandler+0x162>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a35      	ldr	r2, [pc, #212]	; (80046b8 <HAL_DMA_IRQHandler+0x1f8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01a      	beq.n	800461c <HAL_DMA_IRQHandler+0x15c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a34      	ldr	r2, [pc, #208]	; (80046bc <HAL_DMA_IRQHandler+0x1fc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d012      	beq.n	8004616 <HAL_DMA_IRQHandler+0x156>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a32      	ldr	r2, [pc, #200]	; (80046c0 <HAL_DMA_IRQHandler+0x200>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00a      	beq.n	8004610 <HAL_DMA_IRQHandler+0x150>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a31      	ldr	r2, [pc, #196]	; (80046c4 <HAL_DMA_IRQHandler+0x204>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d102      	bne.n	800460a <HAL_DMA_IRQHandler+0x14a>
 8004604:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004608:	e00e      	b.n	8004628 <HAL_DMA_IRQHandler+0x168>
 800460a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800460e:	e00b      	b.n	8004628 <HAL_DMA_IRQHandler+0x168>
 8004610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004614:	e008      	b.n	8004628 <HAL_DMA_IRQHandler+0x168>
 8004616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800461a:	e005      	b.n	8004628 <HAL_DMA_IRQHandler+0x168>
 800461c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004620:	e002      	b.n	8004628 <HAL_DMA_IRQHandler+0x168>
 8004622:	2320      	movs	r3, #32
 8004624:	e000      	b.n	8004628 <HAL_DMA_IRQHandler+0x168>
 8004626:	2302      	movs	r3, #2
 8004628:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <HAL_DMA_IRQHandler+0x208>)
 800462a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	d034      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004644:	e02f      	b.n	80046a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	2208      	movs	r2, #8
 800464c:	409a      	lsls	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d028      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x1e8>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d023      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 020e 	bic.w	r2, r2, #14
 800466e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	2101      	movs	r1, #1
 800467a:	fa01 f202 	lsl.w	r2, r1, r2
 800467e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
    }
  }
  return;
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
}
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40020008 	.word	0x40020008
 80046b4:	4002001c 	.word	0x4002001c
 80046b8:	40020030 	.word	0x40020030
 80046bc:	40020044 	.word	0x40020044
 80046c0:	40020058 	.word	0x40020058
 80046c4:	4002006c 	.word	0x4002006c
 80046c8:	40020000 	.word	0x40020000

080046cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	2101      	movs	r1, #1
 80046e4:	fa01 f202 	lsl.w	r2, r1, r2
 80046e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d108      	bne.n	800470c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800470a:	e007      	b.n	800471c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
	...

08004728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004728:	b480      	push	{r7}
 800472a:	b08b      	sub	sp, #44	; 0x2c
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004736:	2300      	movs	r3, #0
 8004738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800473a:	e127      	b.n	800498c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800473c:	2201      	movs	r2, #1
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	429a      	cmp	r2, r3
 8004756:	f040 8116 	bne.w	8004986 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b12      	cmp	r3, #18
 8004760:	d034      	beq.n	80047cc <HAL_GPIO_Init+0xa4>
 8004762:	2b12      	cmp	r3, #18
 8004764:	d80d      	bhi.n	8004782 <HAL_GPIO_Init+0x5a>
 8004766:	2b02      	cmp	r3, #2
 8004768:	d02b      	beq.n	80047c2 <HAL_GPIO_Init+0x9a>
 800476a:	2b02      	cmp	r3, #2
 800476c:	d804      	bhi.n	8004778 <HAL_GPIO_Init+0x50>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d031      	beq.n	80047d6 <HAL_GPIO_Init+0xae>
 8004772:	2b01      	cmp	r3, #1
 8004774:	d01c      	beq.n	80047b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004776:	e048      	b.n	800480a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004778:	2b03      	cmp	r3, #3
 800477a:	d043      	beq.n	8004804 <HAL_GPIO_Init+0xdc>
 800477c:	2b11      	cmp	r3, #17
 800477e:	d01b      	beq.n	80047b8 <HAL_GPIO_Init+0x90>
          break;
 8004780:	e043      	b.n	800480a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004782:	4a89      	ldr	r2, [pc, #548]	; (80049a8 <HAL_GPIO_Init+0x280>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d026      	beq.n	80047d6 <HAL_GPIO_Init+0xae>
 8004788:	4a87      	ldr	r2, [pc, #540]	; (80049a8 <HAL_GPIO_Init+0x280>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d806      	bhi.n	800479c <HAL_GPIO_Init+0x74>
 800478e:	4a87      	ldr	r2, [pc, #540]	; (80049ac <HAL_GPIO_Init+0x284>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d020      	beq.n	80047d6 <HAL_GPIO_Init+0xae>
 8004794:	4a86      	ldr	r2, [pc, #536]	; (80049b0 <HAL_GPIO_Init+0x288>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01d      	beq.n	80047d6 <HAL_GPIO_Init+0xae>
          break;
 800479a:	e036      	b.n	800480a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800479c:	4a85      	ldr	r2, [pc, #532]	; (80049b4 <HAL_GPIO_Init+0x28c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d019      	beq.n	80047d6 <HAL_GPIO_Init+0xae>
 80047a2:	4a85      	ldr	r2, [pc, #532]	; (80049b8 <HAL_GPIO_Init+0x290>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d016      	beq.n	80047d6 <HAL_GPIO_Init+0xae>
 80047a8:	4a84      	ldr	r2, [pc, #528]	; (80049bc <HAL_GPIO_Init+0x294>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_GPIO_Init+0xae>
          break;
 80047ae:	e02c      	b.n	800480a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	623b      	str	r3, [r7, #32]
          break;
 80047b6:	e028      	b.n	800480a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	3304      	adds	r3, #4
 80047be:	623b      	str	r3, [r7, #32]
          break;
 80047c0:	e023      	b.n	800480a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	3308      	adds	r3, #8
 80047c8:	623b      	str	r3, [r7, #32]
          break;
 80047ca:	e01e      	b.n	800480a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	330c      	adds	r3, #12
 80047d2:	623b      	str	r3, [r7, #32]
          break;
 80047d4:	e019      	b.n	800480a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047de:	2304      	movs	r3, #4
 80047e0:	623b      	str	r3, [r7, #32]
          break;
 80047e2:	e012      	b.n	800480a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047ec:	2308      	movs	r3, #8
 80047ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	611a      	str	r2, [r3, #16]
          break;
 80047f6:	e008      	b.n	800480a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047f8:	2308      	movs	r3, #8
 80047fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	615a      	str	r2, [r3, #20]
          break;
 8004802:	e002      	b.n	800480a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
          break;
 8004808:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2bff      	cmp	r3, #255	; 0xff
 800480e:	d801      	bhi.n	8004814 <HAL_GPIO_Init+0xec>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	e001      	b.n	8004818 <HAL_GPIO_Init+0xf0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2bff      	cmp	r3, #255	; 0xff
 800481e:	d802      	bhi.n	8004826 <HAL_GPIO_Init+0xfe>
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	e002      	b.n	800482c <HAL_GPIO_Init+0x104>
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	3b08      	subs	r3, #8
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	210f      	movs	r1, #15
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	401a      	ands	r2, r3
 800483e:	6a39      	ldr	r1, [r7, #32]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	431a      	orrs	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8096 	beq.w	8004986 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800485a:	4b59      	ldr	r3, [pc, #356]	; (80049c0 <HAL_GPIO_Init+0x298>)
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	4a58      	ldr	r2, [pc, #352]	; (80049c0 <HAL_GPIO_Init+0x298>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6193      	str	r3, [r2, #24]
 8004866:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <HAL_GPIO_Init+0x298>)
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004872:	4a54      	ldr	r2, [pc, #336]	; (80049c4 <HAL_GPIO_Init+0x29c>)
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	220f      	movs	r2, #15
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4013      	ands	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4b      	ldr	r2, [pc, #300]	; (80049c8 <HAL_GPIO_Init+0x2a0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_GPIO_Init+0x19e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4a      	ldr	r2, [pc, #296]	; (80049cc <HAL_GPIO_Init+0x2a4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00d      	beq.n	80048c2 <HAL_GPIO_Init+0x19a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a49      	ldr	r2, [pc, #292]	; (80049d0 <HAL_GPIO_Init+0x2a8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <HAL_GPIO_Init+0x196>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a48      	ldr	r2, [pc, #288]	; (80049d4 <HAL_GPIO_Init+0x2ac>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <HAL_GPIO_Init+0x192>
 80048b6:	2303      	movs	r3, #3
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x1a0>
 80048ba:	2304      	movs	r3, #4
 80048bc:	e004      	b.n	80048c8 <HAL_GPIO_Init+0x1a0>
 80048be:	2302      	movs	r3, #2
 80048c0:	e002      	b.n	80048c8 <HAL_GPIO_Init+0x1a0>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_GPIO_Init+0x1a0>
 80048c6:	2300      	movs	r3, #0
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	f002 0203 	and.w	r2, r2, #3
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	4093      	lsls	r3, r2
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048d8:	493a      	ldr	r1, [pc, #232]	; (80049c4 <HAL_GPIO_Init+0x29c>)
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3302      	adds	r3, #2
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d006      	beq.n	8004900 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048f2:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4938      	ldr	r1, [pc, #224]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]
 80048fe:	e006      	b.n	800490e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004900:	4b35      	ldr	r3, [pc, #212]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	43db      	mvns	r3, r3
 8004908:	4933      	ldr	r1, [pc, #204]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 800490a:	4013      	ands	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800491a:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	492e      	ldr	r1, [pc, #184]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
 8004926:	e006      	b.n	8004936 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	43db      	mvns	r3, r3
 8004930:	4929      	ldr	r1, [pc, #164]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004932:	4013      	ands	r3, r2
 8004934:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004942:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4924      	ldr	r1, [pc, #144]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
 800494e:	e006      	b.n	800495e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	43db      	mvns	r3, r3
 8004958:	491f      	ldr	r1, [pc, #124]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 800495a:	4013      	ands	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800496a:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	491a      	ldr	r1, [pc, #104]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	4313      	orrs	r3, r2
 8004974:	60cb      	str	r3, [r1, #12]
 8004976:	e006      	b.n	8004986 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	43db      	mvns	r3, r3
 8004980:	4915      	ldr	r1, [pc, #84]	; (80049d8 <HAL_GPIO_Init+0x2b0>)
 8004982:	4013      	ands	r3, r2
 8004984:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	3301      	adds	r3, #1
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	f47f aed0 	bne.w	800473c <HAL_GPIO_Init+0x14>
  }
}
 800499c:	bf00      	nop
 800499e:	372c      	adds	r7, #44	; 0x2c
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	10210000 	.word	0x10210000
 80049ac:	10110000 	.word	0x10110000
 80049b0:	10120000 	.word	0x10120000
 80049b4:	10310000 	.word	0x10310000
 80049b8:	10320000 	.word	0x10320000
 80049bc:	10220000 	.word	0x10220000
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40010800 	.word	0x40010800
 80049cc:	40010c00 	.word	0x40010c00
 80049d0:	40011000 	.word	0x40011000
 80049d4:	40011400 	.word	0x40011400
 80049d8:	40010400 	.word	0x40010400

080049dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	807b      	strh	r3, [r7, #2]
 80049e8:	4613      	mov	r3, r2
 80049ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049ec:	787b      	ldrb	r3, [r7, #1]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049f8:	e003      	b.n	8004a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049fa:	887b      	ldrh	r3, [r7, #2]
 80049fc:	041a      	lsls	r2, r3, #16
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	611a      	str	r2, [r3, #16]
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e26c      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8087 	beq.w	8004b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a2c:	4b92      	ldr	r3, [pc, #584]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d00c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a38:	4b8f      	ldr	r3, [pc, #572]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d112      	bne.n	8004a6a <HAL_RCC_OscConfig+0x5e>
 8004a44:	4b8c      	ldr	r3, [pc, #560]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d10b      	bne.n	8004a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a52:	4b89      	ldr	r3, [pc, #548]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d06c      	beq.n	8004b38 <HAL_RCC_OscConfig+0x12c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d168      	bne.n	8004b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e246      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a72:	d106      	bne.n	8004a82 <HAL_RCC_OscConfig+0x76>
 8004a74:	4b80      	ldr	r3, [pc, #512]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a7f      	ldr	r2, [pc, #508]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e02e      	b.n	8004ae0 <HAL_RCC_OscConfig+0xd4>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x98>
 8004a8a:	4b7b      	ldr	r3, [pc, #492]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7a      	ldr	r2, [pc, #488]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b78      	ldr	r3, [pc, #480]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a77      	ldr	r2, [pc, #476]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e01d      	b.n	8004ae0 <HAL_RCC_OscConfig+0xd4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xbc>
 8004aae:	4b72      	ldr	r3, [pc, #456]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a71      	ldr	r2, [pc, #452]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	4b6f      	ldr	r3, [pc, #444]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6e      	ldr	r2, [pc, #440]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e00b      	b.n	8004ae0 <HAL_RCC_OscConfig+0xd4>
 8004ac8:	4b6b      	ldr	r3, [pc, #428]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6a      	ldr	r2, [pc, #424]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a67      	ldr	r2, [pc, #412]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fe ff26 	bl	8003938 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fe ff22 	bl	8003938 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e1fa      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	4b5d      	ldr	r3, [pc, #372]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0xe4>
 8004b0e:	e014      	b.n	8004b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b10:	f7fe ff12 	bl	8003938 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b18:	f7fe ff0e 	bl	8003938 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e1e6      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2a:	4b53      	ldr	r3, [pc, #332]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x10c>
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d063      	beq.n	8004c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b46:	4b4c      	ldr	r3, [pc, #304]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b52:	4b49      	ldr	r3, [pc, #292]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d11c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x18c>
 8004b5e:	4b46      	ldr	r3, [pc, #280]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d116      	bne.n	8004b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6a:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_RCC_OscConfig+0x176>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e1ba      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b82:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4939      	ldr	r1, [pc, #228]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b96:	e03a      	b.n	8004c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d020      	beq.n	8004be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba0:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba6:	f7fe fec7 	bl	8003938 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bae:	f7fe fec3 	bl	8003938 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e19b      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc0:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bcc:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	4927      	ldr	r1, [pc, #156]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]
 8004be0:	e015      	b.n	8004c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be2:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be8:	f7fe fea6 	bl	8003938 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf0:	f7fe fea2 	bl	8003938 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e17a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d03a      	beq.n	8004c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d019      	beq.n	8004c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <HAL_RCC_OscConfig+0x274>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c28:	f7fe fe86 	bl	8003938 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c30:	f7fe fe82 	bl	8003938 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e15a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c4e:	2001      	movs	r0, #1
 8004c50:	f000 faf6 	bl	8005240 <RCC_Delay>
 8004c54:	e01c      	b.n	8004c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_RCC_OscConfig+0x274>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5c:	f7fe fe6c 	bl	8003938 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c62:	e00f      	b.n	8004c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c64:	f7fe fe68 	bl	8003938 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d908      	bls.n	8004c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e140      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	42420000 	.word	0x42420000
 8004c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c84:	4b9e      	ldr	r3, [pc, #632]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e9      	bne.n	8004c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80a6 	beq.w	8004dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca2:	4b97      	ldr	r3, [pc, #604]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10d      	bne.n	8004cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	4b94      	ldr	r3, [pc, #592]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	4a93      	ldr	r2, [pc, #588]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	61d3      	str	r3, [r2, #28]
 8004cba:	4b91      	ldr	r3, [pc, #580]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	4b8e      	ldr	r3, [pc, #568]	; (8004f04 <HAL_RCC_OscConfig+0x4f8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d118      	bne.n	8004d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd6:	4b8b      	ldr	r3, [pc, #556]	; (8004f04 <HAL_RCC_OscConfig+0x4f8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a8a      	ldr	r2, [pc, #552]	; (8004f04 <HAL_RCC_OscConfig+0x4f8>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce2:	f7fe fe29 	bl	8003938 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cea:	f7fe fe25 	bl	8003938 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b64      	cmp	r3, #100	; 0x64
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e0fd      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	4b81      	ldr	r3, [pc, #516]	; (8004f04 <HAL_RCC_OscConfig+0x4f8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d106      	bne.n	8004d1e <HAL_RCC_OscConfig+0x312>
 8004d10:	4b7b      	ldr	r3, [pc, #492]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	4a7a      	ldr	r2, [pc, #488]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6213      	str	r3, [r2, #32]
 8004d1c:	e02d      	b.n	8004d7a <HAL_RCC_OscConfig+0x36e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x334>
 8004d26:	4b76      	ldr	r3, [pc, #472]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	4a75      	ldr	r2, [pc, #468]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	6213      	str	r3, [r2, #32]
 8004d32:	4b73      	ldr	r3, [pc, #460]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4a72      	ldr	r2, [pc, #456]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	6213      	str	r3, [r2, #32]
 8004d3e:	e01c      	b.n	8004d7a <HAL_RCC_OscConfig+0x36e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCC_OscConfig+0x356>
 8004d48:	4b6d      	ldr	r3, [pc, #436]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4a6c      	ldr	r2, [pc, #432]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	6213      	str	r3, [r2, #32]
 8004d54:	4b6a      	ldr	r3, [pc, #424]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	4a69      	ldr	r2, [pc, #420]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6213      	str	r3, [r2, #32]
 8004d60:	e00b      	b.n	8004d7a <HAL_RCC_OscConfig+0x36e>
 8004d62:	4b67      	ldr	r3, [pc, #412]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4a66      	ldr	r2, [pc, #408]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	6213      	str	r3, [r2, #32]
 8004d6e:	4b64      	ldr	r3, [pc, #400]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	4a63      	ldr	r2, [pc, #396]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d015      	beq.n	8004dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d82:	f7fe fdd9 	bl	8003938 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fe fdd5 	bl	8003938 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e0ab      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	4b57      	ldr	r3, [pc, #348]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ee      	beq.n	8004d8a <HAL_RCC_OscConfig+0x37e>
 8004dac:	e014      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dae:	f7fe fdc3 	bl	8003938 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fe fdbf 	bl	8003938 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e095      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dcc:	4b4c      	ldr	r3, [pc, #304]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ee      	bne.n	8004db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dde:	4b48      	ldr	r3, [pc, #288]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	4a47      	ldr	r2, [pc, #284]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8081 	beq.w	8004ef6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d061      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d146      	bne.n	8004e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <HAL_RCC_OscConfig+0x4fc>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fe fd93 	bl	8003938 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fe fd8f 	bl	8003938 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e067      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e28:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3c:	d108      	bne.n	8004e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e3e:	4b30      	ldr	r3, [pc, #192]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	492d      	ldr	r1, [pc, #180]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e50:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a19      	ldr	r1, [r3, #32]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	430b      	orrs	r3, r1
 8004e62:	4927      	ldr	r1, [pc, #156]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e68:	4b27      	ldr	r3, [pc, #156]	; (8004f08 <HAL_RCC_OscConfig+0x4fc>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6e:	f7fe fd63 	bl	8003938 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e76:	f7fe fd5f 	bl	8003938 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e037      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x46a>
 8004e94:	e02f      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b1c      	ldr	r3, [pc, #112]	; (8004f08 <HAL_RCC_OscConfig+0x4fc>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fe fd4c 	bl	8003938 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fe fd48 	bl	8003938 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e020      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x498>
 8004ec2:	e018      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e013      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_OscConfig+0x4f4>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40007000 	.word	0x40007000
 8004f08:	42420060 	.word	0x42420060

08004f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0d0      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f20:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d910      	bls.n	8004f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b67      	ldr	r3, [pc, #412]	; (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 0207 	bic.w	r2, r3, #7
 8004f36:	4965      	ldr	r1, [pc, #404]	; (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b63      	ldr	r3, [pc, #396]	; (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0b8      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d020      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f68:	4b59      	ldr	r3, [pc, #356]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a58      	ldr	r2, [pc, #352]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f80:	4b53      	ldr	r3, [pc, #332]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4a52      	ldr	r2, [pc, #328]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f8c:	4b50      	ldr	r3, [pc, #320]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	494d      	ldr	r1, [pc, #308]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d040      	beq.n	800502c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d115      	bne.n	8004fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e07f      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d107      	bne.n	8004fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fca:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e073      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fda:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e06b      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fea:	4b39      	ldr	r3, [pc, #228]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f023 0203 	bic.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4936      	ldr	r1, [pc, #216]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ffc:	f7fe fc9c 	bl	8003938 <HAL_GetTick>
 8005000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	e00a      	b.n	800501a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005004:	f7fe fc98 	bl	8003938 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e053      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501a:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f003 020c 	and.w	r2, r3, #12
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	429a      	cmp	r2, r3
 800502a:	d1eb      	bne.n	8005004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800502c:	4b27      	ldr	r3, [pc, #156]	; (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d210      	bcs.n	800505c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 0207 	bic.w	r2, r3, #7
 8005042:	4922      	ldr	r1, [pc, #136]	; (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b20      	ldr	r3, [pc, #128]	; (80050cc <HAL_RCC_ClockConfig+0x1c0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e032      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005068:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4916      	ldr	r1, [pc, #88]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005086:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	490e      	ldr	r1, [pc, #56]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800509a:	f000 f821 	bl	80050e0 <HAL_RCC_GetSysClockFreq>
 800509e:	4601      	mov	r1, r0
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	091b      	lsrs	r3, r3, #4
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 80050ac:	5cd3      	ldrb	r3, [r2, r3]
 80050ae:	fa21 f303 	lsr.w	r3, r1, r3
 80050b2:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <HAL_RCC_ClockConfig+0x1cc>)
 80050b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <HAL_RCC_ClockConfig+0x1d0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fd ffa8 	bl	8003010 <HAL_InitTick>

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40022000 	.word	0x40022000
 80050d0:	40021000 	.word	0x40021000
 80050d4:	0800a8d0 	.word	0x0800a8d0
 80050d8:	20000090 	.word	0x20000090
 80050dc:	20000094 	.word	0x20000094

080050e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e0:	b490      	push	{r4, r7}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050e6:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050e8:	1d3c      	adds	r4, r7, #4
 80050ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80050f0:	4b28      	ldr	r3, [pc, #160]	; (8005194 <HAL_RCC_GetSysClockFreq+0xb4>)
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	2300      	movs	r3, #0
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	2300      	movs	r3, #0
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800510a:	4b23      	ldr	r3, [pc, #140]	; (8005198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b04      	cmp	r3, #4
 8005118:	d002      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x40>
 800511a:	2b08      	cmp	r3, #8
 800511c:	d003      	beq.n	8005126 <HAL_RCC_GetSysClockFreq+0x46>
 800511e:	e02d      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005122:	623b      	str	r3, [r7, #32]
      break;
 8005124:	e02d      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	0c9b      	lsrs	r3, r3, #18
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005132:	4413      	add	r3, r2
 8005134:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005138:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d013      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005144:	4b14      	ldr	r3, [pc, #80]	; (8005198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	0c5b      	lsrs	r3, r3, #17
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005152:	4413      	add	r3, r2
 8005154:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005158:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4a0f      	ldr	r2, [pc, #60]	; (800519c <HAL_RCC_GetSysClockFreq+0xbc>)
 800515e:	fb02 f203 	mul.w	r2, r2, r3
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	e004      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005170:	fb02 f303 	mul.w	r3, r2, r3
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	623b      	str	r3, [r7, #32]
      break;
 800517a:	e002      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800517c:	4b07      	ldr	r3, [pc, #28]	; (800519c <HAL_RCC_GetSysClockFreq+0xbc>)
 800517e:	623b      	str	r3, [r7, #32]
      break;
 8005180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005182:	6a3b      	ldr	r3, [r7, #32]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3728      	adds	r7, #40	; 0x28
 8005188:	46bd      	mov	sp, r7
 800518a:	bc90      	pop	{r4, r7}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	0800a8a0 	.word	0x0800a8a0
 8005194:	0800a8b0 	.word	0x0800a8b0
 8005198:	40021000 	.word	0x40021000
 800519c:	007a1200 	.word	0x007a1200
 80051a0:	003d0900 	.word	0x003d0900

080051a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr
 80051b4:	20000090 	.word	0x20000090

080051b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051bc:	f7ff fff2 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051c0:	4601      	mov	r1, r0
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4a03      	ldr	r2, [pc, #12]	; (80051dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ce:	5cd3      	ldrb	r3, [r2, r3]
 80051d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000
 80051dc:	0800a8e0 	.word	0x0800a8e0

080051e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	220f      	movs	r2, #15
 80051ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051f0:	4b11      	ldr	r3, [pc, #68]	; (8005238 <HAL_RCC_GetClockConfig+0x58>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0203 	and.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <HAL_RCC_GetClockConfig+0x58>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCC_GetClockConfig+0x58>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <HAL_RCC_GetClockConfig+0x58>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	08db      	lsrs	r3, r3, #3
 800521a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCC_GetClockConfig+0x5c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0207 	and.w	r2, r3, #7
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	40021000 	.word	0x40021000
 800523c:	40022000 	.word	0x40022000

08005240 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <RCC_Delay+0x34>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <RCC_Delay+0x38>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	0a5b      	lsrs	r3, r3, #9
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800525c:	bf00      	nop
  }
  while (Delay --);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1e5a      	subs	r2, r3, #1
 8005262:	60fa      	str	r2, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f9      	bne.n	800525c <RCC_Delay+0x1c>
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000090 	.word	0x20000090
 8005278:	10624dd3 	.word	0x10624dd3

0800527c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d07d      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005298:	2300      	movs	r3, #0
 800529a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800529c:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a8:	4b4c      	ldr	r3, [pc, #304]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	4a4b      	ldr	r2, [pc, #300]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b2:	61d3      	str	r3, [r2, #28]
 80052b4:	4b49      	ldr	r3, [pc, #292]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c0:	2301      	movs	r3, #1
 80052c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	4b46      	ldr	r3, [pc, #280]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d118      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d0:	4b43      	ldr	r3, [pc, #268]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a42      	ldr	r2, [pc, #264]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052dc:	f7fe fb2c 	bl	8003938 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e2:	e008      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e4:	f7fe fb28 	bl	8003938 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e06d      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f6:	4b3a      	ldr	r3, [pc, #232]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005302:	4b36      	ldr	r3, [pc, #216]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d02e      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	429a      	cmp	r2, r3
 800531e:	d027      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005320:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005328:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800532a:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800532c:	2201      	movs	r2, #1
 800532e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005336:	4a29      	ldr	r2, [pc, #164]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d014      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005346:	f7fe faf7 	bl	8003938 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fe faf3 	bl	8003938 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	; 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e036      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005364:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0ee      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005370:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4917      	ldr	r1, [pc, #92]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537e:	4313      	orrs	r3, r2
 8005380:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005388:	4b14      	ldr	r3, [pc, #80]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	4a13      	ldr	r2, [pc, #76]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005392:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a0:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	490b      	ldr	r1, [pc, #44]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	4904      	ldr	r1, [pc, #16]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40007000 	.word	0x40007000
 80053e4:	42420440 	.word	0x42420440

080053e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e041      	b.n	800547e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fd fcd6 	bl	8002dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fc66 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e032      	b.n	8005506 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_TIM_Base_Start+0x88>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00e      	beq.n	80054d0 <HAL_TIM_Base_Start+0x48>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d009      	beq.n	80054d0 <HAL_TIM_Base_Start+0x48>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a14      	ldr	r2, [pc, #80]	; (8005514 <HAL_TIM_Base_Start+0x8c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_TIM_Base_Start+0x48>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a13      	ldr	r2, [pc, #76]	; (8005518 <HAL_TIM_Base_Start+0x90>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d111      	bne.n	80054f4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d010      	beq.n	8005504 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	e007      	b.n	8005504 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800

0800551c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d001      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e03a      	b.n	80055aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <HAL_TIM_Base_Start_IT+0x98>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x58>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555e:	d009      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x58>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x58>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a13      	ldr	r2, [pc, #76]	; (80055bc <HAL_TIM_Base_Start_IT+0xa0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d111      	bne.n	8005598 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b06      	cmp	r3, #6
 8005584:	d010      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0201 	orr.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005596:	e007      	b.n	80055a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800

080055c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e041      	b.n	8005656 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f839 	bl	800565e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 fb7a 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d109      	bne.n	8005694 <HAL_TIM_PWM_Start+0x24>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e022      	b.n	80056da <HAL_TIM_PWM_Start+0x6a>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d109      	bne.n	80056ae <HAL_TIM_PWM_Start+0x3e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	bf14      	ite	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	2300      	moveq	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	e015      	b.n	80056da <HAL_TIM_PWM_Start+0x6a>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d109      	bne.n	80056c8 <HAL_TIM_PWM_Start+0x58>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	e008      	b.n	80056da <HAL_TIM_PWM_Start+0x6a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e05e      	b.n	80057a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x82>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f0:	e013      	b.n	800571a <HAL_TIM_PWM_Start+0xaa>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d104      	bne.n	8005702 <HAL_TIM_PWM_Start+0x92>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005700:	e00b      	b.n	800571a <HAL_TIM_PWM_Start+0xaa>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b08      	cmp	r3, #8
 8005706:	d104      	bne.n	8005712 <HAL_TIM_PWM_Start+0xa2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	e003      	b.n	800571a <HAL_TIM_PWM_Start+0xaa>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fd68 	bl	80061f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <HAL_TIM_PWM_Start+0x138>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d107      	bne.n	8005742 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <HAL_TIM_PWM_Start+0x138>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00e      	beq.n	800576a <HAL_TIM_PWM_Start+0xfa>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d009      	beq.n	800576a <HAL_TIM_PWM_Start+0xfa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a14      	ldr	r2, [pc, #80]	; (80057ac <HAL_TIM_PWM_Start+0x13c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <HAL_TIM_PWM_Start+0xfa>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <HAL_TIM_PWM_Start+0x140>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d111      	bne.n	800578e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b06      	cmp	r3, #6
 800577a:	d010      	beq.n	800579e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	e007      	b.n	800579e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800

080057b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d122      	bne.n	8005810 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d11b      	bne.n	8005810 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0202 	mvn.w	r2, #2
 80057e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa62 	bl	8005cc0 <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa55 	bl	8005cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fa64 	bl	8005cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d122      	bne.n	8005864 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b04      	cmp	r3, #4
 800582a:	d11b      	bne.n	8005864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0204 	mvn.w	r2, #4
 8005834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa38 	bl	8005cc0 <HAL_TIM_IC_CaptureCallback>
 8005850:	e005      	b.n	800585e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa2b 	bl	8005cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fa3a 	bl	8005cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b08      	cmp	r3, #8
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b08      	cmp	r3, #8
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0208 	mvn.w	r2, #8
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2204      	movs	r2, #4
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa0e 	bl	8005cc0 <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fa01 	bl	8005cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa10 	bl	8005cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d122      	bne.n	800590c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d11b      	bne.n	800590c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0210 	mvn.w	r2, #16
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2208      	movs	r2, #8
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9e4 	bl	8005cc0 <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f9d7 	bl	8005cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f9e6 	bl	8005cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d10e      	bne.n	8005938 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d107      	bne.n	8005938 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0201 	mvn.w	r2, #1
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fd f98c 	bl	8002c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005950:	2b80      	cmp	r3, #128	; 0x80
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fd26 	bl	80063b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9aa 	bl	8005ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b20      	cmp	r3, #32
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0220 	mvn.w	r2, #32
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fcf1 	bl	800639e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059da:	2302      	movs	r3, #2
 80059dc:	e0ac      	b.n	8005b38 <HAL_TIM_PWM_ConfigChannel+0x174>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b0c      	cmp	r3, #12
 80059ea:	f200 809f 	bhi.w	8005b2c <HAL_TIM_PWM_ConfigChannel+0x168>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a29 	.word	0x08005a29
 80059f8:	08005b2d 	.word	0x08005b2d
 80059fc:	08005b2d 	.word	0x08005b2d
 8005a00:	08005b2d 	.word	0x08005b2d
 8005a04:	08005a69 	.word	0x08005a69
 8005a08:	08005b2d 	.word	0x08005b2d
 8005a0c:	08005b2d 	.word	0x08005b2d
 8005a10:	08005b2d 	.word	0x08005b2d
 8005a14:	08005aab 	.word	0x08005aab
 8005a18:	08005b2d 	.word	0x08005b2d
 8005a1c:	08005b2d 	.word	0x08005b2d
 8005a20:	08005b2d 	.word	0x08005b2d
 8005a24:	08005aeb 	.word	0x08005aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f9c4 	bl	8005dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0208 	orr.w	r2, r2, #8
 8005a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0204 	bic.w	r2, r2, #4
 8005a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6999      	ldr	r1, [r3, #24]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	619a      	str	r2, [r3, #24]
      break;
 8005a66:	e062      	b.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fa0a 	bl	8005e88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6999      	ldr	r1, [r3, #24]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	021a      	lsls	r2, r3, #8
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	619a      	str	r2, [r3, #24]
      break;
 8005aa8:	e041      	b.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fa53 	bl	8005f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0208 	orr.w	r2, r2, #8
 8005ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0204 	bic.w	r2, r2, #4
 8005ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69d9      	ldr	r1, [r3, #28]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	61da      	str	r2, [r3, #28]
      break;
 8005ae8:	e021      	b.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68b9      	ldr	r1, [r7, #8]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fa9d 	bl	8006030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69d9      	ldr	r1, [r3, #28]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	021a      	lsls	r2, r3, #8
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	61da      	str	r2, [r3, #28]
      break;
 8005b2a:	e000      	b.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005b2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_ConfigClockSource+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e0a6      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x166>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	d067      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x120>
 8005b90:	2b40      	cmp	r3, #64	; 0x40
 8005b92:	d80b      	bhi.n	8005bac <HAL_TIM_ConfigClockSource+0x6c>
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d073      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x140>
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d802      	bhi.n	8005ba2 <HAL_TIM_ConfigClockSource+0x62>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d06f      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ba0:	e078      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d06c      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x140>
 8005ba6:	2b30      	cmp	r3, #48	; 0x30
 8005ba8:	d06a      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005baa:	e073      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d00d      	beq.n	8005bcc <HAL_TIM_ConfigClockSource+0x8c>
 8005bb0:	2b70      	cmp	r3, #112	; 0x70
 8005bb2:	d804      	bhi.n	8005bbe <HAL_TIM_ConfigClockSource+0x7e>
 8005bb4:	2b50      	cmp	r3, #80	; 0x50
 8005bb6:	d033      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0xe0>
 8005bb8:	2b60      	cmp	r3, #96	; 0x60
 8005bba:	d041      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005bbc:	e06a      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc2:	d066      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x152>
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc8:	d017      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005bca:	e063      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6899      	ldr	r1, [r3, #8]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f000 faed 	bl	80061ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	609a      	str	r2, [r3, #8]
      break;
 8005bf8:	e04c      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6899      	ldr	r1, [r3, #8]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f000 fad6 	bl	80061ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c1c:	609a      	str	r2, [r3, #8]
      break;
 8005c1e:	e039      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f000 fa4d 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2150      	movs	r1, #80	; 0x50
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 faa4 	bl	8006186 <TIM_ITRx_SetConfig>
      break;
 8005c3e:	e029      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f000 fa6b 	bl	8006128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2160      	movs	r1, #96	; 0x60
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fa94 	bl	8006186 <TIM_ITRx_SetConfig>
      break;
 8005c5e:	e019      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f000 fa2d 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2140      	movs	r1, #64	; 0x40
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fa84 	bl	8006186 <TIM_ITRx_SetConfig>
      break;
 8005c7e:	e009      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f000 fa7b 	bl	8006186 <TIM_ITRx_SetConfig>
        break;
 8005c90:	e000      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr
	...

08005cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <TIM_Base_SetConfig+0xb8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0x30>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0x30>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <TIM_Base_SetConfig+0xbc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0x30>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a25      	ldr	r2, [pc, #148]	; (8005db8 <TIM_Base_SetConfig+0xc0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <TIM_Base_SetConfig+0xb8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <TIM_Base_SetConfig+0x62>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d007      	beq.n	8005d5a <TIM_Base_SetConfig+0x62>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a19      	ldr	r2, [pc, #100]	; (8005db4 <TIM_Base_SetConfig+0xbc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_Base_SetConfig+0x62>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <TIM_Base_SetConfig+0xc0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d108      	bne.n	8005d6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a07      	ldr	r2, [pc, #28]	; (8005db0 <TIM_Base_SetConfig+0xb8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d103      	bne.n	8005da0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	615a      	str	r2, [r3, #20]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800

08005dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f023 0201 	bic.w	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f023 0302 	bic.w	r3, r3, #2
 8005e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <TIM_OC1_SetConfig+0xc8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10c      	bne.n	8005e32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f023 0308 	bic.w	r3, r3, #8
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 0304 	bic.w	r3, r3, #4
 8005e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <TIM_OC1_SetConfig+0xc8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d111      	bne.n	8005e5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40012c00 	.word	0x40012c00

08005e88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f023 0210 	bic.w	r2, r3, #16
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0320 	bic.w	r3, r3, #32
 8005ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1d      	ldr	r2, [pc, #116]	; (8005f58 <TIM_OC2_SetConfig+0xd0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d10d      	bne.n	8005f04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <TIM_OC2_SetConfig+0xd0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d113      	bne.n	8005f34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	40012c00 	.word	0x40012c00

08005f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	; (800602c <TIM_OC3_SetConfig+0xd0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10d      	bne.n	8005fd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a14      	ldr	r2, [pc, #80]	; (800602c <TIM_OC3_SetConfig+0xd0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d113      	bne.n	8006006 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	621a      	str	r2, [r3, #32]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40012c00 	.word	0x40012c00

08006030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800607a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	031b      	lsls	r3, r3, #12
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a0f      	ldr	r2, [pc, #60]	; (80060c8 <TIM_OC4_SetConfig+0x98>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d109      	bne.n	80060a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	019b      	lsls	r3, r3, #6
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00

080060cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 030a 	bic.w	r3, r3, #10
 8006108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 0210 	bic.w	r2, r3, #16
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006152:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	031b      	lsls	r3, r3, #12
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006164:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f043 0307 	orr.w	r3, r3, #7
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	021a      	lsls	r2, r3, #8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	431a      	orrs	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	609a      	str	r2, [r3, #8]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	2201      	movs	r2, #1
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	43db      	mvns	r3, r3
 800621a:	401a      	ands	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	431a      	orrs	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006254:	2302      	movs	r3, #2
 8006256:	e046      	b.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a16      	ldr	r2, [pc, #88]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d009      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a10      	ldr	r2, [pc, #64]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10c      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800

080062fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006314:	2302      	movs	r3, #2
 8006316:	e03d      	b.n	8006394 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr

0800639e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr

080063c2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80063c2:	b490      	push	{r4, r7}
 80063c4:	b088      	sub	sp, #32
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	461a      	mov	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	0e1b      	lsrs	r3, r3, #24
 80063d6:	4413      	add	r3, r2
 80063d8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	fa93 f3a3 	rbit	r3, r3
 80063e6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	fab3 f383 	clz	r3, r3
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	210f      	movs	r1, #15
 80063f4:	fa01 f303 	lsl.w	r3, r1, r3
 80063f8:	43db      	mvns	r3, r3
 80063fa:	401a      	ands	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	fa93 f3a3 	rbit	r3, r3
 8006406:	61bb      	str	r3, [r7, #24]
  return result;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	fab3 f383 	clz	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	fa01 f303 	lsl.w	r3, r1, r3
 8006418:	4313      	orrs	r3, r2
 800641a:	6023      	str	r3, [r4, #0]
}
 800641c:	bf00      	nop
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bc90      	pop	{r4, r7}
 8006424:	4770      	bx	lr

08006426 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006426:	b490      	push	{r4, r7}
 8006428:	b088      	sub	sp, #32
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	461a      	mov	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	0e1b      	lsrs	r3, r3, #24
 800643a:	4413      	add	r3, r2
 800643c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	fa93 f3a3 	rbit	r3, r3
 800644a:	613b      	str	r3, [r7, #16]
  return result;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	fab3 f383 	clz	r3, r3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	2103      	movs	r1, #3
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	fa93 f3a3 	rbit	r3, r3
 800646a:	61bb      	str	r3, [r7, #24]
  return result;
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	fab3 f383 	clz	r3, r3
 8006472:	b2db      	uxtb	r3, r3
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	fa01 f303 	lsl.w	r3, r1, r3
 800647c:	4313      	orrs	r3, r2
 800647e:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8006480:	bf00      	nop
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bc90      	pop	{r4, r7}
 8006488:	4770      	bx	lr

0800648a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800648a:	b490      	push	{r4, r7}
 800648c:	b088      	sub	sp, #32
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	461a      	mov	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	0e1b      	lsrs	r3, r3, #24
 800649e:	4413      	add	r3, r2
 80064a0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	fa93 f3a3 	rbit	r3, r3
 80064ae:	613b      	str	r3, [r7, #16]
  return result;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	fab3 f383 	clz	r3, r3
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	2104      	movs	r1, #4
 80064bc:	fa01 f303 	lsl.w	r3, r1, r3
 80064c0:	43db      	mvns	r3, r3
 80064c2:	401a      	ands	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	fa93 f3a3 	rbit	r3, r3
 80064ce:	61bb      	str	r3, [r7, #24]
  return result;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	fab3 f383 	clz	r3, r3
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80064e4:	bf00      	nop
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc90      	pop	{r4, r7}
 80064ec:	4770      	bx	lr

080064ee <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b087      	sub	sp, #28
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	0a1b      	lsrs	r3, r3, #8
 8006502:	43db      	mvns	r3, r3
 8006504:	401a      	ands	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	fa93 f3a3 	rbit	r3, r3
 8006512:	613b      	str	r3, [r7, #16]
  return result;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	fab3 f383 	clz	r3, r3
 800651a:	b2db      	uxtb	r3, r3
 800651c:	4619      	mov	r1, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	408b      	lsls	r3, r1
 8006522:	431a      	orrs	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	60da      	str	r2, [r3, #12]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr

08006532 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b088      	sub	sp, #32
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	0c1b      	lsrs	r3, r3, #16
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	fa93 f3a3 	rbit	r3, r3
 8006550:	60fb      	str	r3, [r7, #12]
  return result;
 8006552:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8006554:	fab3 f383 	clz	r3, r3
 8006558:	b2db      	uxtb	r3, r3
 800655a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800655c:	e040      	b.n	80065e0 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800655e:	2201      	movs	r2, #1
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	409a      	lsls	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d036      	beq.n	80065da <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b07      	cmp	r3, #7
 8006570:	d806      	bhi.n	8006580 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8006572:	f240 1201 	movw	r2, #257	; 0x101
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e008      	b.n	8006592 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	3b08      	subs	r3, #8
 8006584:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006590:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	461a      	mov	r2, r3
 8006598:	69b9      	ldr	r1, [r7, #24]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff ffa7 	bl	80064ee <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	461a      	mov	r2, r3
 80065a6:	69b9      	ldr	r1, [r7, #24]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ff0a 	bl	80063c2 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d003      	beq.n	80065be <LL_GPIO_Init+0x8c>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b09      	cmp	r3, #9
 80065bc:	d10d      	bne.n	80065da <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	461a      	mov	r2, r3
 80065c4:	69b9      	ldr	r1, [r7, #24]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff ff2d 	bl	8006426 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	461a      	mov	r2, r3
 80065d2:	69b9      	ldr	r1, [r7, #24]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff58 	bl	800648a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3301      	adds	r3, #1
 80065de:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1b8      	bne.n	800655e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <LL_RCC_GetSysClkSource+0x14>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 030c 	and.w	r3, r3, #12
}
 8006604:	4618      	mov	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr
 800660c:	40021000 	.word	0x40021000

08006610 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006614:	4b03      	ldr	r3, [pc, #12]	; (8006624 <LL_RCC_GetAHBPrescaler+0x14>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800661c:	4618      	mov	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	40021000 	.word	0x40021000

08006628 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800662c:	4b03      	ldr	r3, [pc, #12]	; (800663c <LL_RCC_GetAPB1Prescaler+0x14>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	40021000 	.word	0x40021000

08006640 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006644:	4b03      	ldr	r3, [pc, #12]	; (8006654 <LL_RCC_GetAPB2Prescaler+0x14>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800664c:	4618      	mov	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr
 8006654:	40021000 	.word	0x40021000

08006658 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <LL_RCC_PLL_GetMainSource+0x14>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8006664:	4618      	mov	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr
 800666c:	40021000 	.word	0x40021000

08006670 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8006674:	4b03      	ldr	r3, [pc, #12]	; (8006684 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800667c:	4618      	mov	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr
 8006684:	40021000 	.word	0x40021000

08006688 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800668c:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <LL_RCC_PLL_GetPrediv+0x18>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	0c5b      	lsrs	r3, r3, #17
 8006692:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8006696:	4618      	mov	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40021000 	.word	0x40021000

080066a4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80066ac:	f000 f820 	bl	80066f0 <RCC_GetSystemClockFreq>
 80066b0:	4602      	mov	r2, r0
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f83a 	bl	8006734 <RCC_GetHCLKClockFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f848 	bl	8006760 <RCC_GetPCLK1ClockFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 f854 	bl	8006788 <RCC_GetPCLK2ClockFreq>
 80066e0:	4602      	mov	r2, r0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60da      	str	r2, [r3, #12]
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80066fa:	f7ff ff7d 	bl	80065f8 <LL_RCC_GetSysClkSource>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b04      	cmp	r3, #4
 8006702:	d006      	beq.n	8006712 <RCC_GetSystemClockFreq+0x22>
 8006704:	2b08      	cmp	r3, #8
 8006706:	d007      	beq.n	8006718 <RCC_GetSystemClockFreq+0x28>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d109      	bne.n	8006720 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800670c:	4b08      	ldr	r3, [pc, #32]	; (8006730 <RCC_GetSystemClockFreq+0x40>)
 800670e:	607b      	str	r3, [r7, #4]
      break;
 8006710:	e009      	b.n	8006726 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <RCC_GetSystemClockFreq+0x40>)
 8006714:	607b      	str	r3, [r7, #4]
      break;
 8006716:	e006      	b.n	8006726 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006718:	f000 f84a 	bl	80067b0 <RCC_PLL_GetFreqDomain_SYS>
 800671c:	6078      	str	r0, [r7, #4]
      break;
 800671e:	e002      	b.n	8006726 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <RCC_GetSystemClockFreq+0x40>)
 8006722:	607b      	str	r3, [r7, #4]
      break;
 8006724:	bf00      	nop
  }

  return frequency;
 8006726:	687b      	ldr	r3, [r7, #4]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	007a1200 	.word	0x007a1200

08006734 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800673c:	f7ff ff68 	bl	8006610 <LL_RCC_GetAHBPrescaler>
 8006740:	4603      	mov	r3, r0
 8006742:	091b      	lsrs	r3, r3, #4
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	4a04      	ldr	r2, [pc, #16]	; (800675c <RCC_GetHCLKClockFreq+0x28>)
 800674a:	5cd3      	ldrb	r3, [r2, r3]
 800674c:	461a      	mov	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	40d3      	lsrs	r3, r2
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	0800a8d0 	.word	0x0800a8d0

08006760 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006768:	f7ff ff5e 	bl	8006628 <LL_RCC_GetAPB1Prescaler>
 800676c:	4603      	mov	r3, r0
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	4a04      	ldr	r2, [pc, #16]	; (8006784 <RCC_GetPCLK1ClockFreq+0x24>)
 8006772:	5cd3      	ldrb	r3, [r2, r3]
 8006774:	461a      	mov	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	40d3      	lsrs	r3, r2
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	0800a8e0 	.word	0x0800a8e0

08006788 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006790:	f7ff ff56 	bl	8006640 <LL_RCC_GetAPB2Prescaler>
 8006794:	4603      	mov	r3, r0
 8006796:	0adb      	lsrs	r3, r3, #11
 8006798:	4a04      	ldr	r2, [pc, #16]	; (80067ac <RCC_GetPCLK2ClockFreq+0x24>)
 800679a:	5cd3      	ldrb	r3, [r2, r3]
 800679c:	461a      	mov	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	40d3      	lsrs	r3, r2
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	0800a8e0 	.word	0x0800a8e0

080067b0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	607b      	str	r3, [r7, #4]
 80067ba:	2300      	movs	r3, #0
 80067bc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80067be:	f7ff ff4b 	bl	8006658 <LL_RCC_PLL_GetMainSource>
 80067c2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80067ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ce:	d003      	beq.n	80067d8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80067d0:	e00b      	b.n	80067ea <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80067d4:	607b      	str	r3, [r7, #4]
      break;
 80067d6:	e00b      	b.n	80067f0 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80067d8:	f7ff ff56 	bl	8006688 <LL_RCC_PLL_GetPrediv>
 80067dc:	4603      	mov	r3, r0
 80067de:	3301      	adds	r3, #1
 80067e0:	4a0a      	ldr	r2, [pc, #40]	; (800680c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80067e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e6:	607b      	str	r3, [r7, #4]
      break;
 80067e8:	e002      	b.n	80067f0 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80067ec:	607b      	str	r3, [r7, #4]
      break;
 80067ee:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80067f0:	f7ff ff3e 	bl	8006670 <LL_RCC_PLL_GetMultiplicator>
 80067f4:	4603      	mov	r3, r0
 80067f6:	0c9b      	lsrs	r3, r3, #18
 80067f8:	3302      	adds	r3, #2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
}
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	003d0900 	.word	0x003d0900
 800680c:	007a1200 	.word	0x007a1200

08006810 <LL_USART_IsEnabled>:
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <LL_USART_SetStopBitsLength>:
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	611a      	str	r2, [r3, #16]
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr

0800685a <LL_USART_SetHWFlowCtrl>:
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	615a      	str	r2, [r3, #20]
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr
	...

08006880 <LL_USART_SetBaudRate>:
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009a      	lsls	r2, r3, #2
 8006896:	441a      	add	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a0:	4a25      	ldr	r2, [pc, #148]	; (8006938 <LL_USART_SetBaudRate+0xb8>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	b299      	uxth	r1, r3
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009a      	lsls	r2, r3, #2
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	fbb2 f2f3 	udiv	r2, r2, r3
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <LL_USART_SetBaudRate+0xb8>)
 80068c4:	fba3 0302 	umull	r0, r3, r3, r2
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	2064      	movs	r0, #100	; 0x64
 80068cc:	fb00 f303 	mul.w	r3, r0, r3
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	3332      	adds	r3, #50	; 0x32
 80068d6:	4a18      	ldr	r2, [pc, #96]	; (8006938 <LL_USART_SetBaudRate+0xb8>)
 80068d8:	fba2 2303 	umull	r2, r3, r2, r3
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	440b      	add	r3, r1
 80068e8:	b299      	uxth	r1, r3
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009a      	lsls	r2, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80068fe:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <LL_USART_SetBaudRate+0xb8>)
 8006900:	fba3 0302 	umull	r0, r3, r3, r2
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	2064      	movs	r0, #100	; 0x64
 8006908:	fb00 f303 	mul.w	r3, r0, r3
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	3332      	adds	r3, #50	; 0x32
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <LL_USART_SetBaudRate+0xb8>)
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
 8006918:	095b      	lsrs	r3, r3, #5
 800691a:	b29b      	uxth	r3, r3
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	b29b      	uxth	r3, r3
 8006922:	440b      	add	r3, r1
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	609a      	str	r2, [r3, #8]
}
 800692c:	bf00      	nop
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	bc80      	pop	{r7}
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	51eb851f 	.word	0x51eb851f

0800693c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800694a:	2300      	movs	r3, #0
 800694c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff ff5e 	bl	8006810 <LL_USART_IsEnabled>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d145      	bne.n	80069e6 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006962:	f023 030c 	bic.w	r3, r3, #12
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	6851      	ldr	r1, [r2, #4]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	68d2      	ldr	r2, [r2, #12]
 800696e:	4311      	orrs	r1, r2
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	6912      	ldr	r2, [r2, #16]
 8006974:	430a      	orrs	r2, r1
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff ff57 	bl	8006836 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ff63 	bl	800685a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006994:	f107 0308 	add.w	r3, r7, #8
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fe83 	bl	80066a4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <LL_USART_Init+0xb4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d102      	bne.n	80069ac <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	e00c      	b.n	80069c6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a11      	ldr	r2, [pc, #68]	; (80069f4 <LL_USART_Init+0xb8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d102      	bne.n	80069ba <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	e005      	b.n	80069c6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a0e      	ldr	r2, [pc, #56]	; (80069f8 <LL_USART_Init+0xbc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d101      	bne.n	80069c6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80069d4:	2300      	movs	r3, #0
 80069d6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	69b9      	ldr	r1, [r7, #24]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff4d 	bl	8006880 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80069e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40013800 	.word	0x40013800
 80069f4:	40004400 	.word	0x40004400
 80069f8:	40004800 	.word	0x40004800

080069fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a0e:	2b84      	cmp	r3, #132	; 0x84
 8006a10:	d005      	beq.n	8006a1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	3303      	adds	r3, #3
 8006a1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a30:	f3ef 8305 	mrs	r3, IPSR
 8006a34:	607b      	str	r3, [r7, #4]
  return(result);
 8006a36:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bf14      	ite	ne
 8006a3c:	2301      	movne	r3, #1
 8006a3e:	2300      	moveq	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr

08006a4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a50:	f001 fc10 	bl	8008274 <vTaskStartScheduler>
  
  return osOK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5c:	b089      	sub	sp, #36	; 0x24
 8006a5e:	af04      	add	r7, sp, #16
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d020      	beq.n	8006aae <osThreadCreate+0x54>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01c      	beq.n	8006aae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685c      	ldr	r4, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681d      	ldr	r5, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691e      	ldr	r6, [r3, #16]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff ffb8 	bl	80069fc <makeFreeRtosPriority>
 8006a8c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a96:	9202      	str	r2, [sp, #8]
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	9100      	str	r1, [sp, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f001 fa2c 	bl	8007f00 <xTaskCreateStatic>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e01c      	b.n	8006ae8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685c      	ldr	r4, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aba:	b29e      	uxth	r6, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff ff9a 	bl	80069fc <makeFreeRtosPriority>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	f107 030c 	add.w	r3, r7, #12
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	9200      	str	r2, [sp, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f001 fa6a 	bl	8007fb2 <xTaskCreate>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d001      	beq.n	8006ae8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e000      	b.n	8006aea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006af2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <osDelay+0x16>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	e000      	b.n	8006b0a <osDelay+0x18>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 fb7e 	bl	800820c <vTaskDelay>
  
  return osOK;
 8006b10:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	460b      	mov	r3, r1
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d013      	beq.n	8006b5a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <osTimerCreate+0x20>
 8006b38:	2101      	movs	r1, #1
 8006b3a:	e000      	b.n	8006b3e <osTimerCreate+0x22>
 8006b3c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8006b46:	9201      	str	r2, [sp, #4]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	460a      	mov	r2, r1
 8006b4e:	2101      	movs	r1, #1
 8006b50:	480b      	ldr	r0, [pc, #44]	; (8006b80 <osTimerCreate+0x64>)
 8006b52:	f002 fa72 	bl	800903a <xTimerCreateStatic>
 8006b56:	4603      	mov	r3, r0
 8006b58:	e00e      	b.n	8006b78 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <osTimerCreate+0x48>
 8006b60:	2201      	movs	r2, #1
 8006b62:	e000      	b.n	8006b66 <osTimerCreate+0x4a>
 8006b64:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2101      	movs	r1, #1
 8006b70:	4803      	ldr	r0, [pc, #12]	; (8006b80 <osTimerCreate+0x64>)
 8006b72:	f002 fa41 	bl	8008ff8 <xTimerCreate>
 8006b76:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	0800a8b4 	.word	0x0800a8b4

08006b84 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <osTimerStart+0x20>
    ticks = 1;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006ba4:	f7ff ff41 	bl	8006a2a <inHandlerMode>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01b      	beq.n	8006be6 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006bae:	f107 020c 	add.w	r2, r7, #12
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	2109      	movs	r1, #9
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 faa9 	bl	8009114 <xTimerGenericCommand>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d002      	beq.n	8006bce <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8006bc8:	23ff      	movs	r3, #255	; 0xff
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e018      	b.n	8006c00 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d015      	beq.n	8006c00 <osTimerStart+0x7c>
 8006bd4:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <osTimerStart+0x88>)
 8006bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	e00c      	b.n	8006c00 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8006be6:	2300      	movs	r3, #0
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	2300      	movs	r3, #0
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	2104      	movs	r1, #4
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f002 fa8f 	bl	8009114 <xTimerGenericCommand>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d001      	beq.n	8006c00 <osTimerStart+0x7c>
      result = osErrorOS;
 8006bfc:	23ff      	movs	r3, #255	; 0xff
 8006bfe:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8006c00:	697b      	ldr	r3, [r7, #20]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d10b      	bne.n	8006c40 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	2100      	movs	r1, #0
 8006c36:	2001      	movs	r0, #1
 8006c38:	f000 fa98 	bl	800716c <xQueueGenericCreateStatic>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	e016      	b.n	8006c6e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e014      	b.n	8006c6e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d110      	bne.n	8006c6c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	2001      	movs	r0, #1
 8006c50:	f000 fafe 	bl	8007250 <xQueueGenericCreate>
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <osSemaphoreCreate+0x58>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 fb50 	bl	8007308 <xQueueGenericSend>
      return sema;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	e000      	b.n	8006c6e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006c6c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006c82:	2300      	movs	r3, #0
 8006c84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	e03a      	b.n	8006d06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c9a:	d103      	bne.n	8006ca4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	e009      	b.n	8006cb8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d006      	beq.n	8006cb8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <osSemaphoreWait+0x40>
      ticks = 1;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006cb8:	f7ff feb7 	bl	8006a2a <inHandlerMode>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d017      	beq.n	8006cf2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006cc2:	f107 0308 	add.w	r3, r7, #8
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2100      	movs	r1, #0
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 ff18 	bl	8007b00 <xQueueReceiveFromISR>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d001      	beq.n	8006cda <osSemaphoreWait+0x62>
      return osErrorOS;
 8006cd6:	23ff      	movs	r3, #255	; 0xff
 8006cd8:	e015      	b.n	8006d06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d011      	beq.n	8006d04 <osSemaphoreWait+0x8c>
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <osSemaphoreWait+0x98>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	e008      	b.n	8006d04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fdfb 	bl	80078f0 <xQueueSemaphoreTake>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d001      	beq.n	8006d04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006d00:	23ff      	movs	r3, #255	; 0xff
 8006d02:	e000      	b.n	8006d06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006d24:	f7ff fe81 	bl	8006a2a <inHandlerMode>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d016      	beq.n	8006d5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006d2e:	f107 0308 	add.w	r3, r7, #8
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fc75 	bl	8007624 <xQueueGiveFromISR>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d001      	beq.n	8006d44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006d40:	23ff      	movs	r3, #255	; 0xff
 8006d42:	e017      	b.n	8006d74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d013      	beq.n	8006d72 <osSemaphoreRelease+0x5e>
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <osSemaphoreRelease+0x68>)
 8006d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	e00a      	b.n	8006d72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fad0 	bl	8007308 <xQueueGenericSend>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d001      	beq.n	8006d72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006d6e:	23ff      	movs	r3, #255	; 0xff
 8006d70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006d72:	68fb      	ldr	r3, [r7, #12]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d012      	beq.n	8006db8 <osMessageCreate+0x38>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00e      	beq.n	8006db8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6859      	ldr	r1, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68dc      	ldr	r4, [r3, #12]
 8006daa:	2300      	movs	r3, #0
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	4623      	mov	r3, r4
 8006db0:	f000 f9dc 	bl	800716c <xQueueGenericCreateStatic>
 8006db4:	4603      	mov	r3, r0
 8006db6:	e008      	b.n	8006dca <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	f000 fa44 	bl	8007250 <xQueueGenericCreate>
 8006dc8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd90      	pop	{r4, r7, pc}
	...

08006dd4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <osMessagePut+0x1e>
    ticks = 1;
 8006dee:	2301      	movs	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006df2:	f7ff fe1a 	bl	8006a2a <inHandlerMode>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d018      	beq.n	8006e2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006dfc:	f107 0210 	add.w	r2, r7, #16
 8006e00:	f107 0108 	add.w	r1, r7, #8
 8006e04:	2300      	movs	r3, #0
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fb78 	bl	80074fc <xQueueGenericSendFromISR>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d001      	beq.n	8006e16 <osMessagePut+0x42>
      return osErrorOS;
 8006e12:	23ff      	movs	r3, #255	; 0xff
 8006e14:	e018      	b.n	8006e48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d014      	beq.n	8006e46 <osMessagePut+0x72>
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <osMessagePut+0x7c>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	e00b      	b.n	8006e46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006e2e:	f107 0108 	add.w	r1, r7, #8
 8006e32:	2300      	movs	r3, #0
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 fa66 	bl	8007308 <xQueueGenericSend>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d001      	beq.n	8006e46 <osMessagePut+0x72>
      return osErrorOS;
 8006e42:	23ff      	movs	r3, #255	; 0xff
 8006e44:	e000      	b.n	8006e48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b08b      	sub	sp, #44	; 0x2c
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	617b      	str	r3, [r7, #20]
    return event;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	461c      	mov	r4, r3
 8006e76:	f107 0314 	add.w	r3, r7, #20
 8006e7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e82:	e054      	b.n	8006f2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e92:	d103      	bne.n	8006e9c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9a:	e009      	b.n	8006eb0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <osMessageGet+0x5c>
      ticks = 1;
 8006eac:	2301      	movs	r3, #1
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006eb0:	f7ff fdbb 	bl	8006a2a <inHandlerMode>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01c      	beq.n	8006ef4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006eba:	f107 0220 	add.w	r2, r7, #32
 8006ebe:	f107 0314 	add.w	r3, r7, #20
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	68b8      	ldr	r0, [r7, #8]
 8006ec8:	f000 fe1a 	bl	8007b00 <xQueueReceiveFromISR>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d102      	bne.n	8006ed8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	e001      	b.n	8006edc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01d      	beq.n	8006f1e <osMessageGet+0xca>
 8006ee2:	4b15      	ldr	r3, [pc, #84]	; (8006f38 <osMessageGet+0xe4>)
 8006ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	e014      	b.n	8006f1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006ef4:	f107 0314 	add.w	r3, r7, #20
 8006ef8:	3304      	adds	r3, #4
 8006efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efc:	4619      	mov	r1, r3
 8006efe:	68b8      	ldr	r0, [r7, #8]
 8006f00:	f000 fc1a 	bl	8007738 <xQueueReceive>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d102      	bne.n	8006f10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006f0a:	2310      	movs	r3, #16
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	e006      	b.n	8006f1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <osMessageGet+0xc6>
 8006f16:	2300      	movs	r3, #0
 8006f18:	e000      	b.n	8006f1c <osMessageGet+0xc8>
 8006f1a:	2340      	movs	r3, #64	; 0x40
 8006f1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	461c      	mov	r4, r3
 8006f22:	f107 0314 	add.w	r3, r7, #20
 8006f26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	372c      	adds	r7, #44	; 0x2c
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd90      	pop	{r4, r7, pc}
 8006f36:	bf00      	nop
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f103 0208 	add.w	r2, r3, #8
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f103 0208 	add.w	r2, r3, #8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f103 0208 	add.w	r2, r3, #8
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr

08006f7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr

08006f92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f92:	b480      	push	{r7}
 8006f94:	b085      	sub	sp, #20
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
}
 8006fce:	bf00      	nop
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr

08006fd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fee:	d103      	bne.n	8006ff8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e00c      	b.n	8007012 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e002      	b.n	8007006 <vListInsert+0x2e>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	d2f6      	bcs.n	8007000 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr

08007048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6892      	ldr	r2, [r2, #8]
 800705e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6852      	ldr	r2, [r2, #4]
 8007068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	429a      	cmp	r2, r3
 8007072:	d103      	bne.n	800707c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	1e5a      	subs	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr
	...

0800709c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	e7fe      	b.n	80070c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80070c4:	f002 fbb8 	bl	8009838 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	68f9      	ldr	r1, [r7, #12]
 80070d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	441a      	add	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	3b01      	subs	r3, #1
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070fa:	fb01 f303 	mul.w	r3, r1, r3
 80070fe:	441a      	add	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	22ff      	movs	r2, #255	; 0xff
 8007108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	22ff      	movs	r2, #255	; 0xff
 8007110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d114      	bne.n	8007144 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01a      	beq.n	8007158 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3310      	adds	r3, #16
 8007126:	4618      	mov	r0, r3
 8007128:	f001 fb24 	bl	8008774 <xTaskRemoveFromEventList>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d012      	beq.n	8007158 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <xQueueGenericReset+0xcc>)
 8007134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	e009      	b.n	8007158 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3310      	adds	r3, #16
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fef7 	bl	8006f3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3324      	adds	r3, #36	; 0x24
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff fef2 	bl	8006f3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007158:	f002 fb9c 	bl	8009894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800715c:	2301      	movs	r3, #1
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08e      	sub	sp, #56	; 0x38
 8007170:	af02      	add	r7, sp, #8
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d109      	bne.n	8007194 <xQueueGenericCreateStatic+0x28>
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
 8007192:	e7fe      	b.n	8007192 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <xQueueGenericCreateStatic+0x42>
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
 80071ac:	e7fe      	b.n	80071ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <xQueueGenericCreateStatic+0x4e>
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <xQueueGenericCreateStatic+0x52>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueGenericCreateStatic+0x54>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <xQueueGenericCreateStatic+0x6c>
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	623b      	str	r3, [r7, #32]
 80071d6:	e7fe      	b.n	80071d6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <xQueueGenericCreateStatic+0x78>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <xQueueGenericCreateStatic+0x7c>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e000      	b.n	80071ea <xQueueGenericCreateStatic+0x7e>
 80071e8:	2300      	movs	r3, #0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <xQueueGenericCreateStatic+0x96>
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	e7fe      	b.n	8007200 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007202:	2348      	movs	r3, #72	; 0x48
 8007204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b48      	cmp	r3, #72	; 0x48
 800720a:	d009      	beq.n	8007220 <xQueueGenericCreateStatic+0xb4>
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	e7fe      	b.n	800721e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007232:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4613      	mov	r3, r2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f842 	bl	80072ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007248:	4618      	mov	r0, r3
 800724a:	3730      	adds	r7, #48	; 0x30
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d109      	bne.n	8007278 <xQueueGenericCreate+0x28>
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	e7fe      	b.n	8007276 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800727e:	2300      	movs	r3, #0
 8007280:	61fb      	str	r3, [r7, #28]
 8007282:	e004      	b.n	800728e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	fb02 f303 	mul.w	r3, r2, r3
 800728c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3348      	adds	r3, #72	; 0x48
 8007292:	4618      	mov	r0, r3
 8007294:	f002 fbc6 	bl	8009a24 <pvPortMalloc>
 8007298:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00f      	beq.n	80072c0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	3348      	adds	r3, #72	; 0x48
 80072a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072ae:	79fa      	ldrb	r2, [r7, #7]
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	68b9      	ldr	r1, [r7, #8]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f805 	bl	80072ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80072c0:	69bb      	ldr	r3, [r7, #24]
	}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e002      	b.n	80072ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072f8:	2101      	movs	r1, #1
 80072fa:	69b8      	ldr	r0, [r7, #24]
 80072fc:	f7ff fece 	bl	800709c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08e      	sub	sp, #56	; 0x38
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007316:	2300      	movs	r3, #0
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <xQueueGenericSend+0x30>
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
 8007336:	e7fe      	b.n	8007336 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d103      	bne.n	8007346 <xQueueGenericSend+0x3e>
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <xQueueGenericSend+0x42>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <xQueueGenericSend+0x44>
 800734a:	2300      	movs	r3, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <xQueueGenericSend+0x5c>
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
 8007362:	e7fe      	b.n	8007362 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d103      	bne.n	8007372 <xQueueGenericSend+0x6a>
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <xQueueGenericSend+0x6e>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <xQueueGenericSend+0x70>
 8007376:	2300      	movs	r3, #0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d109      	bne.n	8007390 <xQueueGenericSend+0x88>
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	623b      	str	r3, [r7, #32]
 800738e:	e7fe      	b.n	800738e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007390:	f001 fbaa 	bl	8008ae8 <xTaskGetSchedulerState>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <xQueueGenericSend+0x98>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <xQueueGenericSend+0x9c>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <xQueueGenericSend+0x9e>
 80073a4:	2300      	movs	r3, #0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d109      	bne.n	80073be <xQueueGenericSend+0xb6>
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e7fe      	b.n	80073bc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073be:	f002 fa3b 	bl	8009838 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d302      	bcc.n	80073d4 <xQueueGenericSend+0xcc>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d129      	bne.n	8007428 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073da:	f000 fc25 	bl	8007c28 <prvCopyDataToQueue>
 80073de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d010      	beq.n	800740a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	3324      	adds	r3, #36	; 0x24
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 f9c1 	bl	8008774 <xTaskRemoveFromEventList>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d013      	beq.n	8007420 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073f8:	4b3f      	ldr	r3, [pc, #252]	; (80074f8 <xQueueGenericSend+0x1f0>)
 80073fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	e00a      	b.n	8007420 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007410:	4b39      	ldr	r3, [pc, #228]	; (80074f8 <xQueueGenericSend+0x1f0>)
 8007412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007420:	f002 fa38 	bl	8009894 <vPortExitCritical>
				return pdPASS;
 8007424:	2301      	movs	r3, #1
 8007426:	e063      	b.n	80074f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800742e:	f002 fa31 	bl	8009894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007432:	2300      	movs	r3, #0
 8007434:	e05c      	b.n	80074f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	4618      	mov	r0, r3
 8007442:	f001 f9f9 	bl	8008838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007446:	2301      	movs	r3, #1
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800744a:	f002 fa23 	bl	8009894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800744e:	f000 ff75 	bl	800833c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007452:	f002 f9f1 	bl	8009838 <vPortEnterCritical>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800745c:	b25b      	sxtb	r3, r3
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007462:	d103      	bne.n	800746c <xQueueGenericSend+0x164>
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007472:	b25b      	sxtb	r3, r3
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007478:	d103      	bne.n	8007482 <xQueueGenericSend+0x17a>
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007482:	f002 fa07 	bl	8009894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007486:	1d3a      	adds	r2, r7, #4
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	4611      	mov	r1, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f001 f9e8 	bl	8008864 <xTaskCheckForTimeOut>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d124      	bne.n	80074e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800749a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800749c:	f000 fcbc 	bl	8007e18 <prvIsQueueFull>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d018      	beq.n	80074d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	3310      	adds	r3, #16
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 f912 	bl	80086d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074b6:	f000 fc47 	bl	8007d48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074ba:	f000 ff4d 	bl	8008358 <xTaskResumeAll>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f47f af7c 	bne.w	80073be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <xQueueGenericSend+0x1f0>)
 80074c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	e772      	b.n	80073be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074da:	f000 fc35 	bl	8007d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074de:	f000 ff3b 	bl	8008358 <xTaskResumeAll>
 80074e2:	e76c      	b.n	80073be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e6:	f000 fc2f 	bl	8007d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ea:	f000 ff35 	bl	8008358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074ee:	2300      	movs	r3, #0
		}
	}
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3738      	adds	r7, #56	; 0x38
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08e      	sub	sp, #56	; 0x38
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <xQueueGenericSendFromISR+0x2c>
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
 8007526:	e7fe      	b.n	8007526 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d103      	bne.n	8007536 <xQueueGenericSendFromISR+0x3a>
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <xQueueGenericSendFromISR+0x3e>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <xQueueGenericSendFromISR+0x40>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d109      	bne.n	8007554 <xQueueGenericSendFromISR+0x58>
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	623b      	str	r3, [r7, #32]
 8007552:	e7fe      	b.n	8007552 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d103      	bne.n	8007562 <xQueueGenericSendFromISR+0x66>
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <xQueueGenericSendFromISR+0x6a>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <xQueueGenericSendFromISR+0x6c>
 8007566:	2300      	movs	r3, #0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d109      	bne.n	8007580 <xQueueGenericSendFromISR+0x84>
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	e7fe      	b.n	800757e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007580:	f002 fa14 	bl	80099ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007584:	f3ef 8211 	mrs	r2, BASEPRI
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	61ba      	str	r2, [r7, #24]
 800759a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800759c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d302      	bcc.n	80075b2 <xQueueGenericSendFromISR+0xb6>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d12c      	bne.n	800760c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c2:	f000 fb31 	bl	8007c28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ce:	d112      	bne.n	80075f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d016      	beq.n	8007606 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	3324      	adds	r3, #36	; 0x24
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 f8c9 	bl	8008774 <xTaskRemoveFromEventList>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	e007      	b.n	8007606 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075fa:	3301      	adds	r3, #1
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	b25a      	sxtb	r2, r3
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007606:	2301      	movs	r3, #1
 8007608:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800760a:	e001      	b.n	8007610 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800760c:	2300      	movs	r3, #0
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800761c:	4618      	mov	r0, r3
 800761e:	3738      	adds	r7, #56	; 0x38
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08e      	sub	sp, #56	; 0x38
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <xQueueGiveFromISR+0x28>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	623b      	str	r3, [r7, #32]
 800764a:	e7fe      	b.n	800764a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d009      	beq.n	8007668 <xQueueGiveFromISR+0x44>
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	e7fe      	b.n	8007666 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <xQueueGiveFromISR+0x54>
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <xQueueGiveFromISR+0x58>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <xQueueGiveFromISR+0x5a>
 800767c:	2300      	movs	r3, #0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d109      	bne.n	8007696 <xQueueGiveFromISR+0x72>
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	61bb      	str	r3, [r7, #24]
 8007694:	e7fe      	b.n	8007694 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007696:	f002 f989 	bl	80099ac <vPortValidateInterruptPriority>
	__asm volatile
 800769a:	f3ef 8211 	mrs	r2, BASEPRI
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	617a      	str	r2, [r7, #20]
 80076b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80076b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d22b      	bcs.n	800771e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e0:	d112      	bne.n	8007708 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d016      	beq.n	8007718 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	3324      	adds	r3, #36	; 0x24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 f840 	bl	8008774 <xTaskRemoveFromEventList>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2201      	movs	r2, #1
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	e007      	b.n	8007718 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800770c:	3301      	adds	r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	b25a      	sxtb	r2, r3
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007718:	2301      	movs	r3, #1
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
 800771c:	e001      	b.n	8007722 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800771e:	2300      	movs	r3, #0
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800772e:	4618      	mov	r0, r3
 8007730:	3738      	adds	r7, #56	; 0x38
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08c      	sub	sp, #48	; 0x30
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007744:	2300      	movs	r3, #0
 8007746:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <xQueueReceive+0x2e>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	623b      	str	r3, [r7, #32]
 8007764:	e7fe      	b.n	8007764 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <xQueueReceive+0x3c>
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <xQueueReceive+0x40>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <xQueueReceive+0x42>
 8007778:	2300      	movs	r3, #0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d109      	bne.n	8007792 <xQueueReceive+0x5a>
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	e7fe      	b.n	8007790 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007792:	f001 f9a9 	bl	8008ae8 <xTaskGetSchedulerState>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <xQueueReceive+0x6a>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <xQueueReceive+0x6e>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <xQueueReceive+0x70>
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <xQueueReceive+0x88>
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e7fe      	b.n	80077be <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80077c0:	f002 f83a 	bl	8009838 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01f      	beq.n	8007810 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d4:	f000 fa92 	bl	8007cfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	1e5a      	subs	r2, r3, #1
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00f      	beq.n	8007808 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	3310      	adds	r3, #16
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 ffc1 	bl	8008774 <xTaskRemoveFromEventList>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d007      	beq.n	8007808 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077f8:	4b3c      	ldr	r3, [pc, #240]	; (80078ec <xQueueReceive+0x1b4>)
 80077fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007808:	f002 f844 	bl	8009894 <vPortExitCritical>
				return pdPASS;
 800780c:	2301      	movs	r3, #1
 800780e:	e069      	b.n	80078e4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007816:	f002 f83d 	bl	8009894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800781a:	2300      	movs	r3, #0
 800781c:	e062      	b.n	80078e4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007824:	f107 0310 	add.w	r3, r7, #16
 8007828:	4618      	mov	r0, r3
 800782a:	f001 f805 	bl	8008838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007832:	f002 f82f 	bl	8009894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007836:	f000 fd81 	bl	800833c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800783a:	f001 fffd 	bl	8009838 <vPortEnterCritical>
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007844:	b25b      	sxtb	r3, r3
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800784a:	d103      	bne.n	8007854 <xQueueReceive+0x11c>
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800785a:	b25b      	sxtb	r3, r3
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007860:	d103      	bne.n	800786a <xQueueReceive+0x132>
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800786a:	f002 f813 	bl	8009894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800786e:	1d3a      	adds	r2, r7, #4
 8007870:	f107 0310 	add.w	r3, r7, #16
 8007874:	4611      	mov	r1, r2
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fff4 	bl	8008864 <xTaskCheckForTimeOut>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d123      	bne.n	80078ca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007884:	f000 fab2 	bl	8007dec <prvIsQueueEmpty>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d017      	beq.n	80078be <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	3324      	adds	r3, #36	; 0x24
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f000 ff1e 	bl	80086d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800789c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800789e:	f000 fa53 	bl	8007d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078a2:	f000 fd59 	bl	8008358 <xTaskResumeAll>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d189      	bne.n	80077c0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80078ac:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <xQueueReceive+0x1b4>)
 80078ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	e780      	b.n	80077c0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c0:	f000 fa42 	bl	8007d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078c4:	f000 fd48 	bl	8008358 <xTaskResumeAll>
 80078c8:	e77a      	b.n	80077c0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078cc:	f000 fa3c 	bl	8007d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078d0:	f000 fd42 	bl	8008358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d6:	f000 fa89 	bl	8007dec <prvIsQueueEmpty>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f43f af6f 	beq.w	80077c0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3730      	adds	r7, #48	; 0x30
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08e      	sub	sp, #56	; 0x38
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007902:	2300      	movs	r3, #0
 8007904:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d109      	bne.n	8007920 <xQueueSemaphoreTake+0x30>
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	e7fe      	b.n	800791e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d009      	beq.n	800793c <xQueueSemaphoreTake+0x4c>
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	61fb      	str	r3, [r7, #28]
 800793a:	e7fe      	b.n	800793a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800793c:	f001 f8d4 	bl	8008ae8 <xTaskGetSchedulerState>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <xQueueSemaphoreTake+0x5c>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <xQueueSemaphoreTake+0x60>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <xQueueSemaphoreTake+0x62>
 8007950:	2300      	movs	r3, #0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <xQueueSemaphoreTake+0x7a>
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	61bb      	str	r3, [r7, #24]
 8007968:	e7fe      	b.n	8007968 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800796a:	f001 ff65 	bl	8009838 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007972:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	2b00      	cmp	r3, #0
 8007978:	d024      	beq.n	80079c4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	1e5a      	subs	r2, r3, #1
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d104      	bne.n	8007994 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800798a:	f001 fa73 	bl	8008e74 <pvTaskIncrementMutexHeldCount>
 800798e:	4602      	mov	r2, r0
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00f      	beq.n	80079bc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	3310      	adds	r3, #16
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fee7 	bl	8008774 <xTaskRemoveFromEventList>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079ac:	4b53      	ldr	r3, [pc, #332]	; (8007afc <xQueueSemaphoreTake+0x20c>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079bc:	f001 ff6a 	bl	8009894 <vPortExitCritical>
				return pdPASS;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e096      	b.n	8007af2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d110      	bne.n	80079ec <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d009      	beq.n	80079e4 <xQueueSemaphoreTake+0xf4>
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	e7fe      	b.n	80079e2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80079e4:	f001 ff56 	bl	8009894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079e8:	2300      	movs	r3, #0
 80079ea:	e082      	b.n	8007af2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079f2:	f107 030c 	add.w	r3, r7, #12
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 ff1e 	bl	8008838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a00:	f001 ff48 	bl	8009894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a04:	f000 fc9a 	bl	800833c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a08:	f001 ff16 	bl	8009838 <vPortEnterCritical>
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a12:	b25b      	sxtb	r3, r3
 8007a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a18:	d103      	bne.n	8007a22 <xQueueSemaphoreTake+0x132>
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a28:	b25b      	sxtb	r3, r3
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a2e:	d103      	bne.n	8007a38 <xQueueSemaphoreTake+0x148>
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a38:	f001 ff2c 	bl	8009894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a3c:	463a      	mov	r2, r7
 8007a3e:	f107 030c 	add.w	r3, r7, #12
 8007a42:	4611      	mov	r1, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 ff0d 	bl	8008864 <xTaskCheckForTimeOut>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d132      	bne.n	8007ab6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a52:	f000 f9cb 	bl	8007dec <prvIsQueueEmpty>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d026      	beq.n	8007aaa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007a64:	f001 fee8 	bl	8009838 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f001 f859 	bl	8008b24 <xTaskPriorityInherit>
 8007a72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a74:	f001 ff0e 	bl	8009894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	3324      	adds	r3, #36	; 0x24
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fe29 	bl	80086d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a88:	f000 f95e 	bl	8007d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a8c:	f000 fc64 	bl	8008358 <xTaskResumeAll>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f47f af69 	bne.w	800796a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007a98:	4b18      	ldr	r3, [pc, #96]	; (8007afc <xQueueSemaphoreTake+0x20c>)
 8007a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	e75f      	b.n	800796a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007aaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aac:	f000 f94c 	bl	8007d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab0:	f000 fc52 	bl	8008358 <xTaskResumeAll>
 8007ab4:	e759      	b.n	800796a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ab8:	f000 f946 	bl	8007d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007abc:	f000 fc4c 	bl	8008358 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ac2:	f000 f993 	bl	8007dec <prvIsQueueEmpty>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f43f af4e 	beq.w	800796a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00d      	beq.n	8007af0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007ad4:	f001 feb0 	bl	8009838 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ada:	f000 f88e 	bl	8007bfa <prvGetDisinheritPriorityAfterTimeout>
 8007ade:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 f926 	bl	8008d38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007aec:	f001 fed2 	bl	8009894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007af0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3738      	adds	r7, #56	; 0x38
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	e000ed04 	.word	0xe000ed04

08007b00 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08e      	sub	sp, #56	; 0x38
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <xQueueReceiveFromISR+0x2a>
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	623b      	str	r3, [r7, #32]
 8007b28:	e7fe      	b.n	8007b28 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d103      	bne.n	8007b38 <xQueueReceiveFromISR+0x38>
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <xQueueReceiveFromISR+0x3c>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <xQueueReceiveFromISR+0x3e>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <xQueueReceiveFromISR+0x56>
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	e7fe      	b.n	8007b54 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b56:	f001 ff29 	bl	80099ac <vPortValidateInterruptPriority>
	__asm volatile
 8007b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	61ba      	str	r2, [r7, #24]
 8007b70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d02f      	beq.n	8007be2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b90:	f000 f8b4 	bl	8007cfc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	1e5a      	subs	r2, r3, #1
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba4:	d112      	bne.n	8007bcc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d016      	beq.n	8007bdc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	3310      	adds	r3, #16
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fdde 	bl	8008774 <xTaskRemoveFromEventList>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	e007      	b.n	8007bdc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	b25a      	sxtb	r2, r3
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
 8007be0:	e001      	b.n	8007be6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3738      	adds	r7, #56	; 0x38
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d006      	beq.n	8007c18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f1c3 0307 	rsb	r3, r3, #7
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	e001      	b.n	8007c1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
	}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10d      	bne.n	8007c62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d14d      	bne.n	8007cea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 ffec 	bl	8008c30 <xTaskPriorityDisinherit>
 8007c58:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	605a      	str	r2, [r3, #4]
 8007c60:	e043      	b.n	8007cea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d119      	bne.n	8007c9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6898      	ldr	r0, [r3, #8]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	461a      	mov	r2, r3
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	f002 f8d8 	bl	8009e28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c80:	441a      	add	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d32b      	bcc.n	8007cea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	609a      	str	r2, [r3, #8]
 8007c9a:	e026      	b.n	8007cea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68d8      	ldr	r0, [r3, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	f002 f8be 	bl	8009e28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	425b      	negs	r3, r3
 8007cb6:	441a      	add	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d207      	bcs.n	8007cd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	441a      	add	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d105      	bne.n	8007cea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007cf2:	697b      	ldr	r3, [r7, #20]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d018      	beq.n	8007d40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	441a      	add	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d303      	bcc.n	8007d30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68d9      	ldr	r1, [r3, #12]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6838      	ldr	r0, [r7, #0]
 8007d3c:	f002 f874 	bl	8009e28 <memcpy>
	}
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d50:	f001 fd72 	bl	8009838 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d5c:	e011      	b.n	8007d82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d012      	beq.n	8007d8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3324      	adds	r3, #36	; 0x24
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fd02 	bl	8008774 <xTaskRemoveFromEventList>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d76:	f000 fdd5 	bl	8008924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	dce9      	bgt.n	8007d5e <prvUnlockQueue+0x16>
 8007d8a:	e000      	b.n	8007d8e <prvUnlockQueue+0x46>
					break;
 8007d8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	22ff      	movs	r2, #255	; 0xff
 8007d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d96:	f001 fd7d 	bl	8009894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d9a:	f001 fd4d 	bl	8009838 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007da4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007da6:	e011      	b.n	8007dcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d012      	beq.n	8007dd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3310      	adds	r3, #16
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fcdd 	bl	8008774 <xTaskRemoveFromEventList>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dc0:	f000 fdb0 	bl	8008924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dce9      	bgt.n	8007da8 <prvUnlockQueue+0x60>
 8007dd4:	e000      	b.n	8007dd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	22ff      	movs	r2, #255	; 0xff
 8007ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007de0:	f001 fd58 	bl	8009894 <vPortExitCritical>
}
 8007de4:	bf00      	nop
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007df4:	f001 fd20 	bl	8009838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e00:	2301      	movs	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	e001      	b.n	8007e0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e0a:	f001 fd43 	bl	8009894 <vPortExitCritical>

	return xReturn;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e20:	f001 fd0a 	bl	8009838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d102      	bne.n	8007e36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e001      	b.n	8007e3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e3a:	f001 fd2b 	bl	8009894 <vPortExitCritical>

	return xReturn;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e014      	b.n	8007e82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e58:	4a0e      	ldr	r2, [pc, #56]	; (8007e94 <vQueueAddToRegistry+0x4c>)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10b      	bne.n	8007e7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e64:	490b      	ldr	r1, [pc, #44]	; (8007e94 <vQueueAddToRegistry+0x4c>)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <vQueueAddToRegistry+0x4c>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	4413      	add	r3, r2
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e7a:	e005      	b.n	8007e88 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b07      	cmp	r3, #7
 8007e86:	d9e7      	bls.n	8007e58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20001dbc 	.word	0x20001dbc

08007e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ea8:	f001 fcc6 	bl	8009838 <vPortEnterCritical>
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eb8:	d103      	bne.n	8007ec2 <vQueueWaitForMessageRestricted+0x2a>
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec8:	b25b      	sxtb	r3, r3
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ece:	d103      	bne.n	8007ed8 <vQueueWaitForMessageRestricted+0x40>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ed8:	f001 fcdc 	bl	8009894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d106      	bne.n	8007ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	3324      	adds	r3, #36	; 0x24
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fc17 	bl	8008720 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ef2:	6978      	ldr	r0, [r7, #20]
 8007ef4:	f7ff ff28 	bl	8007d48 <prvUnlockQueue>
	}
 8007ef8:	bf00      	nop
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08e      	sub	sp, #56	; 0x38
 8007f04:	af04      	add	r7, sp, #16
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d109      	bne.n	8007f28 <xTaskCreateStatic+0x28>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	623b      	str	r3, [r7, #32]
 8007f26:	e7fe      	b.n	8007f26 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <xTaskCreateStatic+0x42>
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	e7fe      	b.n	8007f40 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f42:	2354      	movs	r3, #84	; 0x54
 8007f44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b54      	cmp	r3, #84	; 0x54
 8007f4a:	d009      	beq.n	8007f60 <xTaskCreateStatic+0x60>
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	61bb      	str	r3, [r7, #24]
 8007f5e:	e7fe      	b.n	8007f5e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01e      	beq.n	8007fa4 <xTaskCreateStatic+0xa4>
 8007f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01b      	beq.n	8007fa4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	9302      	str	r3, [sp, #8]
 8007f86:	f107 0314 	add.w	r3, r7, #20
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	68b9      	ldr	r1, [r7, #8]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 f850 	bl	800803c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f9e:	f000 f8cb 	bl	8008138 <prvAddNewTaskToReadyList>
 8007fa2:	e001      	b.n	8007fa8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fa8:	697b      	ldr	r3, [r7, #20]
	}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3728      	adds	r7, #40	; 0x28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b08c      	sub	sp, #48	; 0x30
 8007fb6:	af04      	add	r7, sp, #16
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fd2c 	bl	8009a24 <pvPortMalloc>
 8007fcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00e      	beq.n	8007ff2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007fd4:	2054      	movs	r0, #84	; 0x54
 8007fd6:	f001 fd25 	bl	8009a24 <pvPortMalloc>
 8007fda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8007fe8:	e005      	b.n	8007ff6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fea:	6978      	ldr	r0, [r7, #20]
 8007fec:	f001 fddc 	bl	8009ba8 <vPortFree>
 8007ff0:	e001      	b.n	8007ff6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d017      	beq.n	800802c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008004:	88fa      	ldrh	r2, [r7, #6]
 8008006:	2300      	movs	r3, #0
 8008008:	9303      	str	r3, [sp, #12]
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	9302      	str	r3, [sp, #8]
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f80e 	bl	800803c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008020:	69f8      	ldr	r0, [r7, #28]
 8008022:	f000 f889 	bl	8008138 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008026:	2301      	movs	r3, #1
 8008028:	61bb      	str	r3, [r7, #24]
 800802a:	e002      	b.n	8008032 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800802c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008030:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008032:	69bb      	ldr	r3, [r7, #24]
	}
 8008034:	4618      	mov	r0, r3
 8008036:	3720      	adds	r7, #32
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008054:	3b01      	subs	r3, #1
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	f023 0307 	bic.w	r3, r3, #7
 8008062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <prvInitialiseNewTask+0x46>
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	e7fe      	b.n	8008080 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	e012      	b.n	80080ae <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	4413      	add	r3, r2
 800808e:	7819      	ldrb	r1, [r3, #0]
 8008090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4413      	add	r3, r2
 8008096:	3334      	adds	r3, #52	; 0x34
 8008098:	460a      	mov	r2, r1
 800809a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	4413      	add	r3, r2
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d006      	beq.n	80080b6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	3301      	adds	r3, #1
 80080ac:	61fb      	str	r3, [r7, #28]
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	2b0f      	cmp	r3, #15
 80080b2:	d9e9      	bls.n	8008088 <prvInitialiseNewTask+0x4c>
 80080b4:	e000      	b.n	80080b8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80080b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	2b06      	cmp	r3, #6
 80080c4:	d901      	bls.n	80080ca <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080c6:	2306      	movs	r3, #6
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080d4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	3304      	adds	r3, #4
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe ff4a 	bl	8006f7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	3318      	adds	r3, #24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe ff45 	bl	8006f7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	f1c3 0207 	rsb	r2, r3, #7
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008104:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	2200      	movs	r2, #0
 800810a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	69b8      	ldr	r0, [r7, #24]
 800811a:	f001 faa3 	bl	8009664 <pxPortInitialiseStack>
 800811e:	4602      	mov	r2, r0
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008130:	bf00      	nop
 8008132:	3720      	adds	r7, #32
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008140:	f001 fb7a 	bl	8009838 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008144:	4b2a      	ldr	r3, [pc, #168]	; (80081f0 <prvAddNewTaskToReadyList+0xb8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3301      	adds	r3, #1
 800814a:	4a29      	ldr	r2, [pc, #164]	; (80081f0 <prvAddNewTaskToReadyList+0xb8>)
 800814c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800814e:	4b29      	ldr	r3, [pc, #164]	; (80081f4 <prvAddNewTaskToReadyList+0xbc>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008156:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <prvAddNewTaskToReadyList+0xbc>)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800815c:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <prvAddNewTaskToReadyList+0xb8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d110      	bne.n	8008186 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008164:	f000 fc02 	bl	800896c <prvInitialiseTaskLists>
 8008168:	e00d      	b.n	8008186 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800816a:	4b23      	ldr	r3, [pc, #140]	; (80081f8 <prvAddNewTaskToReadyList+0xc0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008172:	4b20      	ldr	r3, [pc, #128]	; (80081f4 <prvAddNewTaskToReadyList+0xbc>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	429a      	cmp	r2, r3
 800817e:	d802      	bhi.n	8008186 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008180:	4a1c      	ldr	r2, [pc, #112]	; (80081f4 <prvAddNewTaskToReadyList+0xbc>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008186:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <prvAddNewTaskToReadyList+0xc4>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3301      	adds	r3, #1
 800818c:	4a1b      	ldr	r2, [pc, #108]	; (80081fc <prvAddNewTaskToReadyList+0xc4>)
 800818e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	2201      	movs	r2, #1
 8008196:	409a      	lsls	r2, r3
 8008198:	4b19      	ldr	r3, [pc, #100]	; (8008200 <prvAddNewTaskToReadyList+0xc8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4313      	orrs	r3, r2
 800819e:	4a18      	ldr	r2, [pc, #96]	; (8008200 <prvAddNewTaskToReadyList+0xc8>)
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4a15      	ldr	r2, [pc, #84]	; (8008204 <prvAddNewTaskToReadyList+0xcc>)
 80081b0:	441a      	add	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7fe feea 	bl	8006f92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081be:	f001 fb69 	bl	8009894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081c2:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <prvAddNewTaskToReadyList+0xc0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00e      	beq.n	80081e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <prvAddNewTaskToReadyList+0xbc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d207      	bcs.n	80081e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081d8:	4b0b      	ldr	r3, [pc, #44]	; (8008208 <prvAddNewTaskToReadyList+0xd0>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20000ac8 	.word	0x20000ac8
 80081f4:	200009c8 	.word	0x200009c8
 80081f8:	20000ad4 	.word	0x20000ad4
 80081fc:	20000ae4 	.word	0x20000ae4
 8008200:	20000ad0 	.word	0x20000ad0
 8008204:	200009cc 	.word	0x200009cc
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d016      	beq.n	800824c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800821e:	4b13      	ldr	r3, [pc, #76]	; (800826c <vTaskDelay+0x60>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <vTaskDelay+0x2e>
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	60bb      	str	r3, [r7, #8]
 8008238:	e7fe      	b.n	8008238 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800823a:	f000 f87f 	bl	800833c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800823e:	2100      	movs	r1, #0
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fe2b 	bl	8008e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008246:	f000 f887 	bl	8008358 <xTaskResumeAll>
 800824a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d107      	bne.n	8008262 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <vTaskDelay+0x64>)
 8008254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000af0 	.word	0x20000af0
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800827e:	2300      	movs	r3, #0
 8008280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008282:	463a      	mov	r2, r7
 8008284:	1d39      	adds	r1, r7, #4
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	4618      	mov	r0, r3
 800828c:	f7f8 fb5e 	bl	800094c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	9202      	str	r2, [sp, #8]
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	2300      	movs	r3, #0
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	460a      	mov	r2, r1
 80082a2:	4920      	ldr	r1, [pc, #128]	; (8008324 <vTaskStartScheduler+0xb0>)
 80082a4:	4820      	ldr	r0, [pc, #128]	; (8008328 <vTaskStartScheduler+0xb4>)
 80082a6:	f7ff fe2b 	bl	8007f00 <xTaskCreateStatic>
 80082aa:	4602      	mov	r2, r0
 80082ac:	4b1f      	ldr	r3, [pc, #124]	; (800832c <vTaskStartScheduler+0xb8>)
 80082ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082b0:	4b1e      	ldr	r3, [pc, #120]	; (800832c <vTaskStartScheduler+0xb8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082b8:	2301      	movs	r3, #1
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	e001      	b.n	80082c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082be:	2300      	movs	r3, #0
 80082c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d102      	bne.n	80082ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082c8:	f000 fe4e 	bl	8008f68 <xTimerCreateTimerTask>
 80082cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d115      	bne.n	8008300 <vTaskStartScheduler+0x8c>
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <vTaskStartScheduler+0xbc>)
 80082e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082ee:	4b11      	ldr	r3, [pc, #68]	; (8008334 <vTaskStartScheduler+0xc0>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80082f4:	4b10      	ldr	r3, [pc, #64]	; (8008338 <vTaskStartScheduler+0xc4>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082fa:	f001 fa2d 	bl	8009758 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082fe:	e00d      	b.n	800831c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008306:	d109      	bne.n	800831c <vTaskStartScheduler+0xa8>
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	e7fe      	b.n	800831a <vTaskStartScheduler+0xa6>
}
 800831c:	bf00      	nop
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	0800a8b8 	.word	0x0800a8b8
 8008328:	0800893d 	.word	0x0800893d
 800832c:	20000aec 	.word	0x20000aec
 8008330:	20000ae8 	.word	0x20000ae8
 8008334:	20000ad4 	.word	0x20000ad4
 8008338:	20000acc 	.word	0x20000acc

0800833c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <vTaskSuspendAll+0x18>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a03      	ldr	r2, [pc, #12]	; (8008354 <vTaskSuspendAll+0x18>)
 8008348:	6013      	str	r3, [r2, #0]
}
 800834a:	bf00      	nop
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000af0 	.word	0x20000af0

08008358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008366:	4b41      	ldr	r3, [pc, #260]	; (800846c <xTaskResumeAll+0x114>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d109      	bne.n	8008382 <xTaskResumeAll+0x2a>
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	e7fe      	b.n	8008380 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008382:	f001 fa59 	bl	8009838 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008386:	4b39      	ldr	r3, [pc, #228]	; (800846c <xTaskResumeAll+0x114>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3b01      	subs	r3, #1
 800838c:	4a37      	ldr	r2, [pc, #220]	; (800846c <xTaskResumeAll+0x114>)
 800838e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008390:	4b36      	ldr	r3, [pc, #216]	; (800846c <xTaskResumeAll+0x114>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d161      	bne.n	800845c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008398:	4b35      	ldr	r3, [pc, #212]	; (8008470 <xTaskResumeAll+0x118>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d05d      	beq.n	800845c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083a0:	e02e      	b.n	8008400 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80083a2:	4b34      	ldr	r3, [pc, #208]	; (8008474 <xTaskResumeAll+0x11c>)
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3318      	adds	r3, #24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fe4a 	bl	8007048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe fe45 	bl	8007048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	2201      	movs	r2, #1
 80083c4:	409a      	lsls	r2, r3
 80083c6:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <xTaskResumeAll+0x120>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	4a2a      	ldr	r2, [pc, #168]	; (8008478 <xTaskResumeAll+0x120>)
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4a27      	ldr	r2, [pc, #156]	; (800847c <xTaskResumeAll+0x124>)
 80083de:	441a      	add	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3304      	adds	r3, #4
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f7fe fdd3 	bl	8006f92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f0:	4b23      	ldr	r3, [pc, #140]	; (8008480 <xTaskResumeAll+0x128>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d302      	bcc.n	8008400 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80083fa:	4b22      	ldr	r3, [pc, #136]	; (8008484 <xTaskResumeAll+0x12c>)
 80083fc:	2201      	movs	r2, #1
 80083fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008400:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <xTaskResumeAll+0x11c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1cc      	bne.n	80083a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800840e:	f000 fb47 	bl	8008aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008412:	4b1d      	ldr	r3, [pc, #116]	; (8008488 <xTaskResumeAll+0x130>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d010      	beq.n	8008440 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800841e:	f000 f845 	bl	80084ac <xTaskIncrementTick>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008428:	4b16      	ldr	r3, [pc, #88]	; (8008484 <xTaskResumeAll+0x12c>)
 800842a:	2201      	movs	r2, #1
 800842c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3b01      	subs	r3, #1
 8008432:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1f1      	bne.n	800841e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800843a:	4b13      	ldr	r3, [pc, #76]	; (8008488 <xTaskResumeAll+0x130>)
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008440:	4b10      	ldr	r3, [pc, #64]	; (8008484 <xTaskResumeAll+0x12c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008448:	2301      	movs	r3, #1
 800844a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800844c:	4b0f      	ldr	r3, [pc, #60]	; (800848c <xTaskResumeAll+0x134>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800845c:	f001 fa1a 	bl	8009894 <vPortExitCritical>

	return xAlreadyYielded;
 8008460:	68bb      	ldr	r3, [r7, #8]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000af0 	.word	0x20000af0
 8008470:	20000ac8 	.word	0x20000ac8
 8008474:	20000a88 	.word	0x20000a88
 8008478:	20000ad0 	.word	0x20000ad0
 800847c:	200009cc 	.word	0x200009cc
 8008480:	200009c8 	.word	0x200009c8
 8008484:	20000adc 	.word	0x20000adc
 8008488:	20000ad8 	.word	0x20000ad8
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008496:	4b04      	ldr	r3, [pc, #16]	; (80084a8 <xTaskGetTickCount+0x18>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800849c:	687b      	ldr	r3, [r7, #4]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr
 80084a8:	20000acc 	.word	0x20000acc

080084ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084b6:	4b50      	ldr	r3, [pc, #320]	; (80085f8 <xTaskIncrementTick+0x14c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f040 808c 	bne.w	80085d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084c0:	4b4e      	ldr	r3, [pc, #312]	; (80085fc <xTaskIncrementTick+0x150>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3301      	adds	r3, #1
 80084c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084c8:	4a4c      	ldr	r2, [pc, #304]	; (80085fc <xTaskIncrementTick+0x150>)
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d11f      	bne.n	8008514 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80084d4:	4b4a      	ldr	r3, [pc, #296]	; (8008600 <xTaskIncrementTick+0x154>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <xTaskIncrementTick+0x46>
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	e7fe      	b.n	80084f0 <xTaskIncrementTick+0x44>
 80084f2:	4b43      	ldr	r3, [pc, #268]	; (8008600 <xTaskIncrementTick+0x154>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	4b42      	ldr	r3, [pc, #264]	; (8008604 <xTaskIncrementTick+0x158>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a40      	ldr	r2, [pc, #256]	; (8008600 <xTaskIncrementTick+0x154>)
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	4a40      	ldr	r2, [pc, #256]	; (8008604 <xTaskIncrementTick+0x158>)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	4b40      	ldr	r3, [pc, #256]	; (8008608 <xTaskIncrementTick+0x15c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	4a3e      	ldr	r2, [pc, #248]	; (8008608 <xTaskIncrementTick+0x15c>)
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	f000 fac6 	bl	8008aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008514:	4b3d      	ldr	r3, [pc, #244]	; (800860c <xTaskIncrementTick+0x160>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	429a      	cmp	r2, r3
 800851c:	d34d      	bcc.n	80085ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800851e:	4b38      	ldr	r3, [pc, #224]	; (8008600 <xTaskIncrementTick+0x154>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <xTaskIncrementTick+0x80>
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <xTaskIncrementTick+0x82>
 800852c:	2300      	movs	r3, #0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008532:	4b36      	ldr	r3, [pc, #216]	; (800860c <xTaskIncrementTick+0x160>)
 8008534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008538:	601a      	str	r2, [r3, #0]
					break;
 800853a:	e03e      	b.n	80085ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800853c:	4b30      	ldr	r3, [pc, #192]	; (8008600 <xTaskIncrementTick+0x154>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d203      	bcs.n	800855c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008554:	4a2d      	ldr	r2, [pc, #180]	; (800860c <xTaskIncrementTick+0x160>)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6013      	str	r3, [r2, #0]
						break;
 800855a:	e02e      	b.n	80085ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3304      	adds	r3, #4
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fd71 	bl	8007048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	3318      	adds	r3, #24
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fd68 	bl	8007048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	2201      	movs	r2, #1
 800857e:	409a      	lsls	r2, r3
 8008580:	4b23      	ldr	r3, [pc, #140]	; (8008610 <xTaskIncrementTick+0x164>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4313      	orrs	r3, r2
 8008586:	4a22      	ldr	r2, [pc, #136]	; (8008610 <xTaskIncrementTick+0x164>)
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4a1f      	ldr	r2, [pc, #124]	; (8008614 <xTaskIncrementTick+0x168>)
 8008598:	441a      	add	r2, r3
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f7fe fcf6 	bl	8006f92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <xTaskIncrementTick+0x16c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d3b4      	bcc.n	800851e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b8:	e7b1      	b.n	800851e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085ba:	4b17      	ldr	r3, [pc, #92]	; (8008618 <xTaskIncrementTick+0x16c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c0:	4914      	ldr	r1, [pc, #80]	; (8008614 <xTaskIncrementTick+0x168>)
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d907      	bls.n	80085e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80085d2:	2301      	movs	r3, #1
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e004      	b.n	80085e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80085d8:	4b10      	ldr	r3, [pc, #64]	; (800861c <xTaskIncrementTick+0x170>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	4a0f      	ldr	r2, [pc, #60]	; (800861c <xTaskIncrementTick+0x170>)
 80085e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80085e2:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <xTaskIncrementTick+0x174>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80085ea:	2301      	movs	r3, #1
 80085ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80085ee:	697b      	ldr	r3, [r7, #20]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20000af0 	.word	0x20000af0
 80085fc:	20000acc 	.word	0x20000acc
 8008600:	20000a80 	.word	0x20000a80
 8008604:	20000a84 	.word	0x20000a84
 8008608:	20000ae0 	.word	0x20000ae0
 800860c:	20000ae8 	.word	0x20000ae8
 8008610:	20000ad0 	.word	0x20000ad0
 8008614:	200009cc 	.word	0x200009cc
 8008618:	200009c8 	.word	0x200009c8
 800861c:	20000ad8 	.word	0x20000ad8
 8008620:	20000adc 	.word	0x20000adc

08008624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800862a:	4b26      	ldr	r3, [pc, #152]	; (80086c4 <vTaskSwitchContext+0xa0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008632:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <vTaskSwitchContext+0xa4>)
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008638:	e03e      	b.n	80086b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800863a:	4b23      	ldr	r3, [pc, #140]	; (80086c8 <vTaskSwitchContext+0xa4>)
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008640:	4b22      	ldr	r3, [pc, #136]	; (80086cc <vTaskSwitchContext+0xa8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	fab3 f383 	clz	r3, r3
 800864c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	f1c3 031f 	rsb	r3, r3, #31
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	491e      	ldr	r1, [pc, #120]	; (80086d0 <vTaskSwitchContext+0xac>)
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d109      	bne.n	800867e <vTaskSwitchContext+0x5a>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	607b      	str	r3, [r7, #4]
 800867c:	e7fe      	b.n	800867c <vTaskSwitchContext+0x58>
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4a11      	ldr	r2, [pc, #68]	; (80086d0 <vTaskSwitchContext+0xac>)
 800868a:	4413      	add	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	605a      	str	r2, [r3, #4]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	3308      	adds	r3, #8
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d104      	bne.n	80086ae <vTaskSwitchContext+0x8a>
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	605a      	str	r2, [r3, #4]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	4a07      	ldr	r2, [pc, #28]	; (80086d4 <vTaskSwitchContext+0xb0>)
 80086b6:	6013      	str	r3, [r2, #0]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	20000af0 	.word	0x20000af0
 80086c8:	20000adc 	.word	0x20000adc
 80086cc:	20000ad0 	.word	0x20000ad0
 80086d0:	200009cc 	.word	0x200009cc
 80086d4:	200009c8 	.word	0x200009c8

080086d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d109      	bne.n	80086fc <vTaskPlaceOnEventList+0x24>
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	e7fe      	b.n	80086fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086fc:	4b07      	ldr	r3, [pc, #28]	; (800871c <vTaskPlaceOnEventList+0x44>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3318      	adds	r3, #24
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7fe fc67 	bl	8006fd8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800870a:	2101      	movs	r1, #1
 800870c:	6838      	ldr	r0, [r7, #0]
 800870e:	f000 fbc5 	bl	8008e9c <prvAddCurrentTaskToDelayedList>
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200009c8 	.word	0x200009c8

08008720 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <vTaskPlaceOnEventListRestricted+0x26>
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	617b      	str	r3, [r7, #20]
 8008744:	e7fe      	b.n	8008744 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008746:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <vTaskPlaceOnEventListRestricted+0x50>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3318      	adds	r3, #24
 800874c:	4619      	mov	r1, r3
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f7fe fc1f 	bl	8006f92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800875a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800875e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	68b8      	ldr	r0, [r7, #8]
 8008764:	f000 fb9a 	bl	8008e9c <prvAddCurrentTaskToDelayedList>
	}
 8008768:	bf00      	nop
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	200009c8 	.word	0x200009c8

08008774 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <xTaskRemoveFromEventList+0x2a>
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e7fe      	b.n	800879c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3318      	adds	r3, #24
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fc50 	bl	8007048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a8:	4b1d      	ldr	r3, [pc, #116]	; (8008820 <xTaskRemoveFromEventList+0xac>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11c      	bne.n	80087ea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fc47 	bl	8007048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	2201      	movs	r2, #1
 80087c0:	409a      	lsls	r2, r3
 80087c2:	4b18      	ldr	r3, [pc, #96]	; (8008824 <xTaskRemoveFromEventList+0xb0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	4a16      	ldr	r2, [pc, #88]	; (8008824 <xTaskRemoveFromEventList+0xb0>)
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4a13      	ldr	r2, [pc, #76]	; (8008828 <xTaskRemoveFromEventList+0xb4>)
 80087da:	441a      	add	r2, r3
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	3304      	adds	r3, #4
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f7fe fbd5 	bl	8006f92 <vListInsertEnd>
 80087e8:	e005      	b.n	80087f6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	3318      	adds	r3, #24
 80087ee:	4619      	mov	r1, r3
 80087f0:	480e      	ldr	r0, [pc, #56]	; (800882c <xTaskRemoveFromEventList+0xb8>)
 80087f2:	f7fe fbce 	bl	8006f92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <xTaskRemoveFromEventList+0xbc>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	429a      	cmp	r2, r3
 8008802:	d905      	bls.n	8008810 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <xTaskRemoveFromEventList+0xc0>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e001      	b.n	8008814 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008814:	697b      	ldr	r3, [r7, #20]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000af0 	.word	0x20000af0
 8008824:	20000ad0 	.word	0x20000ad0
 8008828:	200009cc 	.word	0x200009cc
 800882c:	20000a88 	.word	0x20000a88
 8008830:	200009c8 	.word	0x200009c8
 8008834:	20000adc 	.word	0x20000adc

08008838 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <vTaskInternalSetTimeOutState+0x24>)
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <vTaskInternalSetTimeOutState+0x28>)
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	605a      	str	r2, [r3, #4]
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	bc80      	pop	{r7}
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	20000ae0 	.word	0x20000ae0
 8008860:	20000acc 	.word	0x20000acc

08008864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <xTaskCheckForTimeOut+0x24>
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	e7fe      	b.n	8008886 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d109      	bne.n	80088a2 <xTaskCheckForTimeOut+0x3e>
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e7fe      	b.n	80088a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80088a2:	f000 ffc9 	bl	8009838 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088a6:	4b1d      	ldr	r3, [pc, #116]	; (800891c <xTaskCheckForTimeOut+0xb8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088be:	d102      	bne.n	80088c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61fb      	str	r3, [r7, #28]
 80088c4:	e023      	b.n	800890e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b15      	ldr	r3, [pc, #84]	; (8008920 <xTaskCheckForTimeOut+0xbc>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d007      	beq.n	80088e2 <xTaskCheckForTimeOut+0x7e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d302      	bcc.n	80088e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	e015      	b.n	800890e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d20b      	bcs.n	8008904 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	1ad2      	subs	r2, r2, r3
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff ff9d 	bl	8008838 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
 8008902:	e004      	b.n	800890e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800890e:	f000 ffc1 	bl	8009894 <vPortExitCritical>

	return xReturn;
 8008912:	69fb      	ldr	r3, [r7, #28]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	20000acc 	.word	0x20000acc
 8008920:	20000ae0 	.word	0x20000ae0

08008924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008928:	4b03      	ldr	r3, [pc, #12]	; (8008938 <vTaskMissedYield+0x14>)
 800892a:	2201      	movs	r2, #1
 800892c:	601a      	str	r2, [r3, #0]
}
 800892e:	bf00      	nop
 8008930:	46bd      	mov	sp, r7
 8008932:	bc80      	pop	{r7}
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000adc 	.word	0x20000adc

0800893c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008944:	f000 f852 	bl	80089ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008948:	4b06      	ldr	r3, [pc, #24]	; (8008964 <prvIdleTask+0x28>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d9f9      	bls.n	8008944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <prvIdleTask+0x2c>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008960:	e7f0      	b.n	8008944 <prvIdleTask+0x8>
 8008962:	bf00      	nop
 8008964:	200009cc 	.word	0x200009cc
 8008968:	e000ed04 	.word	0xe000ed04

0800896c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008972:	2300      	movs	r3, #0
 8008974:	607b      	str	r3, [r7, #4]
 8008976:	e00c      	b.n	8008992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4a12      	ldr	r2, [pc, #72]	; (80089cc <prvInitialiseTaskLists+0x60>)
 8008984:	4413      	add	r3, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe fad8 	bl	8006f3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3301      	adds	r3, #1
 8008990:	607b      	str	r3, [r7, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b06      	cmp	r3, #6
 8008996:	d9ef      	bls.n	8008978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008998:	480d      	ldr	r0, [pc, #52]	; (80089d0 <prvInitialiseTaskLists+0x64>)
 800899a:	f7fe facf 	bl	8006f3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800899e:	480d      	ldr	r0, [pc, #52]	; (80089d4 <prvInitialiseTaskLists+0x68>)
 80089a0:	f7fe facc 	bl	8006f3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089a4:	480c      	ldr	r0, [pc, #48]	; (80089d8 <prvInitialiseTaskLists+0x6c>)
 80089a6:	f7fe fac9 	bl	8006f3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089aa:	480c      	ldr	r0, [pc, #48]	; (80089dc <prvInitialiseTaskLists+0x70>)
 80089ac:	f7fe fac6 	bl	8006f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089b0:	480b      	ldr	r0, [pc, #44]	; (80089e0 <prvInitialiseTaskLists+0x74>)
 80089b2:	f7fe fac3 	bl	8006f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089b6:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <prvInitialiseTaskLists+0x78>)
 80089b8:	4a05      	ldr	r2, [pc, #20]	; (80089d0 <prvInitialiseTaskLists+0x64>)
 80089ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <prvInitialiseTaskLists+0x7c>)
 80089be:	4a05      	ldr	r2, [pc, #20]	; (80089d4 <prvInitialiseTaskLists+0x68>)
 80089c0:	601a      	str	r2, [r3, #0]
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200009cc 	.word	0x200009cc
 80089d0:	20000a58 	.word	0x20000a58
 80089d4:	20000a6c 	.word	0x20000a6c
 80089d8:	20000a88 	.word	0x20000a88
 80089dc:	20000a9c 	.word	0x20000a9c
 80089e0:	20000ab4 	.word	0x20000ab4
 80089e4:	20000a80 	.word	0x20000a80
 80089e8:	20000a84 	.word	0x20000a84

080089ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089f2:	e019      	b.n	8008a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089f4:	f000 ff20 	bl	8009838 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80089f8:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <prvCheckTasksWaitingTermination+0x4c>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fe fb1f 	bl	8007048 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a0a:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <prvCheckTasksWaitingTermination+0x50>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	4a0a      	ldr	r2, [pc, #40]	; (8008a3c <prvCheckTasksWaitingTermination+0x50>)
 8008a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <prvCheckTasksWaitingTermination+0x54>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <prvCheckTasksWaitingTermination+0x54>)
 8008a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a1e:	f000 ff39 	bl	8009894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f80e 	bl	8008a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <prvCheckTasksWaitingTermination+0x54>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e1      	bne.n	80089f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	20000a9c 	.word	0x20000a9c
 8008a3c:	20000ac8 	.word	0x20000ac8
 8008a40:	20000ab0 	.word	0x20000ab0

08008a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d108      	bne.n	8008a68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 f8a4 	bl	8009ba8 <vPortFree>
				vPortFree( pxTCB );
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 f8a1 	bl	8009ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a66:	e017      	b.n	8008a98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d103      	bne.n	8008a7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 f898 	bl	8009ba8 <vPortFree>
	}
 8008a78:	e00e      	b.n	8008a98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d009      	beq.n	8008a98 <prvDeleteTCB+0x54>
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	e7fe      	b.n	8008a96 <prvDeleteTCB+0x52>
	}
 8008a98:	bf00      	nop
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <prvResetNextTaskUnblockTime+0x40>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <prvResetNextTaskUnblockTime+0x14>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e000      	b.n	8008ab6 <prvResetNextTaskUnblockTime+0x16>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008aba:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <prvResetNextTaskUnblockTime+0x44>)
 8008abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ac0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ac2:	e008      	b.n	8008ad6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008ac4:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <prvResetNextTaskUnblockTime+0x40>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	4a04      	ldr	r2, [pc, #16]	; (8008ae4 <prvResetNextTaskUnblockTime+0x44>)
 8008ad4:	6013      	str	r3, [r2, #0]
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bc80      	pop	{r7}
 8008ade:	4770      	bx	lr
 8008ae0:	20000a80 	.word	0x20000a80
 8008ae4:	20000ae8 	.word	0x20000ae8

08008ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <xTaskGetSchedulerState+0x34>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d102      	bne.n	8008afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008af6:	2301      	movs	r3, #1
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	e008      	b.n	8008b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008afc:	4b08      	ldr	r3, [pc, #32]	; (8008b20 <xTaskGetSchedulerState+0x38>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d102      	bne.n	8008b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b04:	2302      	movs	r3, #2
 8008b06:	607b      	str	r3, [r7, #4]
 8008b08:	e001      	b.n	8008b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b0e:	687b      	ldr	r3, [r7, #4]
	}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	20000ad4 	.word	0x20000ad4
 8008b20:	20000af0 	.word	0x20000af0

08008b24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d06e      	beq.n	8008c18 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3e:	4b39      	ldr	r3, [pc, #228]	; (8008c24 <xTaskPriorityInherit+0x100>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d25e      	bcs.n	8008c06 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	db06      	blt.n	8008b5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b50:	4b34      	ldr	r3, [pc, #208]	; (8008c24 <xTaskPriorityInherit+0x100>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	f1c3 0207 	rsb	r2, r3, #7
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6959      	ldr	r1, [r3, #20]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4a2e      	ldr	r2, [pc, #184]	; (8008c28 <xTaskPriorityInherit+0x104>)
 8008b70:	4413      	add	r3, r2
 8008b72:	4299      	cmp	r1, r3
 8008b74:	d101      	bne.n	8008b7a <xTaskPriorityInherit+0x56>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <xTaskPriorityInherit+0x58>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d03a      	beq.n	8008bf6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe fa5f 	bl	8007048 <uxListRemove>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d115      	bne.n	8008bbc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b94:	4924      	ldr	r1, [pc, #144]	; (8008c28 <xTaskPriorityInherit+0x104>)
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <xTaskPriorityInherit+0x98>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	2201      	movs	r2, #1
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	43da      	mvns	r2, r3
 8008bb2:	4b1e      	ldr	r3, [pc, #120]	; (8008c2c <xTaskPriorityInherit+0x108>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	4a1c      	ldr	r2, [pc, #112]	; (8008c2c <xTaskPriorityInherit+0x108>)
 8008bba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bbc:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <xTaskPriorityInherit+0x100>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	2201      	movs	r2, #1
 8008bcc:	409a      	lsls	r2, r3
 8008bce:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <xTaskPriorityInherit+0x108>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	4a15      	ldr	r2, [pc, #84]	; (8008c2c <xTaskPriorityInherit+0x108>)
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4a10      	ldr	r2, [pc, #64]	; (8008c28 <xTaskPriorityInherit+0x104>)
 8008be6:	441a      	add	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f7fe f9cf 	bl	8006f92 <vListInsertEnd>
 8008bf4:	e004      	b.n	8008c00 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <xTaskPriorityInherit+0x100>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	e008      	b.n	8008c18 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c0a:	4b06      	ldr	r3, [pc, #24]	; (8008c24 <xTaskPriorityInherit+0x100>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d201      	bcs.n	8008c18 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c14:	2301      	movs	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c18:	68fb      	ldr	r3, [r7, #12]
	}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	200009c8 	.word	0x200009c8
 8008c28:	200009cc 	.word	0x200009cc
 8008c2c:	20000ad0 	.word	0x20000ad0

08008c30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d06c      	beq.n	8008d20 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c46:	4b39      	ldr	r3, [pc, #228]	; (8008d2c <xTaskPriorityDisinherit+0xfc>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d009      	beq.n	8008c64 <xTaskPriorityDisinherit+0x34>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	e7fe      	b.n	8008c62 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <xTaskPriorityDisinherit+0x50>
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	60bb      	str	r3, [r7, #8]
 8008c7e:	e7fe      	b.n	8008c7e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c84:	1e5a      	subs	r2, r3, #1
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d044      	beq.n	8008d20 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d140      	bne.n	8008d20 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe f9d0 	bl	8007048 <uxListRemove>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d115      	bne.n	8008cda <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb2:	491f      	ldr	r1, [pc, #124]	; (8008d30 <xTaskPriorityDisinherit+0x100>)
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <xTaskPriorityDisinherit+0xaa>
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	2201      	movs	r2, #1
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	43da      	mvns	r2, r3
 8008cd0:	4b18      	ldr	r3, [pc, #96]	; (8008d34 <xTaskPriorityDisinherit+0x104>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	4a17      	ldr	r2, [pc, #92]	; (8008d34 <xTaskPriorityDisinherit+0x104>)
 8008cd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	f1c3 0207 	rsb	r2, r3, #7
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	409a      	lsls	r2, r3
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <xTaskPriorityDisinherit+0x104>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	4a0d      	ldr	r2, [pc, #52]	; (8008d34 <xTaskPriorityDisinherit+0x104>)
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4613      	mov	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <xTaskPriorityDisinherit+0x100>)
 8008d0e:	441a      	add	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f7fe f93b 	bl	8006f92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d20:	697b      	ldr	r3, [r7, #20]
	}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200009c8 	.word	0x200009c8
 8008d30:	200009cc 	.word	0x200009cc
 8008d34:	20000ad0 	.word	0x20000ad0

08008d38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d46:	2301      	movs	r3, #1
 8008d48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8086 	beq.w	8008e5e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	e7fe      	b.n	8008d6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d902      	bls.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	e002      	b.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d067      	beq.n	8008e5e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d162      	bne.n	8008e5e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d98:	4b33      	ldr	r3, [pc, #204]	; (8008e68 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d109      	bne.n	8008db6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
 8008db4:	e7fe      	b.n	8008db4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	db04      	blt.n	8008dd4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	f1c3 0207 	rsb	r2, r3, #7
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	6959      	ldr	r1, [r3, #20]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4a22      	ldr	r2, [pc, #136]	; (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008de4:	4413      	add	r3, r2
 8008de6:	4299      	cmp	r1, r3
 8008de8:	d101      	bne.n	8008dee <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008dee:	2300      	movs	r3, #0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d034      	beq.n	8008e5e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe f925 	bl	8007048 <uxListRemove>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d115      	bne.n	8008e30 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e08:	4918      	ldr	r1, [pc, #96]	; (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	2201      	movs	r2, #1
 8008e20:	fa02 f303 	lsl.w	r3, r2, r3
 8008e24:	43da      	mvns	r2, r3
 8008e26:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e2e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	2201      	movs	r2, #1
 8008e36:	409a      	lsls	r2, r3
 8008e38:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	4a0c      	ldr	r2, [pc, #48]	; (8008e70 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e46:	4613      	mov	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4a07      	ldr	r2, [pc, #28]	; (8008e6c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e50:	441a      	add	r2, r3
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4619      	mov	r1, r3
 8008e58:	4610      	mov	r0, r2
 8008e5a:	f7fe f89a 	bl	8006f92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e5e:	bf00      	nop
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200009c8 	.word	0x200009c8
 8008e6c:	200009cc 	.word	0x200009cc
 8008e70:	20000ad0 	.word	0x20000ad0

08008e74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e78:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e80:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e86:	3201      	adds	r2, #1
 8008e88:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008e8a:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
	}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200009c8 	.word	0x200009c8

08008e9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ea6:	4b29      	ldr	r3, [pc, #164]	; (8008f4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eac:	4b28      	ldr	r3, [pc, #160]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe f8c8 	bl	8007048 <uxListRemove>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10b      	bne.n	8008ed6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008ebe:	4b24      	ldr	r3, [pc, #144]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	43da      	mvns	r2, r3
 8008ecc:	4b21      	ldr	r3, [pc, #132]	; (8008f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	4a20      	ldr	r2, [pc, #128]	; (8008f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ed4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008edc:	d10a      	bne.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x58>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d007      	beq.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee4:	4b1a      	ldr	r3, [pc, #104]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4619      	mov	r1, r3
 8008eec:	481a      	ldr	r0, [pc, #104]	; (8008f58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008eee:	f7fe f850 	bl	8006f92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ef2:	e026      	b.n	8008f42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4413      	add	r3, r2
 8008efa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008efc:	4b14      	ldr	r3, [pc, #80]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d209      	bcs.n	8008f20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f0c:	4b13      	ldr	r3, [pc, #76]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3304      	adds	r3, #4
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f7fe f85d 	bl	8006fd8 <vListInsert>
}
 8008f1e:	e010      	b.n	8008f42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f20:	4b0f      	ldr	r3, [pc, #60]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fe f853 	bl	8006fd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d202      	bcs.n	8008f42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f3c:	4a09      	ldr	r2, [pc, #36]	; (8008f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	6013      	str	r3, [r2, #0]
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000acc 	.word	0x20000acc
 8008f50:	200009c8 	.word	0x200009c8
 8008f54:	20000ad0 	.word	0x20000ad0
 8008f58:	20000ab4 	.word	0x20000ab4
 8008f5c:	20000a84 	.word	0x20000a84
 8008f60:	20000a80 	.word	0x20000a80
 8008f64:	20000ae8 	.word	0x20000ae8

08008f68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	; 0x28
 8008f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f72:	f000 fb37 	bl	80095e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f76:	4b1c      	ldr	r3, [pc, #112]	; (8008fe8 <xTimerCreateTimerTask+0x80>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d021      	beq.n	8008fc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f86:	1d3a      	adds	r2, r7, #4
 8008f88:	f107 0108 	add.w	r1, r7, #8
 8008f8c:	f107 030c 	add.w	r3, r7, #12
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7f7 fcf3 	bl	800097c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	9202      	str	r2, [sp, #8]
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	2305      	movs	r3, #5
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	4910      	ldr	r1, [pc, #64]	; (8008fec <xTimerCreateTimerTask+0x84>)
 8008faa:	4811      	ldr	r0, [pc, #68]	; (8008ff0 <xTimerCreateTimerTask+0x88>)
 8008fac:	f7fe ffa8 	bl	8007f00 <xTaskCreateStatic>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	4b10      	ldr	r3, [pc, #64]	; (8008ff4 <xTimerCreateTimerTask+0x8c>)
 8008fb4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <xTimerCreateTimerTask+0x8c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <xTimerCreateTimerTask+0x74>
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	e7fe      	b.n	8008fda <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000b24 	.word	0x20000b24
 8008fec:	0800a8c0 	.word	0x0800a8c0
 8008ff0:	0800922d 	.word	0x0800922d
 8008ff4:	20000b28 	.word	0x20000b28

08008ff8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af02      	add	r7, sp, #8
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009006:	202c      	movs	r0, #44	; 0x2c
 8009008:	f000 fd0c 	bl	8009a24 <pvPortMalloc>
 800900c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00d      	beq.n	8009030 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 f844 	bl	80090b0 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009030:	697b      	ldr	r3, [r7, #20]
	}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800903a:	b580      	push	{r7, lr}
 800903c:	b08a      	sub	sp, #40	; 0x28
 800903e:	af02      	add	r7, sp, #8
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009048:	232c      	movs	r3, #44	; 0x2c
 800904a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b2c      	cmp	r3, #44	; 0x2c
 8009050:	d009      	beq.n	8009066 <xTimerCreateStatic+0x2c>
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	e7fe      	b.n	8009064 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	2b00      	cmp	r3, #0
 800906a:	d109      	bne.n	8009080 <xTimerCreateStatic+0x46>
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	e7fe      	b.n	800907e <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00d      	beq.n	80090a6 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68b9      	ldr	r1, [r7, #8]
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 f809 	bl	80090b0 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80090a6:	69fb      	ldr	r3, [r7, #28]
	}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d109      	bne.n	80090d8 <prvInitialiseNewTimer+0x28>
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	617b      	str	r3, [r7, #20]
 80090d6:	e7fe      	b.n	80090d6 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d015      	beq.n	800910a <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80090de:	f000 fa81 	bl	80095e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	6a3a      	ldr	r2, [r7, #32]
 80090fe:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	3304      	adds	r3, #4
 8009104:	4618      	mov	r0, r3
 8009106:	f7fd ff38 	bl	8006f7a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800910a:	bf00      	nop
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	; 0x28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009122:	2300      	movs	r3, #0
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d109      	bne.n	8009140 <xTimerGenericCommand+0x2c>
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	623b      	str	r3, [r7, #32]
 800913e:	e7fe      	b.n	800913e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009140:	4b19      	ldr	r3, [pc, #100]	; (80091a8 <xTimerGenericCommand+0x94>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d02a      	beq.n	800919e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b05      	cmp	r3, #5
 8009158:	dc18      	bgt.n	800918c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800915a:	f7ff fcc5 	bl	8008ae8 <xTaskGetSchedulerState>
 800915e:	4603      	mov	r3, r0
 8009160:	2b02      	cmp	r3, #2
 8009162:	d109      	bne.n	8009178 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009164:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <xTimerGenericCommand+0x94>)
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	f107 0114 	add.w	r1, r7, #20
 800916c:	2300      	movs	r3, #0
 800916e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009170:	f7fe f8ca 	bl	8007308 <xQueueGenericSend>
 8009174:	6278      	str	r0, [r7, #36]	; 0x24
 8009176:	e012      	b.n	800919e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009178:	4b0b      	ldr	r3, [pc, #44]	; (80091a8 <xTimerGenericCommand+0x94>)
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	f107 0114 	add.w	r1, r7, #20
 8009180:	2300      	movs	r3, #0
 8009182:	2200      	movs	r2, #0
 8009184:	f7fe f8c0 	bl	8007308 <xQueueGenericSend>
 8009188:	6278      	str	r0, [r7, #36]	; 0x24
 800918a:	e008      	b.n	800919e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <xTimerGenericCommand+0x94>)
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	f107 0114 	add.w	r1, r7, #20
 8009194:	2300      	movs	r3, #0
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	f7fe f9b0 	bl	80074fc <xQueueGenericSendFromISR>
 800919c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3728      	adds	r7, #40	; 0x28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20000b24 	.word	0x20000b24

080091ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b088      	sub	sp, #32
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091b6:	4b1c      	ldr	r3, [pc, #112]	; (8009228 <prvProcessExpiredTimer+0x7c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fd ff3f 	bl	8007048 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d121      	bne.n	8009216 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	18d1      	adds	r1, r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	6978      	ldr	r0, [r7, #20]
 80091e0:	f000 f8c8 	bl	8009374 <prvInsertTimerInActiveList>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d015      	beq.n	8009216 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091ea:	2300      	movs	r3, #0
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	2300      	movs	r3, #0
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	2100      	movs	r1, #0
 80091f4:	6978      	ldr	r0, [r7, #20]
 80091f6:	f7ff ff8d 	bl	8009114 <xTimerGenericCommand>
 80091fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d109      	bne.n	8009216 <prvProcessExpiredTimer+0x6a>
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	e7fe      	b.n	8009214 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	6978      	ldr	r0, [r7, #20]
 800921c:	4798      	blx	r3
}
 800921e:	bf00      	nop
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20000b1c 	.word	0x20000b1c

0800922c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009234:	f107 0308 	add.w	r3, r7, #8
 8009238:	4618      	mov	r0, r3
 800923a:	f000 f857 	bl	80092ec <prvGetNextExpireTime>
 800923e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4619      	mov	r1, r3
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f803 	bl	8009250 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800924a:	f000 f8d5 	bl	80093f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800924e:	e7f1      	b.n	8009234 <prvTimerTask+0x8>

08009250 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800925a:	f7ff f86f 	bl	800833c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800925e:	f107 0308 	add.w	r3, r7, #8
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f866 	bl	8009334 <prvSampleTimeNow>
 8009268:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d130      	bne.n	80092d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <prvProcessTimerOrBlockTask+0x3c>
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	429a      	cmp	r2, r3
 800927c:	d806      	bhi.n	800928c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800927e:	f7ff f86b 	bl	8008358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff ff91 	bl	80091ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800928a:	e024      	b.n	80092d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d008      	beq.n	80092a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009292:	4b13      	ldr	r3, [pc, #76]	; (80092e0 <prvProcessTimerOrBlockTask+0x90>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	bf0c      	ite	eq
 800929c:	2301      	moveq	r3, #1
 800929e:	2300      	movne	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092a4:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <prvProcessTimerOrBlockTask+0x94>)
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	4619      	mov	r1, r3
 80092b2:	f7fe fdf1 	bl	8007e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092b6:	f7ff f84f 	bl	8008358 <xTaskResumeAll>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092c0:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <prvProcessTimerOrBlockTask+0x98>)
 80092c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	f3bf 8f6f 	isb	sy
}
 80092d0:	e001      	b.n	80092d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092d2:	f7ff f841 	bl	8008358 <xTaskResumeAll>
}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000b20 	.word	0x20000b20
 80092e4:	20000b24 	.word	0x20000b24
 80092e8:	e000ed04 	.word	0xe000ed04

080092ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092f4:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <prvGetNextExpireTime+0x44>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bf0c      	ite	eq
 80092fe:	2301      	moveq	r3, #1
 8009300:	2300      	movne	r3, #0
 8009302:	b2db      	uxtb	r3, r3
 8009304:	461a      	mov	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009312:	4b07      	ldr	r3, [pc, #28]	; (8009330 <prvGetNextExpireTime+0x44>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	e001      	b.n	8009322 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009322:	68fb      	ldr	r3, [r7, #12]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	20000b1c 	.word	0x20000b1c

08009334 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800933c:	f7ff f8a8 	bl	8008490 <xTaskGetTickCount>
 8009340:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009342:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <prvSampleTimeNow+0x3c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	429a      	cmp	r2, r3
 800934a:	d205      	bcs.n	8009358 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800934c:	f000 f8ea 	bl	8009524 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	e002      	b.n	800935e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800935e:	4a04      	ldr	r2, [pc, #16]	; (8009370 <prvSampleTimeNow+0x3c>)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009364:	68fb      	ldr	r3, [r7, #12]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20000b2c 	.word	0x20000b2c

08009374 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d812      	bhi.n	80093c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d302      	bcc.n	80093ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	e01b      	b.n	80093e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093ae:	4b10      	ldr	r3, [pc, #64]	; (80093f0 <prvInsertTimerInActiveList+0x7c>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f7fd fe0d 	bl	8006fd8 <vListInsert>
 80093be:	e012      	b.n	80093e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d206      	bcs.n	80093d6 <prvInsertTimerInActiveList+0x62>
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d302      	bcc.n	80093d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093d0:	2301      	movs	r3, #1
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	e007      	b.n	80093e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093d6:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <prvInsertTimerInActiveList+0x80>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3304      	adds	r3, #4
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f7fd fdf9 	bl	8006fd8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093e6:	697b      	ldr	r3, [r7, #20]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	20000b20 	.word	0x20000b20
 80093f4:	20000b1c 	.word	0x20000b1c

080093f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08c      	sub	sp, #48	; 0x30
 80093fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093fe:	e07f      	b.n	8009500 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	db7b      	blt.n	80094fe <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d004      	beq.n	800941c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	3304      	adds	r3, #4
 8009416:	4618      	mov	r0, r3
 8009418:	f7fd fe16 	bl	8007048 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800941c:	1d3b      	adds	r3, r7, #4
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff ff88 	bl	8009334 <prvSampleTimeNow>
 8009424:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2b09      	cmp	r3, #9
 800942a:	d869      	bhi.n	8009500 <prvProcessReceivedCommands+0x108>
 800942c:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <prvProcessReceivedCommands+0x3c>)
 800942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009432:	bf00      	nop
 8009434:	0800945d 	.word	0x0800945d
 8009438:	0800945d 	.word	0x0800945d
 800943c:	0800945d 	.word	0x0800945d
 8009440:	08009501 	.word	0x08009501
 8009444:	080094b7 	.word	0x080094b7
 8009448:	080094ed 	.word	0x080094ed
 800944c:	0800945d 	.word	0x0800945d
 8009450:	0800945d 	.word	0x0800945d
 8009454:	08009501 	.word	0x08009501
 8009458:	080094b7 	.word	0x080094b7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	18d1      	adds	r1, r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a3a      	ldr	r2, [r7, #32]
 8009468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800946a:	f7ff ff83 	bl	8009374 <prvInsertTimerInActiveList>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d045      	beq.n	8009500 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800947a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d13d      	bne.n	8009500 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	441a      	add	r2, r3
 800948c:	2300      	movs	r3, #0
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	2300      	movs	r3, #0
 8009492:	2100      	movs	r1, #0
 8009494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009496:	f7ff fe3d 	bl	8009114 <xTimerGenericCommand>
 800949a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d12e      	bne.n	8009500 <prvProcessReceivedCommands+0x108>
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	61bb      	str	r3, [r7, #24]
 80094b4:	e7fe      	b.n	80094b4 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d109      	bne.n	80094d8 <prvProcessReceivedCommands+0xe0>
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	617b      	str	r3, [r7, #20]
 80094d6:	e7fe      	b.n	80094d6 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	699a      	ldr	r2, [r3, #24]
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	18d1      	adds	r1, r2, r3
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	6a3a      	ldr	r2, [r7, #32]
 80094e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094e6:	f7ff ff45 	bl	8009374 <prvInsertTimerInActiveList>
					break;
 80094ea:	e009      	b.n	8009500 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d104      	bne.n	8009500 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80094f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094f8:	f000 fb56 	bl	8009ba8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80094fc:	e000      	b.n	8009500 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80094fe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009500:	4b07      	ldr	r3, [pc, #28]	; (8009520 <prvProcessReceivedCommands+0x128>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f107 0108 	add.w	r1, r7, #8
 8009508:	2200      	movs	r2, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe f914 	bl	8007738 <xQueueReceive>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	f47f af74 	bne.w	8009400 <prvProcessReceivedCommands+0x8>
	}
}
 8009518:	bf00      	nop
 800951a:	3728      	adds	r7, #40	; 0x28
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000b24 	.word	0x20000b24

08009524 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800952a:	e044      	b.n	80095b6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800952c:	4b2b      	ldr	r3, [pc, #172]	; (80095dc <prvSwitchTimerLists+0xb8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009536:	4b29      	ldr	r3, [pc, #164]	; (80095dc <prvSwitchTimerLists+0xb8>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3304      	adds	r3, #4
 8009544:	4618      	mov	r0, r3
 8009546:	f7fd fd7f 	bl	8007048 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d12d      	bne.n	80095b6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	4413      	add	r3, r2
 8009562:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	429a      	cmp	r2, r3
 800956a:	d90e      	bls.n	800958a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009578:	4b18      	ldr	r3, [pc, #96]	; (80095dc <prvSwitchTimerLists+0xb8>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f7fd fd28 	bl	8006fd8 <vListInsert>
 8009588:	e015      	b.n	80095b6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800958a:	2300      	movs	r3, #0
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	2100      	movs	r1, #0
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff fdbd 	bl	8009114 <xTimerGenericCommand>
 800959a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d109      	bne.n	80095b6 <prvSwitchTimerLists+0x92>
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	e7fe      	b.n	80095b4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095b6:	4b09      	ldr	r3, [pc, #36]	; (80095dc <prvSwitchTimerLists+0xb8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1b5      	bne.n	800952c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095c0:	4b06      	ldr	r3, [pc, #24]	; (80095dc <prvSwitchTimerLists+0xb8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095c6:	4b06      	ldr	r3, [pc, #24]	; (80095e0 <prvSwitchTimerLists+0xbc>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a04      	ldr	r2, [pc, #16]	; (80095dc <prvSwitchTimerLists+0xb8>)
 80095cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095ce:	4a04      	ldr	r2, [pc, #16]	; (80095e0 <prvSwitchTimerLists+0xbc>)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	6013      	str	r3, [r2, #0]
}
 80095d4:	bf00      	nop
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000b1c 	.word	0x20000b1c
 80095e0:	20000b20 	.word	0x20000b20

080095e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80095ea:	f000 f925 	bl	8009838 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80095ee:	4b15      	ldr	r3, [pc, #84]	; (8009644 <prvCheckForValidListAndQueue+0x60>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d120      	bne.n	8009638 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80095f6:	4814      	ldr	r0, [pc, #80]	; (8009648 <prvCheckForValidListAndQueue+0x64>)
 80095f8:	f7fd fca0 	bl	8006f3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80095fc:	4813      	ldr	r0, [pc, #76]	; (800964c <prvCheckForValidListAndQueue+0x68>)
 80095fe:	f7fd fc9d 	bl	8006f3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009602:	4b13      	ldr	r3, [pc, #76]	; (8009650 <prvCheckForValidListAndQueue+0x6c>)
 8009604:	4a10      	ldr	r2, [pc, #64]	; (8009648 <prvCheckForValidListAndQueue+0x64>)
 8009606:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009608:	4b12      	ldr	r3, [pc, #72]	; (8009654 <prvCheckForValidListAndQueue+0x70>)
 800960a:	4a10      	ldr	r2, [pc, #64]	; (800964c <prvCheckForValidListAndQueue+0x68>)
 800960c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800960e:	2300      	movs	r3, #0
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	4b11      	ldr	r3, [pc, #68]	; (8009658 <prvCheckForValidListAndQueue+0x74>)
 8009614:	4a11      	ldr	r2, [pc, #68]	; (800965c <prvCheckForValidListAndQueue+0x78>)
 8009616:	210c      	movs	r1, #12
 8009618:	200a      	movs	r0, #10
 800961a:	f7fd fda7 	bl	800716c <xQueueGenericCreateStatic>
 800961e:	4602      	mov	r2, r0
 8009620:	4b08      	ldr	r3, [pc, #32]	; (8009644 <prvCheckForValidListAndQueue+0x60>)
 8009622:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009624:	4b07      	ldr	r3, [pc, #28]	; (8009644 <prvCheckForValidListAndQueue+0x60>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800962c:	4b05      	ldr	r3, [pc, #20]	; (8009644 <prvCheckForValidListAndQueue+0x60>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	490b      	ldr	r1, [pc, #44]	; (8009660 <prvCheckForValidListAndQueue+0x7c>)
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe fc08 	bl	8007e48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009638:	f000 f92c 	bl	8009894 <vPortExitCritical>
}
 800963c:	bf00      	nop
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000b24 	.word	0x20000b24
 8009648:	20000af4 	.word	0x20000af4
 800964c:	20000b08 	.word	0x20000b08
 8009650:	20000b1c 	.word	0x20000b1c
 8009654:	20000b20 	.word	0x20000b20
 8009658:	20000ba8 	.word	0x20000ba8
 800965c:	20000b30 	.word	0x20000b30
 8009660:	0800a8c8 	.word	0x0800a8c8

08009664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3b04      	subs	r3, #4
 8009674:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800967c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3b04      	subs	r3, #4
 8009682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f023 0201 	bic.w	r2, r3, #1
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3b04      	subs	r3, #4
 8009692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009694:	4a08      	ldr	r2, [pc, #32]	; (80096b8 <pxPortInitialiseStack+0x54>)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3b14      	subs	r3, #20
 800969e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3b20      	subs	r3, #32
 80096aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096ac:	68fb      	ldr	r3, [r7, #12]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bc80      	pop	{r7}
 80096b6:	4770      	bx	lr
 80096b8:	080096bd 	.word	0x080096bd

080096bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80096c2:	2300      	movs	r3, #0
 80096c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096c6:	4b10      	ldr	r3, [pc, #64]	; (8009708 <prvTaskExitError+0x4c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ce:	d009      	beq.n	80096e4 <prvTaskExitError+0x28>
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e7fe      	b.n	80096e2 <prvTaskExitError+0x26>
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096f6:	bf00      	nop
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0fc      	beq.n	80096f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096fe:	bf00      	nop
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr
 8009708:	2000009c 	.word	0x2000009c
 800970c:	00000000 	.word	0x00000000

08009710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <pxCurrentTCBConst2>)
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	6808      	ldr	r0, [r1, #0]
 8009716:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800971a:	f380 8809 	msr	PSP, r0
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f04f 0000 	mov.w	r0, #0
 8009726:	f380 8811 	msr	BASEPRI, r0
 800972a:	f04e 0e0d 	orr.w	lr, lr, #13
 800972e:	4770      	bx	lr

08009730 <pxCurrentTCBConst2>:
 8009730:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop

08009738 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009738:	4806      	ldr	r0, [pc, #24]	; (8009754 <prvPortStartFirstTask+0x1c>)
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	6800      	ldr	r0, [r0, #0]
 800973e:	f380 8808 	msr	MSP, r0
 8009742:	b662      	cpsie	i
 8009744:	b661      	cpsie	f
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	df00      	svc	0
 8009750:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009752:	bf00      	nop
 8009754:	e000ed08 	.word	0xe000ed08

08009758 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800975e:	4b31      	ldr	r3, [pc, #196]	; (8009824 <xPortStartScheduler+0xcc>)
 8009760:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	22ff      	movs	r2, #255	; 0xff
 800976e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009780:	b2da      	uxtb	r2, r3
 8009782:	4b29      	ldr	r3, [pc, #164]	; (8009828 <xPortStartScheduler+0xd0>)
 8009784:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009786:	4b29      	ldr	r3, [pc, #164]	; (800982c <xPortStartScheduler+0xd4>)
 8009788:	2207      	movs	r2, #7
 800978a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800978c:	e009      	b.n	80097a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800978e:	4b27      	ldr	r3, [pc, #156]	; (800982c <xPortStartScheduler+0xd4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3b01      	subs	r3, #1
 8009794:	4a25      	ldr	r2, [pc, #148]	; (800982c <xPortStartScheduler+0xd4>)
 8009796:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097aa:	2b80      	cmp	r3, #128	; 0x80
 80097ac:	d0ef      	beq.n	800978e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097ae:	4b1f      	ldr	r3, [pc, #124]	; (800982c <xPortStartScheduler+0xd4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f1c3 0307 	rsb	r3, r3, #7
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d009      	beq.n	80097ce <xPortStartScheduler+0x76>
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	60bb      	str	r3, [r7, #8]
 80097cc:	e7fe      	b.n	80097cc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097ce:	4b17      	ldr	r3, [pc, #92]	; (800982c <xPortStartScheduler+0xd4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	4a15      	ldr	r2, [pc, #84]	; (800982c <xPortStartScheduler+0xd4>)
 80097d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097d8:	4b14      	ldr	r3, [pc, #80]	; (800982c <xPortStartScheduler+0xd4>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097e0:	4a12      	ldr	r2, [pc, #72]	; (800982c <xPortStartScheduler+0xd4>)
 80097e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097ec:	4b10      	ldr	r3, [pc, #64]	; (8009830 <xPortStartScheduler+0xd8>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a0f      	ldr	r2, [pc, #60]	; (8009830 <xPortStartScheduler+0xd8>)
 80097f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097f8:	4b0d      	ldr	r3, [pc, #52]	; (8009830 <xPortStartScheduler+0xd8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a0c      	ldr	r2, [pc, #48]	; (8009830 <xPortStartScheduler+0xd8>)
 80097fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009804:	f000 f8b0 	bl	8009968 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <xPortStartScheduler+0xdc>)
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800980e:	f7ff ff93 	bl	8009738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009812:	f7fe ff07 	bl	8008624 <vTaskSwitchContext>
	prvTaskExitError();
 8009816:	f7ff ff51 	bl	80096bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	e000e400 	.word	0xe000e400
 8009828:	20000bf0 	.word	0x20000bf0
 800982c:	20000bf4 	.word	0x20000bf4
 8009830:	e000ed20 	.word	0xe000ed20
 8009834:	2000009c 	.word	0x2000009c

08009838 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009850:	4b0e      	ldr	r3, [pc, #56]	; (800988c <vPortEnterCritical+0x54>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3301      	adds	r3, #1
 8009856:	4a0d      	ldr	r2, [pc, #52]	; (800988c <vPortEnterCritical+0x54>)
 8009858:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800985a:	4b0c      	ldr	r3, [pc, #48]	; (800988c <vPortEnterCritical+0x54>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d10e      	bne.n	8009880 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009862:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <vPortEnterCritical+0x58>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d009      	beq.n	8009880 <vPortEnterCritical+0x48>
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	e7fe      	b.n	800987e <vPortEnterCritical+0x46>
	}
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	bc80      	pop	{r7}
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	2000009c 	.word	0x2000009c
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800989a:	4b10      	ldr	r3, [pc, #64]	; (80098dc <vPortExitCritical+0x48>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d109      	bne.n	80098b6 <vPortExitCritical+0x22>
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	607b      	str	r3, [r7, #4]
 80098b4:	e7fe      	b.n	80098b4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <vPortExitCritical+0x48>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	4a07      	ldr	r2, [pc, #28]	; (80098dc <vPortExitCritical+0x48>)
 80098be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098c0:	4b06      	ldr	r3, [pc, #24]	; (80098dc <vPortExitCritical+0x48>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <vPortExitCritical+0x3e>
 80098c8:	2300      	movs	r3, #0
 80098ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80098d2:	bf00      	nop
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr
 80098dc:	2000009c 	.word	0x2000009c

080098e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098e0:	f3ef 8009 	mrs	r0, PSP
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <pxCurrentTCBConst>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80098f0:	6010      	str	r0, [r2, #0]
 80098f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80098f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098fa:	f380 8811 	msr	BASEPRI, r0
 80098fe:	f7fe fe91 	bl	8008624 <vTaskSwitchContext>
 8009902:	f04f 0000 	mov.w	r0, #0
 8009906:	f380 8811 	msr	BASEPRI, r0
 800990a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800990e:	6819      	ldr	r1, [r3, #0]
 8009910:	6808      	ldr	r0, [r1, #0]
 8009912:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009916:	f380 8809 	msr	PSP, r0
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	4770      	bx	lr

08009920 <pxCurrentTCBConst>:
 8009920:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop

08009928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009940:	f7fe fdb4 	bl	80084ac <xTaskIncrementTick>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800994a:	4b06      	ldr	r3, [pc, #24]	; (8009964 <SysTick_Handler+0x3c>)
 800994c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	2300      	movs	r3, #0
 8009954:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	e000ed04 	.word	0xe000ed04

08009968 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009968:	b480      	push	{r7}
 800996a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <vPortSetupTimerInterrupt+0x30>)
 800996e:	2200      	movs	r2, #0
 8009970:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009972:	4b0a      	ldr	r3, [pc, #40]	; (800999c <vPortSetupTimerInterrupt+0x34>)
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009978:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <vPortSetupTimerInterrupt+0x38>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a09      	ldr	r2, [pc, #36]	; (80099a4 <vPortSetupTimerInterrupt+0x3c>)
 800997e:	fba2 2303 	umull	r2, r3, r2, r3
 8009982:	099b      	lsrs	r3, r3, #6
 8009984:	4a08      	ldr	r2, [pc, #32]	; (80099a8 <vPortSetupTimerInterrupt+0x40>)
 8009986:	3b01      	subs	r3, #1
 8009988:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800998a:	4b03      	ldr	r3, [pc, #12]	; (8009998 <vPortSetupTimerInterrupt+0x30>)
 800998c:	2207      	movs	r2, #7
 800998e:	601a      	str	r2, [r3, #0]
}
 8009990:	bf00      	nop
 8009992:	46bd      	mov	sp, r7
 8009994:	bc80      	pop	{r7}
 8009996:	4770      	bx	lr
 8009998:	e000e010 	.word	0xe000e010
 800999c:	e000e018 	.word	0xe000e018
 80099a0:	20000090 	.word	0x20000090
 80099a4:	10624dd3 	.word	0x10624dd3
 80099a8:	e000e014 	.word	0xe000e014

080099ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099b2:	f3ef 8305 	mrs	r3, IPSR
 80099b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b0f      	cmp	r3, #15
 80099bc:	d913      	bls.n	80099e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099be:	4a15      	ldr	r2, [pc, #84]	; (8009a14 <vPortValidateInterruptPriority+0x68>)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099c8:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <vPortValidateInterruptPriority+0x6c>)
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	7afa      	ldrb	r2, [r7, #11]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d209      	bcs.n	80099e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	607b      	str	r3, [r7, #4]
 80099e4:	e7fe      	b.n	80099e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099e6:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <vPortValidateInterruptPriority+0x70>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099ee:	4b0c      	ldr	r3, [pc, #48]	; (8009a20 <vPortValidateInterruptPriority+0x74>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d909      	bls.n	8009a0a <vPortValidateInterruptPriority+0x5e>
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	e7fe      	b.n	8009a08 <vPortValidateInterruptPriority+0x5c>
	}
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bc80      	pop	{r7}
 8009a12:	4770      	bx	lr
 8009a14:	e000e3f0 	.word	0xe000e3f0
 8009a18:	20000bf0 	.word	0x20000bf0
 8009a1c:	e000ed0c 	.word	0xe000ed0c
 8009a20:	20000bf4 	.word	0x20000bf4

08009a24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	; 0x28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a30:	f7fe fc84 	bl	800833c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a34:	4b57      	ldr	r3, [pc, #348]	; (8009b94 <pvPortMalloc+0x170>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a3c:	f000 f90c 	bl	8009c58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a40:	4b55      	ldr	r3, [pc, #340]	; (8009b98 <pvPortMalloc+0x174>)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4013      	ands	r3, r2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 808c 	bne.w	8009b66 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01c      	beq.n	8009a8e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009a54:	2208      	movs	r2, #8
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4413      	add	r3, r2
 8009a5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f003 0307 	and.w	r3, r3, #7
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d013      	beq.n	8009a8e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f023 0307 	bic.w	r3, r3, #7
 8009a6c:	3308      	adds	r3, #8
 8009a6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d009      	beq.n	8009a8e <pvPortMalloc+0x6a>
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	617b      	str	r3, [r7, #20]
 8009a8c:	e7fe      	b.n	8009a8c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d068      	beq.n	8009b66 <pvPortMalloc+0x142>
 8009a94:	4b41      	ldr	r3, [pc, #260]	; (8009b9c <pvPortMalloc+0x178>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d863      	bhi.n	8009b66 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a9e:	4b40      	ldr	r3, [pc, #256]	; (8009ba0 <pvPortMalloc+0x17c>)
 8009aa0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009aa2:	4b3f      	ldr	r3, [pc, #252]	; (8009ba0 <pvPortMalloc+0x17c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aa8:	e004      	b.n	8009ab4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d903      	bls.n	8009ac6 <pvPortMalloc+0xa2>
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1f1      	bne.n	8009aaa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ac6:	4b33      	ldr	r3, [pc, #204]	; (8009b94 <pvPortMalloc+0x170>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d04a      	beq.n	8009b66 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2208      	movs	r2, #8
 8009ad6:	4413      	add	r3, r2
 8009ad8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	1ad2      	subs	r2, r2, r3
 8009aea:	2308      	movs	r3, #8
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d91e      	bls.n	8009b30 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4413      	add	r3, r2
 8009af8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d009      	beq.n	8009b18 <pvPortMalloc+0xf4>
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	613b      	str	r3, [r7, #16]
 8009b16:	e7fe      	b.n	8009b16 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b2a:	69b8      	ldr	r0, [r7, #24]
 8009b2c:	f000 f8f6 	bl	8009d1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b30:	4b1a      	ldr	r3, [pc, #104]	; (8009b9c <pvPortMalloc+0x178>)
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	4a18      	ldr	r2, [pc, #96]	; (8009b9c <pvPortMalloc+0x178>)
 8009b3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b3e:	4b17      	ldr	r3, [pc, #92]	; (8009b9c <pvPortMalloc+0x178>)
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4b18      	ldr	r3, [pc, #96]	; (8009ba4 <pvPortMalloc+0x180>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d203      	bcs.n	8009b52 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b4a:	4b14      	ldr	r3, [pc, #80]	; (8009b9c <pvPortMalloc+0x178>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a15      	ldr	r2, [pc, #84]	; (8009ba4 <pvPortMalloc+0x180>)
 8009b50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <pvPortMalloc+0x174>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b66:	f7fe fbf7 	bl	8008358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	f003 0307 	and.w	r3, r3, #7
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d009      	beq.n	8009b88 <pvPortMalloc+0x164>
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	e7fe      	b.n	8009b86 <pvPortMalloc+0x162>
	return pvReturn;
 8009b88:	69fb      	ldr	r3, [r7, #28]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3728      	adds	r7, #40	; 0x28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20001800 	.word	0x20001800
 8009b98:	2000180c 	.word	0x2000180c
 8009b9c:	20001804 	.word	0x20001804
 8009ba0:	200017f8 	.word	0x200017f8
 8009ba4:	20001808 	.word	0x20001808

08009ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d046      	beq.n	8009c48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bba:	2308      	movs	r3, #8
 8009bbc:	425b      	negs	r3, r3
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <vPortFree+0xa8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d109      	bne.n	8009bea <vPortFree+0x42>
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	e7fe      	b.n	8009be8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d009      	beq.n	8009c06 <vPortFree+0x5e>
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	60bb      	str	r3, [r7, #8]
 8009c04:	e7fe      	b.n	8009c04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <vPortFree+0xa8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d019      	beq.n	8009c48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d115      	bne.n	8009c48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <vPortFree+0xa8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	43db      	mvns	r3, r3
 8009c26:	401a      	ands	r2, r3
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c2c:	f7fe fb86 	bl	800833c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	4b07      	ldr	r3, [pc, #28]	; (8009c54 <vPortFree+0xac>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4413      	add	r3, r2
 8009c3a:	4a06      	ldr	r2, [pc, #24]	; (8009c54 <vPortFree+0xac>)
 8009c3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c3e:	6938      	ldr	r0, [r7, #16]
 8009c40:	f000 f86c 	bl	8009d1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c44:	f7fe fb88 	bl	8008358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c48:	bf00      	nop
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	2000180c 	.word	0x2000180c
 8009c54:	20001804 	.word	0x20001804

08009c58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009c62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c64:	4b27      	ldr	r3, [pc, #156]	; (8009d04 <prvHeapInit+0xac>)
 8009c66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00c      	beq.n	8009c8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3307      	adds	r3, #7
 8009c76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	4a1f      	ldr	r2, [pc, #124]	; (8009d04 <prvHeapInit+0xac>)
 8009c88:	4413      	add	r3, r2
 8009c8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c90:	4a1d      	ldr	r2, [pc, #116]	; (8009d08 <prvHeapInit+0xb0>)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c96:	4b1c      	ldr	r3, [pc, #112]	; (8009d08 <prvHeapInit+0xb0>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ca4:	2208      	movs	r2, #8
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	1a9b      	subs	r3, r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0307 	bic.w	r3, r3, #7
 8009cb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	4a15      	ldr	r2, [pc, #84]	; (8009d0c <prvHeapInit+0xb4>)
 8009cb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cba:	4b14      	ldr	r3, [pc, #80]	; (8009d0c <prvHeapInit+0xb4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cc2:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <prvHeapInit+0xb4>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	1ad2      	subs	r2, r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009cd8:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <prvHeapInit+0xb4>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4a0a      	ldr	r2, [pc, #40]	; (8009d10 <prvHeapInit+0xb8>)
 8009ce6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	4a09      	ldr	r2, [pc, #36]	; (8009d14 <prvHeapInit+0xbc>)
 8009cee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cf0:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <prvHeapInit+0xc0>)
 8009cf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009cf6:	601a      	str	r2, [r3, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bc80      	pop	{r7}
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20000bf8 	.word	0x20000bf8
 8009d08:	200017f8 	.word	0x200017f8
 8009d0c:	20001800 	.word	0x20001800
 8009d10:	20001808 	.word	0x20001808
 8009d14:	20001804 	.word	0x20001804
 8009d18:	2000180c 	.word	0x2000180c

08009d1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d24:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <prvInsertBlockIntoFreeList+0xa8>)
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	e002      	b.n	8009d30 <prvInsertBlockIntoFreeList+0x14>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d8f7      	bhi.n	8009d2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	4413      	add	r3, r2
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d108      	bne.n	8009d5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	441a      	add	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	441a      	add	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d118      	bne.n	8009da4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <prvInsertBlockIntoFreeList+0xac>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d00d      	beq.n	8009d9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	441a      	add	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	e008      	b.n	8009dac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <prvInsertBlockIntoFreeList+0xac>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	e003      	b.n	8009dac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d002      	beq.n	8009dba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bc80      	pop	{r7}
 8009dc2:	4770      	bx	lr
 8009dc4:	200017f8 	.word	0x200017f8
 8009dc8:	20001800 	.word	0x20001800

08009dcc <atoi>:
 8009dcc:	220a      	movs	r2, #10
 8009dce:	2100      	movs	r1, #0
 8009dd0:	f000 b8da 	b.w	8009f88 <strtol>

08009dd4 <__errno>:
 8009dd4:	4b01      	ldr	r3, [pc, #4]	; (8009ddc <__errno+0x8>)
 8009dd6:	6818      	ldr	r0, [r3, #0]
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	200000a0 	.word	0x200000a0

08009de0 <__libc_init_array>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	2500      	movs	r5, #0
 8009de4:	4e0c      	ldr	r6, [pc, #48]	; (8009e18 <__libc_init_array+0x38>)
 8009de6:	4c0d      	ldr	r4, [pc, #52]	; (8009e1c <__libc_init_array+0x3c>)
 8009de8:	1ba4      	subs	r4, r4, r6
 8009dea:	10a4      	asrs	r4, r4, #2
 8009dec:	42a5      	cmp	r5, r4
 8009dee:	d109      	bne.n	8009e04 <__libc_init_array+0x24>
 8009df0:	f000 fcea 	bl	800a7c8 <_init>
 8009df4:	2500      	movs	r5, #0
 8009df6:	4e0a      	ldr	r6, [pc, #40]	; (8009e20 <__libc_init_array+0x40>)
 8009df8:	4c0a      	ldr	r4, [pc, #40]	; (8009e24 <__libc_init_array+0x44>)
 8009dfa:	1ba4      	subs	r4, r4, r6
 8009dfc:	10a4      	asrs	r4, r4, #2
 8009dfe:	42a5      	cmp	r5, r4
 8009e00:	d105      	bne.n	8009e0e <__libc_init_array+0x2e>
 8009e02:	bd70      	pop	{r4, r5, r6, pc}
 8009e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e08:	4798      	blx	r3
 8009e0a:	3501      	adds	r5, #1
 8009e0c:	e7ee      	b.n	8009dec <__libc_init_array+0xc>
 8009e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e12:	4798      	blx	r3
 8009e14:	3501      	adds	r5, #1
 8009e16:	e7f2      	b.n	8009dfe <__libc_init_array+0x1e>
 8009e18:	0800aa38 	.word	0x0800aa38
 8009e1c:	0800aa38 	.word	0x0800aa38
 8009e20:	0800aa38 	.word	0x0800aa38
 8009e24:	0800aa3c 	.word	0x0800aa3c

08009e28 <memcpy>:
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	1e43      	subs	r3, r0, #1
 8009e2c:	440a      	add	r2, r1
 8009e2e:	4291      	cmp	r1, r2
 8009e30:	d100      	bne.n	8009e34 <memcpy+0xc>
 8009e32:	bd10      	pop	{r4, pc}
 8009e34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e3c:	e7f7      	b.n	8009e2e <memcpy+0x6>

08009e3e <memset>:
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4402      	add	r2, r0
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d100      	bne.n	8009e48 <memset+0xa>
 8009e46:	4770      	bx	lr
 8009e48:	f803 1b01 	strb.w	r1, [r3], #1
 8009e4c:	e7f9      	b.n	8009e42 <memset+0x4>
	...

08009e50 <siprintf>:
 8009e50:	b40e      	push	{r1, r2, r3}
 8009e52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e56:	b500      	push	{lr}
 8009e58:	b09c      	sub	sp, #112	; 0x70
 8009e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8009e5c:	9002      	str	r0, [sp, #8]
 8009e5e:	9006      	str	r0, [sp, #24]
 8009e60:	9107      	str	r1, [sp, #28]
 8009e62:	9104      	str	r1, [sp, #16]
 8009e64:	4808      	ldr	r0, [pc, #32]	; (8009e88 <siprintf+0x38>)
 8009e66:	4909      	ldr	r1, [pc, #36]	; (8009e8c <siprintf+0x3c>)
 8009e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e6c:	9105      	str	r1, [sp, #20]
 8009e6e:	6800      	ldr	r0, [r0, #0]
 8009e70:	a902      	add	r1, sp, #8
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	f000 f90e 	bl	800a094 <_svfiprintf_r>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	701a      	strb	r2, [r3, #0]
 8009e7e:	b01c      	add	sp, #112	; 0x70
 8009e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e84:	b003      	add	sp, #12
 8009e86:	4770      	bx	lr
 8009e88:	200000a0 	.word	0x200000a0
 8009e8c:	ffff0208 	.word	0xffff0208

08009e90 <_strtol_l.isra.0>:
 8009e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	4680      	mov	r8, r0
 8009e96:	4689      	mov	r9, r1
 8009e98:	4692      	mov	sl, r2
 8009e9a:	461e      	mov	r6, r3
 8009e9c:	460f      	mov	r7, r1
 8009e9e:	463d      	mov	r5, r7
 8009ea0:	9808      	ldr	r0, [sp, #32]
 8009ea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ea6:	f000 f885 	bl	8009fb4 <__locale_ctype_ptr_l>
 8009eaa:	4420      	add	r0, r4
 8009eac:	7843      	ldrb	r3, [r0, #1]
 8009eae:	f013 0308 	ands.w	r3, r3, #8
 8009eb2:	d132      	bne.n	8009f1a <_strtol_l.isra.0+0x8a>
 8009eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8009eb6:	d132      	bne.n	8009f1e <_strtol_l.isra.0+0x8e>
 8009eb8:	2201      	movs	r2, #1
 8009eba:	787c      	ldrb	r4, [r7, #1]
 8009ebc:	1cbd      	adds	r5, r7, #2
 8009ebe:	2e00      	cmp	r6, #0
 8009ec0:	d05d      	beq.n	8009f7e <_strtol_l.isra.0+0xee>
 8009ec2:	2e10      	cmp	r6, #16
 8009ec4:	d109      	bne.n	8009eda <_strtol_l.isra.0+0x4a>
 8009ec6:	2c30      	cmp	r4, #48	; 0x30
 8009ec8:	d107      	bne.n	8009eda <_strtol_l.isra.0+0x4a>
 8009eca:	782b      	ldrb	r3, [r5, #0]
 8009ecc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ed0:	2b58      	cmp	r3, #88	; 0x58
 8009ed2:	d14f      	bne.n	8009f74 <_strtol_l.isra.0+0xe4>
 8009ed4:	2610      	movs	r6, #16
 8009ed6:	786c      	ldrb	r4, [r5, #1]
 8009ed8:	3502      	adds	r5, #2
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	bf14      	ite	ne
 8009ede:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009ee2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009ee6:	2700      	movs	r7, #0
 8009ee8:	fbb1 fcf6 	udiv	ip, r1, r6
 8009eec:	4638      	mov	r0, r7
 8009eee:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009ef2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009ef6:	2b09      	cmp	r3, #9
 8009ef8:	d817      	bhi.n	8009f2a <_strtol_l.isra.0+0x9a>
 8009efa:	461c      	mov	r4, r3
 8009efc:	42a6      	cmp	r6, r4
 8009efe:	dd23      	ble.n	8009f48 <_strtol_l.isra.0+0xb8>
 8009f00:	1c7b      	adds	r3, r7, #1
 8009f02:	d007      	beq.n	8009f14 <_strtol_l.isra.0+0x84>
 8009f04:	4584      	cmp	ip, r0
 8009f06:	d31c      	bcc.n	8009f42 <_strtol_l.isra.0+0xb2>
 8009f08:	d101      	bne.n	8009f0e <_strtol_l.isra.0+0x7e>
 8009f0a:	45a6      	cmp	lr, r4
 8009f0c:	db19      	blt.n	8009f42 <_strtol_l.isra.0+0xb2>
 8009f0e:	2701      	movs	r7, #1
 8009f10:	fb00 4006 	mla	r0, r0, r6, r4
 8009f14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f18:	e7eb      	b.n	8009ef2 <_strtol_l.isra.0+0x62>
 8009f1a:	462f      	mov	r7, r5
 8009f1c:	e7bf      	b.n	8009e9e <_strtol_l.isra.0+0xe>
 8009f1e:	2c2b      	cmp	r4, #43	; 0x2b
 8009f20:	bf04      	itt	eq
 8009f22:	1cbd      	addeq	r5, r7, #2
 8009f24:	787c      	ldrbeq	r4, [r7, #1]
 8009f26:	461a      	mov	r2, r3
 8009f28:	e7c9      	b.n	8009ebe <_strtol_l.isra.0+0x2e>
 8009f2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009f2e:	2b19      	cmp	r3, #25
 8009f30:	d801      	bhi.n	8009f36 <_strtol_l.isra.0+0xa6>
 8009f32:	3c37      	subs	r4, #55	; 0x37
 8009f34:	e7e2      	b.n	8009efc <_strtol_l.isra.0+0x6c>
 8009f36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009f3a:	2b19      	cmp	r3, #25
 8009f3c:	d804      	bhi.n	8009f48 <_strtol_l.isra.0+0xb8>
 8009f3e:	3c57      	subs	r4, #87	; 0x57
 8009f40:	e7dc      	b.n	8009efc <_strtol_l.isra.0+0x6c>
 8009f42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f46:	e7e5      	b.n	8009f14 <_strtol_l.isra.0+0x84>
 8009f48:	1c7b      	adds	r3, r7, #1
 8009f4a:	d108      	bne.n	8009f5e <_strtol_l.isra.0+0xce>
 8009f4c:	2322      	movs	r3, #34	; 0x22
 8009f4e:	4608      	mov	r0, r1
 8009f50:	f8c8 3000 	str.w	r3, [r8]
 8009f54:	f1ba 0f00 	cmp.w	sl, #0
 8009f58:	d107      	bne.n	8009f6a <_strtol_l.isra.0+0xda>
 8009f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5e:	b102      	cbz	r2, 8009f62 <_strtol_l.isra.0+0xd2>
 8009f60:	4240      	negs	r0, r0
 8009f62:	f1ba 0f00 	cmp.w	sl, #0
 8009f66:	d0f8      	beq.n	8009f5a <_strtol_l.isra.0+0xca>
 8009f68:	b10f      	cbz	r7, 8009f6e <_strtol_l.isra.0+0xde>
 8009f6a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009f6e:	f8ca 9000 	str.w	r9, [sl]
 8009f72:	e7f2      	b.n	8009f5a <_strtol_l.isra.0+0xca>
 8009f74:	2430      	movs	r4, #48	; 0x30
 8009f76:	2e00      	cmp	r6, #0
 8009f78:	d1af      	bne.n	8009eda <_strtol_l.isra.0+0x4a>
 8009f7a:	2608      	movs	r6, #8
 8009f7c:	e7ad      	b.n	8009eda <_strtol_l.isra.0+0x4a>
 8009f7e:	2c30      	cmp	r4, #48	; 0x30
 8009f80:	d0a3      	beq.n	8009eca <_strtol_l.isra.0+0x3a>
 8009f82:	260a      	movs	r6, #10
 8009f84:	e7a9      	b.n	8009eda <_strtol_l.isra.0+0x4a>
	...

08009f88 <strtol>:
 8009f88:	4b08      	ldr	r3, [pc, #32]	; (8009fac <strtol+0x24>)
 8009f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f8c:	681c      	ldr	r4, [r3, #0]
 8009f8e:	4d08      	ldr	r5, [pc, #32]	; (8009fb0 <strtol+0x28>)
 8009f90:	6a23      	ldr	r3, [r4, #32]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	bf08      	it	eq
 8009f96:	462b      	moveq	r3, r5
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	460a      	mov	r2, r1
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f7ff ff75 	bl	8009e90 <_strtol_l.isra.0>
 8009fa6:	b003      	add	sp, #12
 8009fa8:	bd30      	pop	{r4, r5, pc}
 8009faa:	bf00      	nop
 8009fac:	200000a0 	.word	0x200000a0
 8009fb0:	20000104 	.word	0x20000104

08009fb4 <__locale_ctype_ptr_l>:
 8009fb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009fb8:	4770      	bx	lr

08009fba <__ascii_mbtowc>:
 8009fba:	b082      	sub	sp, #8
 8009fbc:	b901      	cbnz	r1, 8009fc0 <__ascii_mbtowc+0x6>
 8009fbe:	a901      	add	r1, sp, #4
 8009fc0:	b142      	cbz	r2, 8009fd4 <__ascii_mbtowc+0x1a>
 8009fc2:	b14b      	cbz	r3, 8009fd8 <__ascii_mbtowc+0x1e>
 8009fc4:	7813      	ldrb	r3, [r2, #0]
 8009fc6:	600b      	str	r3, [r1, #0]
 8009fc8:	7812      	ldrb	r2, [r2, #0]
 8009fca:	1c10      	adds	r0, r2, #0
 8009fcc:	bf18      	it	ne
 8009fce:	2001      	movne	r0, #1
 8009fd0:	b002      	add	sp, #8
 8009fd2:	4770      	bx	lr
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	e7fb      	b.n	8009fd0 <__ascii_mbtowc+0x16>
 8009fd8:	f06f 0001 	mvn.w	r0, #1
 8009fdc:	e7f8      	b.n	8009fd0 <__ascii_mbtowc+0x16>

08009fde <__ssputs_r>:
 8009fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe2:	688e      	ldr	r6, [r1, #8]
 8009fe4:	4682      	mov	sl, r0
 8009fe6:	429e      	cmp	r6, r3
 8009fe8:	460c      	mov	r4, r1
 8009fea:	4690      	mov	r8, r2
 8009fec:	4699      	mov	r9, r3
 8009fee:	d837      	bhi.n	800a060 <__ssputs_r+0x82>
 8009ff0:	898a      	ldrh	r2, [r1, #12]
 8009ff2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ff6:	d031      	beq.n	800a05c <__ssputs_r+0x7e>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	6825      	ldr	r5, [r4, #0]
 8009ffc:	6909      	ldr	r1, [r1, #16]
 8009ffe:	1a6f      	subs	r7, r5, r1
 800a000:	6965      	ldr	r5, [r4, #20]
 800a002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a006:	fb95 f5f3 	sdiv	r5, r5, r3
 800a00a:	f109 0301 	add.w	r3, r9, #1
 800a00e:	443b      	add	r3, r7
 800a010:	429d      	cmp	r5, r3
 800a012:	bf38      	it	cc
 800a014:	461d      	movcc	r5, r3
 800a016:	0553      	lsls	r3, r2, #21
 800a018:	d530      	bpl.n	800a07c <__ssputs_r+0x9e>
 800a01a:	4629      	mov	r1, r5
 800a01c:	f000 fb3a 	bl	800a694 <_malloc_r>
 800a020:	4606      	mov	r6, r0
 800a022:	b950      	cbnz	r0, 800a03a <__ssputs_r+0x5c>
 800a024:	230c      	movs	r3, #12
 800a026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a02a:	f8ca 3000 	str.w	r3, [sl]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03a:	463a      	mov	r2, r7
 800a03c:	6921      	ldr	r1, [r4, #16]
 800a03e:	f7ff fef3 	bl	8009e28 <memcpy>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04c:	81a3      	strh	r3, [r4, #12]
 800a04e:	6126      	str	r6, [r4, #16]
 800a050:	443e      	add	r6, r7
 800a052:	6026      	str	r6, [r4, #0]
 800a054:	464e      	mov	r6, r9
 800a056:	6165      	str	r5, [r4, #20]
 800a058:	1bed      	subs	r5, r5, r7
 800a05a:	60a5      	str	r5, [r4, #8]
 800a05c:	454e      	cmp	r6, r9
 800a05e:	d900      	bls.n	800a062 <__ssputs_r+0x84>
 800a060:	464e      	mov	r6, r9
 800a062:	4632      	mov	r2, r6
 800a064:	4641      	mov	r1, r8
 800a066:	6820      	ldr	r0, [r4, #0]
 800a068:	f000 faaf 	bl	800a5ca <memmove>
 800a06c:	68a3      	ldr	r3, [r4, #8]
 800a06e:	2000      	movs	r0, #0
 800a070:	1b9b      	subs	r3, r3, r6
 800a072:	60a3      	str	r3, [r4, #8]
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	441e      	add	r6, r3
 800a078:	6026      	str	r6, [r4, #0]
 800a07a:	e7dc      	b.n	800a036 <__ssputs_r+0x58>
 800a07c:	462a      	mov	r2, r5
 800a07e:	f000 fb63 	bl	800a748 <_realloc_r>
 800a082:	4606      	mov	r6, r0
 800a084:	2800      	cmp	r0, #0
 800a086:	d1e2      	bne.n	800a04e <__ssputs_r+0x70>
 800a088:	6921      	ldr	r1, [r4, #16]
 800a08a:	4650      	mov	r0, sl
 800a08c:	f000 fab6 	bl	800a5fc <_free_r>
 800a090:	e7c8      	b.n	800a024 <__ssputs_r+0x46>
	...

0800a094 <_svfiprintf_r>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	461d      	mov	r5, r3
 800a09a:	898b      	ldrh	r3, [r1, #12]
 800a09c:	b09d      	sub	sp, #116	; 0x74
 800a09e:	061f      	lsls	r7, r3, #24
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	4616      	mov	r6, r2
 800a0a6:	d50f      	bpl.n	800a0c8 <_svfiprintf_r+0x34>
 800a0a8:	690b      	ldr	r3, [r1, #16]
 800a0aa:	b96b      	cbnz	r3, 800a0c8 <_svfiprintf_r+0x34>
 800a0ac:	2140      	movs	r1, #64	; 0x40
 800a0ae:	f000 faf1 	bl	800a694 <_malloc_r>
 800a0b2:	6020      	str	r0, [r4, #0]
 800a0b4:	6120      	str	r0, [r4, #16]
 800a0b6:	b928      	cbnz	r0, 800a0c4 <_svfiprintf_r+0x30>
 800a0b8:	230c      	movs	r3, #12
 800a0ba:	f8c8 3000 	str.w	r3, [r8]
 800a0be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0c2:	e0c8      	b.n	800a256 <_svfiprintf_r+0x1c2>
 800a0c4:	2340      	movs	r3, #64	; 0x40
 800a0c6:	6163      	str	r3, [r4, #20]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a0cc:	2320      	movs	r3, #32
 800a0ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0d2:	2330      	movs	r3, #48	; 0x30
 800a0d4:	f04f 0b01 	mov.w	fp, #1
 800a0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0dc:	9503      	str	r5, [sp, #12]
 800a0de:	4637      	mov	r7, r6
 800a0e0:	463d      	mov	r5, r7
 800a0e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a0e6:	b10b      	cbz	r3, 800a0ec <_svfiprintf_r+0x58>
 800a0e8:	2b25      	cmp	r3, #37	; 0x25
 800a0ea:	d13e      	bne.n	800a16a <_svfiprintf_r+0xd6>
 800a0ec:	ebb7 0a06 	subs.w	sl, r7, r6
 800a0f0:	d00b      	beq.n	800a10a <_svfiprintf_r+0x76>
 800a0f2:	4653      	mov	r3, sl
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4640      	mov	r0, r8
 800a0fa:	f7ff ff70 	bl	8009fde <__ssputs_r>
 800a0fe:	3001      	adds	r0, #1
 800a100:	f000 80a4 	beq.w	800a24c <_svfiprintf_r+0x1b8>
 800a104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a106:	4453      	add	r3, sl
 800a108:	9309      	str	r3, [sp, #36]	; 0x24
 800a10a:	783b      	ldrb	r3, [r7, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 809d 	beq.w	800a24c <_svfiprintf_r+0x1b8>
 800a112:	2300      	movs	r3, #0
 800a114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a11c:	9304      	str	r3, [sp, #16]
 800a11e:	9307      	str	r3, [sp, #28]
 800a120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a124:	931a      	str	r3, [sp, #104]	; 0x68
 800a126:	462f      	mov	r7, r5
 800a128:	2205      	movs	r2, #5
 800a12a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a12e:	4850      	ldr	r0, [pc, #320]	; (800a270 <_svfiprintf_r+0x1dc>)
 800a130:	f000 fa3d 	bl	800a5ae <memchr>
 800a134:	9b04      	ldr	r3, [sp, #16]
 800a136:	b9d0      	cbnz	r0, 800a16e <_svfiprintf_r+0xda>
 800a138:	06d9      	lsls	r1, r3, #27
 800a13a:	bf44      	itt	mi
 800a13c:	2220      	movmi	r2, #32
 800a13e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a142:	071a      	lsls	r2, r3, #28
 800a144:	bf44      	itt	mi
 800a146:	222b      	movmi	r2, #43	; 0x2b
 800a148:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a14c:	782a      	ldrb	r2, [r5, #0]
 800a14e:	2a2a      	cmp	r2, #42	; 0x2a
 800a150:	d015      	beq.n	800a17e <_svfiprintf_r+0xea>
 800a152:	462f      	mov	r7, r5
 800a154:	2000      	movs	r0, #0
 800a156:	250a      	movs	r5, #10
 800a158:	9a07      	ldr	r2, [sp, #28]
 800a15a:	4639      	mov	r1, r7
 800a15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a160:	3b30      	subs	r3, #48	; 0x30
 800a162:	2b09      	cmp	r3, #9
 800a164:	d94d      	bls.n	800a202 <_svfiprintf_r+0x16e>
 800a166:	b1b8      	cbz	r0, 800a198 <_svfiprintf_r+0x104>
 800a168:	e00f      	b.n	800a18a <_svfiprintf_r+0xf6>
 800a16a:	462f      	mov	r7, r5
 800a16c:	e7b8      	b.n	800a0e0 <_svfiprintf_r+0x4c>
 800a16e:	4a40      	ldr	r2, [pc, #256]	; (800a270 <_svfiprintf_r+0x1dc>)
 800a170:	463d      	mov	r5, r7
 800a172:	1a80      	subs	r0, r0, r2
 800a174:	fa0b f000 	lsl.w	r0, fp, r0
 800a178:	4318      	orrs	r0, r3
 800a17a:	9004      	str	r0, [sp, #16]
 800a17c:	e7d3      	b.n	800a126 <_svfiprintf_r+0x92>
 800a17e:	9a03      	ldr	r2, [sp, #12]
 800a180:	1d11      	adds	r1, r2, #4
 800a182:	6812      	ldr	r2, [r2, #0]
 800a184:	9103      	str	r1, [sp, #12]
 800a186:	2a00      	cmp	r2, #0
 800a188:	db01      	blt.n	800a18e <_svfiprintf_r+0xfa>
 800a18a:	9207      	str	r2, [sp, #28]
 800a18c:	e004      	b.n	800a198 <_svfiprintf_r+0x104>
 800a18e:	4252      	negs	r2, r2
 800a190:	f043 0302 	orr.w	r3, r3, #2
 800a194:	9207      	str	r2, [sp, #28]
 800a196:	9304      	str	r3, [sp, #16]
 800a198:	783b      	ldrb	r3, [r7, #0]
 800a19a:	2b2e      	cmp	r3, #46	; 0x2e
 800a19c:	d10c      	bne.n	800a1b8 <_svfiprintf_r+0x124>
 800a19e:	787b      	ldrb	r3, [r7, #1]
 800a1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a2:	d133      	bne.n	800a20c <_svfiprintf_r+0x178>
 800a1a4:	9b03      	ldr	r3, [sp, #12]
 800a1a6:	3702      	adds	r7, #2
 800a1a8:	1d1a      	adds	r2, r3, #4
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	9203      	str	r2, [sp, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bfb8      	it	lt
 800a1b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1b6:	9305      	str	r3, [sp, #20]
 800a1b8:	4d2e      	ldr	r5, [pc, #184]	; (800a274 <_svfiprintf_r+0x1e0>)
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	7839      	ldrb	r1, [r7, #0]
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f000 f9f5 	bl	800a5ae <memchr>
 800a1c4:	b138      	cbz	r0, 800a1d6 <_svfiprintf_r+0x142>
 800a1c6:	2340      	movs	r3, #64	; 0x40
 800a1c8:	1b40      	subs	r0, r0, r5
 800a1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	3701      	adds	r7, #1
 800a1d2:	4303      	orrs	r3, r0
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	7839      	ldrb	r1, [r7, #0]
 800a1d8:	2206      	movs	r2, #6
 800a1da:	4827      	ldr	r0, [pc, #156]	; (800a278 <_svfiprintf_r+0x1e4>)
 800a1dc:	1c7e      	adds	r6, r7, #1
 800a1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e2:	f000 f9e4 	bl	800a5ae <memchr>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d038      	beq.n	800a25c <_svfiprintf_r+0x1c8>
 800a1ea:	4b24      	ldr	r3, [pc, #144]	; (800a27c <_svfiprintf_r+0x1e8>)
 800a1ec:	bb13      	cbnz	r3, 800a234 <_svfiprintf_r+0x1a0>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	444b      	add	r3, r9
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	e76d      	b.n	800a0de <_svfiprintf_r+0x4a>
 800a202:	fb05 3202 	mla	r2, r5, r2, r3
 800a206:	2001      	movs	r0, #1
 800a208:	460f      	mov	r7, r1
 800a20a:	e7a6      	b.n	800a15a <_svfiprintf_r+0xc6>
 800a20c:	2300      	movs	r3, #0
 800a20e:	250a      	movs	r5, #10
 800a210:	4619      	mov	r1, r3
 800a212:	3701      	adds	r7, #1
 800a214:	9305      	str	r3, [sp, #20]
 800a216:	4638      	mov	r0, r7
 800a218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21c:	3a30      	subs	r2, #48	; 0x30
 800a21e:	2a09      	cmp	r2, #9
 800a220:	d903      	bls.n	800a22a <_svfiprintf_r+0x196>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0c8      	beq.n	800a1b8 <_svfiprintf_r+0x124>
 800a226:	9105      	str	r1, [sp, #20]
 800a228:	e7c6      	b.n	800a1b8 <_svfiprintf_r+0x124>
 800a22a:	fb05 2101 	mla	r1, r5, r1, r2
 800a22e:	2301      	movs	r3, #1
 800a230:	4607      	mov	r7, r0
 800a232:	e7f0      	b.n	800a216 <_svfiprintf_r+0x182>
 800a234:	ab03      	add	r3, sp, #12
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	4622      	mov	r2, r4
 800a23a:	4b11      	ldr	r3, [pc, #68]	; (800a280 <_svfiprintf_r+0x1ec>)
 800a23c:	a904      	add	r1, sp, #16
 800a23e:	4640      	mov	r0, r8
 800a240:	f3af 8000 	nop.w
 800a244:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a248:	4681      	mov	r9, r0
 800a24a:	d1d6      	bne.n	800a1fa <_svfiprintf_r+0x166>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	065b      	lsls	r3, r3, #25
 800a250:	f53f af35 	bmi.w	800a0be <_svfiprintf_r+0x2a>
 800a254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a256:	b01d      	add	sp, #116	; 0x74
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	4622      	mov	r2, r4
 800a262:	4b07      	ldr	r3, [pc, #28]	; (800a280 <_svfiprintf_r+0x1ec>)
 800a264:	a904      	add	r1, sp, #16
 800a266:	4640      	mov	r0, r8
 800a268:	f000 f882 	bl	800a370 <_printf_i>
 800a26c:	e7ea      	b.n	800a244 <_svfiprintf_r+0x1b0>
 800a26e:	bf00      	nop
 800a270:	0800a902 	.word	0x0800a902
 800a274:	0800a908 	.word	0x0800a908
 800a278:	0800a90c 	.word	0x0800a90c
 800a27c:	00000000 	.word	0x00000000
 800a280:	08009fdf 	.word	0x08009fdf

0800a284 <_printf_common>:
 800a284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a288:	4691      	mov	r9, r2
 800a28a:	461f      	mov	r7, r3
 800a28c:	688a      	ldr	r2, [r1, #8]
 800a28e:	690b      	ldr	r3, [r1, #16]
 800a290:	4606      	mov	r6, r0
 800a292:	4293      	cmp	r3, r2
 800a294:	bfb8      	it	lt
 800a296:	4613      	movlt	r3, r2
 800a298:	f8c9 3000 	str.w	r3, [r9]
 800a29c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2a6:	b112      	cbz	r2, 800a2ae <_printf_common+0x2a>
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	f8c9 3000 	str.w	r3, [r9]
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	0699      	lsls	r1, r3, #26
 800a2b2:	bf42      	ittt	mi
 800a2b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2b8:	3302      	addmi	r3, #2
 800a2ba:	f8c9 3000 	strmi.w	r3, [r9]
 800a2be:	6825      	ldr	r5, [r4, #0]
 800a2c0:	f015 0506 	ands.w	r5, r5, #6
 800a2c4:	d107      	bne.n	800a2d6 <_printf_common+0x52>
 800a2c6:	f104 0a19 	add.w	sl, r4, #25
 800a2ca:	68e3      	ldr	r3, [r4, #12]
 800a2cc:	f8d9 2000 	ldr.w	r2, [r9]
 800a2d0:	1a9b      	subs	r3, r3, r2
 800a2d2:	42ab      	cmp	r3, r5
 800a2d4:	dc29      	bgt.n	800a32a <_printf_common+0xa6>
 800a2d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2da:	6822      	ldr	r2, [r4, #0]
 800a2dc:	3300      	adds	r3, #0
 800a2de:	bf18      	it	ne
 800a2e0:	2301      	movne	r3, #1
 800a2e2:	0692      	lsls	r2, r2, #26
 800a2e4:	d42e      	bmi.n	800a344 <_printf_common+0xc0>
 800a2e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	47c0      	blx	r8
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d021      	beq.n	800a338 <_printf_common+0xb4>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	68e5      	ldr	r5, [r4, #12]
 800a2f8:	f003 0306 	and.w	r3, r3, #6
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	bf18      	it	ne
 800a300:	2500      	movne	r5, #0
 800a302:	f8d9 2000 	ldr.w	r2, [r9]
 800a306:	f04f 0900 	mov.w	r9, #0
 800a30a:	bf08      	it	eq
 800a30c:	1aad      	subeq	r5, r5, r2
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	6922      	ldr	r2, [r4, #16]
 800a312:	bf08      	it	eq
 800a314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a318:	4293      	cmp	r3, r2
 800a31a:	bfc4      	itt	gt
 800a31c:	1a9b      	subgt	r3, r3, r2
 800a31e:	18ed      	addgt	r5, r5, r3
 800a320:	341a      	adds	r4, #26
 800a322:	454d      	cmp	r5, r9
 800a324:	d11a      	bne.n	800a35c <_printf_common+0xd8>
 800a326:	2000      	movs	r0, #0
 800a328:	e008      	b.n	800a33c <_printf_common+0xb8>
 800a32a:	2301      	movs	r3, #1
 800a32c:	4652      	mov	r2, sl
 800a32e:	4639      	mov	r1, r7
 800a330:	4630      	mov	r0, r6
 800a332:	47c0      	blx	r8
 800a334:	3001      	adds	r0, #1
 800a336:	d103      	bne.n	800a340 <_printf_common+0xbc>
 800a338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a340:	3501      	adds	r5, #1
 800a342:	e7c2      	b.n	800a2ca <_printf_common+0x46>
 800a344:	2030      	movs	r0, #48	; 0x30
 800a346:	18e1      	adds	r1, r4, r3
 800a348:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a352:	4422      	add	r2, r4
 800a354:	3302      	adds	r3, #2
 800a356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a35a:	e7c4      	b.n	800a2e6 <_printf_common+0x62>
 800a35c:	2301      	movs	r3, #1
 800a35e:	4622      	mov	r2, r4
 800a360:	4639      	mov	r1, r7
 800a362:	4630      	mov	r0, r6
 800a364:	47c0      	blx	r8
 800a366:	3001      	adds	r0, #1
 800a368:	d0e6      	beq.n	800a338 <_printf_common+0xb4>
 800a36a:	f109 0901 	add.w	r9, r9, #1
 800a36e:	e7d8      	b.n	800a322 <_printf_common+0x9e>

0800a370 <_printf_i>:
 800a370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a374:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a378:	460c      	mov	r4, r1
 800a37a:	7e09      	ldrb	r1, [r1, #24]
 800a37c:	b085      	sub	sp, #20
 800a37e:	296e      	cmp	r1, #110	; 0x6e
 800a380:	4617      	mov	r7, r2
 800a382:	4606      	mov	r6, r0
 800a384:	4698      	mov	r8, r3
 800a386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a388:	f000 80b3 	beq.w	800a4f2 <_printf_i+0x182>
 800a38c:	d822      	bhi.n	800a3d4 <_printf_i+0x64>
 800a38e:	2963      	cmp	r1, #99	; 0x63
 800a390:	d036      	beq.n	800a400 <_printf_i+0x90>
 800a392:	d80a      	bhi.n	800a3aa <_printf_i+0x3a>
 800a394:	2900      	cmp	r1, #0
 800a396:	f000 80b9 	beq.w	800a50c <_printf_i+0x19c>
 800a39a:	2958      	cmp	r1, #88	; 0x58
 800a39c:	f000 8083 	beq.w	800a4a6 <_printf_i+0x136>
 800a3a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3a8:	e032      	b.n	800a410 <_printf_i+0xa0>
 800a3aa:	2964      	cmp	r1, #100	; 0x64
 800a3ac:	d001      	beq.n	800a3b2 <_printf_i+0x42>
 800a3ae:	2969      	cmp	r1, #105	; 0x69
 800a3b0:	d1f6      	bne.n	800a3a0 <_printf_i+0x30>
 800a3b2:	6820      	ldr	r0, [r4, #0]
 800a3b4:	6813      	ldr	r3, [r2, #0]
 800a3b6:	0605      	lsls	r5, r0, #24
 800a3b8:	f103 0104 	add.w	r1, r3, #4
 800a3bc:	d52a      	bpl.n	800a414 <_printf_i+0xa4>
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6011      	str	r1, [r2, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	da03      	bge.n	800a3ce <_printf_i+0x5e>
 800a3c6:	222d      	movs	r2, #45	; 0x2d
 800a3c8:	425b      	negs	r3, r3
 800a3ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a3ce:	486f      	ldr	r0, [pc, #444]	; (800a58c <_printf_i+0x21c>)
 800a3d0:	220a      	movs	r2, #10
 800a3d2:	e039      	b.n	800a448 <_printf_i+0xd8>
 800a3d4:	2973      	cmp	r1, #115	; 0x73
 800a3d6:	f000 809d 	beq.w	800a514 <_printf_i+0x1a4>
 800a3da:	d808      	bhi.n	800a3ee <_printf_i+0x7e>
 800a3dc:	296f      	cmp	r1, #111	; 0x6f
 800a3de:	d020      	beq.n	800a422 <_printf_i+0xb2>
 800a3e0:	2970      	cmp	r1, #112	; 0x70
 800a3e2:	d1dd      	bne.n	800a3a0 <_printf_i+0x30>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	f043 0320 	orr.w	r3, r3, #32
 800a3ea:	6023      	str	r3, [r4, #0]
 800a3ec:	e003      	b.n	800a3f6 <_printf_i+0x86>
 800a3ee:	2975      	cmp	r1, #117	; 0x75
 800a3f0:	d017      	beq.n	800a422 <_printf_i+0xb2>
 800a3f2:	2978      	cmp	r1, #120	; 0x78
 800a3f4:	d1d4      	bne.n	800a3a0 <_printf_i+0x30>
 800a3f6:	2378      	movs	r3, #120	; 0x78
 800a3f8:	4865      	ldr	r0, [pc, #404]	; (800a590 <_printf_i+0x220>)
 800a3fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3fe:	e055      	b.n	800a4ac <_printf_i+0x13c>
 800a400:	6813      	ldr	r3, [r2, #0]
 800a402:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a406:	1d19      	adds	r1, r3, #4
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6011      	str	r1, [r2, #0]
 800a40c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a410:	2301      	movs	r3, #1
 800a412:	e08c      	b.n	800a52e <_printf_i+0x1be>
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a41a:	6011      	str	r1, [r2, #0]
 800a41c:	bf18      	it	ne
 800a41e:	b21b      	sxthne	r3, r3
 800a420:	e7cf      	b.n	800a3c2 <_printf_i+0x52>
 800a422:	6813      	ldr	r3, [r2, #0]
 800a424:	6825      	ldr	r5, [r4, #0]
 800a426:	1d18      	adds	r0, r3, #4
 800a428:	6010      	str	r0, [r2, #0]
 800a42a:	0628      	lsls	r0, r5, #24
 800a42c:	d501      	bpl.n	800a432 <_printf_i+0xc2>
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	e002      	b.n	800a438 <_printf_i+0xc8>
 800a432:	0668      	lsls	r0, r5, #25
 800a434:	d5fb      	bpl.n	800a42e <_printf_i+0xbe>
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	296f      	cmp	r1, #111	; 0x6f
 800a43a:	bf14      	ite	ne
 800a43c:	220a      	movne	r2, #10
 800a43e:	2208      	moveq	r2, #8
 800a440:	4852      	ldr	r0, [pc, #328]	; (800a58c <_printf_i+0x21c>)
 800a442:	2100      	movs	r1, #0
 800a444:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a448:	6865      	ldr	r5, [r4, #4]
 800a44a:	2d00      	cmp	r5, #0
 800a44c:	60a5      	str	r5, [r4, #8]
 800a44e:	f2c0 8095 	blt.w	800a57c <_printf_i+0x20c>
 800a452:	6821      	ldr	r1, [r4, #0]
 800a454:	f021 0104 	bic.w	r1, r1, #4
 800a458:	6021      	str	r1, [r4, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d13d      	bne.n	800a4da <_printf_i+0x16a>
 800a45e:	2d00      	cmp	r5, #0
 800a460:	f040 808e 	bne.w	800a580 <_printf_i+0x210>
 800a464:	4665      	mov	r5, ip
 800a466:	2a08      	cmp	r2, #8
 800a468:	d10b      	bne.n	800a482 <_printf_i+0x112>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	07db      	lsls	r3, r3, #31
 800a46e:	d508      	bpl.n	800a482 <_printf_i+0x112>
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	6862      	ldr	r2, [r4, #4]
 800a474:	429a      	cmp	r2, r3
 800a476:	bfde      	ittt	le
 800a478:	2330      	movle	r3, #48	; 0x30
 800a47a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a47e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a482:	ebac 0305 	sub.w	r3, ip, r5
 800a486:	6123      	str	r3, [r4, #16]
 800a488:	f8cd 8000 	str.w	r8, [sp]
 800a48c:	463b      	mov	r3, r7
 800a48e:	aa03      	add	r2, sp, #12
 800a490:	4621      	mov	r1, r4
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff fef6 	bl	800a284 <_printf_common>
 800a498:	3001      	adds	r0, #1
 800a49a:	d14d      	bne.n	800a538 <_printf_i+0x1c8>
 800a49c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4a0:	b005      	add	sp, #20
 800a4a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4a6:	4839      	ldr	r0, [pc, #228]	; (800a58c <_printf_i+0x21c>)
 800a4a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4ac:	6813      	ldr	r3, [r2, #0]
 800a4ae:	6821      	ldr	r1, [r4, #0]
 800a4b0:	1d1d      	adds	r5, r3, #4
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6015      	str	r5, [r2, #0]
 800a4b6:	060a      	lsls	r2, r1, #24
 800a4b8:	d50b      	bpl.n	800a4d2 <_printf_i+0x162>
 800a4ba:	07ca      	lsls	r2, r1, #31
 800a4bc:	bf44      	itt	mi
 800a4be:	f041 0120 	orrmi.w	r1, r1, #32
 800a4c2:	6021      	strmi	r1, [r4, #0]
 800a4c4:	b91b      	cbnz	r3, 800a4ce <_printf_i+0x15e>
 800a4c6:	6822      	ldr	r2, [r4, #0]
 800a4c8:	f022 0220 	bic.w	r2, r2, #32
 800a4cc:	6022      	str	r2, [r4, #0]
 800a4ce:	2210      	movs	r2, #16
 800a4d0:	e7b7      	b.n	800a442 <_printf_i+0xd2>
 800a4d2:	064d      	lsls	r5, r1, #25
 800a4d4:	bf48      	it	mi
 800a4d6:	b29b      	uxthmi	r3, r3
 800a4d8:	e7ef      	b.n	800a4ba <_printf_i+0x14a>
 800a4da:	4665      	mov	r5, ip
 800a4dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4e0:	fb02 3311 	mls	r3, r2, r1, r3
 800a4e4:	5cc3      	ldrb	r3, [r0, r3]
 800a4e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	d1f5      	bne.n	800a4dc <_printf_i+0x16c>
 800a4f0:	e7b9      	b.n	800a466 <_printf_i+0xf6>
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	6825      	ldr	r5, [r4, #0]
 800a4f6:	1d18      	adds	r0, r3, #4
 800a4f8:	6961      	ldr	r1, [r4, #20]
 800a4fa:	6010      	str	r0, [r2, #0]
 800a4fc:	0628      	lsls	r0, r5, #24
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	d501      	bpl.n	800a506 <_printf_i+0x196>
 800a502:	6019      	str	r1, [r3, #0]
 800a504:	e002      	b.n	800a50c <_printf_i+0x19c>
 800a506:	066a      	lsls	r2, r5, #25
 800a508:	d5fb      	bpl.n	800a502 <_printf_i+0x192>
 800a50a:	8019      	strh	r1, [r3, #0]
 800a50c:	2300      	movs	r3, #0
 800a50e:	4665      	mov	r5, ip
 800a510:	6123      	str	r3, [r4, #16]
 800a512:	e7b9      	b.n	800a488 <_printf_i+0x118>
 800a514:	6813      	ldr	r3, [r2, #0]
 800a516:	1d19      	adds	r1, r3, #4
 800a518:	6011      	str	r1, [r2, #0]
 800a51a:	681d      	ldr	r5, [r3, #0]
 800a51c:	6862      	ldr	r2, [r4, #4]
 800a51e:	2100      	movs	r1, #0
 800a520:	4628      	mov	r0, r5
 800a522:	f000 f844 	bl	800a5ae <memchr>
 800a526:	b108      	cbz	r0, 800a52c <_printf_i+0x1bc>
 800a528:	1b40      	subs	r0, r0, r5
 800a52a:	6060      	str	r0, [r4, #4]
 800a52c:	6863      	ldr	r3, [r4, #4]
 800a52e:	6123      	str	r3, [r4, #16]
 800a530:	2300      	movs	r3, #0
 800a532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a536:	e7a7      	b.n	800a488 <_printf_i+0x118>
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	462a      	mov	r2, r5
 800a53c:	4639      	mov	r1, r7
 800a53e:	4630      	mov	r0, r6
 800a540:	47c0      	blx	r8
 800a542:	3001      	adds	r0, #1
 800a544:	d0aa      	beq.n	800a49c <_printf_i+0x12c>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	079b      	lsls	r3, r3, #30
 800a54a:	d413      	bmi.n	800a574 <_printf_i+0x204>
 800a54c:	68e0      	ldr	r0, [r4, #12]
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	4298      	cmp	r0, r3
 800a552:	bfb8      	it	lt
 800a554:	4618      	movlt	r0, r3
 800a556:	e7a3      	b.n	800a4a0 <_printf_i+0x130>
 800a558:	2301      	movs	r3, #1
 800a55a:	464a      	mov	r2, r9
 800a55c:	4639      	mov	r1, r7
 800a55e:	4630      	mov	r0, r6
 800a560:	47c0      	blx	r8
 800a562:	3001      	adds	r0, #1
 800a564:	d09a      	beq.n	800a49c <_printf_i+0x12c>
 800a566:	3501      	adds	r5, #1
 800a568:	68e3      	ldr	r3, [r4, #12]
 800a56a:	9a03      	ldr	r2, [sp, #12]
 800a56c:	1a9b      	subs	r3, r3, r2
 800a56e:	42ab      	cmp	r3, r5
 800a570:	dcf2      	bgt.n	800a558 <_printf_i+0x1e8>
 800a572:	e7eb      	b.n	800a54c <_printf_i+0x1dc>
 800a574:	2500      	movs	r5, #0
 800a576:	f104 0919 	add.w	r9, r4, #25
 800a57a:	e7f5      	b.n	800a568 <_printf_i+0x1f8>
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1ac      	bne.n	800a4da <_printf_i+0x16a>
 800a580:	7803      	ldrb	r3, [r0, #0]
 800a582:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a586:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a58a:	e76c      	b.n	800a466 <_printf_i+0xf6>
 800a58c:	0800a913 	.word	0x0800a913
 800a590:	0800a924 	.word	0x0800a924

0800a594 <__ascii_wctomb>:
 800a594:	b149      	cbz	r1, 800a5aa <__ascii_wctomb+0x16>
 800a596:	2aff      	cmp	r2, #255	; 0xff
 800a598:	bf8b      	itete	hi
 800a59a:	238a      	movhi	r3, #138	; 0x8a
 800a59c:	700a      	strbls	r2, [r1, #0]
 800a59e:	6003      	strhi	r3, [r0, #0]
 800a5a0:	2001      	movls	r0, #1
 800a5a2:	bf88      	it	hi
 800a5a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a5a8:	4770      	bx	lr
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	4770      	bx	lr

0800a5ae <memchr>:
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	b2c9      	uxtb	r1, r1
 800a5b2:	4402      	add	r2, r0
 800a5b4:	4290      	cmp	r0, r2
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	d101      	bne.n	800a5be <memchr+0x10>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	e003      	b.n	800a5c6 <memchr+0x18>
 800a5be:	781c      	ldrb	r4, [r3, #0]
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	428c      	cmp	r4, r1
 800a5c4:	d1f6      	bne.n	800a5b4 <memchr+0x6>
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	bd10      	pop	{r4, pc}

0800a5ca <memmove>:
 800a5ca:	4288      	cmp	r0, r1
 800a5cc:	b510      	push	{r4, lr}
 800a5ce:	eb01 0302 	add.w	r3, r1, r2
 800a5d2:	d807      	bhi.n	800a5e4 <memmove+0x1a>
 800a5d4:	1e42      	subs	r2, r0, #1
 800a5d6:	4299      	cmp	r1, r3
 800a5d8:	d00a      	beq.n	800a5f0 <memmove+0x26>
 800a5da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5de:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5e2:	e7f8      	b.n	800a5d6 <memmove+0xc>
 800a5e4:	4283      	cmp	r3, r0
 800a5e6:	d9f5      	bls.n	800a5d4 <memmove+0xa>
 800a5e8:	1881      	adds	r1, r0, r2
 800a5ea:	1ad2      	subs	r2, r2, r3
 800a5ec:	42d3      	cmn	r3, r2
 800a5ee:	d100      	bne.n	800a5f2 <memmove+0x28>
 800a5f0:	bd10      	pop	{r4, pc}
 800a5f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5fa:	e7f7      	b.n	800a5ec <memmove+0x22>

0800a5fc <_free_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4605      	mov	r5, r0
 800a600:	2900      	cmp	r1, #0
 800a602:	d043      	beq.n	800a68c <_free_r+0x90>
 800a604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a608:	1f0c      	subs	r4, r1, #4
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	bfb8      	it	lt
 800a60e:	18e4      	addlt	r4, r4, r3
 800a610:	f000 f8d0 	bl	800a7b4 <__malloc_lock>
 800a614:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <_free_r+0x94>)
 800a616:	6813      	ldr	r3, [r2, #0]
 800a618:	4610      	mov	r0, r2
 800a61a:	b933      	cbnz	r3, 800a62a <_free_r+0x2e>
 800a61c:	6063      	str	r3, [r4, #4]
 800a61e:	6014      	str	r4, [r2, #0]
 800a620:	4628      	mov	r0, r5
 800a622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a626:	f000 b8c6 	b.w	800a7b6 <__malloc_unlock>
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	d90b      	bls.n	800a646 <_free_r+0x4a>
 800a62e:	6821      	ldr	r1, [r4, #0]
 800a630:	1862      	adds	r2, r4, r1
 800a632:	4293      	cmp	r3, r2
 800a634:	bf01      	itttt	eq
 800a636:	681a      	ldreq	r2, [r3, #0]
 800a638:	685b      	ldreq	r3, [r3, #4]
 800a63a:	1852      	addeq	r2, r2, r1
 800a63c:	6022      	streq	r2, [r4, #0]
 800a63e:	6063      	str	r3, [r4, #4]
 800a640:	6004      	str	r4, [r0, #0]
 800a642:	e7ed      	b.n	800a620 <_free_r+0x24>
 800a644:	4613      	mov	r3, r2
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	b10a      	cbz	r2, 800a64e <_free_r+0x52>
 800a64a:	42a2      	cmp	r2, r4
 800a64c:	d9fa      	bls.n	800a644 <_free_r+0x48>
 800a64e:	6819      	ldr	r1, [r3, #0]
 800a650:	1858      	adds	r0, r3, r1
 800a652:	42a0      	cmp	r0, r4
 800a654:	d10b      	bne.n	800a66e <_free_r+0x72>
 800a656:	6820      	ldr	r0, [r4, #0]
 800a658:	4401      	add	r1, r0
 800a65a:	1858      	adds	r0, r3, r1
 800a65c:	4282      	cmp	r2, r0
 800a65e:	6019      	str	r1, [r3, #0]
 800a660:	d1de      	bne.n	800a620 <_free_r+0x24>
 800a662:	6810      	ldr	r0, [r2, #0]
 800a664:	6852      	ldr	r2, [r2, #4]
 800a666:	4401      	add	r1, r0
 800a668:	6019      	str	r1, [r3, #0]
 800a66a:	605a      	str	r2, [r3, #4]
 800a66c:	e7d8      	b.n	800a620 <_free_r+0x24>
 800a66e:	d902      	bls.n	800a676 <_free_r+0x7a>
 800a670:	230c      	movs	r3, #12
 800a672:	602b      	str	r3, [r5, #0]
 800a674:	e7d4      	b.n	800a620 <_free_r+0x24>
 800a676:	6820      	ldr	r0, [r4, #0]
 800a678:	1821      	adds	r1, r4, r0
 800a67a:	428a      	cmp	r2, r1
 800a67c:	bf01      	itttt	eq
 800a67e:	6811      	ldreq	r1, [r2, #0]
 800a680:	6852      	ldreq	r2, [r2, #4]
 800a682:	1809      	addeq	r1, r1, r0
 800a684:	6021      	streq	r1, [r4, #0]
 800a686:	6062      	str	r2, [r4, #4]
 800a688:	605c      	str	r4, [r3, #4]
 800a68a:	e7c9      	b.n	800a620 <_free_r+0x24>
 800a68c:	bd38      	pop	{r3, r4, r5, pc}
 800a68e:	bf00      	nop
 800a690:	20001810 	.word	0x20001810

0800a694 <_malloc_r>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	1ccd      	adds	r5, r1, #3
 800a698:	f025 0503 	bic.w	r5, r5, #3
 800a69c:	3508      	adds	r5, #8
 800a69e:	2d0c      	cmp	r5, #12
 800a6a0:	bf38      	it	cc
 800a6a2:	250c      	movcc	r5, #12
 800a6a4:	2d00      	cmp	r5, #0
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	db01      	blt.n	800a6ae <_malloc_r+0x1a>
 800a6aa:	42a9      	cmp	r1, r5
 800a6ac:	d903      	bls.n	800a6b6 <_malloc_r+0x22>
 800a6ae:	230c      	movs	r3, #12
 800a6b0:	6033      	str	r3, [r6, #0]
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	f000 f87d 	bl	800a7b4 <__malloc_lock>
 800a6ba:	4a21      	ldr	r2, [pc, #132]	; (800a740 <_malloc_r+0xac>)
 800a6bc:	6814      	ldr	r4, [r2, #0]
 800a6be:	4621      	mov	r1, r4
 800a6c0:	b991      	cbnz	r1, 800a6e8 <_malloc_r+0x54>
 800a6c2:	4c20      	ldr	r4, [pc, #128]	; (800a744 <_malloc_r+0xb0>)
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	b91b      	cbnz	r3, 800a6d0 <_malloc_r+0x3c>
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f863 	bl	800a794 <_sbrk_r>
 800a6ce:	6020      	str	r0, [r4, #0]
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f000 f85e 	bl	800a794 <_sbrk_r>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d124      	bne.n	800a726 <_malloc_r+0x92>
 800a6dc:	230c      	movs	r3, #12
 800a6de:	4630      	mov	r0, r6
 800a6e0:	6033      	str	r3, [r6, #0]
 800a6e2:	f000 f868 	bl	800a7b6 <__malloc_unlock>
 800a6e6:	e7e4      	b.n	800a6b2 <_malloc_r+0x1e>
 800a6e8:	680b      	ldr	r3, [r1, #0]
 800a6ea:	1b5b      	subs	r3, r3, r5
 800a6ec:	d418      	bmi.n	800a720 <_malloc_r+0x8c>
 800a6ee:	2b0b      	cmp	r3, #11
 800a6f0:	d90f      	bls.n	800a712 <_malloc_r+0x7e>
 800a6f2:	600b      	str	r3, [r1, #0]
 800a6f4:	18cc      	adds	r4, r1, r3
 800a6f6:	50cd      	str	r5, [r1, r3]
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f000 f85c 	bl	800a7b6 <__malloc_unlock>
 800a6fe:	f104 000b 	add.w	r0, r4, #11
 800a702:	1d23      	adds	r3, r4, #4
 800a704:	f020 0007 	bic.w	r0, r0, #7
 800a708:	1ac3      	subs	r3, r0, r3
 800a70a:	d0d3      	beq.n	800a6b4 <_malloc_r+0x20>
 800a70c:	425a      	negs	r2, r3
 800a70e:	50e2      	str	r2, [r4, r3]
 800a710:	e7d0      	b.n	800a6b4 <_malloc_r+0x20>
 800a712:	684b      	ldr	r3, [r1, #4]
 800a714:	428c      	cmp	r4, r1
 800a716:	bf16      	itet	ne
 800a718:	6063      	strne	r3, [r4, #4]
 800a71a:	6013      	streq	r3, [r2, #0]
 800a71c:	460c      	movne	r4, r1
 800a71e:	e7eb      	b.n	800a6f8 <_malloc_r+0x64>
 800a720:	460c      	mov	r4, r1
 800a722:	6849      	ldr	r1, [r1, #4]
 800a724:	e7cc      	b.n	800a6c0 <_malloc_r+0x2c>
 800a726:	1cc4      	adds	r4, r0, #3
 800a728:	f024 0403 	bic.w	r4, r4, #3
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d005      	beq.n	800a73c <_malloc_r+0xa8>
 800a730:	1a21      	subs	r1, r4, r0
 800a732:	4630      	mov	r0, r6
 800a734:	f000 f82e 	bl	800a794 <_sbrk_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	d0cf      	beq.n	800a6dc <_malloc_r+0x48>
 800a73c:	6025      	str	r5, [r4, #0]
 800a73e:	e7db      	b.n	800a6f8 <_malloc_r+0x64>
 800a740:	20001810 	.word	0x20001810
 800a744:	20001814 	.word	0x20001814

0800a748 <_realloc_r>:
 800a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74a:	4607      	mov	r7, r0
 800a74c:	4614      	mov	r4, r2
 800a74e:	460e      	mov	r6, r1
 800a750:	b921      	cbnz	r1, 800a75c <_realloc_r+0x14>
 800a752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a756:	4611      	mov	r1, r2
 800a758:	f7ff bf9c 	b.w	800a694 <_malloc_r>
 800a75c:	b922      	cbnz	r2, 800a768 <_realloc_r+0x20>
 800a75e:	f7ff ff4d 	bl	800a5fc <_free_r>
 800a762:	4625      	mov	r5, r4
 800a764:	4628      	mov	r0, r5
 800a766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a768:	f000 f826 	bl	800a7b8 <_malloc_usable_size_r>
 800a76c:	42a0      	cmp	r0, r4
 800a76e:	d20f      	bcs.n	800a790 <_realloc_r+0x48>
 800a770:	4621      	mov	r1, r4
 800a772:	4638      	mov	r0, r7
 800a774:	f7ff ff8e 	bl	800a694 <_malloc_r>
 800a778:	4605      	mov	r5, r0
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d0f2      	beq.n	800a764 <_realloc_r+0x1c>
 800a77e:	4631      	mov	r1, r6
 800a780:	4622      	mov	r2, r4
 800a782:	f7ff fb51 	bl	8009e28 <memcpy>
 800a786:	4631      	mov	r1, r6
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff ff37 	bl	800a5fc <_free_r>
 800a78e:	e7e9      	b.n	800a764 <_realloc_r+0x1c>
 800a790:	4635      	mov	r5, r6
 800a792:	e7e7      	b.n	800a764 <_realloc_r+0x1c>

0800a794 <_sbrk_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	2300      	movs	r3, #0
 800a798:	4c05      	ldr	r4, [pc, #20]	; (800a7b0 <_sbrk_r+0x1c>)
 800a79a:	4605      	mov	r5, r0
 800a79c:	4608      	mov	r0, r1
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	f7f8 fcde 	bl	8003160 <_sbrk>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_sbrk_r+0x1a>
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_sbrk_r+0x1a>
 800a7ac:	602b      	str	r3, [r5, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20001dfc 	.word	0x20001dfc

0800a7b4 <__malloc_lock>:
 800a7b4:	4770      	bx	lr

0800a7b6 <__malloc_unlock>:
 800a7b6:	4770      	bx	lr

0800a7b8 <_malloc_usable_size_r>:
 800a7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7bc:	1f18      	subs	r0, r3, #4
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	bfbc      	itt	lt
 800a7c2:	580b      	ldrlt	r3, [r1, r0]
 800a7c4:	18c0      	addlt	r0, r0, r3
 800a7c6:	4770      	bx	lr

0800a7c8 <_init>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr

0800a7d4 <_fini>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	bf00      	nop
 800a7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7da:	bc08      	pop	{r3}
 800a7dc:	469e      	mov	lr, r3
 800a7de:	4770      	bx	lr
