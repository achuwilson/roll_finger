
roll_finger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b70  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08007c80  08007c80  00017c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dcc  08007dcc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007dcc  08007dcc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dcc  08007dcc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dcc  08007dcc  00017dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dd0  08007dd0  00017dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c44  20000078  08007e4c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cbc  08007e4c  00021cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187a2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036e3  00000000  00000000  00038843  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  0003bf28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f8  00000000  00000000  0003d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a3ba  00000000  00000000  0003e698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c94  00000000  00000000  00058a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097c31  00000000  00000000  000696e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a4  00000000  00000000  00101394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c68 	.word	0x08007c68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007c68 	.word	0x08007c68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000094 	.word	0x20000094
 800018c:	200000e8 	.word	0x200000e8

08000190 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4a07      	ldr	r2, [pc, #28]	; (80001bc <vApplicationGetTimerTaskMemory+0x2c>)
 80001a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <vApplicationGetTimerTaskMemory+0x30>)
 80001a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200002e8 	.word	0x200002e8
 80001c0:	2000033c 	.word	0x2000033c

080001c4 <lightupLED>:
    }*/

}

void lightupLED(struct pixel *framebuffer)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b087      	sub	sp, #28
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 80001cc:	2300      	movs	r3, #0
 80001ce:	617b      	str	r3, [r7, #20]
 80001d0:	e01a      	b.n	8000208 <lightupLED+0x44>
	{
		framebuffer[i].r=0;
 80001d2:	697a      	ldr	r2, [r7, #20]
 80001d4:	4613      	mov	r3, r2
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	4413      	add	r3, r2
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	4413      	add	r3, r2
 80001de:	2200      	movs	r2, #0
 80001e0:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 80001e2:	697a      	ldr	r2, [r7, #20]
 80001e4:	4613      	mov	r3, r2
 80001e6:	005b      	lsls	r3, r3, #1
 80001e8:	4413      	add	r3, r2
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 80001f2:	697a      	ldr	r2, [r7, #20]
 80001f4:	4613      	mov	r3, r2
 80001f6:	005b      	lsls	r3, r3, #1
 80001f8:	4413      	add	r3, r2
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	4413      	add	r3, r2
 80001fe:	22ff      	movs	r2, #255	; 0xff
 8000200:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	3301      	adds	r3, #1
 8000206:	617b      	str	r3, [r7, #20]
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	2b04      	cmp	r3, #4
 800020c:	dde1      	ble.n	80001d2 <lightupLED+0xe>
	}
	for(int i=5;i<12;i++)
 800020e:	2305      	movs	r3, #5
 8000210:	613b      	str	r3, [r7, #16]
 8000212:	e01a      	b.n	800024a <lightupLED+0x86>
	{
		framebuffer[i].r=0;
 8000214:	693a      	ldr	r2, [r7, #16]
 8000216:	4613      	mov	r3, r2
 8000218:	005b      	lsls	r3, r3, #1
 800021a:	4413      	add	r3, r2
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	2200      	movs	r2, #0
 8000222:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000224:	693a      	ldr	r2, [r7, #16]
 8000226:	4613      	mov	r3, r2
 8000228:	005b      	lsls	r3, r3, #1
 800022a:	4413      	add	r3, r2
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	4413      	add	r3, r2
 8000230:	22ff      	movs	r2, #255	; 0xff
 8000232:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000234:	693a      	ldr	r2, [r7, #16]
 8000236:	4613      	mov	r3, r2
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	4413      	add	r3, r2
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	4413      	add	r3, r2
 8000240:	2200      	movs	r2, #0
 8000242:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	3301      	adds	r3, #1
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	2b0b      	cmp	r3, #11
 800024e:	dde1      	ble.n	8000214 <lightupLED+0x50>
	}
	for(int i=12;i<17;i++)
 8000250:	230c      	movs	r3, #12
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e01a      	b.n	800028c <lightupLED+0xc8>
	{
		framebuffer[i].r=50;
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4613      	mov	r3, r2
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	4413      	add	r3, r2
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	4413      	add	r3, r2
 8000262:	2232      	movs	r2, #50	; 0x32
 8000264:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=50;
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	4613      	mov	r3, r2
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	4413      	add	r3, r2
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	4413      	add	r3, r2
 8000272:	2232      	movs	r2, #50	; 0x32
 8000274:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=50;
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	4613      	mov	r3, r2
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	4413      	add	r3, r2
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	2232      	movs	r2, #50	; 0x32
 8000284:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<17;i++)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b10      	cmp	r3, #16
 8000290:	dde1      	ble.n	8000256 <lightupLED+0x92>
	}
	for(int i=17;i<24;i++)
 8000292:	2311      	movs	r3, #17
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	e01a      	b.n	80002ce <lightupLED+0x10a>
	{
		framebuffer[i].r=255;
 8000298:	68ba      	ldr	r2, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	4413      	add	r3, r2
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	4413      	add	r3, r2
 80002a4:	22ff      	movs	r2, #255	; 0xff
 80002a6:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 80002a8:	68ba      	ldr	r2, [r7, #8]
 80002aa:	4613      	mov	r3, r2
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	4413      	add	r3, r2
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	4613      	mov	r3, r2
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	4413      	add	r3, r2
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4413      	add	r3, r2
 80002c4:	2200      	movs	r2, #0
 80002c6:	709a      	strb	r2, [r3, #2]
	for(int i=17;i<24;i++)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	2b17      	cmp	r3, #23
 80002d2:	dde1      	ble.n	8000298 <lightupLED+0xd4>
	}
}
 80002d4:	bf00      	nop
 80002d6:	371c      	adds	r7, #28
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr

080002de <lightupLED2>:
void lightupLED2(struct pixel *framebuffer)
{
 80002de:	b480      	push	{r7}
 80002e0:	b087      	sub	sp, #28
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
 80002ea:	e01a      	b.n	8000322 <lightupLED2+0x44>
	{
		framebuffer[i].r=0;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	4613      	mov	r3, r2
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	4413      	add	r3, r2
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	4413      	add	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 80002fc:	697a      	ldr	r2, [r7, #20]
 80002fe:	4613      	mov	r3, r2
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	4413      	add	r3, r2
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	4413      	add	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	4613      	mov	r3, r2
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	4413      	add	r3, r2
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	22ff      	movs	r2, #255	; 0xff
 800031a:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	3301      	adds	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	2b04      	cmp	r3, #4
 8000326:	dde1      	ble.n	80002ec <lightupLED2+0xe>
	}
	for(int i=5;i<12;i++)
 8000328:	2305      	movs	r3, #5
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	e01a      	b.n	8000364 <lightupLED2+0x86>
	{
		framebuffer[i].r=0;
 800032e:	693a      	ldr	r2, [r7, #16]
 8000330:	4613      	mov	r3, r2
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	4413      	add	r3, r2
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	2200      	movs	r2, #0
 800033c:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 800033e:	693a      	ldr	r2, [r7, #16]
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	22ff      	movs	r2, #255	; 0xff
 800034c:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	2200      	movs	r2, #0
 800035c:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	3301      	adds	r3, #1
 8000362:	613b      	str	r3, [r7, #16]
 8000364:	693b      	ldr	r3, [r7, #16]
 8000366:	2b0b      	cmp	r3, #11
 8000368:	dde1      	ble.n	800032e <lightupLED2+0x50>
	}
	for(int i=12;i<19;i++)
 800036a:	230c      	movs	r3, #12
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	e01a      	b.n	80003a6 <lightupLED2+0xc8>
	{
		framebuffer[i].r=255;
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	4613      	mov	r3, r2
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	4413      	add	r3, r2
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4413      	add	r3, r2
 800037c:	22ff      	movs	r2, #255	; 0xff
 800037e:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	4613      	mov	r3, r2
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	4413      	add	r3, r2
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4413      	add	r3, r2
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	4613      	mov	r3, r2
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	4413      	add	r3, r2
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	4413      	add	r3, r2
 800039c:	2200      	movs	r2, #0
 800039e:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<19;i++)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	2b12      	cmp	r3, #18
 80003aa:	dde1      	ble.n	8000370 <lightupLED2+0x92>
	}
}
 80003ac:	bf00      	nop
 80003ae:	371c      	adds	r7, #28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
	...

080003b8 <ir_led_on>:
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

}

void ir_led_on()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2120      	movs	r1, #32
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <ir_led_on+0x14>)
 80003c2:	f002 fbbf 	bl	8002b44 <HAL_GPIO_WritePin>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <ir_led_off>:

void ir_led_off()
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2120      	movs	r1, #32
 80003d8:	4802      	ldr	r0, [pc, #8]	; (80003e4 <ir_led_off+0x14>)
 80003da:	f002 fbb3 	bl	8002b44 <HAL_GPIO_WritePin>

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40010c00 	.word	0x40010c00

080003e8 <set_mux_fl>:

void set_mux_fl(value)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]


HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value & 0b0001);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	461a      	mov	r2, r3
 80003fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000400:	4813      	ldr	r0, [pc, #76]	; (8000450 <set_mux_fl+0x68>)
 8000402:	f002 fb9f 	bl	8002b44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value & 0b0010);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	f003 0302 	and.w	r3, r3, #2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	461a      	mov	r2, r3
 8000412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000416:	480e      	ldr	r0, [pc, #56]	; (8000450 <set_mux_fl+0x68>)
 8000418:	f002 fb94 	bl	8002b44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value & 0b0100);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	b2db      	uxtb	r3, r3
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	b2db      	uxtb	r3, r3
 8000426:	461a      	mov	r2, r3
 8000428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <set_mux_fl+0x68>)
 800042e:	f002 fb89 	bl	8002b44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, value & 0b1000);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	f003 0308 	and.w	r3, r3, #8
 800043a:	b2db      	uxtb	r3, r3
 800043c:	461a      	mov	r2, r3
 800043e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <set_mux_fl+0x68>)
 8000444:	f002 fb7e 	bl	8002b44 <HAL_GPIO_WritePin>
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40010c00 	.word	0x40010c00

08000454 <set_mux_fr>:
void set_mux_fr(value)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value & 0b0001);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	f003 0301 	and.w	r3, r3, #1
 8000464:	b2db      	uxtb	r3, r3
 8000466:	461a      	mov	r2, r3
 8000468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046c:	4813      	ldr	r0, [pc, #76]	; (80004bc <set_mux_fr+0x68>)
 800046e:	f002 fb69 	bl	8002b44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value & 0b0010);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	b2db      	uxtb	r3, r3
 800047c:	461a      	mov	r2, r3
 800047e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000482:	480e      	ldr	r0, [pc, #56]	; (80004bc <set_mux_fr+0x68>)
 8000484:	f002 fb5e 	bl	8002b44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value & 0b0100);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	b2db      	uxtb	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000498:	4809      	ldr	r0, [pc, #36]	; (80004c0 <set_mux_fr+0x6c>)
 800049a:	f002 fb53 	bl	8002b44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value & 0b1000);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	f003 0308 	and.w	r3, r3, #8
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	461a      	mov	r2, r3
 80004aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ae:	4804      	ldr	r0, [pc, #16]	; (80004c0 <set_mux_fr+0x6c>)
 80004b0:	f002 fb48 	bl	8002b44 <HAL_GPIO_WritePin>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40010800 	.word	0x40010800

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b098      	sub	sp, #96	; 0x60
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f001 fa4b 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f8c7 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 fa97 	bl	8000a04 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d6:	f000 fa5f 	bl	8000998 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004da:	f000 fa33 	bl	8000944 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80004de:	f000 f91b 	bl	8000718 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e2:	f000 f9b1 	bl	8000848 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //start ADC conversations
  HAL_ADC_Start_DMA(&hadc1, adc_value, 7);
 80004e6:	2207      	movs	r2, #7
 80004e8:	494c      	ldr	r1, [pc, #304]	; (800061c <main+0x158>)
 80004ea:	484d      	ldr	r0, [pc, #308]	; (8000620 <main+0x15c>)
 80004ec:	f001 fb66 	bl	8001bbc <HAL_ADC_Start_DMA>
  // = {'\0'};
  long X = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	65fb      	str	r3, [r7, #92]	; 0x5c

  int temp;

  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

      int ch, animation_state = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	65bb      	str	r3, [r7, #88]	; 0x58
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004f8:	b662      	cpsie	i

      __enable_irq();
      HAL_Delay(200);
 80004fa:	20c8      	movs	r0, #200	; 0xc8
 80004fc:	f001 fa64 	bl	80019c8 <HAL_Delay>
              led_channels[i].framebuffer = channel_framebuffers[i];
              led_channels[i].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
          }
          */
      //channel 0
      led_channels[0].framebuffer = channel_framebuffers[0];
 8000500:	4b48      	ldr	r3, [pc, #288]	; (8000624 <main+0x160>)
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
      led_channels[0].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 8000504:	2348      	movs	r3, #72	; 0x48
 8000506:	64fb      	str	r3, [r7, #76]	; 0x4c

      //channel1
      led_channels[1].framebuffer = channel_framebuffers[1];
 8000508:	4b47      	ldr	r3, [pc, #284]	; (8000628 <main+0x164>)
 800050a:	653b      	str	r3, [r7, #80]	; 0x50
      led_channels[1].length = FRAMEBUFFER2_SIZE * sizeof(struct pixel);
 800050c:	2339      	movs	r3, #57	; 0x39
 800050e:	657b      	str	r3, [r7, #84]	; 0x54

      HAL_Delay(200);
 8000510:	20c8      	movs	r0, #200	; 0xc8
 8000512:	f001 fa59 	bl	80019c8 <HAL_Delay>
          ws2812_init();
 8000516:	f001 f9d9 	bl	80018cc <ws2812_init>
          HAL_Delay(200);
 800051a:	20c8      	movs	r0, #200	; 0xc8
 800051c:	f001 fa54 	bl	80019c8 <HAL_Delay>

       sprintf(MSG, "INIT \r\n ");
 8000520:	4b42      	ldr	r3, [pc, #264]	; (800062c <main+0x168>)
 8000522:	4a43      	ldr	r2, [pc, #268]	; (8000630 <main+0x16c>)
 8000524:	ca07      	ldmia	r2, {r0, r1, r2}
 8000526:	c303      	stmia	r3!, {r0, r1}
 8000528:	701a      	strb	r2, [r3, #0]
      	  HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 800052a:	4840      	ldr	r0, [pc, #256]	; (800062c <main+0x168>)
 800052c:	f7ff fe10 	bl	8000150 <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	b29a      	uxth	r2, r3
 8000534:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000538:	493c      	ldr	r1, [pc, #240]	; (800062c <main+0x168>)
 800053a:	483e      	ldr	r0, [pc, #248]	; (8000634 <main+0x170>)
 800053c:	f003 fef5 	bl	800432a <HAL_UART_Transmit>


  sprintf(MSG, "INIT 2\r\n ");
 8000540:	4b3a      	ldr	r3, [pc, #232]	; (800062c <main+0x168>)
 8000542:	4a3d      	ldr	r2, [pc, #244]	; (8000638 <main+0x174>)
 8000544:	ca07      	ldmia	r2, {r0, r1, r2}
 8000546:	c303      	stmia	r3!, {r0, r1}
 8000548:	801a      	strh	r2, [r3, #0]
   	  HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 800054a:	4838      	ldr	r0, [pc, #224]	; (800062c <main+0x168>)
 800054c:	f7ff fe00 	bl	8000150 <strlen>
 8000550:	4603      	mov	r3, r0
 8000552:	b29a      	uxth	r2, r3
 8000554:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000558:	4934      	ldr	r1, [pc, #208]	; (800062c <main+0x168>)
 800055a:	4836      	ldr	r0, [pc, #216]	; (8000634 <main+0x170>)
 800055c:	f003 fee5 	bl	800432a <HAL_UART_Transmit>

   //	make_pretty_colors(channel_framebuffers[0], 0,0);
   	lightupLED(channel_framebuffers[0]);
 8000560:	4830      	ldr	r0, [pc, #192]	; (8000624 <main+0x160>)
 8000562:	f7ff fe2f 	bl	80001c4 <lightupLED>
	lightupLED2(channel_framebuffers[1]);
 8000566:	4830      	ldr	r0, [pc, #192]	; (8000628 <main+0x164>)
 8000568:	f7ff feb9 	bl	80002de <lightupLED2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i

   		         // animation_state++;

   		          __disable_irq();
   		       //HAL_Delay(200);
   		          ws2812_refresh(led_channels, GPIOB);
 800056e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000572:	4932      	ldr	r1, [pc, #200]	; (800063c <main+0x178>)
 8000574:	4618      	mov	r0, r3
 8000576:	f001 f84f 	bl	8001618 <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 800057a:	b662      	cpsie	i
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of pidTimer */
  osTimerDef(pidTimer, pid_timer);
 800057c:	4b30      	ldr	r3, [pc, #192]	; (8000640 <main+0x17c>)
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
 8000580:	2300      	movs	r3, #0
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  pidTimerHandle = osTimerCreate(osTimer(pidTimer), osTimerPeriodic, NULL);
 8000584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4618      	mov	r0, r3
 800058e:	f004 fafb 	bl	8004b88 <osTimerCreate>
 8000592:	4602      	mov	r2, r0
 8000594:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <main+0x180>)
 8000596:	601a      	str	r2, [r3, #0]

  /* definition and creation of statusUpdate */
  osTimerDef(statusUpdate, status_update_timer);
 8000598:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <main+0x184>)
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  statusUpdateHandle = osTimerCreate(osTimer(statusUpdate), osTimerPeriodic, NULL);
 80005a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	4618      	mov	r0, r3
 80005aa:	f004 faed 	bl	8004b88 <osTimerCreate>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <main+0x188>)
 80005b2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  // PID timer runs at 100hz
  osTimerStart(pidTimerHandle, 10);
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <main+0x180>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	210a      	movs	r1, #10
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 fb18 	bl	8004bf0 <osTimerStart>
  //status update timer runs at 100 hz
  osTimerStart(statusUpdateHandle, 10);
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <main+0x188>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	210a      	movs	r1, #10
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fb12 	bl	8004bf0 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adcreader */
  osThreadDef(adcreader, adc_reader_task, osPriorityNormal, 0, 128);
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <main+0x18c>)
 80005ce:	f107 041c 	add.w	r4, r7, #28
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcreaderHandle = osThreadCreate(osThread(adcreader), NULL);
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fa6d 	bl	8004ac6 <osThreadCreate>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <main+0x190>)
 80005f0:	601a      	str	r2, [r3, #0]

  /* definition and creation of serialreader */
  osThreadDef(serialreader, serial_reader_task, osPriorityIdle, 0, 128);
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <main+0x194>)
 80005f4:	463c      	mov	r4, r7
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialreaderHandle = osThreadCreate(osThread(serialreader), NULL);
 8000604:	463b      	mov	r3, r7
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fa5c 	bl	8004ac6 <osThreadCreate>
 800060e:	4602      	mov	r2, r0
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <main+0x198>)
 8000612:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f004 fa50 	bl	8004ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x154>
 800061a:	bf00      	nop
 800061c:	20001694 	.word	0x20001694
 8000620:	200016d8 	.word	0x200016d8
 8000624:	20001808 	.word	0x20001808
 8000628:	20001850 	.word	0x20001850
 800062c:	200018c0 	.word	0x200018c0
 8000630:	08007c80 	.word	0x08007c80
 8000634:	20001710 	.word	0x20001710
 8000638:	08007c8c 	.word	0x08007c8c
 800063c:	40010c00 	.word	0x40010c00
 8000640:	08000be5 	.word	0x08000be5
 8000644:	20001708 	.word	0x20001708
 8000648:	08000bf9 	.word	0x08000bf9
 800064c:	2000170c 	.word	0x2000170c
 8000650:	08007ca4 	.word	0x08007ca4
 8000654:	20001690 	.word	0x20001690
 8000658:	08007cd0 	.word	0x08007cd0
 800065c:	20001648 	.word	0x20001648

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066a:	2228      	movs	r2, #40	; 0x28
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fee9 	bl	8007446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80006ac:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fa5c 	bl	8002b74 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006c2:	f000 fb3b 	bl	8000d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fcc6 	bl	8003074 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ee:	f000 fb25 	bl	8000d3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006f2:	2302      	movs	r3, #2
 80006f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80006f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fe84 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800070a:	f000 fb17 	bl	8000d3c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000728:	4b45      	ldr	r3, [pc, #276]	; (8000840 <MX_ADC1_Init+0x128>)
 800072a:	4a46      	ldr	r2, [pc, #280]	; (8000844 <MX_ADC1_Init+0x12c>)
 800072c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <MX_ADC1_Init+0x128>)
 8000730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000736:	4b42      	ldr	r3, [pc, #264]	; (8000840 <MX_ADC1_Init+0x128>)
 8000738:	2201      	movs	r2, #1
 800073a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b40      	ldr	r3, [pc, #256]	; (8000840 <MX_ADC1_Init+0x128>)
 800073e:	2200      	movs	r2, #0
 8000740:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b3f      	ldr	r3, [pc, #252]	; (8000840 <MX_ADC1_Init+0x128>)
 8000744:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000748:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_ADC1_Init+0x128>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8000750:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <MX_ADC1_Init+0x128>)
 8000752:	2207      	movs	r2, #7
 8000754:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000756:	483a      	ldr	r0, [pc, #232]	; (8000840 <MX_ADC1_Init+0x128>)
 8000758:	f001 f958 	bl	8001a0c <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000762:	f000 faeb 	bl	8000d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2301      	movs	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800076e:	2304      	movs	r3, #4
 8000770:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4832      	ldr	r0, [pc, #200]	; (8000840 <MX_ADC1_Init+0x128>)
 8000778:	f001 fb1a 	bl	8001db0 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 fadb 	bl	8000d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800078a:	2302      	movs	r3, #2
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	482b      	ldr	r0, [pc, #172]	; (8000840 <MX_ADC1_Init+0x128>)
 8000794:	f001 fb0c 	bl	8001db0 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800079e:	f000 facd 	bl	8000d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007a6:	2303      	movs	r3, #3
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80007aa:	2305      	movs	r3, #5
 80007ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4823      	ldr	r0, [pc, #140]	; (8000840 <MX_ADC1_Init+0x128>)
 80007b4:	f001 fafc 	bl	8001db0 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007be:	f000 fabd 	bl	8000d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007c2:	2303      	movs	r3, #3
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80007ca:	2304      	movs	r3, #4
 80007cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <MX_ADC1_Init+0x128>)
 80007d4:	f001 faec 	bl	8001db0 <HAL_ADC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80007de:	f000 faad 	bl	8000d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007e6:	2305      	movs	r3, #5
 80007e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4814      	ldr	r0, [pc, #80]	; (8000840 <MX_ADC1_Init+0x128>)
 80007f0:	f001 fade 	bl	8001db0 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80007fa:	f000 fa9f 	bl	8000d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007fe:	2307      	movs	r3, #7
 8000800:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000802:	2306      	movs	r3, #6
 8000804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_ADC1_Init+0x128>)
 800080c:	f001 fad0 	bl	8001db0 <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000816:	f000 fa91 	bl	8000d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800081a:	2306      	movs	r3, #6
 800081c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800081e:	2307      	movs	r3, #7
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_ADC1_Init+0x128>)
 8000828:	f001 fac2 	bl	8001db0 <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000832:	f000 fa83 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200016d8 	.word	0x200016d8
 8000844:	40012400 	.word	0x40012400

08000848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	; 0x38
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <MX_TIM2_Init+0xf8>)
 800087a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000880:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_TIM2_Init+0xf8>)
 800088e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_TIM2_Init+0xf8>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a0:	4827      	ldr	r0, [pc, #156]	; (8000940 <MX_TIM2_Init+0xf8>)
 80008a2:	f002 fe69 	bl	8003578 <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008ac:	f000 fa46 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4820      	ldr	r0, [pc, #128]	; (8000940 <MX_TIM2_Init+0xf8>)
 80008be:	f003 f91b 	bl	8003af8 <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008c8:	f000 fa38 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008cc:	481c      	ldr	r0, [pc, #112]	; (8000940 <MX_TIM2_Init+0xf8>)
 80008ce:	f002 fef5 	bl	80036bc <HAL_TIM_PWM_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008d8:	f000 fa30 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4619      	mov	r1, r3
 80008ea:	4815      	ldr	r0, [pc, #84]	; (8000940 <MX_TIM2_Init+0xf8>)
 80008ec:	f003 fc60 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008f6:	f000 fa21 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fa:	2360      	movs	r3, #96	; 0x60
 80008fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000912:	f003 f833 	bl	800397c <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800091c:	f000 fa0e 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2204      	movs	r2, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000928:	f003 f828 	bl	800397c <HAL_TIM_PWM_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000932:	f000 fa03 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3738      	adds	r7, #56	; 0x38
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200017c0 	.word	0x200017c0

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART1_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800097c:	f003 fc88 	bl	8004290 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f9d9 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20001710 	.word	0x20001710
 8000994:	40013800 	.word	0x40013800

08000998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_DMA_Init+0x68>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <MX_DMA_Init+0x68>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_DMA_Init+0x68>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	200b      	movs	r0, #11
 80009bc:	f001 fc97 	bl	80022ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009c0:	200b      	movs	r0, #11
 80009c2:	f001 fcb0 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2105      	movs	r1, #5
 80009ca:	200c      	movs	r0, #12
 80009cc:	f001 fc8f 	bl	80022ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009d0:	200c      	movs	r0, #12
 80009d2:	f001 fca8 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2105      	movs	r1, #5
 80009da:	200f      	movs	r0, #15
 80009dc:	f001 fc87 	bl	80022ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80009e0:	200f      	movs	r0, #15
 80009e2:	f001 fca0 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2105      	movs	r1, #5
 80009ea:	2011      	movs	r0, #17
 80009ec:	f001 fc7f 	bl	80022ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009f0:	2011      	movs	r0, #17
 80009f2:	f001 fc98 	bl	8002326 <HAL_NVIC_EnableIRQ>

}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a18:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a38      	ldr	r2, [pc, #224]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0310 	and.w	r3, r3, #16
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a32      	ldr	r2, [pc, #200]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a36:	f043 0320 	orr.w	r3, r3, #32
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0320 	and.w	r3, r3, #32
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a2c      	ldr	r2, [pc, #176]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <MX_GPIO_Init+0xfc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	4821      	ldr	r0, [pc, #132]	; (8000b04 <MX_GPIO_Init+0x100>)
 8000a80:	f002 f860 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000a84:	2200      	movs	r2, #0
 8000a86:	f64f 413b 	movw	r1, #64571	; 0xfc3b
 8000a8a:	481f      	ldr	r0, [pc, #124]	; (8000b08 <MX_GPIO_Init+0x104>)
 8000a8c:	f002 f85a 	bl	8002b44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000a96:	481d      	ldr	r0, [pc, #116]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000a98:	f002 f854 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_GPIO_Init+0x100>)
 8000ab6:	f001 feeb 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000aba:	f64f 433b 	movw	r3, #64571	; 0xfc3b
 8000abe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_GPIO_Init+0x104>)
 8000ad4:	f001 fedc 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ad8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4619      	mov	r1, r3
 8000af0:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_GPIO_Init+0x108>)
 8000af2:	f001 fecd 	bl	8002890 <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40011000 	.word	0x40011000
 8000b08:	40010c00 	.word	0x40010c00
 8000b0c:	40010800 	.word	0x40010800

08000b10 <adc_reader_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_adc_reader_task */
void adc_reader_task(void const * argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	// int irdata_fl[num_irsensors];
	//  int irdata_fr[num_irsensors];

	  for(int i=0;i<num_irsensors;i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	e040      	b.n	8000ba0 <adc_reader_task+0x90>
	  	  {
	  		  // set IR off
	  		  ir_led_off();
 8000b1e:	f7ff fc57 	bl	80003d0 <ir_led_off>

	  		  // select mux channel
	  		  set_mux_fl(i);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff fc60 	bl	80003e8 <set_mux_fl>
	  		  set_mux_fr(i);
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fc93 	bl	8000454 <set_mux_fr>

	  		  //small delay
	  		  HAL_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 ff4a 	bl	80019c8 <HAL_Delay>

	  		  // get initial readings
	  		  data_fl_noise = adc_value[0];
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <adc_reader_task+0x9c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <adc_reader_task+0xa0>)
 8000b3c:	601a      	str	r2, [r3, #0]
	  		  data_fr_noise = adc_value[1];
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <adc_reader_task+0x9c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <adc_reader_task+0xa4>)
 8000b46:	601a      	str	r2, [r3, #0]

	  		  // set IR on
	  		  ir_led_on();
 8000b48:	f7ff fc36 	bl	80003b8 <ir_led_on>
	  		  //small delay
	  		  HAL_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 ff3b 	bl	80019c8 <HAL_Delay>

	  		  // get second readings
	  		  data_fl = adc_value[0];
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <adc_reader_task+0x9c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <adc_reader_task+0xa8>)
 8000b5a:	601a      	str	r2, [r3, #0]
	  		  data_fr = adc_value[1];
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <adc_reader_task+0x9c>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <adc_reader_task+0xac>)
 8000b64:	601a      	str	r2, [r3, #0]

	  		  //calculate the real value and set it in ir_data array
	  		  data_fl_real = -1*(data_fl - data_fl_noise);
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <adc_reader_task+0xa0>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <adc_reader_task+0xa8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <adc_reader_task+0xb0>)
 8000b72:	6013      	str	r3, [r2, #0]
	  		  data_fr_real = -1*(data_fr - data_fr_noise);
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <adc_reader_task+0xa4>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <adc_reader_task+0xac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <adc_reader_task+0xb4>)
 8000b80:	6013      	str	r3, [r2, #0]

	  		  irdata_fl[i] = data_fl_real;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <adc_reader_task+0xb0>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4910      	ldr	r1, [pc, #64]	; (8000bc8 <adc_reader_task+0xb8>)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  irdata_fr[i] = data_fr_real;
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <adc_reader_task+0xb4>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <adc_reader_task+0xbc>)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<num_irsensors;i++)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <adc_reader_task+0xc0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dbb9      	blt.n	8000b1e <adc_reader_task+0xe>
 8000baa:	e7b5      	b.n	8000b18 <adc_reader_task+0x8>
 8000bac:	20001694 	.word	0x20001694
 8000bb0:	200017bc 	.word	0x200017bc
 8000bb4:	200017b4 	.word	0x200017b4
 8000bb8:	200015b4 	.word	0x200015b4
 8000bbc:	20001644 	.word	0x20001644
 8000bc0:	200017b8 	.word	0x200017b8
 8000bc4:	200015fc 	.word	0x200015fc
 8000bc8:	200016b0 	.word	0x200016b0
 8000bcc:	20001898 	.word	0x20001898
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <serial_reader_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_reader_task */
void serial_reader_task(void const * argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serial_reader_task */
  /* Infinite loop */
  for(;;)
  {
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "Serial READ \n", 1), 10);
    osDelay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f003 ffbe 	bl	8004b5e <osDelay>
 8000be2:	e7fb      	b.n	8000bdc <serial_reader_task+0x8>

08000be4 <pid_timer>:
  /* USER CODE END serial_reader_task */
}

/* pid_timer function */
void pid_timer(void const * argument)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "TIMER \n", 1), 10);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
	//HAL_GPIO_WritePin(GPIOB, , value & 0b0001);

  /* USER CODE END pid_timer */
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <status_update_timer>:

/* status_update_timer function */
void status_update_timer(void const * argument)
{
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	b0ad      	sub	sp, #180	; 0xb4
 8000bfc:	af18      	add	r7, sp, #96	; 0x60
 8000bfe:	64f8      	str	r0, [r7, #76]	; 0x4c
	 */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	//sprintf(MSG, "Data = %d \t %d  \t %d \t %d  \t%d  \t%d \t%d \t \r\n ",
	//		irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6]);

	sprintf(MSG, "%d \t%d \t%d \t%d \t%d \t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t \r\n",
 8000c00:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <status_update_timer+0x108>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c06:	4b3e      	ldr	r3, [pc, #248]	; (8000d00 <status_update_timer+0x108>)
 8000c08:	68d9      	ldr	r1, [r3, #12]
 8000c0a:	6479      	str	r1, [r7, #68]	; 0x44
 8000c0c:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <status_update_timer+0x108>)
 8000c0e:	6918      	ldr	r0, [r3, #16]
 8000c10:	6438      	str	r0, [r7, #64]	; 0x40
 8000c12:	4b3b      	ldr	r3, [pc, #236]	; (8000d00 <status_update_timer+0x108>)
 8000c14:	695c      	ldr	r4, [r3, #20]
 8000c16:	63fc      	str	r4, [r7, #60]	; 0x3c
 8000c18:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <status_update_timer+0x108>)
 8000c1a:	699d      	ldr	r5, [r3, #24]
 8000c1c:	63bd      	str	r5, [r7, #56]	; 0x38
 8000c1e:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <status_update_timer+0x10c>)
 8000c20:	681e      	ldr	r6, [r3, #0]
 8000c22:	637e      	str	r6, [r7, #52]	; 0x34
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <status_update_timer+0x10c>)
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	633a      	str	r2, [r7, #48]	; 0x30
 8000c2a:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <status_update_timer+0x10c>)
 8000c2c:	6899      	ldr	r1, [r3, #8]
 8000c2e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000c30:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <status_update_timer+0x10c>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c36:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <status_update_timer+0x10c>)
 8000c38:	6918      	ldr	r0, [r3, #16]
 8000c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8000c3c:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <status_update_timer+0x10c>)
 8000c3e:	695c      	ldr	r4, [r3, #20]
 8000c40:	623c      	str	r4, [r7, #32]
 8000c42:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <status_update_timer+0x10c>)
 8000c44:	699d      	ldr	r5, [r3, #24]
 8000c46:	61fd      	str	r5, [r7, #28]
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <status_update_timer+0x10c>)
 8000c4a:	69de      	ldr	r6, [r3, #28]
 8000c4c:	61be      	str	r6, [r7, #24]
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <status_update_timer+0x10c>)
 8000c50:	6a1a      	ldr	r2, [r3, #32]
 8000c52:	617a      	str	r2, [r7, #20]
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <status_update_timer+0x10c>)
 8000c56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c58:	6139      	str	r1, [r7, #16]
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <status_update_timer+0x110>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <status_update_timer+0x110>)
 8000c62:	6858      	ldr	r0, [r3, #4]
 8000c64:	60b8      	str	r0, [r7, #8]
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <status_update_timer+0x110>)
 8000c68:	689c      	ldr	r4, [r3, #8]
 8000c6a:	607c      	str	r4, [r7, #4]
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <status_update_timer+0x110>)
 8000c6e:	68de      	ldr	r6, [r3, #12]
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <status_update_timer+0x110>)
 8000c72:	691d      	ldr	r5, [r3, #16]
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <status_update_timer+0x110>)
 8000c76:	695c      	ldr	r4, [r3, #20]
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <status_update_timer+0x110>)
 8000c7a:	6998      	ldr	r0, [r3, #24]
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <status_update_timer+0x110>)
 8000c7e:	69d9      	ldr	r1, [r3, #28]
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <status_update_timer+0x110>)
 8000c82:	6a1a      	ldr	r2, [r3, #32]
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <status_update_timer+0x110>)
 8000c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c88:	9316      	str	r3, [sp, #88]	; 0x58
 8000c8a:	9215      	str	r2, [sp, #84]	; 0x54
 8000c8c:	9114      	str	r1, [sp, #80]	; 0x50
 8000c8e:	9013      	str	r0, [sp, #76]	; 0x4c
 8000c90:	9412      	str	r4, [sp, #72]	; 0x48
 8000c92:	9511      	str	r5, [sp, #68]	; 0x44
 8000c94:	9610      	str	r6, [sp, #64]	; 0x40
 8000c96:	687c      	ldr	r4, [r7, #4]
 8000c98:	940f      	str	r4, [sp, #60]	; 0x3c
 8000c9a:	68b8      	ldr	r0, [r7, #8]
 8000c9c:	900e      	str	r0, [sp, #56]	; 0x38
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	930d      	str	r3, [sp, #52]	; 0x34
 8000ca2:	6939      	ldr	r1, [r7, #16]
 8000ca4:	910c      	str	r1, [sp, #48]	; 0x30
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	920b      	str	r2, [sp, #44]	; 0x2c
 8000caa:	69be      	ldr	r6, [r7, #24]
 8000cac:	960a      	str	r6, [sp, #40]	; 0x28
 8000cae:	69fd      	ldr	r5, [r7, #28]
 8000cb0:	9509      	str	r5, [sp, #36]	; 0x24
 8000cb2:	6a3c      	ldr	r4, [r7, #32]
 8000cb4:	9408      	str	r4, [sp, #32]
 8000cb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cb8:	9007      	str	r0, [sp, #28]
 8000cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbc:	9306      	str	r3, [sp, #24]
 8000cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cc0:	9105      	str	r1, [sp, #20]
 8000cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cc4:	9204      	str	r2, [sp, #16]
 8000cc6:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8000cc8:	9603      	str	r6, [sp, #12]
 8000cca:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8000ccc:	9502      	str	r5, [sp, #8]
 8000cce:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8000cd0:	9401      	str	r4, [sp, #4]
 8000cd2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000cd4:	9000      	str	r0, [sp, #0]
 8000cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cda:	490c      	ldr	r1, [pc, #48]	; (8000d0c <status_update_timer+0x114>)
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <status_update_timer+0x118>)
 8000cde:	f006 fbbb 	bl	8007458 <siprintf>
			adc_value[2], adc_value[3], adc_value[4], adc_value[5], adc_value[6],
				irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6],irdata_fr[7],irdata_fr[8],irdata_fr[9],
				irdata_fl[0],irdata_fl[1], irdata_fl[2], irdata_fl[3], irdata_fl[4], irdata_fl[5], irdata_fl[6],irdata_fl[7],irdata_fl[8],irdata_fl[9]);
		  //sprintf(MSG, "Hello Dudes! COUNT = %d \r\n ",X);
		 HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <status_update_timer+0x118>)
 8000ce4:	f7ff fa34 	bl	8000150 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <status_update_timer+0x118>)
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <status_update_timer+0x11c>)
 8000cf4:	f003 fb19 	bl	800432a <HAL_UART_Transmit>
  /* USER CODE END status_update_timer */
}
 8000cf8:	bf00      	nop
 8000cfa:	3754      	adds	r7, #84	; 0x54
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d00:	20001694 	.word	0x20001694
 8000d04:	20001898 	.word	0x20001898
 8000d08:	200016b0 	.word	0x200016b0
 8000d0c:	08007cec 	.word	0x08007cec
 8000d10:	200018c0 	.word	0x200018c0
 8000d14:	20001710 	.word	0x20001710

08000d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2a:	f000 fe31 	bl	8001990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40000400 	.word	0x40000400

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_MspInit+0x68>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_MspInit+0x68>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_MspInit+0x68>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_MspInit+0x68>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <HAL_MspInit+0x68>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x68>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	210f      	movs	r1, #15
 8000d82:	f06f 0001 	mvn.w	r0, #1
 8000d86:	f001 fab2 	bl	80022ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_MspInit+0x6c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_MspInit+0x6c>)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000

08000db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <HAL_ADC_MspInit+0xbc>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d149      	bne.n	8000e6c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_ADC_MspInit+0xc0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4819      	ldr	r0, [pc, #100]	; (8000e7c <HAL_ADC_MspInit+0xc4>)
 8000e18:	f001 fd3a 	bl	8002890 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e1e:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_ADC_MspInit+0xcc>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e46:	2220      	movs	r2, #32
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e52:	f001 fa77 	bl	8002344 <HAL_DMA_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e5c:	f7ff ff6e 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e64:	621a      	str	r2, [r3, #32]
 8000e66:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_ADC_MspInit+0xc8>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40012400 	.word	0x40012400
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	20001770 	.word	0x20001770
 8000e84:	40020008 	.word	0x40020008

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e98:	f040 808d 	bne.w	8000fb6 <HAL_TIM_Base_MspInit+0x12e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9c:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <HAL_TIM_Base_MspInit+0x138>)
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	4a47      	ldr	r2, [pc, #284]	; (8000fc0 <HAL_TIM_Base_MspInit+0x138>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	61d3      	str	r3, [r2, #28]
 8000ea8:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <HAL_TIM_Base_MspInit+0x138>)
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000eb6:	4a44      	ldr	r2, [pc, #272]	; (8000fc8 <HAL_TIM_Base_MspInit+0x140>)
 8000eb8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eba:	4b42      	ldr	r3, [pc, #264]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec0:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eda:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000ede:	2220      	movs	r2, #32
 8000ee0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000ee4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ee8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000eea:	4836      	ldr	r0, [pc, #216]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000eec:	f001 fa2a 	bl	8002344 <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000ef6:	f7ff ff21 	bl	8000d3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
 8000f00:	4a30      	ldr	r2, [pc, #192]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a2e      	ldr	r2, [pc, #184]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f0c:	4a2d      	ldr	r2, [pc, #180]	; (8000fc4 <HAL_TIM_Base_MspInit+0x13c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000f12:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f14:	4a2e      	ldr	r2, [pc, #184]	; (8000fd0 <HAL_TIM_Base_MspInit+0x148>)
 8000f16:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f30:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f38:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f42:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000f48:	4820      	ldr	r0, [pc, #128]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f4a:	f001 f9fb 	bl	8002344 <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8000f54:	f7ff fef2 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <HAL_TIM_Base_MspInit+0x144>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_TIM_Base_MspInit+0x150>)
 8000f68:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8a:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f8e:	2220      	movs	r2, #32
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f9c:	f001 f9d2 	bl	8002344 <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_TIM_Base_MspInit+0x122>
    {
      Error_Handler();
 8000fa6:	f7ff fec9 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000fae:	621a      	str	r2, [r3, #32]
 8000fb0:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_TIM_Base_MspInit+0x14c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	2000164c 	.word	0x2000164c
 8000fc8:	40020080 	.word	0x40020080
 8000fcc:	200015b8 	.word	0x200015b8
 8000fd0:	40020058 	.word	0x40020058
 8000fd4:	20001600 	.word	0x20001600
 8000fd8:	4002001c 	.word	0x4002001c

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a20      	ldr	r2, [pc, #128]	; (8001078 <HAL_UART_MspInit+0x9c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d139      	bne.n	8001070 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_UART_MspInit+0xa0>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a1e      	ldr	r2, [pc, #120]	; (800107c <HAL_UART_MspInit+0xa0>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_UART_MspInit+0xa0>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_UART_MspInit+0xa0>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a18      	ldr	r2, [pc, #96]	; (800107c <HAL_UART_MspInit+0xa0>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_UART_MspInit+0xa0>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800102c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001030:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	480f      	ldr	r0, [pc, #60]	; (8001080 <HAL_UART_MspInit+0xa4>)
 8001042:	f001 fc25 	bl	8002890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <HAL_UART_MspInit+0xa4>)
 800105c:	f001 fc18 	bl	8002890 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2105      	movs	r1, #5
 8001064:	2025      	movs	r0, #37	; 0x25
 8001066:	f001 f942 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800106a:	2025      	movs	r0, #37	; 0x25
 800106c:	f001 f95b 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40013800 	.word	0x40013800
 800107c:	40021000 	.word	0x40021000
 8001080:	40010800 	.word	0x40010800

08001084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	201d      	movs	r0, #29
 800109a:	f001 f928 	bl	80022ee <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800109e:	201d      	movs	r0, #29
 80010a0:	f001 f941 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <HAL_InitTick+0xa0>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <HAL_InitTick+0xa0>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	61d3      	str	r3, [r2, #28]
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_InitTick+0xa0>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010bc:	f107 0210 	add.w	r2, r7, #16
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 f952 	bl	8003370 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010cc:	f002 f928 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 80010d0:	4603      	mov	r3, r0
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <HAL_InitTick+0xa4>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	0c9b      	lsrs	r3, r3, #18
 80010e0:	3b01      	subs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_InitTick+0xa8>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <HAL_InitTick+0xac>)
 80010e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_InitTick+0xa8>)
 80010ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_InitTick+0xa8>)
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_InitTick+0xa8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_InitTick+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <HAL_InitTick+0xa8>)
 8001106:	f002 fa37 	bl	8003578 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d104      	bne.n	800111a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <HAL_InitTick+0xa8>)
 8001112:	f002 fa81 	bl	8003618 <HAL_TIM_Base_Start_IT>
 8001116:	4603      	mov	r3, r0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3730      	adds	r7, #48	; 0x30
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	431bde83 	.word	0x431bde83
 800112c:	20001b18 	.word	0x20001b18
 8001130:	40000400 	.word	0x40000400

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <HardFault_Handler+0x4>

08001146 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <BusFault_Handler+0x4>

08001152 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <UsageFault_Handler+0x4>

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <DMA1_Channel1_IRQHandler+0x10>)
 800116a:	f001 fa5d 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20001770 	.word	0x20001770

08001178 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <DMA1_Channel2_IRQHandler+0x10>)
 800117e:	f001 fa53 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20001600 	.word	0x20001600

0800118c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <DMA1_Channel5_IRQHandler+0x10>)
 8001192:	f001 fa49 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200015b8 	.word	0x200015b8

080011a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <DMA1_Channel7_IRQHandler+0x10>)
 80011a6:	f001 fa3f 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000164c 	.word	0x2000164c

080011b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM3_IRQHandler+0x10>)
 80011ba:	f002 fad7 	bl	800376c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20001b18 	.word	0x20001b18

080011c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <USART1_IRQHandler+0x10>)
 80011ce:	f003 f93f 	bl	8004450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20001710 	.word	0x20001710

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f006 f8e6 	bl	80073dc <__errno>
 8001210:	4602      	mov	r2, r0
 8001212:	230c      	movs	r3, #12
 8001214:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20005000 	.word	0x20005000
 800123c:	00000400 	.word	0x00000400
 8001240:	2000073c 	.word	0x2000073c
 8001244:	20001cc0 	.word	0x20001cc0

08001248 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <ws2812_timer2_init>:
    WS2812_CH14_GPIO,
    WS2812_CH15_GPIO
};

static void ws2812_timer2_init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]

    htimer2.Instance = TIM2;
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <ws2812_timer2_init+0xc8>)
 8001286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128a:	601a      	str	r2, [r3, #0]
    htimer2.Init.Prescaler = 0;
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <ws2812_timer2_init+0xc8>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <ws2812_timer2_init+0xc8>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <ws2812_timer2_init+0xc8>)
 800129a:	2246      	movs	r2, #70	; 0x46
 800129c:	60da      	str	r2, [r3, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <ws2812_timer2_init+0xc8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <ws2812_timer2_init+0xc8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer2);
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <ws2812_timer2_init+0xc8>)
 80012ac:	f002 f964 	bl	8003578 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 80012b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ba:	4619      	mov	r1, r3
 80012bc:	4817      	ldr	r0, [pc, #92]	; (800131c <ws2812_timer2_init+0xc8>)
 80012be:	f002 fc1b 	bl	8003af8 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 80012c2:	4816      	ldr	r0, [pc, #88]	; (800131c <ws2812_timer2_init+0xc8>)
 80012c4:	f002 f9fa 	bl	80036bc <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <ws2812_timer2_init+0xc8>)
 80012d8:	f002 ff6a 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012dc:	2360      	movs	r3, #96	; 0x60
 80012de:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 80012e0:	2316      	movs	r3, #22
 80012e2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	480a      	ldr	r0, [pc, #40]	; (800131c <ws2812_timer2_init+0xc8>)
 80012f4:	f002 fb42 	bl	800397c <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f8:	2360      	movs	r3, #96	; 0x60
 80012fa:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 80012fc:	232c      	movs	r3, #44	; 0x2c
 80012fe:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4803      	ldr	r0, [pc, #12]	; (800131c <ws2812_timer2_init+0xc8>)
 8001310:	f002 fb34 	bl	800397c <HAL_TIM_PWM_ConfigChannel>
}
 8001314:	bf00      	nop
 8001316:	3738      	adds	r7, #56	; 0x38
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20001c2c 	.word	0x20001c2c

08001320 <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001328:	4b4c      	ldr	r3, [pc, #304]	; (800145c <ws2812_dma_start+0x13c>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	4a4b      	ldr	r2, [pc, #300]	; (800145c <ws2812_dma_start+0x13c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	61d3      	str	r3, [r2, #28]
 8001334:	4b49      	ldr	r3, [pc, #292]	; (800145c <ws2812_dma_start+0x13c>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_update.Instance = DMA1_Channel2;
 8001340:	4b47      	ldr	r3, [pc, #284]	; (8001460 <ws2812_dma_start+0x140>)
 8001342:	4a48      	ldr	r2, [pc, #288]	; (8001464 <ws2812_dma_start+0x144>)
 8001344:	601a      	str	r2, [r3, #0]
    hdma_tim2_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001346:	4b46      	ldr	r3, [pc, #280]	; (8001460 <ws2812_dma_start+0x140>)
 8001348:	2210      	movs	r2, #16
 800134a:	605a      	str	r2, [r3, #4]
    hdma_tim2_update.Init.PeriphInc = DMA_PINC_DISABLE;
 800134c:	4b44      	ldr	r3, [pc, #272]	; (8001460 <ws2812_dma_start+0x140>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
    hdma_tim2_update.Init.MemInc = DMA_MINC_DISABLE;
 8001352:	4b43      	ldr	r3, [pc, #268]	; (8001460 <ws2812_dma_start+0x140>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
    hdma_tim2_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <ws2812_dma_start+0x140>)
 800135a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135e:	611a      	str	r2, [r3, #16]
    hdma_tim2_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001360:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <ws2812_dma_start+0x140>)
 8001362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001366:	615a      	str	r2, [r3, #20]
    hdma_tim2_update.Init.Mode = DMA_CIRCULAR;
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <ws2812_dma_start+0x140>)
 800136a:	2220      	movs	r2, #32
 800136c:	619a      	str	r2, [r3, #24]
    hdma_tim2_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <ws2812_dma_start+0x140>)
 8001370:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001374:	61da      	str	r2, [r3, #28]

    /* TIM2_CH1 Init */
    hdma_tim2_pwm_ch1.Instance = DMA1_Channel5;
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <ws2812_dma_start+0x148>)
 8001378:	4a3c      	ldr	r2, [pc, #240]	; (800146c <ws2812_dma_start+0x14c>)
 800137a:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <ws2812_dma_start+0x148>)
 800137e:	2210      	movs	r2, #16
 8001380:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001382:	4b39      	ldr	r3, [pc, #228]	; (8001468 <ws2812_dma_start+0x148>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001388:	4b37      	ldr	r3, [pc, #220]	; (8001468 <ws2812_dma_start+0x148>)
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <ws2812_dma_start+0x148>)
 8001390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001394:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <ws2812_dma_start+0x148>)
 8001398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139c:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch1.Init.Mode = DMA_CIRCULAR;
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <ws2812_dma_start+0x148>)
 80013a0:	2220      	movs	r2, #32
 80013a2:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <ws2812_dma_start+0x148>)
 80013a6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80013aa:	61da      	str	r2, [r3, #28]

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_pwm_ch2.Instance = DMA1_Channel7;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <ws2812_dma_start+0x150>)
 80013ae:	4a31      	ldr	r2, [pc, #196]	; (8001474 <ws2812_dma_start+0x154>)
 80013b0:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <ws2812_dma_start+0x150>)
 80013b4:	2210      	movs	r2, #16
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <ws2812_dma_start+0x150>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch2.Init.MemInc = DMA_MINC_DISABLE;
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <ws2812_dma_start+0x150>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <ws2812_dma_start+0x150>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <ws2812_dma_start+0x150>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d2:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch2.Init.Mode = DMA_CIRCULAR;
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <ws2812_dma_start+0x150>)
 80013d6:	2220      	movs	r2, #32
 80013d8:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <ws2812_dma_start+0x150>)
 80013dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80013e0:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim2_update);
 80013e2:	481f      	ldr	r0, [pc, #124]	; (8001460 <ws2812_dma_start+0x140>)
 80013e4:	f000 ffae 	bl	8002344 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch1);
 80013e8:	481f      	ldr	r0, [pc, #124]	; (8001468 <ws2812_dma_start+0x148>)
 80013ea:	f000 ffab 	bl	8002344 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch2);
 80013ee:	4820      	ldr	r0, [pc, #128]	; (8001470 <ws2812_dma_start+0x150>)
 80013f0:	f000 ffa8 	bl	8002344 <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim2_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 80013f4:	4920      	ldr	r1, [pc, #128]	; (8001478 <ws2812_dma_start+0x158>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3310      	adds	r3, #16
 80013fa:	461a      	mov	r2, r3
 80013fc:	2310      	movs	r3, #16
 80013fe:	4818      	ldr	r0, [pc, #96]	; (8001460 <ws2812_dma_start+0x140>)
 8001400:	f000 fffa 	bl	80023f8 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_pwm_ch1, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 8001404:	491d      	ldr	r1, [pc, #116]	; (800147c <ws2812_dma_start+0x15c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3314      	adds	r3, #20
 800140a:	461a      	mov	r2, r3
 800140c:	2310      	movs	r3, #16
 800140e:	4816      	ldr	r0, [pc, #88]	; (8001468 <ws2812_dma_start+0x148>)
 8001410:	f000 fff2 	bl	80023f8 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim2_pwm_ch2, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 8001414:	4918      	ldr	r1, [pc, #96]	; (8001478 <ws2812_dma_start+0x158>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3314      	adds	r3, #20
 800141a:	461a      	mov	r2, r3
 800141c:	2310      	movs	r3, #16
 800141e:	4814      	ldr	r0, [pc, #80]	; (8001470 <ws2812_dma_start+0x150>)
 8001420:	f000 ffea 	bl	80023f8 <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <ws2812_dma_start+0x160>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <ws2812_dma_start+0x160>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001432:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC1);
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <ws2812_dma_start+0x160>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <ws2812_dma_start+0x160>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001442:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC2);
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <ws2812_dma_start+0x160>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <ws2812_dma_start+0x160>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001452:	60da      	str	r2, [r3, #12]
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	20001be8 	.word	0x20001be8
 8001464:	4002001c 	.word	0x4002001c
 8001468:	20001ba4 	.word	0x20001ba4
 800146c:	40020058 	.word	0x40020058
 8001470:	20001b60 	.word	0x20001b60
 8001474:	40020080 	.word	0x40020080
 8001478:	20000740 	.word	0x20000740
 800147c:	20000744 	.word	0x20000744
 8001480:	20001c2c 	.word	0x20001c2c

08001484 <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    /* If all channels are the same length, we can skip the 'pos' range check, and speed up our
     * inner loop *substantially*
     */

    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	da07      	bge.n	80014a8 <get_channel_byte+0x24>
        return channel->framebuffer[pos] ^ 0xff;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	e000      	b.n	80014aa <get_channel_byte+0x26>

    return 0xff;
 80014a8:	23ff      	movs	r3, #255	; 0xff
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	f04f 0b00 	mov.w	fp, #0
 80014ca:	2600      	movs	r6, #0
 80014cc:	2500      	movs	r5, #0
 80014ce:	2400      	movs	r4, #0
 80014d0:	f04f 0a00 	mov.w	sl, #0
 80014d4:	f04f 0900 	mov.w	r9, #0
 80014d8:	f04f 0800 	mov.w	r8, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffd0 	bl	8001484 <get_channel_byte>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]
 80014e8:	7df8      	ldrb	r0, [r7, #23]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	469e      	mov	lr, r3
 80014ee:	46dc      	mov	ip, fp
 80014f0:	4651      	mov	r1, sl
 80014f2:	464a      	mov	r2, r9
 80014f4:	4643      	mov	r3, r8
 80014f6:	4680      	mov	r8, r0
 80014f8:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 80014fc:	f360 0e00 	bfi	lr, r0, #0, #1
 8001500:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8001504:	f360 0c00 	bfi	ip, r0, #0, #1
 8001508:	f3c8 1040 	ubfx	r0, r8, #5, #1
 800150c:	f360 0600 	bfi	r6, r0, #0, #1
 8001510:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8001514:	f360 0500 	bfi	r5, r0, #0, #1
 8001518:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 800151c:	f360 0400 	bfi	r4, r0, #0, #1
 8001520:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8001524:	f360 0100 	bfi	r1, r0, #0, #1
 8001528:	f3c8 0040 	ubfx	r0, r8, #1, #1
 800152c:	f360 0200 	bfi	r2, r0, #0, #1
 8001530:	f3c8 0000 	ubfx	r0, r8, #0, #1
 8001534:	f360 0300 	bfi	r3, r0, #0, #1
 8001538:	fa1f f08e 	uxth.w	r0, lr
 800153c:	6038      	str	r0, [r7, #0]
 800153e:	fa1f fb8c 	uxth.w	fp, ip
 8001542:	b2b6      	uxth	r6, r6
 8001544:	b2ad      	uxth	r5, r5
 8001546:	b2a4      	uxth	r4, r4
 8001548:	fa1f fa81 	uxth.w	sl, r1
 800154c:	fa1f f982 	uxth.w	r9, r2
 8001550:	fa1f f883 	uxth.w	r8, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3308      	adds	r3, #8
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff92 	bl	8001484 <get_channel_byte>
 8001560:	4603      	mov	r3, r0
 8001562:	75fb      	strb	r3, [r7, #23]
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	4618      	mov	r0, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	469e      	mov	lr, r3
 800156c:	46dc      	mov	ip, fp
 800156e:	4651      	mov	r1, sl
 8001570:	464a      	mov	r2, r9
 8001572:	4643      	mov	r3, r8
 8001574:	4680      	mov	r8, r0
 8001576:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 800157a:	f360 0e41 	bfi	lr, r0, #1, #1
 800157e:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8001582:	f360 0c41 	bfi	ip, r0, #1, #1
 8001586:	f3c8 1040 	ubfx	r0, r8, #5, #1
 800158a:	f360 0641 	bfi	r6, r0, #1, #1
 800158e:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8001592:	f360 0541 	bfi	r5, r0, #1, #1
 8001596:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 800159a:	f360 0441 	bfi	r4, r0, #1, #1
 800159e:	f3c8 0080 	ubfx	r0, r8, #2, #1
 80015a2:	f360 0141 	bfi	r1, r0, #1, #1
 80015a6:	f3c8 0040 	ubfx	r0, r8, #1, #1
 80015aa:	f360 0241 	bfi	r2, r0, #1, #1
 80015ae:	f3c8 0000 	ubfx	r0, r8, #0, #1
 80015b2:	f360 0341 	bfi	r3, r0, #1, #1
 80015b6:	fa1f f08e 	uxth.w	r0, lr
 80015ba:	fa1f fb8c 	uxth.w	fp, ip
 80015be:	b2b6      	uxth	r6, r6
 80015c0:	b2ad      	uxth	r5, r5
 80015c2:	b2a4      	uxth	r4, r4
 80015c4:	fa1f fa81 	uxth.w	sl, r1
 80015c8:	fa1f f982 	uxth.w	r9, r2
 80015cc:	fa1f f883 	uxth.w	r8, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4602      	mov	r2, r0
 80015d4:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3302      	adds	r3, #2
 80015da:	465a      	mov	r2, fp
 80015dc:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3304      	adds	r3, #4
 80015e2:	4632      	mov	r2, r6
 80015e4:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3306      	adds	r3, #6
 80015ea:	462a      	mov	r2, r5
 80015ec:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3308      	adds	r3, #8
 80015f2:	4622      	mov	r2, r4
 80015f4:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	330a      	adds	r3, #10
 80015fa:	4652      	mov	r2, sl
 80015fc:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	330c      	adds	r3, #12
 8001602:	464a      	mov	r2, r9
 8001604:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	330e      	adds	r3, #14
 800160a:	4642      	mov	r2, r8
 800160c:	801a      	strh	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001618 <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 800162e:	4b80      	ldr	r3, [pc, #512]	; (8001830 <ws2812_refresh+0x218>)
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	e00e      	b.n	8001658 <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4a7d      	ldr	r2, [pc, #500]	; (8001834 <ws2812_refresh+0x21c>)
 8001640:	4413      	add	r3, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6979      	ldr	r1, [r7, #20]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff34 	bl	80014b4 <fill_dma_buffer>
        pos++;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	3308      	adds	r3, #8
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	dded      	ble.n	800163a <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	e027      	b.n	80016b4 <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	da05      	bge.n	8001680 <ws2812_refresh+0x68>
            max_length = channels[i].length;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00f      	beq.n	80016ae <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 800168e:	4a6a      	ldr	r2, [pc, #424]	; (8001838 <ws2812_refresh+0x220>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	2301      	movs	r3, #1
 800169a:	4093      	lsls	r3, r2
 800169c:	b21a      	sxth	r2, r3
 800169e:	4b64      	ldr	r3, [pc, #400]	; (8001830 <ws2812_refresh+0x218>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b61      	ldr	r3, [pc, #388]	; (8001830 <ws2812_refresh+0x218>)
 80016ac:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	ddd4      	ble.n	8001664 <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	3302      	adds	r3, #2
 80016be:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	3303      	adds	r3, #3
 80016c4:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <ws2812_refresh+0x224>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	4b5b      	ldr	r3, [pc, #364]	; (800183c <ws2812_refresh+0x224>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC1);
 80016d6:	4b59      	ldr	r3, [pc, #356]	; (800183c <ws2812_refresh+0x224>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	4b57      	ldr	r3, [pc, #348]	; (800183c <ws2812_refresh+0x224>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC2);
 80016e6:	4b55      	ldr	r3, [pc, #340]	; (800183c <ws2812_refresh+0x224>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <ws2812_refresh+0x224>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f4:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer2);
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <ws2812_refresh+0x224>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10f      	bne.n	8001726 <ws2812_refresh+0x10e>
 8001706:	4b4d      	ldr	r3, [pc, #308]	; (800183c <ws2812_refresh+0x224>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	f240 4344 	movw	r3, #1092	; 0x444
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d107      	bne.n	8001726 <ws2812_refresh+0x10e>
 8001716:	4b49      	ldr	r3, [pc, #292]	; (800183c <ws2812_refresh+0x224>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <ws2812_refresh+0x224>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8001726:	4b42      	ldr	r3, [pc, #264]	; (8001830 <ws2812_refresh+0x218>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer2);
 8001730:	4b42      	ldr	r3, [pc, #264]	; (800183c <ws2812_refresh+0x224>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <ws2812_refresh+0x224>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	e00f      	b.n	8001766 <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer2, TIM_FLAG_UPDATE));
 8001746:	bf00      	nop
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <ws2812_refresh+0x224>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d1f8      	bne.n	8001748 <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer2, TIM_FLAG_UPDATE);
 8001756:	4b39      	ldr	r3, [pc, #228]	; (800183c <ws2812_refresh+0x224>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f06f 0201 	mvn.w	r2, #1
 800175e:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	3301      	adds	r3, #1
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2be0      	cmp	r3, #224	; 0xe0
 800176a:	ddec      	ble.n	8001746 <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer2);
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <ws2812_refresh+0x224>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a1a      	ldr	r2, [r3, #32]
 8001772:	f241 1311 	movw	r3, #4369	; 0x1111
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10f      	bne.n	800179c <ws2812_refresh+0x184>
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <ws2812_refresh+0x224>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6a1a      	ldr	r2, [r3, #32]
 8001782:	f240 4344 	movw	r3, #1092	; 0x444
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <ws2812_refresh+0x184>
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <ws2812_refresh+0x224>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <ws2812_refresh+0x224>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f7ff fdbf 	bl	8001320 <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer2, __HAL_TIM_GET_AUTORELOAD(&htimer2) - 10);
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <ws2812_refresh+0x224>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <ws2812_refresh+0x224>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3a0a      	subs	r2, #10
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 80017b0:	4b23      	ldr	r3, [pc, #140]	; (8001840 <ws2812_refresh+0x228>)
 80017b2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80017b6:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer2);
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <ws2812_refresh+0x224>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <ws2812_refresh+0x224>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_ISR_TCIF5 | DMA_ISR_HTIF5))) {
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <ws2812_refresh+0x228>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <ws2812_refresh+0x1c4>
            cycles++;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
            continue;
 80017da:	e027      	b.n	800182c <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <ws2812_refresh+0x21c>)
 80017de:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_ISR_TCIF5)
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <ws2812_refresh+0x228>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3310      	adds	r3, #16
 80017f0:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <ws2812_refresh+0x228>)
 80017f4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80017f8:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	e00e      	b.n	800181e <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6979      	ldr	r1, [r7, #20]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fe51 	bl	80014b4 <fill_dma_buffer>
            pos++;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	3308      	adds	r3, #8
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b07      	cmp	r3, #7
 8001822:	dded      	ble.n	8001800 <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	dc0b      	bgt.n	8001844 <ws2812_refresh+0x22c>
    while(1) {
 800182c:	e7cc      	b.n	80017c8 <ws2812_refresh+0x1b0>
 800182e:	bf00      	nop
 8001830:	20000740 	.word	0x20000740
 8001834:	20000744 	.word	0x20000744
 8001838:	08007d88 	.word	0x08007d88
 800183c:	20001c2c 	.word	0x20001c2c
 8001840:	40020000 	.word	0x40020000
            break;
 8001844:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer2);
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <ws2812_refresh+0x2a0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <ws2812_refresh+0x25e>
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <ws2812_refresh+0x2a0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6a1a      	ldr	r2, [r3, #32]
 800185c:	f240 4344 	movw	r3, #1092	; 0x444
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <ws2812_refresh+0x25e>
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <ws2812_refresh+0x2a0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <ws2812_refresh+0x2a0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <ws2812_refresh+0x2a4>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim2_update);
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <ws2812_refresh+0x2a8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <ws2812_refresh+0x2a8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <ws2812_refresh+0x2ac>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <ws2812_refresh+0x2ac>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <ws2812_refresh+0x2b0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <ws2812_refresh+0x2b0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20001c2c 	.word	0x20001c2c
 80018bc:	20000740 	.word	0x20000740
 80018c0:	20001be8 	.word	0x20001be8
 80018c4:	20001ba4 	.word	0x20001ba4
 80018c8:	20001b60 	.word	0x20001b60

080018cc <ws2812_init>:

void ws2812_init()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <ws2812_init+0x48>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <ws2812_init+0x48>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6153      	str	r3, [r2, #20]
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <ws2812_init+0x48>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	200c      	movs	r0, #12
 80018f0:	f000 fcfd 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	200f      	movs	r0, #15
 80018fa:	f000 fcf8 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2011      	movs	r0, #17
 8001904:	f000 fcf3 	bl	80022ee <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001908:	f7ff fca4 	bl	8001254 <ws2812_timer2_init>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000

08001918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001918:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800191a:	e003      	b.n	8001924 <LoopCopyDataInit>

0800191c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800191e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001920:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001922:	3104      	adds	r1, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001924:	480a      	ldr	r0, [pc, #40]	; (8001950 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001928:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800192a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800192c:	d3f6      	bcc.n	800191c <CopyDataInit>
  ldr r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001930:	e002      	b.n	8001938 <LoopFillZerobss>

08001932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001934:	f842 3b04 	str.w	r3, [r2], #4

08001938 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800193a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800193c:	d3f9      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193e:	f7ff fc83 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f005 fd51 	bl	80073e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001946:	f7fe fdbd 	bl	80004c4 <main>
  bx lr
 800194a:	4770      	bx	lr
  ldr r3, =_sidata
 800194c:	08007dd4 	.word	0x08007dd4
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001954:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001958:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800195c:	20001cbc 	.word	0x20001cbc

08001960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC1_2_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_Init+0x28>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_Init+0x28>)
 800196e:	f043 0310 	orr.w	r3, r3, #16
 8001972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 fcaf 	bl	80022d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff fb82 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff f9e2 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000

08001990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_IncTick+0x1c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_IncTick+0x20>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a03      	ldr	r2, [pc, #12]	; (80019b0 <HAL_IncTick+0x20>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	20001c74 	.word	0x20001c74

080019b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <HAL_GetTick+0x10>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	20001c74 	.word	0x20001c74

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff fff0 	bl	80019b4 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_Delay+0x40>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffe0 	bl	80019b4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000000c 	.word	0x2000000c

08001a0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0be      	b.n	8001bac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff f9b4 	bl	8000db8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 faf7 	bl	8002044 <ADC_ConversionStop_Disable>
 8001a56:	4603      	mov	r3, r0
 8001a58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 8099 	bne.w	8001b9a <HAL_ADC_Init+0x18e>
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 8095 	bne.w	8001b9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a78:	f023 0302 	bic.w	r3, r3, #2
 8001a7c:	f043 0202 	orr.w	r2, r3, #2
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7b1b      	ldrb	r3, [r3, #12]
 8001a92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa4:	d003      	beq.n	8001aae <HAL_ADC_Init+0xa2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d102      	bne.n	8001ab4 <HAL_ADC_Init+0xa8>
 8001aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab2:	e000      	b.n	8001ab6 <HAL_ADC_Init+0xaa>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7d1b      	ldrb	r3, [r3, #20]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d119      	bne.n	8001af8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7b1b      	ldrb	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	035a      	lsls	r2, r3, #13
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	e00b      	b.n	8001af8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_ADC_Init+0x1a8>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b28:	d003      	beq.n	8001b32 <HAL_ADC_Init+0x126>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d104      	bne.n	8001b3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	051b      	lsls	r3, r3, #20
 8001b3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_ADC_Init+0x1ac>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d10b      	bne.n	8001b78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b76:	e018      	b.n	8001baa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	f023 0312 	bic.w	r3, r3, #18
 8001b80:	f043 0210 	orr.w	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b98:	e007      	b.n	8001baa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	ffe1f7fd 	.word	0xffe1f7fd
 8001bb8:	ff1f0efe 	.word	0xff1f0efe

08001bbc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a64      	ldr	r2, [pc, #400]	; (8001d64 <HAL_ADC_Start_DMA+0x1a8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_ADC_Start_DMA+0x24>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <HAL_ADC_Start_DMA+0x1ac>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_Start_DMA+0x32>
 8001be0:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <HAL_ADC_Start_DMA+0x1a8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f040 80b3 	bne.w	8001d54 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_Start_DMA+0x40>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0ae      	b.n	8001d5a <HAL_ADC_Start_DMA+0x19e>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f9cb 	bl	8001fa0 <ADC_Enable>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 809a 	bne.w	8001d4a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a4e      	ldr	r2, [pc, #312]	; (8001d68 <HAL_ADC_Start_DMA+0x1ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_Start_DMA+0x84>
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <HAL_ADC_Start_DMA+0x1a8>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d115      	bne.n	8001c6c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d026      	beq.n	8001ca8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c6a:	e01d      	b.n	8001ca8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a39      	ldr	r2, [pc, #228]	; (8001d64 <HAL_ADC_Start_DMA+0x1a8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d004      	beq.n	8001c8c <HAL_ADC_Start_DMA+0xd0>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_ADC_Start_DMA+0x1ac>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0xec>
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_ADC_Start_DMA+0x1a8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ca0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	f023 0206 	bic.w	r2, r3, #6
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <HAL_ADC_Start_DMA+0x1b0>)
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <HAL_ADC_Start_DMA+0x1b4>)
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <HAL_ADC_Start_DMA+0x1b8>)
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d00:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a18      	ldr	r0, [r3, #32]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	334c      	adds	r3, #76	; 0x4c
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f000 fbb3 	bl	800247c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d20:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d24:	d108      	bne.n	8001d38 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d34:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d36:	e00f      	b.n	8001d58 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d46:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d48:	e006      	b.n	8001d58 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d52:	e001      	b.n	8001d58 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40012400 	.word	0x40012400
 8001d68:	40012800 	.word	0x40012800
 8001d6c:	080020b9 	.word	0x080020b9
 8001d70:	08002135 	.word	0x08002135
 8001d74:	08002151 	.word	0x08002151

08001d78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x20>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e0dc      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1da>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b06      	cmp	r3, #6
 8001dde:	d81c      	bhi.n	8001e1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b05      	subs	r3, #5
 8001df2:	221f      	movs	r2, #31
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4019      	ands	r1, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b05      	subs	r3, #5
 8001e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	635a      	str	r2, [r3, #52]	; 0x34
 8001e18:	e03c      	b.n	8001e94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d81c      	bhi.n	8001e5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b23      	subs	r3, #35	; 0x23
 8001e34:	221f      	movs	r2, #31
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4019      	ands	r1, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b23      	subs	r3, #35	; 0x23
 8001e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
 8001e5a:	e01b      	b.n	8001e94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b41      	subs	r3, #65	; 0x41
 8001e6e:	221f      	movs	r2, #31
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4019      	ands	r1, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b41      	subs	r3, #65	; 0x41
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	d91c      	bls.n	8001ed6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1e      	subs	r3, #30
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4019      	ands	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6898      	ldr	r0, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b1e      	subs	r3, #30
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	e019      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6919      	ldr	r1, [r3, #16]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4019      	ands	r1, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6898      	ldr	r0, [r3, #8]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	fa00 f203 	lsl.w	r2, r0, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d003      	beq.n	8001f1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f16:	2b11      	cmp	r3, #17
 8001f18:	d132      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d125      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d126      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f40:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d11a      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <HAL_ADC_ConfigChannel+0x1ec>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9a      	lsrs	r2, r3, #18
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x1b2>
 8001f6e:	e007      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40012400 	.word	0x40012400
 8001f98:	20000004 	.word	0x20000004
 8001f9c:	431bde83 	.word	0x431bde83

08001fa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d039      	beq.n	8002032 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <ADC_Enable+0x9c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <ADC_Enable+0xa0>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	0c9b      	lsrs	r3, r3, #18
 8001fda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fdc:	e002      	b.n	8001fe4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f9      	bne.n	8001fde <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fea:	f7ff fce3 	bl	80019b4 <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ff0:	e018      	b.n	8002024 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ff2:	f7ff fcdf 	bl	80019b4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d911      	bls.n	8002024 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f043 0210 	orr.w	r2, r3, #16
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e007      	b.n	8002034 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d1df      	bne.n	8001ff2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000004 	.word	0x20000004
 8002040:	431bde83 	.word	0x431bde83

08002044 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d127      	bne.n	80020ae <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800206e:	f7ff fca1 	bl	80019b4 <HAL_GetTick>
 8002072:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002074:	e014      	b.n	80020a0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002076:	f7ff fc9d 	bl	80019b4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d90d      	bls.n	80020a0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	f043 0210 	orr.w	r2, r3, #16
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e007      	b.n	80020b0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d0e3      	beq.n	8002076 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d127      	bne.n	8002122 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020ec:	d115      	bne.n	800211a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d111      	bne.n	800211a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fe2c 	bl	8001d78 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002120:	e004      	b.n	800212c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff fe21 	bl	8001d8a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff fe10 	bl	8001d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4906      	ldr	r1, [pc, #24]	; (800221c <__NVIC_EnableIRQ+0x34>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff4f 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff64 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ffb2 	bl	8002274 <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff81 	bl	8002220 <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff57 	bl	80021e8 <__NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e043      	b.n	80023e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_DMA_Init+0xa8>)
 8002362:	4413      	add	r3, r2
 8002364:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <HAL_DMA_Init+0xac>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	009a      	lsls	r2, r3, #2
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_DMA_Init+0xb0>)
 8002376:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800238e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002392:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800239c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	bffdfff8 	.word	0xbffdfff8
 80023f0:	cccccccd 	.word	0xcccccccd
 80023f4:	40020000 	.word	0x40020000

080023f8 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Start+0x20>
 8002414:	2302      	movs	r3, #2
 8002416:	e02d      	b.n	8002474 <HAL_DMA_Start+0x7c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002426:	2b01      	cmp	r3, #1
 8002428:	d11d      	bne.n	8002466 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f9f0 	bl	8002834 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e005      	b.n	8002472 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_DMA_Start_IT+0x20>
 8002498:	2302      	movs	r3, #2
 800249a:	e04a      	b.n	8002532 <HAL_DMA_Start_IT+0xb6>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d13a      	bne.n	8002524 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f9ae 	bl	8002834 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 020e 	orr.w	r2, r2, #14
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e00f      	b.n	8002512 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0204 	bic.w	r2, r2, #4
 8002500:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 020a 	orr.w	r2, r2, #10
 8002510:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e005      	b.n	8002530 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800252c:	2302      	movs	r3, #2
 800252e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002530:	7dfb      	ldrb	r3, [r7, #23]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800254e:	2b02      	cmp	r3, #2
 8002550:	d005      	beq.n	800255e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2204      	movs	r2, #4
 8002556:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e051      	b.n	8002602 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 020e 	bic.w	r2, r2, #14
 800256c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a22      	ldr	r2, [pc, #136]	; (800260c <HAL_DMA_Abort_IT+0xd0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d029      	beq.n	80025dc <HAL_DMA_Abort_IT+0xa0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a20      	ldr	r2, [pc, #128]	; (8002610 <HAL_DMA_Abort_IT+0xd4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d022      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x9c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_DMA_Abort_IT+0xd8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d01a      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x96>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_DMA_Abort_IT+0xdc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d012      	beq.n	80025cc <HAL_DMA_Abort_IT+0x90>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <HAL_DMA_Abort_IT+0xe0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00a      	beq.n	80025c6 <HAL_DMA_Abort_IT+0x8a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_DMA_Abort_IT+0xe4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d102      	bne.n	80025c0 <HAL_DMA_Abort_IT+0x84>
 80025ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025be:	e00e      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025c4:	e00b      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ca:	e008      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d0:	e005      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d6:	e002      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025d8:	2310      	movs	r3, #16
 80025da:	e000      	b.n	80025de <HAL_DMA_Abort_IT+0xa2>
 80025dc:	2301      	movs	r3, #1
 80025de:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_DMA_Abort_IT+0xe8>)
 80025e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	4798      	blx	r3
    } 
  }
  return status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40020008 	.word	0x40020008
 8002610:	4002001c 	.word	0x4002001c
 8002614:	40020030 	.word	0x40020030
 8002618:	40020044 	.word	0x40020044
 800261c:	40020058 	.word	0x40020058
 8002620:	4002006c 	.word	0x4002006c
 8002624:	40020000 	.word	0x40020000

08002628 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2204      	movs	r2, #4
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d04f      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xc8>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d04a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a66      	ldr	r2, [pc, #408]	; (8002818 <HAL_DMA_IRQHandler+0x1f0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d029      	beq.n	80026d6 <HAL_DMA_IRQHandler+0xae>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_DMA_IRQHandler+0x1f4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d022      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xaa>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a63      	ldr	r2, [pc, #396]	; (8002820 <HAL_DMA_IRQHandler+0x1f8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01a      	beq.n	80026cc <HAL_DMA_IRQHandler+0xa4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a62      	ldr	r2, [pc, #392]	; (8002824 <HAL_DMA_IRQHandler+0x1fc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x9e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a60      	ldr	r2, [pc, #384]	; (8002828 <HAL_DMA_IRQHandler+0x200>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00a      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x98>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_DMA_IRQHandler+0x204>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d102      	bne.n	80026ba <HAL_DMA_IRQHandler+0x92>
 80026b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026b8:	e00e      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026be:	e00b      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026c4:	e008      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026ca:	e005      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d0:	e002      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026d2:	2340      	movs	r3, #64	; 0x40
 80026d4:	e000      	b.n	80026d8 <HAL_DMA_IRQHandler+0xb0>
 80026d6:	2304      	movs	r3, #4
 80026d8:	4a55      	ldr	r2, [pc, #340]	; (8002830 <HAL_DMA_IRQHandler+0x208>)
 80026da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8094 	beq.w	800280e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026ee:	e08e      	b.n	800280e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2202      	movs	r2, #2
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d056      	beq.n	80027ae <HAL_DMA_IRQHandler+0x186>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d051      	beq.n	80027ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 020a 	bic.w	r2, r2, #10
 8002726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a38      	ldr	r2, [pc, #224]	; (8002818 <HAL_DMA_IRQHandler+0x1f0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d029      	beq.n	800278e <HAL_DMA_IRQHandler+0x166>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a37      	ldr	r2, [pc, #220]	; (800281c <HAL_DMA_IRQHandler+0x1f4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_DMA_IRQHandler+0x162>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a35      	ldr	r2, [pc, #212]	; (8002820 <HAL_DMA_IRQHandler+0x1f8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01a      	beq.n	8002784 <HAL_DMA_IRQHandler+0x15c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a34      	ldr	r2, [pc, #208]	; (8002824 <HAL_DMA_IRQHandler+0x1fc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d012      	beq.n	800277e <HAL_DMA_IRQHandler+0x156>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a32      	ldr	r2, [pc, #200]	; (8002828 <HAL_DMA_IRQHandler+0x200>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00a      	beq.n	8002778 <HAL_DMA_IRQHandler+0x150>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_DMA_IRQHandler+0x204>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d102      	bne.n	8002772 <HAL_DMA_IRQHandler+0x14a>
 800276c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002770:	e00e      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 8002772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002776:	e00b      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 8002778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800277c:	e008      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 800277e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002782:	e005      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 8002784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002788:	e002      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 800278a:	2320      	movs	r3, #32
 800278c:	e000      	b.n	8002790 <HAL_DMA_IRQHandler+0x168>
 800278e:	2302      	movs	r3, #2
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_DMA_IRQHandler+0x208>)
 8002792:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d034      	beq.n	800280e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027ac:	e02f      	b.n	800280e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2208      	movs	r2, #8
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d028      	beq.n	8002810 <HAL_DMA_IRQHandler+0x1e8>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d023      	beq.n	8002810 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 020e 	bic.w	r2, r2, #14
 80027d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
    }
  }
  return;
 800280e:	bf00      	nop
 8002810:	bf00      	nop
}
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40020008 	.word	0x40020008
 800281c:	4002001c 	.word	0x4002001c
 8002820:	40020030 	.word	0x40020030
 8002824:	40020044 	.word	0x40020044
 8002828:	40020058 	.word	0x40020058
 800282c:	4002006c 	.word	0x4002006c
 8002830:	40020000 	.word	0x40020000

08002834 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b10      	cmp	r3, #16
 8002860:	d108      	bne.n	8002874 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002872:	e007      	b.n	8002884 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
	...

08002890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b08b      	sub	sp, #44	; 0x2c
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a2:	e127      	b.n	8002af4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028a4:	2201      	movs	r2, #1
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f040 8116 	bne.w	8002aee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d034      	beq.n	8002934 <HAL_GPIO_Init+0xa4>
 80028ca:	2b12      	cmp	r3, #18
 80028cc:	d80d      	bhi.n	80028ea <HAL_GPIO_Init+0x5a>
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d02b      	beq.n	800292a <HAL_GPIO_Init+0x9a>
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d804      	bhi.n	80028e0 <HAL_GPIO_Init+0x50>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d031      	beq.n	800293e <HAL_GPIO_Init+0xae>
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d01c      	beq.n	8002918 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028de:	e048      	b.n	8002972 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d043      	beq.n	800296c <HAL_GPIO_Init+0xdc>
 80028e4:	2b11      	cmp	r3, #17
 80028e6:	d01b      	beq.n	8002920 <HAL_GPIO_Init+0x90>
          break;
 80028e8:	e043      	b.n	8002972 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028ea:	4a89      	ldr	r2, [pc, #548]	; (8002b10 <HAL_GPIO_Init+0x280>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d026      	beq.n	800293e <HAL_GPIO_Init+0xae>
 80028f0:	4a87      	ldr	r2, [pc, #540]	; (8002b10 <HAL_GPIO_Init+0x280>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d806      	bhi.n	8002904 <HAL_GPIO_Init+0x74>
 80028f6:	4a87      	ldr	r2, [pc, #540]	; (8002b14 <HAL_GPIO_Init+0x284>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d020      	beq.n	800293e <HAL_GPIO_Init+0xae>
 80028fc:	4a86      	ldr	r2, [pc, #536]	; (8002b18 <HAL_GPIO_Init+0x288>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01d      	beq.n	800293e <HAL_GPIO_Init+0xae>
          break;
 8002902:	e036      	b.n	8002972 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002904:	4a85      	ldr	r2, [pc, #532]	; (8002b1c <HAL_GPIO_Init+0x28c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d019      	beq.n	800293e <HAL_GPIO_Init+0xae>
 800290a:	4a85      	ldr	r2, [pc, #532]	; (8002b20 <HAL_GPIO_Init+0x290>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d016      	beq.n	800293e <HAL_GPIO_Init+0xae>
 8002910:	4a84      	ldr	r2, [pc, #528]	; (8002b24 <HAL_GPIO_Init+0x294>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0xae>
          break;
 8002916:	e02c      	b.n	8002972 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	623b      	str	r3, [r7, #32]
          break;
 800291e:	e028      	b.n	8002972 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	3304      	adds	r3, #4
 8002926:	623b      	str	r3, [r7, #32]
          break;
 8002928:	e023      	b.n	8002972 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	3308      	adds	r3, #8
 8002930:	623b      	str	r3, [r7, #32]
          break;
 8002932:	e01e      	b.n	8002972 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	330c      	adds	r3, #12
 800293a:	623b      	str	r3, [r7, #32]
          break;
 800293c:	e019      	b.n	8002972 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002946:	2304      	movs	r3, #4
 8002948:	623b      	str	r3, [r7, #32]
          break;
 800294a:	e012      	b.n	8002972 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002954:	2308      	movs	r3, #8
 8002956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	611a      	str	r2, [r3, #16]
          break;
 800295e:	e008      	b.n	8002972 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002960:	2308      	movs	r3, #8
 8002962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	615a      	str	r2, [r3, #20]
          break;
 800296a:	e002      	b.n	8002972 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
          break;
 8002970:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2bff      	cmp	r3, #255	; 0xff
 8002976:	d801      	bhi.n	800297c <HAL_GPIO_Init+0xec>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	e001      	b.n	8002980 <HAL_GPIO_Init+0xf0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2bff      	cmp	r3, #255	; 0xff
 8002986:	d802      	bhi.n	800298e <HAL_GPIO_Init+0xfe>
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x104>
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	3b08      	subs	r3, #8
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	210f      	movs	r1, #15
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	401a      	ands	r2, r3
 80029a6:	6a39      	ldr	r1, [r7, #32]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	431a      	orrs	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8096 	beq.w	8002aee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029c2:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_GPIO_Init+0x298>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_GPIO_Init+0x298>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6193      	str	r3, [r2, #24]
 80029ce:	4b56      	ldr	r3, [pc, #344]	; (8002b28 <HAL_GPIO_Init+0x298>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029da:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <HAL_GPIO_Init+0x29c>)
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4b      	ldr	r2, [pc, #300]	; (8002b30 <HAL_GPIO_Init+0x2a0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_GPIO_Init+0x19e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4a      	ldr	r2, [pc, #296]	; (8002b34 <HAL_GPIO_Init+0x2a4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00d      	beq.n	8002a2a <HAL_GPIO_Init+0x19a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a49      	ldr	r2, [pc, #292]	; (8002b38 <HAL_GPIO_Init+0x2a8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <HAL_GPIO_Init+0x196>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a48      	ldr	r2, [pc, #288]	; (8002b3c <HAL_GPIO_Init+0x2ac>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_GPIO_Init+0x192>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x1a0>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e004      	b.n	8002a30 <HAL_GPIO_Init+0x1a0>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x1a0>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x1a0>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a32:	f002 0203 	and.w	r2, r2, #3
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a40:	493a      	ldr	r1, [pc, #232]	; (8002b2c <HAL_GPIO_Init+0x29c>)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4938      	ldr	r1, [pc, #224]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
 8002a66:	e006      	b.n	8002a76 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a68:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	4933      	ldr	r1, [pc, #204]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a82:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	492e      	ldr	r1, [pc, #184]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
 8002a8e:	e006      	b.n	8002a9e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	4929      	ldr	r1, [pc, #164]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aaa:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	4924      	ldr	r1, [pc, #144]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
 8002ab6:	e006      	b.n	8002ac6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	491f      	ldr	r1, [pc, #124]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	491a      	ldr	r1, [pc, #104]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60cb      	str	r3, [r1, #12]
 8002ade:	e006      	b.n	8002aee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	4915      	ldr	r1, [pc, #84]	; (8002b40 <HAL_GPIO_Init+0x2b0>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f47f aed0 	bne.w	80028a4 <HAL_GPIO_Init+0x14>
  }
}
 8002b04:	bf00      	nop
 8002b06:	372c      	adds	r7, #44	; 0x2c
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	10210000 	.word	0x10210000
 8002b14:	10110000 	.word	0x10110000
 8002b18:	10120000 	.word	0x10120000
 8002b1c:	10310000 	.word	0x10310000
 8002b20:	10320000 	.word	0x10320000
 8002b24:	10220000 	.word	0x10220000
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40010800 	.word	0x40010800
 8002b34:	40010c00 	.word	0x40010c00
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40011400 	.word	0x40011400
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b60:	e003      	b.n	8002b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	041a      	lsls	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	611a      	str	r2, [r3, #16]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e26c      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8087 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b94:	4b92      	ldr	r3, [pc, #584]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d00c      	beq.n	8002bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba0:	4b8f      	ldr	r3, [pc, #572]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d112      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5e>
 8002bac:	4b8c      	ldr	r3, [pc, #560]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	4b89      	ldr	r3, [pc, #548]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d06c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d168      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e246      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x76>
 8002bdc:	4b80      	ldr	r3, [pc, #512]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a7f      	ldr	r2, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e02e      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x98>
 8002bf2:	4b7b      	ldr	r3, [pc, #492]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7a      	ldr	r2, [pc, #488]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b78      	ldr	r3, [pc, #480]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a77      	ldr	r2, [pc, #476]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xbc>
 8002c16:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a71      	ldr	r2, [pc, #452]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002c30:	4b6b      	ldr	r3, [pc, #428]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b68      	ldr	r3, [pc, #416]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a67      	ldr	r2, [pc, #412]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe feb0 	bl	80019b4 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe feac 	bl	80019b4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1fa      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe4>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fe9c 	bl	80019b4 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fe98 	bl	80019b4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1e6      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x10c>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cae:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cba:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x18c>
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x176>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1ba      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4939      	ldr	r1, [pc, #228]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fe51 	bl	80019b4 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe fe4d 	bl	80019b4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e19b      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4927      	ldr	r1, [pc, #156]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe fe30 	bl	80019b4 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fe fe2c 	bl	80019b4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e17a      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03a      	beq.n	8002df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d019      	beq.n	8002dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fe fe10 	bl	80019b4 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fe fe0c 	bl	80019b4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e15a      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f000 fb0a 	bl	80033d0 <RCC_Delay>
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fdf6 	bl	80019b4 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dca:	e00f      	b.n	8002dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7fe fdf2 	bl	80019b4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d908      	bls.n	8002dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e140      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	42420000 	.word	0x42420000
 8002de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b9e      	ldr	r3, [pc, #632]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e9      	bne.n	8002dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a6 	beq.w	8002f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b97      	ldr	r3, [pc, #604]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4b94      	ldr	r3, [pc, #592]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a93      	ldr	r2, [pc, #588]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]
 8002e22:	4b91      	ldr	r3, [pc, #580]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e32:	4b8e      	ldr	r3, [pc, #568]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d118      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a8a      	ldr	r2, [pc, #552]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fdb3 	bl	80019b4 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7fe fdaf 	bl	80019b4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	; 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0fd      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x4f8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x312>
 8002e78:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a7a      	ldr	r2, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e02d      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x334>
 8002e8e:	4b76      	ldr	r3, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a72      	ldr	r2, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	e01c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d10c      	bne.n	8002eca <HAL_RCC_OscConfig+0x356>
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a69      	ldr	r2, [pc, #420]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e00b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4a66      	ldr	r2, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	4b64      	ldr	r3, [pc, #400]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a63      	ldr	r2, [pc, #396]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fd63 	bl	80019b4 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe fd5f 	bl	80019b4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0ab      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ee      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x37e>
 8002f14:	e014      	b.n	8002f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe fd4d 	bl	80019b4 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fd49 	bl	80019b4 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e095      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ee      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4a47      	ldr	r2, [pc, #284]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8081 	beq.w	800305e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5c:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d061      	beq.n	800302c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d146      	bne.n	8002ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_OscConfig+0x4fc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe fd1d 	bl	80019b4 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe fd19 	bl	80019b4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e067      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	4b35      	ldr	r3, [pc, #212]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fa6:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	492d      	ldr	r1, [pc, #180]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a19      	ldr	r1, [r3, #32]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	4927      	ldr	r1, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_OscConfig+0x4fc>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fced 	bl	80019b4 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fce9 	bl	80019b4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e037      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x46a>
 8002ffc:	e02f      	b.n	800305e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <HAL_RCC_OscConfig+0x4fc>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fcd6 	bl	80019b4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe fcd2 	bl	80019b4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e020      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x498>
 800302a:	e018      	b.n	800305e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e013      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	429a      	cmp	r2, r3
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	40007000 	.word	0x40007000
 8003070:	42420060 	.word	0x42420060

08003074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0d0      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d910      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b67      	ldr	r3, [pc, #412]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 0207 	bic.w	r2, r3, #7
 800309e:	4965      	ldr	r1, [pc, #404]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b8      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d040      	beq.n	8003194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e073      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4936      	ldr	r1, [pc, #216]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003164:	f7fe fc26 	bl	80019b4 <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fe fc22 	bl	80019b4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e053      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d210      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 0207 	bic.w	r2, r3, #7
 80031aa:	4922      	ldr	r1, [pc, #136]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4916      	ldr	r1, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003202:	f000 f821 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8003206:	4601      	mov	r1, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	fa21 f303 	lsr.w	r3, r1, r3
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1cc>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1d0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd ff2e 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40022000 	.word	0x40022000
 8003238:	40021000 	.word	0x40021000
 800323c:	08007d70 	.word	0x08007d70
 8003240:	20000004 	.word	0x20000004
 8003244:	20000008 	.word	0x20000008

08003248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	b490      	push	{r4, r7}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003250:	1d3c      	adds	r4, r7, #4
 8003252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d002      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x40>
 8003282:	2b08      	cmp	r3, #8
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x46>
 8003286:	e02d      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_GetSysClockFreq+0xbc>)
 800328a:	623b      	str	r3, [r7, #32]
      break;
 800328c:	e02d      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	0c9b      	lsrs	r3, r3, #18
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800329a:	4413      	add	r3, r2
 800329c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ac:	4b14      	ldr	r3, [pc, #80]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	0c5b      	lsrs	r3, r3, #17
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ba:	4413      	add	r3, r2
 80032bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c6:	fb02 f203 	mul.w	r2, r2, r3
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	e004      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	623b      	str	r3, [r7, #32]
      break;
 80032e2:	e002      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032e6:	623b      	str	r3, [r7, #32]
      break;
 80032e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ea:	6a3b      	ldr	r3, [r7, #32]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc90      	pop	{r4, r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	08007d40 	.word	0x08007d40
 80032fc:	08007d50 	.word	0x08007d50
 8003300:	40021000 	.word	0x40021000
 8003304:	007a1200 	.word	0x007a1200
 8003308:	003d0900 	.word	0x003d0900

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b02      	ldr	r3, [pc, #8]	; (800331c <HAL_RCC_GetHCLKFreq+0x10>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	20000004 	.word	0x20000004

08003320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003324:	f7ff fff2 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003328:	4601      	mov	r1, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4a03      	ldr	r2, [pc, #12]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003336:	5cd3      	ldrb	r3, [r2, r3]
 8003338:	fa21 f303 	lsr.w	r3, r1, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	08007d80 	.word	0x08007d80

08003348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800334c:	f7ff ffde 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003350:	4601      	mov	r1, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0adb      	lsrs	r3, r3, #11
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4a03      	ldr	r2, [pc, #12]	; (800336c <HAL_RCC_GetPCLK2Freq+0x24>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08007d80 	.word	0x08007d80

08003370 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	220f      	movs	r2, #15
 800337e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_GetClockConfig+0x58>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0203 	and.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <HAL_RCC_GetClockConfig+0x58>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_GetClockConfig+0x58>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCC_GetClockConfig+0x58>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_GetClockConfig+0x5c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0207 	and.w	r2, r3, #7
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40022000 	.word	0x40022000

080033d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <RCC_Delay+0x34>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <RCC_Delay+0x38>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0a5b      	lsrs	r3, r3, #9
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033ec:	bf00      	nop
  }
  while (Delay --);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	60fa      	str	r2, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f9      	bne.n	80033ec <RCC_Delay+0x1c>
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000004 	.word	0x20000004
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d07d      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342c:	4b4f      	ldr	r3, [pc, #316]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	4b4c      	ldr	r3, [pc, #304]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4a4b      	ldr	r2, [pc, #300]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003442:	61d3      	str	r3, [r2, #28]
 8003444:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d118      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a42      	ldr	r2, [pc, #264]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346c:	f7fe faa2 	bl	80019b4 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003472:	e008      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fe fa9e 	bl	80019b4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e06d      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003492:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d027      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b0:	4b2e      	ldr	r3, [pc, #184]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ba:	4b2e      	ldr	r3, [pc, #184]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034bc:	2201      	movs	r2, #1
 80034be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c0:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034c6:	4a29      	ldr	r2, [pc, #164]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d014      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe fa6d 	bl	80019b4 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fe fa69 	bl	80019b4 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e036      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ee      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4917      	ldr	r1, [pc, #92]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	4313      	orrs	r3, r2
 8003510:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4b14      	ldr	r3, [pc, #80]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a13      	ldr	r2, [pc, #76]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003522:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	490b      	ldr	r1, [pc, #44]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	40007000 	.word	0x40007000
 8003574:	42420440 	.word	0x42420440

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e041      	b.n	800360e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fc72 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fb7a 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e03a      	b.n	80036a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_TIM_Base_Start_IT+0x98>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00e      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d009      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b06      	cmp	r3, #6
 8003680:	d010      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	e007      	b.n	80036a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800

080036bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e041      	b.n	8003752 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f839 	bl	800375a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 fad8 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0202 	mvn.w	r2, #2
 8003798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fa62 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fa55 	bl	8003c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fa64 	bl	8003c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0204 	mvn.w	r2, #4
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fa38 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa2b 	bl	8003c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fa3a 	bl	8003c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b08      	cmp	r3, #8
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0208 	mvn.w	r2, #8
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2204      	movs	r2, #4
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa0e 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa01 	bl	8003c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa10 	bl	8003c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b10      	cmp	r3, #16
 800387c:	d122      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b10      	cmp	r3, #16
 800388a:	d11b      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0210 	mvn.w	r2, #16
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2208      	movs	r2, #8
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f9e4 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9d7 	bl	8003c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f9e6 	bl	8003c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10e      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0201 	mvn.w	r2, #1
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fa14 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d10e      	bne.n	800391c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d107      	bne.n	800391c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fcb1 	bl	800427e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b40      	cmp	r3, #64	; 0x40
 8003928:	d10e      	bne.n	8003948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d107      	bne.n	8003948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f9aa 	bl	8003c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b20      	cmp	r3, #32
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b20      	cmp	r3, #32
 8003962:	d107      	bne.n	8003974 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0220 	mvn.w	r2, #32
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fc7c 	bl	800426c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003992:	2302      	movs	r3, #2
 8003994:	e0ac      	b.n	8003af0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b0c      	cmp	r3, #12
 80039a2:	f200 809f 	bhi.w	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039e1 	.word	0x080039e1
 80039b0:	08003ae5 	.word	0x08003ae5
 80039b4:	08003ae5 	.word	0x08003ae5
 80039b8:	08003ae5 	.word	0x08003ae5
 80039bc:	08003a21 	.word	0x08003a21
 80039c0:	08003ae5 	.word	0x08003ae5
 80039c4:	08003ae5 	.word	0x08003ae5
 80039c8:	08003ae5 	.word	0x08003ae5
 80039cc:	08003a63 	.word	0x08003a63
 80039d0:	08003ae5 	.word	0x08003ae5
 80039d4:	08003ae5 	.word	0x08003ae5
 80039d8:	08003ae5 	.word	0x08003ae5
 80039dc:	08003aa3 	.word	0x08003aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f9c4 	bl	8003d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0208 	orr.w	r2, r2, #8
 80039fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6999      	ldr	r1, [r3, #24]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	619a      	str	r2, [r3, #24]
      break;
 8003a1e:	e062      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa0a 	bl	8003e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6999      	ldr	r1, [r3, #24]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	619a      	str	r2, [r3, #24]
      break;
 8003a60:	e041      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fa53 	bl	8003f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0208 	orr.w	r2, r2, #8
 8003a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0204 	bic.w	r2, r2, #4
 8003a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69d9      	ldr	r1, [r3, #28]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	61da      	str	r2, [r3, #28]
      break;
 8003aa0:	e021      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fa9d 	bl	8003fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69d9      	ldr	r1, [r3, #28]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	021a      	lsls	r2, r3, #8
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	61da      	str	r2, [r3, #28]
      break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ae4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIM_ConfigClockSource+0x18>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e0a6      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x166>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d067      	beq.n	8003c18 <HAL_TIM_ConfigClockSource+0x120>
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d80b      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x6c>
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d073      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x140>
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d802      	bhi.n	8003b5a <HAL_TIM_ConfigClockSource+0x62>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d06f      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b58:	e078      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d06c      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x140>
 8003b5e:	2b30      	cmp	r3, #48	; 0x30
 8003b60:	d06a      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b62:	e073      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b64:	2b70      	cmp	r3, #112	; 0x70
 8003b66:	d00d      	beq.n	8003b84 <HAL_TIM_ConfigClockSource+0x8c>
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d804      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x7e>
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d033      	beq.n	8003bd8 <HAL_TIM_ConfigClockSource+0xe0>
 8003b70:	2b60      	cmp	r3, #96	; 0x60
 8003b72:	d041      	beq.n	8003bf8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b74:	e06a      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d066      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x152>
 8003b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b80:	d017      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b82:	e063      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6899      	ldr	r1, [r3, #8]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f000 faed 	bl	8004172 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ba6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]
      break;
 8003bb0:	e04c      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f000 fad6 	bl	8004172 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bd4:	609a      	str	r2, [r3, #8]
      break;
 8003bd6:	e039      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	461a      	mov	r2, r3
 8003be6:	f000 fa4d 	bl	8004084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2150      	movs	r1, #80	; 0x50
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 faa4 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003bf6:	e029      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f000 fa6b 	bl	80040e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2160      	movs	r1, #96	; 0x60
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fa94 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003c16:	e019      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f000 fa2d 	bl	8004084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2140      	movs	r1, #64	; 0x40
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fa84 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003c36:	e009      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f000 fa7b 	bl	800413e <TIM_ITRx_SetConfig>
        break;
 8003c48:	e000      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
	...

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <TIM_Base_SetConfig+0xb8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <TIM_Base_SetConfig+0x30>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d007      	beq.n	8003ce0 <TIM_Base_SetConfig+0x30>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <TIM_Base_SetConfig+0xbc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_Base_SetConfig+0x30>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a25      	ldr	r2, [pc, #148]	; (8003d70 <TIM_Base_SetConfig+0xc0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d108      	bne.n	8003cf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <TIM_Base_SetConfig+0xb8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <TIM_Base_SetConfig+0x62>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d007      	beq.n	8003d12 <TIM_Base_SetConfig+0x62>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <TIM_Base_SetConfig+0xbc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_Base_SetConfig+0x62>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <TIM_Base_SetConfig+0xc0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d108      	bne.n	8003d24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <TIM_Base_SetConfig+0xb8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800

08003d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f023 0302 	bic.w	r3, r3, #2
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <TIM_OC1_SetConfig+0xc8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10c      	bne.n	8003dea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0308 	bic.w	r3, r3, #8
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <TIM_OC1_SetConfig+0xc8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d111      	bne.n	8003e16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00

08003e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0210 	bic.w	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0320 	bic.w	r3, r3, #32
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <TIM_OC2_SetConfig+0xd0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10d      	bne.n	8003ebc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <TIM_OC2_SetConfig+0xd0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d113      	bne.n	8003eec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	40012c00 	.word	0x40012c00

08003f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <TIM_OC3_SetConfig+0xd0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10d      	bne.n	8003f8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <TIM_OC3_SetConfig+0xd0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d113      	bne.n	8003fbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00

08003fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <TIM_OC4_SetConfig+0x98>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d109      	bne.n	800405c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	019b      	lsls	r3, r3, #6
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	40012c00 	.word	0x40012c00

08004084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0201 	bic.w	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 030a 	bic.w	r3, r3, #10
 80040c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f023 0210 	bic.w	r2, r3, #16
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800410a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	031b      	lsls	r3, r3, #12
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800411c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	621a      	str	r2, [r3, #32]
}
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	f043 0307 	orr.w	r3, r3, #7
 8004160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004172:	b480      	push	{r7}
 8004174:	b087      	sub	sp, #28
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800418c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	021a      	lsls	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	431a      	orrs	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4313      	orrs	r3, r2
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	609a      	str	r2, [r3, #8]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e046      	b.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a16      	ldr	r2, [pc, #88]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00e      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d009      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a10      	ldr	r2, [pc, #64]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10c      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	4313      	orrs	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800

0800426c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e03f      	b.n	8004322 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc fe90 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb39 	bl	800494c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b08a      	sub	sp, #40	; 0x28
 800432e:	af02      	add	r7, sp, #8
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b20      	cmp	r3, #32
 8004348:	d17c      	bne.n	8004444 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_UART_Transmit+0x2c>
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e075      	b.n	8004446 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_UART_Transmit+0x3e>
 8004364:	2302      	movs	r3, #2
 8004366:	e06e      	b.n	8004446 <HAL_UART_Transmit+0x11c>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2221      	movs	r2, #33	; 0x21
 800437a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800437e:	f7fd fb19 	bl	80019b4 <HAL_GetTick>
 8004382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	88fa      	ldrh	r2, [r7, #6]
 800438e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d108      	bne.n	80043ac <HAL_UART_Transmit+0x82>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	e003      	b.n	80043b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80043bc:	e02a      	b.n	8004414 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2180      	movs	r1, #128	; 0x80
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f95c 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e036      	b.n	8004446 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10b      	bne.n	80043f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	3302      	adds	r3, #2
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	e007      	b.n	8004406 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	3301      	adds	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1cf      	bne.n	80043be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2200      	movs	r2, #0
 8004426:	2140      	movs	r1, #64	; 0x40
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f92c 	bl	8004686 <UART_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e006      	b.n	8004446 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	e000      	b.n	8004446 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10d      	bne.n	80044a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_UART_IRQHandler+0x52>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9d5 	bl	800484a <UART_Receive_IT>
      return;
 80044a0:	e0d1      	b.n	8004646 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80b0 	beq.w	800460a <HAL_UART_IRQHandler+0x1ba>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <HAL_UART_IRQHandler+0x70>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80a5 	beq.w	800460a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_UART_IRQHandler+0x90>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_UART_IRQHandler+0xb0>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	f043 0202 	orr.w	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_UART_IRQHandler+0xd0>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	f043 0204 	orr.w	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00f      	beq.n	800454a <HAL_UART_IRQHandler+0xfa>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_UART_IRQHandler+0xee>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	f043 0208 	orr.w	r2, r3, #8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d078      	beq.n	8004644 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_UART_IRQHandler+0x11c>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f96f 	bl	800484a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf14      	ite	ne
 800457a:	2301      	movne	r3, #1
 800457c:	2300      	moveq	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <HAL_UART_IRQHandler+0x144>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d031      	beq.n	80045f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8c0 	bl	800471a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d023      	beq.n	80045f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d013      	beq.n	80045e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	4a21      	ldr	r2, [pc, #132]	; (800464c <HAL_UART_IRQHandler+0x1fc>)
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fd ffb5 	bl	800253c <HAL_DMA_Abort_IT>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d016      	beq.n	8004606 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e2:	4610      	mov	r0, r2
 80045e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e6:	e00e      	b.n	8004606 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f843 	bl	8004674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ee:	e00a      	b.n	8004606 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f83f 	bl	8004674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f6:	e006      	b.n	8004606 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f83b 	bl	8004674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004604:	e01e      	b.n	8004644 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004606:	bf00      	nop
    return;
 8004608:	e01c      	b.n	8004644 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_UART_IRQHandler+0x1d6>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8ac 	bl	800477c <UART_Transmit_IT>
    return;
 8004624:	e00f      	b.n	8004646 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_UART_IRQHandler+0x1f6>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f8ed 	bl	800481a <UART_EndTransmit_IT>
    return;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004644:	bf00      	nop
  }
}
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	08004755 	.word	0x08004755

08004650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	e02c      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469e:	d028      	beq.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80046a6:	f7fd f985 	bl	80019b4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d21d      	bcs.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e00f      	b.n	8004712 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4013      	ands	r3, r2
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	bf0c      	ite	eq
 8004702:	2301      	moveq	r3, #1
 8004704:	2300      	movne	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	429a      	cmp	r2, r3
 800470e:	d0c3      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004730:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff ff80 	bl	8004674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b21      	cmp	r3, #33	; 0x21
 800478e:	d13e      	bne.n	800480e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004798:	d114      	bne.n	80047c4 <UART_Transmit_IT+0x48>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d110      	bne.n	80047c4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	1c9a      	adds	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]
 80047c2:	e008      	b.n	80047d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	1c59      	adds	r1, r3, #1
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6211      	str	r1, [r2, #32]
 80047ce:	781a      	ldrb	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4619      	mov	r1, r3
 80047e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004808:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e000      	b.n	8004810 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
  }
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004830:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff ff08 	bl	8004650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b22      	cmp	r3, #34	; 0x22
 800485c:	d170      	bne.n	8004940 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d117      	bne.n	8004898 <UART_Receive_IT+0x4e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d113      	bne.n	8004898 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	b29a      	uxth	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
 8004896:	e026      	b.n	80048e6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d007      	beq.n	80048bc <UART_Receive_IT+0x72>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <UART_Receive_IT+0x80>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	e008      	b.n	80048dc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4619      	mov	r1, r3
 80048f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d120      	bne.n	800493c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0220 	bic.w	r2, r2, #32
 8004908:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004918:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fe95 	bl	8004662 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e002      	b.n	8004942 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e000      	b.n	8004942 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004940:	2302      	movs	r3, #2
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004986:	f023 030c 	bic.w	r3, r3, #12
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	430b      	orrs	r3, r1
 8004992:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <UART_SetConfig+0x114>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d103      	bne.n	80049bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049b4:	f7fe fcc8 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	e002      	b.n	80049c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7fe fcb0 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 80049c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009a      	lsls	r2, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <UART_SetConfig+0x118>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	0119      	lsls	r1, r3, #4
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009a      	lsls	r2, r3, #2
 80049ec:	441a      	add	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <UART_SetConfig+0x118>)
 80049fa:	fba3 0302 	umull	r0, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	2064      	movs	r0, #100	; 0x64
 8004a02:	fb00 f303 	mul.w	r3, r0, r3
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	3332      	adds	r3, #50	; 0x32
 8004a0c:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <UART_SetConfig+0x118>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a18:	4419      	add	r1, r3
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009a      	lsls	r2, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <UART_SetConfig+0x118>)
 8004a32:	fba3 0302 	umull	r0, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2064      	movs	r0, #100	; 0x64
 8004a3a:	fb00 f303 	mul.w	r3, r0, r3
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	3332      	adds	r3, #50	; 0x32
 8004a44:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <UART_SetConfig+0x118>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	440a      	add	r2, r1
 8004a56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40013800 	.word	0x40013800
 8004a64:	51eb851f 	.word	0x51eb851f

08004a68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a7a:	2b84      	cmp	r3, #132	; 0x84
 8004a7c:	d005      	beq.n	8004a8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	3303      	adds	r3, #3
 8004a88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9c:	f3ef 8305 	mrs	r3, IPSR
 8004aa0:	607b      	str	r3, [r7, #4]
  return(result);
 8004aa2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004abc:	f001 f818 	bl	8005af0 <vTaskStartScheduler>
  
  return osOK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac8:	b089      	sub	sp, #36	; 0x24
 8004aca:	af04      	add	r7, sp, #16
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <osThreadCreate+0x54>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01c      	beq.n	8004b1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685c      	ldr	r4, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681d      	ldr	r5, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691e      	ldr	r6, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff ffb8 	bl	8004a68 <makeFreeRtosPriority>
 8004af8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b02:	9202      	str	r2, [sp, #8]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	9100      	str	r1, [sp, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 fe34 	bl	800577c <xTaskCreateStatic>
 8004b14:	4603      	mov	r3, r0
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e01c      	b.n	8004b54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685c      	ldr	r4, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b26:	b29e      	uxth	r6, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff9a 	bl	8004a68 <makeFreeRtosPriority>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f107 030c 	add.w	r3, r7, #12
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	9200      	str	r2, [sp, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	4632      	mov	r2, r6
 8004b42:	4629      	mov	r1, r5
 8004b44:	4620      	mov	r0, r4
 8004b46:	f000 fe72 	bl	800582e <xTaskCreate>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b54:	68fb      	ldr	r3, [r7, #12]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <osDelay+0x16>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	e000      	b.n	8004b76 <osDelay+0x18>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 ff86 	bl	8005a88 <vTaskDelay>
  
  return osOK;
 8004b7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	460b      	mov	r3, r1
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d013      	beq.n	8004bc6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8004b9e:	7afb      	ldrb	r3, [r7, #11]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <osTimerCreate+0x20>
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	e000      	b.n	8004baa <osTimerCreate+0x22>
 8004ba8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004bb2:	9201      	str	r2, [sp, #4]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	460a      	mov	r2, r1
 8004bba:	2101      	movs	r1, #1
 8004bbc:	480b      	ldr	r0, [pc, #44]	; (8004bec <osTimerCreate+0x64>)
 8004bbe:	f001 fd42 	bl	8006646 <xTimerCreateStatic>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	e00e      	b.n	8004be4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <osTimerCreate+0x48>
 8004bcc:	2201      	movs	r2, #1
 8004bce:	e000      	b.n	8004bd2 <osTimerCreate+0x4a>
 8004bd0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4803      	ldr	r0, [pc, #12]	; (8004bec <osTimerCreate+0x64>)
 8004bde:	f001 fd11 	bl	8006604 <xTimerCreate>
 8004be2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	08007d54 	.word	0x08007d54

08004bf0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <osTimerStart+0x20>
    ticks = 1;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8004c10:	f7ff ff41 	bl	8004a96 <inHandlerMode>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01b      	beq.n	8004c52 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8004c1a:	f107 020c 	add.w	r2, r7, #12
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	2109      	movs	r1, #9
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f001 fd79 	bl	8006720 <xTimerGenericCommand>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d002      	beq.n	8004c3a <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8004c34:	23ff      	movs	r3, #255	; 0xff
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e018      	b.n	8004c6c <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <osTimerStart+0x7c>
 8004c40:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <osTimerStart+0x88>)
 8004c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	e00c      	b.n	8004c6c <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8004c52:	2300      	movs	r3, #0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f001 fd5f 	bl	8006720 <xTimerGenericCommand>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <osTimerStart+0x7c>
      result = osErrorOS;
 8004c68:	23ff      	movs	r3, #255	; 0xff
 8004c6a:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8004c6c:	697b      	ldr	r3, [r7, #20]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f103 0208 	add.w	r2, r3, #8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f103 0208 	add.w	r2, r3, #8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f103 0208 	add.w	r2, r3, #8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr

08004cba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d2e:	d103      	bne.n	8004d38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e00c      	b.n	8004d52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	e002      	b.n	8004d46 <vListInsert+0x2e>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d2f6      	bcs.n	8004d40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6892      	ldr	r2, [r2, #8]
 8004d9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6852      	ldr	r2, [r2, #4]
 8004da8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d103      	bne.n	8004dbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	1e5a      	subs	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
	...

08004ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	e7fe      	b.n	8004e02 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004e04:	f002 f820 	bl	8006e48 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	68f9      	ldr	r1, [r7, #12]
 8004e12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	441a      	add	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e34:	3b01      	subs	r3, #1
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	441a      	add	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	22ff      	movs	r2, #255	; 0xff
 8004e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	22ff      	movs	r2, #255	; 0xff
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d114      	bne.n	8004e84 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01a      	beq.n	8004e98 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3310      	adds	r3, #16
 8004e66:	4618      	mov	r0, r3
 8004e68:	f001 f8c2 	bl	8005ff0 <xTaskRemoveFromEventList>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d012      	beq.n	8004e98 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <xQueueGenericReset+0xcc>)
 8004e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	e009      	b.n	8004e98 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3310      	adds	r3, #16
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fef7 	bl	8004c7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3324      	adds	r3, #36	; 0x24
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fef2 	bl	8004c7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e98:	f002 f804 	bl	8006ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e9c:	2301      	movs	r3, #1
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08e      	sub	sp, #56	; 0x38
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <xQueueGenericCreateStatic+0x28>
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed2:	e7fe      	b.n	8004ed2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <xQueueGenericCreateStatic+0x42>
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
 8004eec:	e7fe      	b.n	8004eec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <xQueueGenericCreateStatic+0x4e>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <xQueueGenericCreateStatic+0x52>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueGenericCreateStatic+0x54>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <xQueueGenericCreateStatic+0x6c>
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	623b      	str	r3, [r7, #32]
 8004f16:	e7fe      	b.n	8004f16 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <xQueueGenericCreateStatic+0x78>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <xQueueGenericCreateStatic+0x7c>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <xQueueGenericCreateStatic+0x7e>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <xQueueGenericCreateStatic+0x96>
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e7fe      	b.n	8004f40 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f42:	2348      	movs	r3, #72	; 0x48
 8004f44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b48      	cmp	r3, #72	; 0x48
 8004f4a:	d009      	beq.n	8004f60 <xQueueGenericCreateStatic+0xb4>
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e7fe      	b.n	8004f5e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00d      	beq.n	8004f86 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f805 	bl	8004f90 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3730      	adds	r7, #48	; 0x30
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	69b8      	ldr	r0, [r7, #24]
 8004fc2:	f7ff ff0b 	bl	8004ddc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <xQueueGenericSend+0x30>
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffe:	e7fe      	b.n	8004ffe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <xQueueGenericSend+0x3e>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <xQueueGenericSend+0x42>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <xQueueGenericSend+0x44>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <xQueueGenericSend+0x5c>
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
 800502a:	e7fe      	b.n	800502a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d103      	bne.n	800503a <xQueueGenericSend+0x6a>
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <xQueueGenericSend+0x6e>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <xQueueGenericSend+0x70>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <xQueueGenericSend+0x88>
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	e7fe      	b.n	8005056 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005058:	f001 f984 	bl	8006364 <xTaskGetSchedulerState>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <xQueueGenericSend+0x98>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <xQueueGenericSend+0x9c>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <xQueueGenericSend+0x9e>
 800506c:	2300      	movs	r3, #0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <xQueueGenericSend+0xb6>
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	e7fe      	b.n	8005084 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005086:	f001 fedf 	bl	8006e48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <xQueueGenericSend+0xcc>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d129      	bne.n	80050f0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a2:	f000 f9ff 	bl	80054a4 <prvCopyDataToQueue>
 80050a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d010      	beq.n	80050d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	3324      	adds	r3, #36	; 0x24
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 ff9b 	bl	8005ff0 <xTaskRemoveFromEventList>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050c0:	4b3f      	ldr	r3, [pc, #252]	; (80051c0 <xQueueGenericSend+0x1f0>)
 80050c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	e00a      	b.n	80050e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <xQueueGenericSend+0x1f0>)
 80050da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050e8:	f001 fedc 	bl	8006ea4 <vPortExitCritical>
				return pdPASS;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e063      	b.n	80051b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050f6:	f001 fed5 	bl	8006ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e05c      	b.n	80051b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005104:	f107 0314 	add.w	r3, r7, #20
 8005108:	4618      	mov	r0, r3
 800510a:	f000 ffd3 	bl	80060b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800510e:	2301      	movs	r3, #1
 8005110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005112:	f001 fec7 	bl	8006ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005116:	f000 fd4f 	bl	8005bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800511a:	f001 fe95 	bl	8006e48 <vPortEnterCritical>
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005124:	b25b      	sxtb	r3, r3
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800512a:	d103      	bne.n	8005134 <xQueueGenericSend+0x164>
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513a:	b25b      	sxtb	r3, r3
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005140:	d103      	bne.n	800514a <xQueueGenericSend+0x17a>
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800514a:	f001 feab 	bl	8006ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800514e:	1d3a      	adds	r2, r7, #4
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f000 ffc2 	bl	80060e0 <xTaskCheckForTimeOut>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d124      	bne.n	80051ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005164:	f000 fa96 	bl	8005694 <prvIsQueueFull>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	3310      	adds	r3, #16
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4611      	mov	r1, r2
 8005176:	4618      	mov	r0, r3
 8005178:	f000 feec 	bl	8005f54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800517c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800517e:	f000 fa21 	bl	80055c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005182:	f000 fd27 	bl	8005bd4 <xTaskResumeAll>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	f47f af7c 	bne.w	8005086 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800518e:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <xQueueGenericSend+0x1f0>)
 8005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	e772      	b.n	8005086 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051a2:	f000 fa0f 	bl	80055c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051a6:	f000 fd15 	bl	8005bd4 <xTaskResumeAll>
 80051aa:	e76c      	b.n	8005086 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ae:	f000 fa09 	bl	80055c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051b2:	f000 fd0f 	bl	8005bd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051b6:	2300      	movs	r3, #0
		}
	}
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3738      	adds	r7, #56	; 0x38
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08e      	sub	sp, #56	; 0x38
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <xQueueGenericSendFromISR+0x2c>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
 80051ee:	e7fe      	b.n	80051ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <xQueueGenericSendFromISR+0x3a>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <xQueueGenericSendFromISR+0x3e>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <xQueueGenericSendFromISR+0x40>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <xQueueGenericSendFromISR+0x58>
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	623b      	str	r3, [r7, #32]
 800521a:	e7fe      	b.n	800521a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d103      	bne.n	800522a <xQueueGenericSendFromISR+0x66>
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <xQueueGenericSendFromISR+0x6a>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <xQueueGenericSendFromISR+0x6c>
 800522e:	2300      	movs	r3, #0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <xQueueGenericSendFromISR+0x84>
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	e7fe      	b.n	8005246 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005248:	f001 feb8 	bl	8006fbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800524c:	f3ef 8211 	mrs	r2, BASEPRI
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	61ba      	str	r2, [r7, #24]
 8005262:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005264:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005270:	429a      	cmp	r2, r3
 8005272:	d302      	bcc.n	800527a <xQueueGenericSendFromISR+0xb6>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d12c      	bne.n	80052d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800528a:	f000 f90b 	bl	80054a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800528e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005296:	d112      	bne.n	80052be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d016      	beq.n	80052ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	3324      	adds	r3, #36	; 0x24
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fea3 	bl	8005ff0 <xTaskRemoveFromEventList>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00e      	beq.n	80052ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e007      	b.n	80052ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052c2:	3301      	adds	r3, #1
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	b25a      	sxtb	r2, r3
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052ce:	2301      	movs	r3, #1
 80052d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80052d2:	e001      	b.n	80052d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	637b      	str	r3, [r7, #52]	; 0x34
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3738      	adds	r7, #56	; 0x38
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08c      	sub	sp, #48	; 0x30
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <xQueueReceive+0x2e>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	e7fe      	b.n	8005318 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d103      	bne.n	8005328 <xQueueReceive+0x3c>
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <xQueueReceive+0x40>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <xQueueReceive+0x42>
 800532c:	2300      	movs	r3, #0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <xQueueReceive+0x5a>
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e7fe      	b.n	8005344 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005346:	f001 f80d 	bl	8006364 <xTaskGetSchedulerState>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <xQueueReceive+0x6a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <xQueueReceive+0x6e>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <xQueueReceive+0x70>
 800535a:	2300      	movs	r3, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <xQueueReceive+0x88>
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e7fe      	b.n	8005372 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005374:	f001 fd68 	bl	8006e48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01f      	beq.n	80053c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005388:	f000 f8f6 	bl	8005578 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	1e5a      	subs	r2, r3, #1
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00f      	beq.n	80053bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	3310      	adds	r3, #16
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fe25 	bl	8005ff0 <xTaskRemoveFromEventList>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053ac:	4b3c      	ldr	r3, [pc, #240]	; (80054a0 <xQueueReceive+0x1b4>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053bc:	f001 fd72 	bl	8006ea4 <vPortExitCritical>
				return pdPASS;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e069      	b.n	8005498 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ca:	f001 fd6b 	bl	8006ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e062      	b.n	8005498 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053d8:	f107 0310 	add.w	r3, r7, #16
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fe69 	bl	80060b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053e6:	f001 fd5d 	bl	8006ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ea:	f000 fbe5 	bl	8005bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053ee:	f001 fd2b 	bl	8006e48 <vPortEnterCritical>
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053f8:	b25b      	sxtb	r3, r3
 80053fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053fe:	d103      	bne.n	8005408 <xQueueReceive+0x11c>
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800540e:	b25b      	sxtb	r3, r3
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005414:	d103      	bne.n	800541e <xQueueReceive+0x132>
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800541e:	f001 fd41 	bl	8006ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005422:	1d3a      	adds	r2, r7, #4
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fe58 	bl	80060e0 <xTaskCheckForTimeOut>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d123      	bne.n	800547e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005438:	f000 f916 	bl	8005668 <prvIsQueueEmpty>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d017      	beq.n	8005472 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fd82 	bl	8005f54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005452:	f000 f8b7 	bl	80055c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005456:	f000 fbbd 	bl	8005bd4 <xTaskResumeAll>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d189      	bne.n	8005374 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <xQueueReceive+0x1b4>)
 8005462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	e780      	b.n	8005374 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005474:	f000 f8a6 	bl	80055c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005478:	f000 fbac 	bl	8005bd4 <xTaskResumeAll>
 800547c:	e77a      	b.n	8005374 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800547e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005480:	f000 f8a0 	bl	80055c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005484:	f000 fba6 	bl	8005bd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800548a:	f000 f8ed 	bl	8005668 <prvIsQueueEmpty>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	f43f af6f 	beq.w	8005374 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005496:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005498:	4618      	mov	r0, r3
 800549a:	3730      	adds	r7, #48	; 0x30
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10d      	bne.n	80054de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d14d      	bne.n	8005566 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 ff66 	bl	80063a0 <xTaskPriorityDisinherit>
 80054d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	e043      	b.n	8005566 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d119      	bne.n	8005518 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6898      	ldr	r0, [r3, #8]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	461a      	mov	r2, r3
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	f001 ff9e 	bl	8007430 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	441a      	add	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d32b      	bcc.n	8005566 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	609a      	str	r2, [r3, #8]
 8005516:	e026      	b.n	8005566 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68d8      	ldr	r0, [r3, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	461a      	mov	r2, r3
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	f001 ff84 	bl	8007430 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	425b      	negs	r3, r3
 8005532:	441a      	add	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d207      	bcs.n	8005554 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	425b      	negs	r3, r3
 800554e:	441a      	add	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d105      	bne.n	8005566 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3b01      	subs	r3, #1
 8005564:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800556e:	697b      	ldr	r3, [r7, #20]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d018      	beq.n	80055bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	441a      	add	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d303      	bcc.n	80055ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68d9      	ldr	r1, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	461a      	mov	r2, r3
 80055b6:	6838      	ldr	r0, [r7, #0]
 80055b8:	f001 ff3a 	bl	8007430 <memcpy>
	}
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055cc:	f001 fc3c 	bl	8006e48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055d8:	e011      	b.n	80055fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d012      	beq.n	8005608 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3324      	adds	r3, #36	; 0x24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fd02 	bl	8005ff0 <xTaskRemoveFromEventList>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055f2:	f000 fdd5 	bl	80061a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	dce9      	bgt.n	80055da <prvUnlockQueue+0x16>
 8005606:	e000      	b.n	800560a <prvUnlockQueue+0x46>
					break;
 8005608:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005612:	f001 fc47 	bl	8006ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005616:	f001 fc17 	bl	8006e48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005620:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005622:	e011      	b.n	8005648 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3310      	adds	r3, #16
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fcdd 	bl	8005ff0 <xTaskRemoveFromEventList>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800563c:	f000 fdb0 	bl	80061a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	3b01      	subs	r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dce9      	bgt.n	8005624 <prvUnlockQueue+0x60>
 8005650:	e000      	b.n	8005654 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005652:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	22ff      	movs	r2, #255	; 0xff
 8005658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800565c:	f001 fc22 	bl	8006ea4 <vPortExitCritical>
}
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005670:	f001 fbea 	bl	8006e48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e001      	b.n	8005686 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005686:	f001 fc0d 	bl	8006ea4 <vPortExitCritical>

	return xReturn;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800569c:	f001 fbd4 	bl	8006e48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d102      	bne.n	80056b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	e001      	b.n	80056b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056b6:	f001 fbf5 	bl	8006ea4 <vPortExitCritical>

	return xReturn;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e014      	b.n	80056fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056d4:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <vQueueAddToRegistry+0x4c>)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056e0:	490b      	ldr	r1, [pc, #44]	; (8005710 <vQueueAddToRegistry+0x4c>)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <vQueueAddToRegistry+0x4c>)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056f6:	e005      	b.n	8005704 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b07      	cmp	r3, #7
 8005702:	d9e7      	bls.n	80056d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20001c78 	.word	0x20001c78

08005714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005724:	f001 fb90 	bl	8006e48 <vPortEnterCritical>
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800572e:	b25b      	sxtb	r3, r3
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005734:	d103      	bne.n	800573e <vQueueWaitForMessageRestricted+0x2a>
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005744:	b25b      	sxtb	r3, r3
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574a:	d103      	bne.n	8005754 <vQueueWaitForMessageRestricted+0x40>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005754:	f001 fba6 	bl	8006ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	3324      	adds	r3, #36	; 0x24
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fc17 	bl	8005f9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800576e:	6978      	ldr	r0, [r7, #20]
 8005770:	f7ff ff28 	bl	80055c4 <prvUnlockQueue>
	}
 8005774:	bf00      	nop
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08e      	sub	sp, #56	; 0x38
 8005780:	af04      	add	r7, sp, #16
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <xTaskCreateStatic+0x28>
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	623b      	str	r3, [r7, #32]
 80057a2:	e7fe      	b.n	80057a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <xTaskCreateStatic+0x42>
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	e7fe      	b.n	80057bc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057be:	2354      	movs	r3, #84	; 0x54
 80057c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b54      	cmp	r3, #84	; 0x54
 80057c6:	d009      	beq.n	80057dc <xTaskCreateStatic+0x60>
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	e7fe      	b.n	80057da <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01e      	beq.n	8005820 <xTaskCreateStatic+0xa4>
 80057e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2202      	movs	r2, #2
 80057f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057fa:	2300      	movs	r3, #0
 80057fc:	9303      	str	r3, [sp, #12]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	9302      	str	r3, [sp, #8]
 8005802:	f107 0314 	add.w	r3, r7, #20
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f850 	bl	80058b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800581a:	f000 f8cb 	bl	80059b4 <prvAddNewTaskToReadyList>
 800581e:	e001      	b.n	8005824 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005824:	697b      	ldr	r3, [r7, #20]
	}
 8005826:	4618      	mov	r0, r3
 8005828:	3728      	adds	r7, #40	; 0x28
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800582e:	b580      	push	{r7, lr}
 8005830:	b08c      	sub	sp, #48	; 0x30
 8005832:	af04      	add	r7, sp, #16
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fbf6 	bl	8007034 <pvPortMalloc>
 8005848:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005850:	2054      	movs	r0, #84	; 0x54
 8005852:	f001 fbef 	bl	8007034 <pvPortMalloc>
 8005856:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
 8005864:	e005      	b.n	8005872 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005866:	6978      	ldr	r0, [r7, #20]
 8005868:	f001 fca6 	bl	80071b8 <vPortFree>
 800586c:	e001      	b.n	8005872 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d017      	beq.n	80058a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005880:	88fa      	ldrh	r2, [r7, #6]
 8005882:	2300      	movs	r3, #0
 8005884:	9303      	str	r3, [sp, #12]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f80e 	bl	80058b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800589c:	69f8      	ldr	r0, [r7, #28]
 800589e:	f000 f889 	bl	80059b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e002      	b.n	80058ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ae:	69bb      	ldr	r3, [r7, #24]
	}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058d0:	3b01      	subs	r3, #1
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f023 0307 	bic.w	r3, r3, #7
 80058de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <prvInitialiseNewTask+0x46>
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e7fe      	b.n	80058fc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e012      	b.n	800592a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	7819      	ldrb	r1, [r3, #0]
 800590c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	3334      	adds	r3, #52	; 0x34
 8005914:	460a      	mov	r2, r1
 8005916:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d006      	beq.n	8005932 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	3301      	adds	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b0f      	cmp	r3, #15
 800592e:	d9e9      	bls.n	8005904 <prvInitialiseNewTask+0x4c>
 8005930:	e000      	b.n	8005934 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005932:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	2b06      	cmp	r3, #6
 8005940:	d901      	bls.n	8005946 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005942:	2306      	movs	r3, #6
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	2200      	movs	r2, #0
 8005956:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	3304      	adds	r3, #4
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff f9ac 	bl	8004cba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	3318      	adds	r3, #24
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff f9a7 	bl	8004cba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005970:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	f1c3 0207 	rsb	r2, r3, #7
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	2200      	movs	r2, #0
 8005986:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	68f9      	ldr	r1, [r7, #12]
 8005994:	69b8      	ldr	r0, [r7, #24]
 8005996:	f001 f96b 	bl	8006c70 <pxPortInitialiseStack>
 800599a:	4602      	mov	r2, r0
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059ac:	bf00      	nop
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059bc:	f001 fa44 	bl	8006e48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059c0:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <prvAddNewTaskToReadyList+0xb8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	4a29      	ldr	r2, [pc, #164]	; (8005a6c <prvAddNewTaskToReadyList+0xb8>)
 80059c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059ca:	4b29      	ldr	r3, [pc, #164]	; (8005a70 <prvAddNewTaskToReadyList+0xbc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059d2:	4a27      	ldr	r2, [pc, #156]	; (8005a70 <prvAddNewTaskToReadyList+0xbc>)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d8:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <prvAddNewTaskToReadyList+0xb8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d110      	bne.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059e0:	f000 fc02 	bl	80061e8 <prvInitialiseTaskLists>
 80059e4:	e00d      	b.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059e6:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <prvAddNewTaskToReadyList+0xc0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ee:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <prvAddNewTaskToReadyList+0xbc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d802      	bhi.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <prvAddNewTaskToReadyList+0xbc>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a02:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	4a1b      	ldr	r2, [pc, #108]	; (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 8005a0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	2201      	movs	r2, #1
 8005a12:	409a      	lsls	r2, r3
 8005a14:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <prvAddNewTaskToReadyList+0xcc>)
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7ff f94c 	bl	8004cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a3a:	f001 fa33 	bl	8006ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <prvAddNewTaskToReadyList+0xc0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00e      	beq.n	8005a64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a46:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <prvAddNewTaskToReadyList+0xbc>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d207      	bcs.n	8005a64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <prvAddNewTaskToReadyList+0xd0>)
 8005a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000864 	.word	0x20000864
 8005a70:	20000764 	.word	0x20000764
 8005a74:	20000870 	.word	0x20000870
 8005a78:	20000880 	.word	0x20000880
 8005a7c:	2000086c 	.word	0x2000086c
 8005a80:	20000768 	.word	0x20000768
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <vTaskDelay+0x60>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <vTaskDelay+0x2e>
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	60bb      	str	r3, [r7, #8]
 8005ab4:	e7fe      	b.n	8005ab4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005ab6:	f000 f87f 	bl	8005bb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005aba:	2100      	movs	r1, #0
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fcf3 	bl	80064a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ac2:	f000 f887 	bl	8005bd4 <xTaskResumeAll>
 8005ac6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <vTaskDelay+0x64>)
 8005ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ade:	bf00      	nop
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	2000088c 	.word	0x2000088c
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005afe:	463a      	mov	r2, r7
 8005b00:	1d39      	adds	r1, r7, #4
 8005b02:	f107 0308 	add.w	r3, r7, #8
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fa fb2a 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	9202      	str	r2, [sp, #8]
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	2300      	movs	r3, #0
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	460a      	mov	r2, r1
 8005b1e:	4920      	ldr	r1, [pc, #128]	; (8005ba0 <vTaskStartScheduler+0xb0>)
 8005b20:	4820      	ldr	r0, [pc, #128]	; (8005ba4 <vTaskStartScheduler+0xb4>)
 8005b22:	f7ff fe2b 	bl	800577c <xTaskCreateStatic>
 8005b26:	4602      	mov	r2, r0
 8005b28:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <vTaskStartScheduler+0xb8>)
 8005b2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ba8 <vTaskStartScheduler+0xb8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b34:	2301      	movs	r3, #1
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e001      	b.n	8005b3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d102      	bne.n	8005b4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b44:	f000 fd16 	bl	8006574 <xTimerCreateTimerTask>
 8005b48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d115      	bne.n	8005b7c <vTaskStartScheduler+0x8c>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <vTaskStartScheduler+0xbc>)
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <vTaskStartScheduler+0xc0>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005b70:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <vTaskStartScheduler+0xc4>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b76:	f001 f8f7 	bl	8006d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b7a:	e00d      	b.n	8005b98 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b82:	d109      	bne.n	8005b98 <vTaskStartScheduler+0xa8>
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	e7fe      	b.n	8005b96 <vTaskStartScheduler+0xa6>
}
 8005b98:	bf00      	nop
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	08007d58 	.word	0x08007d58
 8005ba4:	080061b9 	.word	0x080061b9
 8005ba8:	20000888 	.word	0x20000888
 8005bac:	20000884 	.word	0x20000884
 8005bb0:	20000870 	.word	0x20000870
 8005bb4:	20000868 	.word	0x20000868

08005bb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <vTaskSuspendAll+0x18>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	4a03      	ldr	r2, [pc, #12]	; (8005bd0 <vTaskSuspendAll+0x18>)
 8005bc4:	6013      	str	r3, [r2, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	2000088c 	.word	0x2000088c

08005bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <xTaskResumeAll+0x114>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <xTaskResumeAll+0x2a>
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	e7fe      	b.n	8005bfc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bfe:	f001 f923 	bl	8006e48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c02:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <xTaskResumeAll+0x114>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	4a37      	ldr	r2, [pc, #220]	; (8005ce8 <xTaskResumeAll+0x114>)
 8005c0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c0c:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <xTaskResumeAll+0x114>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d161      	bne.n	8005cd8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c14:	4b35      	ldr	r3, [pc, #212]	; (8005cec <xTaskResumeAll+0x118>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d05d      	beq.n	8005cd8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c1c:	e02e      	b.n	8005c7c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c1e:	4b34      	ldr	r3, [pc, #208]	; (8005cf0 <xTaskResumeAll+0x11c>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3318      	adds	r3, #24
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff f8ac 	bl	8004d88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff f8a7 	bl	8004d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	2201      	movs	r2, #1
 8005c40:	409a      	lsls	r2, r3
 8005c42:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <xTaskResumeAll+0x120>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	4a2a      	ldr	r2, [pc, #168]	; (8005cf4 <xTaskResumeAll+0x120>)
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4a27      	ldr	r2, [pc, #156]	; (8005cf8 <xTaskResumeAll+0x124>)
 8005c5a:	441a      	add	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f7ff f835 	bl	8004cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <xTaskResumeAll+0x128>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005c76:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <xTaskResumeAll+0x12c>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c7c:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <xTaskResumeAll+0x11c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1cc      	bne.n	8005c1e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c8a:	f000 fb47 	bl	800631c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c8e:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <xTaskResumeAll+0x130>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d010      	beq.n	8005cbc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c9a:	f000 f845 	bl	8005d28 <xTaskIncrementTick>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005ca4:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <xTaskResumeAll+0x12c>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f1      	bne.n	8005c9a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005cb6:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <xTaskResumeAll+0x130>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cbc:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <xTaskResumeAll+0x12c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <xTaskResumeAll+0x134>)
 8005cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cd8:	f001 f8e4 	bl	8006ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2000088c 	.word	0x2000088c
 8005cec:	20000864 	.word	0x20000864
 8005cf0:	20000824 	.word	0x20000824
 8005cf4:	2000086c 	.word	0x2000086c
 8005cf8:	20000768 	.word	0x20000768
 8005cfc:	20000764 	.word	0x20000764
 8005d00:	20000878 	.word	0x20000878
 8005d04:	20000874 	.word	0x20000874
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <xTaskGetTickCount+0x18>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d18:	687b      	ldr	r3, [r7, #4]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	20000868 	.word	0x20000868

08005d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d32:	4b50      	ldr	r3, [pc, #320]	; (8005e74 <xTaskIncrementTick+0x14c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 808c 	bne.w	8005e54 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d3c:	4b4e      	ldr	r3, [pc, #312]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d44:	4a4c      	ldr	r2, [pc, #304]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11f      	bne.n	8005d90 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d50:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <xTaskIncrementTick+0x46>
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	e7fe      	b.n	8005d6c <xTaskIncrementTick+0x44>
 8005d6e:	4b43      	ldr	r3, [pc, #268]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	4b42      	ldr	r3, [pc, #264]	; (8005e80 <xTaskIncrementTick+0x158>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a40      	ldr	r2, [pc, #256]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	4a40      	ldr	r2, [pc, #256]	; (8005e80 <xTaskIncrementTick+0x158>)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4b40      	ldr	r3, [pc, #256]	; (8005e84 <xTaskIncrementTick+0x15c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3301      	adds	r3, #1
 8005d88:	4a3e      	ldr	r2, [pc, #248]	; (8005e84 <xTaskIncrementTick+0x15c>)
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	f000 fac6 	bl	800631c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d90:	4b3d      	ldr	r3, [pc, #244]	; (8005e88 <xTaskIncrementTick+0x160>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d34d      	bcc.n	8005e36 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9a:	4b38      	ldr	r3, [pc, #224]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <xTaskIncrementTick+0x80>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <xTaskIncrementTick+0x82>
 8005da8:	2300      	movs	r3, #0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dae:	4b36      	ldr	r3, [pc, #216]	; (8005e88 <xTaskIncrementTick+0x160>)
 8005db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005db4:	601a      	str	r2, [r3, #0]
					break;
 8005db6:	e03e      	b.n	8005e36 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005db8:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d203      	bcs.n	8005dd8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dd0:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <xTaskIncrementTick+0x160>)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6013      	str	r3, [r2, #0]
						break;
 8005dd6:	e02e      	b.n	8005e36 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe ffd3 	bl	8004d88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	3318      	adds	r3, #24
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe ffca 	bl	8004d88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	2201      	movs	r2, #1
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	4b23      	ldr	r3, [pc, #140]	; (8005e8c <xTaskIncrementTick+0x164>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	4a22      	ldr	r2, [pc, #136]	; (8005e8c <xTaskIncrementTick+0x164>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <xTaskIncrementTick+0x168>)
 8005e14:	441a      	add	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f7fe ff58 	bl	8004cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e26:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <xTaskIncrementTick+0x16c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d3b4      	bcc.n	8005d9a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e34:	e7b1      	b.n	8005d9a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e36:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <xTaskIncrementTick+0x16c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3c:	4914      	ldr	r1, [pc, #80]	; (8005e90 <xTaskIncrementTick+0x168>)
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d907      	bls.n	8005e5e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e004      	b.n	8005e5e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e54:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <xTaskIncrementTick+0x170>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	4a0f      	ldr	r2, [pc, #60]	; (8005e98 <xTaskIncrementTick+0x170>)
 8005e5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <xTaskIncrementTick+0x174>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005e66:	2301      	movs	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e6a:	697b      	ldr	r3, [r7, #20]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	2000088c 	.word	0x2000088c
 8005e78:	20000868 	.word	0x20000868
 8005e7c:	2000081c 	.word	0x2000081c
 8005e80:	20000820 	.word	0x20000820
 8005e84:	2000087c 	.word	0x2000087c
 8005e88:	20000884 	.word	0x20000884
 8005e8c:	2000086c 	.word	0x2000086c
 8005e90:	20000768 	.word	0x20000768
 8005e94:	20000764 	.word	0x20000764
 8005e98:	20000874 	.word	0x20000874
 8005e9c:	20000878 	.word	0x20000878

08005ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ea6:	4b26      	ldr	r3, [pc, #152]	; (8005f40 <vTaskSwitchContext+0xa0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eae:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <vTaskSwitchContext+0xa4>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005eb4:	e03e      	b.n	8005f34 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005eb6:	4b23      	ldr	r3, [pc, #140]	; (8005f44 <vTaskSwitchContext+0xa4>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ebc:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <vTaskSwitchContext+0xa8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	fab3 f383 	clz	r3, r3
 8005ec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	f1c3 031f 	rsb	r3, r3, #31
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	491e      	ldr	r1, [pc, #120]	; (8005f4c <vTaskSwitchContext+0xac>)
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <vTaskSwitchContext+0x5a>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	607b      	str	r3, [r7, #4]
 8005ef8:	e7fe      	b.n	8005ef8 <vTaskSwitchContext+0x58>
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4a11      	ldr	r2, [pc, #68]	; (8005f4c <vTaskSwitchContext+0xac>)
 8005f06:	4413      	add	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d104      	bne.n	8005f2a <vTaskSwitchContext+0x8a>
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <vTaskSwitchContext+0xb0>)
 8005f32:	6013      	str	r3, [r2, #0]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	2000088c 	.word	0x2000088c
 8005f44:	20000878 	.word	0x20000878
 8005f48:	2000086c 	.word	0x2000086c
 8005f4c:	20000768 	.word	0x20000768
 8005f50:	20000764 	.word	0x20000764

08005f54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <vTaskPlaceOnEventList+0x24>
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e7fe      	b.n	8005f76 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f78:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <vTaskPlaceOnEventList+0x44>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3318      	adds	r3, #24
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fe fec9 	bl	8004d18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f86:	2101      	movs	r1, #1
 8005f88:	6838      	ldr	r0, [r7, #0]
 8005f8a:	f000 fa8d 	bl	80064a8 <prvAddCurrentTaskToDelayedList>
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000764 	.word	0x20000764

08005f9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <vTaskPlaceOnEventListRestricted+0x26>
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e7fe      	b.n	8005fc0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <vTaskPlaceOnEventListRestricted+0x50>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	4619      	mov	r1, r3
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7fe fe81 	bl	8004cd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	68b8      	ldr	r0, [r7, #8]
 8005fe0:	f000 fa62 	bl	80064a8 <prvAddCurrentTaskToDelayedList>
	}
 8005fe4:	bf00      	nop
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000764 	.word	0x20000764

08005ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <xTaskRemoveFromEventList+0x2a>
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e7fe      	b.n	8006018 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3318      	adds	r3, #24
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe feb2 	bl	8004d88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006024:	4b1d      	ldr	r3, [pc, #116]	; (800609c <xTaskRemoveFromEventList+0xac>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d11c      	bne.n	8006066 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	3304      	adds	r3, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe fea9 	bl	8004d88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	2201      	movs	r2, #1
 800603c:	409a      	lsls	r2, r3
 800603e:	4b18      	ldr	r3, [pc, #96]	; (80060a0 <xTaskRemoveFromEventList+0xb0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4313      	orrs	r3, r2
 8006044:	4a16      	ldr	r2, [pc, #88]	; (80060a0 <xTaskRemoveFromEventList+0xb0>)
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <xTaskRemoveFromEventList+0xb4>)
 8006056:	441a      	add	r2, r3
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fe fe37 	bl	8004cd2 <vListInsertEnd>
 8006064:	e005      	b.n	8006072 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	3318      	adds	r3, #24
 800606a:	4619      	mov	r1, r3
 800606c:	480e      	ldr	r0, [pc, #56]	; (80060a8 <xTaskRemoveFromEventList+0xb8>)
 800606e:	f7fe fe30 	bl	8004cd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <xTaskRemoveFromEventList+0xbc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	429a      	cmp	r2, r3
 800607e:	d905      	bls.n	800608c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <xTaskRemoveFromEventList+0xc0>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e001      	b.n	8006090 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006090:	697b      	ldr	r3, [r7, #20]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	2000088c 	.word	0x2000088c
 80060a0:	2000086c 	.word	0x2000086c
 80060a4:	20000768 	.word	0x20000768
 80060a8:	20000824 	.word	0x20000824
 80060ac:	20000764 	.word	0x20000764
 80060b0:	20000878 	.word	0x20000878

080060b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <vTaskInternalSetTimeOutState+0x24>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <vTaskInternalSetTimeOutState+0x28>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	605a      	str	r2, [r3, #4]
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	2000087c 	.word	0x2000087c
 80060dc:	20000868 	.word	0x20000868

080060e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d109      	bne.n	8006104 <xTaskCheckForTimeOut+0x24>
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	e7fe      	b.n	8006102 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <xTaskCheckForTimeOut+0x3e>
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	e7fe      	b.n	800611c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800611e:	f000 fe93 	bl	8006e48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006122:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <xTaskCheckForTimeOut+0xb8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800613a:	d102      	bne.n	8006142 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]
 8006140:	e023      	b.n	800618a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b15      	ldr	r3, [pc, #84]	; (800619c <xTaskCheckForTimeOut+0xbc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d007      	beq.n	800615e <xTaskCheckForTimeOut+0x7e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	429a      	cmp	r2, r3
 8006156:	d302      	bcc.n	800615e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	e015      	b.n	800618a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	429a      	cmp	r2, r3
 8006166:	d20b      	bcs.n	8006180 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ff9d 	bl	80060b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
 800617e:	e004      	b.n	800618a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006186:	2301      	movs	r3, #1
 8006188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800618a:	f000 fe8b 	bl	8006ea4 <vPortExitCritical>

	return xReturn;
 800618e:	69fb      	ldr	r3, [r7, #28]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000868 	.word	0x20000868
 800619c:	2000087c 	.word	0x2000087c

080061a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061a4:	4b03      	ldr	r3, [pc, #12]	; (80061b4 <vTaskMissedYield+0x14>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
}
 80061aa:	bf00      	nop
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000878 	.word	0x20000878

080061b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061c0:	f000 f852 	bl	8006268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <prvIdleTask+0x28>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d9f9      	bls.n	80061c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <prvIdleTask+0x2c>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061dc:	e7f0      	b.n	80061c0 <prvIdleTask+0x8>
 80061de:	bf00      	nop
 80061e0:	20000768 	.word	0x20000768
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ee:	2300      	movs	r3, #0
 80061f0:	607b      	str	r3, [r7, #4]
 80061f2:	e00c      	b.n	800620e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4a12      	ldr	r2, [pc, #72]	; (8006248 <prvInitialiseTaskLists+0x60>)
 8006200:	4413      	add	r3, r2
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fd3a 	bl	8004c7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3301      	adds	r3, #1
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b06      	cmp	r3, #6
 8006212:	d9ef      	bls.n	80061f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006214:	480d      	ldr	r0, [pc, #52]	; (800624c <prvInitialiseTaskLists+0x64>)
 8006216:	f7fe fd31 	bl	8004c7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800621a:	480d      	ldr	r0, [pc, #52]	; (8006250 <prvInitialiseTaskLists+0x68>)
 800621c:	f7fe fd2e 	bl	8004c7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006220:	480c      	ldr	r0, [pc, #48]	; (8006254 <prvInitialiseTaskLists+0x6c>)
 8006222:	f7fe fd2b 	bl	8004c7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006226:	480c      	ldr	r0, [pc, #48]	; (8006258 <prvInitialiseTaskLists+0x70>)
 8006228:	f7fe fd28 	bl	8004c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800622c:	480b      	ldr	r0, [pc, #44]	; (800625c <prvInitialiseTaskLists+0x74>)
 800622e:	f7fe fd25 	bl	8004c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <prvInitialiseTaskLists+0x78>)
 8006234:	4a05      	ldr	r2, [pc, #20]	; (800624c <prvInitialiseTaskLists+0x64>)
 8006236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <prvInitialiseTaskLists+0x7c>)
 800623a:	4a05      	ldr	r2, [pc, #20]	; (8006250 <prvInitialiseTaskLists+0x68>)
 800623c:	601a      	str	r2, [r3, #0]
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000768 	.word	0x20000768
 800624c:	200007f4 	.word	0x200007f4
 8006250:	20000808 	.word	0x20000808
 8006254:	20000824 	.word	0x20000824
 8006258:	20000838 	.word	0x20000838
 800625c:	20000850 	.word	0x20000850
 8006260:	2000081c 	.word	0x2000081c
 8006264:	20000820 	.word	0x20000820

08006268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800626e:	e019      	b.n	80062a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006270:	f000 fdea 	bl	8006e48 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006274:	4b0f      	ldr	r3, [pc, #60]	; (80062b4 <prvCheckTasksWaitingTermination+0x4c>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe fd81 	bl	8004d88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <prvCheckTasksWaitingTermination+0x50>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3b01      	subs	r3, #1
 800628c:	4a0a      	ldr	r2, [pc, #40]	; (80062b8 <prvCheckTasksWaitingTermination+0x50>)
 800628e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <prvCheckTasksWaitingTermination+0x54>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3b01      	subs	r3, #1
 8006296:	4a09      	ldr	r2, [pc, #36]	; (80062bc <prvCheckTasksWaitingTermination+0x54>)
 8006298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800629a:	f000 fe03 	bl	8006ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f80e 	bl	80062c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <prvCheckTasksWaitingTermination+0x54>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e1      	bne.n	8006270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000838 	.word	0x20000838
 80062b8:	20000864 	.word	0x20000864
 80062bc:	2000084c 	.word	0x2000084c

080062c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d108      	bne.n	80062e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 ff6e 	bl	80071b8 <vPortFree>
				vPortFree( pxTCB );
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 ff6b 	bl	80071b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062e2:	e017      	b.n	8006314 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d103      	bne.n	80062f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 ff62 	bl	80071b8 <vPortFree>
	}
 80062f4:	e00e      	b.n	8006314 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d009      	beq.n	8006314 <prvDeleteTCB+0x54>
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e7fe      	b.n	8006312 <prvDeleteTCB+0x52>
	}
 8006314:	bf00      	nop
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006322:	4b0e      	ldr	r3, [pc, #56]	; (800635c <prvResetNextTaskUnblockTime+0x40>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <prvResetNextTaskUnblockTime+0x14>
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <prvResetNextTaskUnblockTime+0x16>
 8006330:	2300      	movs	r3, #0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006336:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <prvResetNextTaskUnblockTime+0x44>)
 8006338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800633c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800633e:	e008      	b.n	8006352 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <prvResetNextTaskUnblockTime+0x40>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	4a04      	ldr	r2, [pc, #16]	; (8006360 <prvResetNextTaskUnblockTime+0x44>)
 8006350:	6013      	str	r3, [r2, #0]
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr
 800635c:	2000081c 	.word	0x2000081c
 8006360:	20000884 	.word	0x20000884

08006364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <xTaskGetSchedulerState+0x34>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006372:	2301      	movs	r3, #1
 8006374:	607b      	str	r3, [r7, #4]
 8006376:	e008      	b.n	800638a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <xTaskGetSchedulerState+0x38>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006380:	2302      	movs	r3, #2
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	e001      	b.n	800638a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006386:	2300      	movs	r3, #0
 8006388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800638a:	687b      	ldr	r3, [r7, #4]
	}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000870 	.word	0x20000870
 800639c:	2000088c 	.word	0x2000088c

080063a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d06c      	beq.n	8006490 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063b6:	4b39      	ldr	r3, [pc, #228]	; (800649c <xTaskPriorityDisinherit+0xfc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d009      	beq.n	80063d4 <xTaskPriorityDisinherit+0x34>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e7fe      	b.n	80063d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <xTaskPriorityDisinherit+0x50>
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	e7fe      	b.n	80063ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f4:	1e5a      	subs	r2, r3, #1
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	429a      	cmp	r2, r3
 8006404:	d044      	beq.n	8006490 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800640a:	2b00      	cmp	r3, #0
 800640c:	d140      	bne.n	8006490 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fcb8 	bl	8004d88 <uxListRemove>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d115      	bne.n	800644a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	491f      	ldr	r1, [pc, #124]	; (80064a0 <xTaskPriorityDisinherit+0x100>)
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xTaskPriorityDisinherit+0xaa>
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	2201      	movs	r2, #1
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	43da      	mvns	r2, r3
 8006440:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <xTaskPriorityDisinherit+0x104>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4013      	ands	r3, r2
 8006446:	4a17      	ldr	r2, [pc, #92]	; (80064a4 <xTaskPriorityDisinherit+0x104>)
 8006448:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	f1c3 0207 	rsb	r2, r3, #7
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	2201      	movs	r2, #1
 8006464:	409a      	lsls	r2, r3
 8006466:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <xTaskPriorityDisinherit+0x104>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4313      	orrs	r3, r2
 800646c:	4a0d      	ldr	r2, [pc, #52]	; (80064a4 <xTaskPriorityDisinherit+0x104>)
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4613      	mov	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <xTaskPriorityDisinherit+0x100>)
 800647e:	441a      	add	r2, r3
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7fe fc23 	bl	8004cd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006490:	697b      	ldr	r3, [r7, #20]
	}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000764 	.word	0x20000764
 80064a0:	20000768 	.word	0x20000768
 80064a4:	2000086c 	.word	0x2000086c

080064a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064b2:	4b29      	ldr	r3, [pc, #164]	; (8006558 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064b8:	4b28      	ldr	r3, [pc, #160]	; (800655c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3304      	adds	r3, #4
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe fc62 	bl	8004d88 <uxListRemove>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80064ca:	4b24      	ldr	r3, [pc, #144]	; (800655c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	2201      	movs	r2, #1
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	43da      	mvns	r2, r3
 80064d8:	4b21      	ldr	r3, [pc, #132]	; (8006560 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4013      	ands	r3, r2
 80064de:	4a20      	ldr	r2, [pc, #128]	; (8006560 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e8:	d10a      	bne.n	8006500 <prvAddCurrentTaskToDelayedList+0x58>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	481a      	ldr	r0, [pc, #104]	; (8006564 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064fa:	f7fe fbea 	bl	8004cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064fe:	e026      	b.n	800654e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4413      	add	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006508:	4b14      	ldr	r3, [pc, #80]	; (800655c <prvAddCurrentTaskToDelayedList+0xb4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	429a      	cmp	r2, r3
 8006516:	d209      	bcs.n	800652c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006518:	4b13      	ldr	r3, [pc, #76]	; (8006568 <prvAddCurrentTaskToDelayedList+0xc0>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <prvAddCurrentTaskToDelayedList+0xb4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3304      	adds	r3, #4
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7fe fbf7 	bl	8004d18 <vListInsert>
}
 800652a:	e010      	b.n	800654e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800652c:	4b0f      	ldr	r3, [pc, #60]	; (800656c <prvAddCurrentTaskToDelayedList+0xc4>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fe fbed 	bl	8004d18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800653e:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	429a      	cmp	r2, r3
 8006546:	d202      	bcs.n	800654e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <prvAddCurrentTaskToDelayedList+0xc8>)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6013      	str	r3, [r2, #0]
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000868 	.word	0x20000868
 800655c:	20000764 	.word	0x20000764
 8006560:	2000086c 	.word	0x2000086c
 8006564:	20000850 	.word	0x20000850
 8006568:	20000820 	.word	0x20000820
 800656c:	2000081c 	.word	0x2000081c
 8006570:	20000884 	.word	0x20000884

08006574 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800657e:	f000 fb37 	bl	8006bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006582:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <xTimerCreateTimerTask+0x80>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d021      	beq.n	80065ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006592:	1d3a      	adds	r2, r7, #4
 8006594:	f107 0108 	add.w	r1, r7, #8
 8006598:	f107 030c 	add.w	r3, r7, #12
 800659c:	4618      	mov	r0, r3
 800659e:	f7f9 fdf7 	bl	8000190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	2305      	movs	r3, #5
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	2300      	movs	r3, #0
 80065b2:	460a      	mov	r2, r1
 80065b4:	4910      	ldr	r1, [pc, #64]	; (80065f8 <xTimerCreateTimerTask+0x84>)
 80065b6:	4811      	ldr	r0, [pc, #68]	; (80065fc <xTimerCreateTimerTask+0x88>)
 80065b8:	f7ff f8e0 	bl	800577c <xTaskCreateStatic>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b10      	ldr	r3, [pc, #64]	; (8006600 <xTimerCreateTimerTask+0x8c>)
 80065c0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065c2:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <xTimerCreateTimerTask+0x8c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065ca:	2301      	movs	r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <xTimerCreateTimerTask+0x74>
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	e7fe      	b.n	80065e6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80065e8:	697b      	ldr	r3, [r7, #20]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	200008c0 	.word	0x200008c0
 80065f8:	08007d60 	.word	0x08007d60
 80065fc:	08006839 	.word	0x08006839
 8006600:	200008c4 	.word	0x200008c4

08006604 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af02      	add	r7, sp, #8
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006612:	202c      	movs	r0, #44	; 0x2c
 8006614:	f000 fd0e 	bl	8007034 <pvPortMalloc>
 8006618:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00d      	beq.n	800663c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f844 	bl	80066bc <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800663c:	697b      	ldr	r3, [r7, #20]
	}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006646:	b580      	push	{r7, lr}
 8006648:	b08a      	sub	sp, #40	; 0x28
 800664a:	af02      	add	r7, sp, #8
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006654:	232c      	movs	r3, #44	; 0x2c
 8006656:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b2c      	cmp	r3, #44	; 0x2c
 800665c:	d009      	beq.n	8006672 <xTimerCreateStatic+0x2c>
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	e7fe      	b.n	8006670 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <xTimerCreateStatic+0x46>
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e7fe      	b.n	800668a <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f809 	bl	80066bc <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80066b2:	69fb      	ldr	r3, [r7, #28]
	}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3720      	adds	r7, #32
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <prvInitialiseNewTimer+0x28>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e7fe      	b.n	80066e2 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d015      	beq.n	8006716 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80066ea:	f000 fa81 	bl	8006bf0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	6a3a      	ldr	r2, [r7, #32]
 800670a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	3304      	adds	r3, #4
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe fad2 	bl	8004cba <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006716:	bf00      	nop
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	; 0x28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800672e:	2300      	movs	r3, #0
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <xTimerGenericCommand+0x2c>
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	e7fe      	b.n	800674a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800674c:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <xTimerGenericCommand+0x94>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d02a      	beq.n	80067aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b05      	cmp	r3, #5
 8006764:	dc18      	bgt.n	8006798 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006766:	f7ff fdfd 	bl	8006364 <xTaskGetSchedulerState>
 800676a:	4603      	mov	r3, r0
 800676c:	2b02      	cmp	r3, #2
 800676e:	d109      	bne.n	8006784 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006770:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <xTimerGenericCommand+0x94>)
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	f107 0114 	add.w	r1, r7, #20
 8006778:	2300      	movs	r3, #0
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	f7fe fc28 	bl	8004fd0 <xQueueGenericSend>
 8006780:	6278      	str	r0, [r7, #36]	; 0x24
 8006782:	e012      	b.n	80067aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006784:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <xTimerGenericCommand+0x94>)
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	f107 0114 	add.w	r1, r7, #20
 800678c:	2300      	movs	r3, #0
 800678e:	2200      	movs	r2, #0
 8006790:	f7fe fc1e 	bl	8004fd0 <xQueueGenericSend>
 8006794:	6278      	str	r0, [r7, #36]	; 0x24
 8006796:	e008      	b.n	80067aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <xTimerGenericCommand+0x94>)
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	f107 0114 	add.w	r1, r7, #20
 80067a0:	2300      	movs	r3, #0
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	f7fe fd0e 	bl	80051c4 <xQueueGenericSendFromISR>
 80067a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	200008c0 	.word	0x200008c0

080067b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <prvProcessExpiredTimer+0x7c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fad9 	bl	8004d88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d121      	bne.n	8006822 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	18d1      	adds	r1, r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	6978      	ldr	r0, [r7, #20]
 80067ec:	f000 f8c8 	bl	8006980 <prvInsertTimerInActiveList>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d015      	beq.n	8006822 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067f6:	2300      	movs	r3, #0
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	2300      	movs	r3, #0
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	2100      	movs	r1, #0
 8006800:	6978      	ldr	r0, [r7, #20]
 8006802:	f7ff ff8d 	bl	8006720 <xTimerGenericCommand>
 8006806:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <prvProcessExpiredTimer+0x6a>
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e7fe      	b.n	8006820 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	6978      	ldr	r0, [r7, #20]
 8006828:	4798      	blx	r3
}
 800682a:	bf00      	nop
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	200008b8 	.word	0x200008b8

08006838 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006840:	f107 0308 	add.w	r3, r7, #8
 8006844:	4618      	mov	r0, r3
 8006846:	f000 f857 	bl	80068f8 <prvGetNextExpireTime>
 800684a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4619      	mov	r1, r3
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f803 	bl	800685c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006856:	f000 f8d5 	bl	8006a04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800685a:	e7f1      	b.n	8006840 <prvTimerTask+0x8>

0800685c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006866:	f7ff f9a7 	bl	8005bb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f866 	bl	8006940 <prvSampleTimeNow>
 8006874:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d130      	bne.n	80068de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <prvProcessTimerOrBlockTask+0x3c>
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	429a      	cmp	r2, r3
 8006888:	d806      	bhi.n	8006898 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800688a:	f7ff f9a3 	bl	8005bd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ff91 	bl	80067b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006896:	e024      	b.n	80068e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d008      	beq.n	80068b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <prvProcessTimerOrBlockTask+0x90>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <prvProcessTimerOrBlockTask+0x94>)
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	f7fe ff29 	bl	8005714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068c2:	f7ff f987 	bl	8005bd4 <xTaskResumeAll>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068cc:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <prvProcessTimerOrBlockTask+0x98>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	f3bf 8f6f 	isb	sy
}
 80068dc:	e001      	b.n	80068e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068de:	f7ff f979 	bl	8005bd4 <xTaskResumeAll>
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200008bc 	.word	0x200008bc
 80068f0:	200008c0 	.word	0x200008c0
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006900:	4b0e      	ldr	r3, [pc, #56]	; (800693c <prvGetNextExpireTime+0x44>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	bf0c      	ite	eq
 800690a:	2301      	moveq	r3, #1
 800690c:	2300      	movne	r3, #0
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d105      	bne.n	800692a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800691e:	4b07      	ldr	r3, [pc, #28]	; (800693c <prvGetNextExpireTime+0x44>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e001      	b.n	800692e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800692e:	68fb      	ldr	r3, [r7, #12]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	200008b8 	.word	0x200008b8

08006940 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006948:	f7ff f9e0 	bl	8005d0c <xTaskGetTickCount>
 800694c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800694e:	4b0b      	ldr	r3, [pc, #44]	; (800697c <prvSampleTimeNow+0x3c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	429a      	cmp	r2, r3
 8006956:	d205      	bcs.n	8006964 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006958:	f000 f8ea 	bl	8006b30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	e002      	b.n	800696a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800696a:	4a04      	ldr	r2, [pc, #16]	; (800697c <prvSampleTimeNow+0x3c>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006970:	68fb      	ldr	r3, [r7, #12]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	200008c8 	.word	0x200008c8

08006980 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d812      	bhi.n	80069cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d302      	bcc.n	80069ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e01b      	b.n	80069f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <prvInsertTimerInActiveList+0x7c>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f7fe f9a7 	bl	8004d18 <vListInsert>
 80069ca:	e012      	b.n	80069f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d206      	bcs.n	80069e2 <prvInsertTimerInActiveList+0x62>
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d302      	bcc.n	80069e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e007      	b.n	80069f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069e2:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <prvInsertTimerInActiveList+0x80>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f7fe f993 	bl	8004d18 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069f2:	697b      	ldr	r3, [r7, #20]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200008bc 	.word	0x200008bc
 8006a00:	200008b8 	.word	0x200008b8

08006a04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08c      	sub	sp, #48	; 0x30
 8006a08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a0a:	e07f      	b.n	8006b0c <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	db7b      	blt.n	8006b0a <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe f9b0 	bl	8004d88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff ff88 	bl	8006940 <prvSampleTimeNow>
 8006a30:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b09      	cmp	r3, #9
 8006a36:	d869      	bhi.n	8006b0c <prvProcessReceivedCommands+0x108>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <prvProcessReceivedCommands+0x3c>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a69 	.word	0x08006a69
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a69 	.word	0x08006a69
 8006a4c:	08006b0d 	.word	0x08006b0d
 8006a50:	08006ac3 	.word	0x08006ac3
 8006a54:	08006af9 	.word	0x08006af9
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a69 	.word	0x08006a69
 8006a60:	08006b0d 	.word	0x08006b0d
 8006a64:	08006ac3 	.word	0x08006ac3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	18d1      	adds	r1, r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a3a      	ldr	r2, [r7, #32]
 8006a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a76:	f7ff ff83 	bl	8006980 <prvInsertTimerInActiveList>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d045      	beq.n	8006b0c <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a86:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d13d      	bne.n	8006b0c <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	441a      	add	r2, r3
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aa2:	f7ff fe3d 	bl	8006720 <xTimerGenericCommand>
 8006aa6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d12e      	bne.n	8006b0c <prvProcessReceivedCommands+0x108>
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e7fe      	b.n	8006ac0 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <prvProcessReceivedCommands+0xe0>
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e7fe      	b.n	8006ae2 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	18d1      	adds	r1, r2, r3
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006af2:	f7ff ff45 	bl	8006980 <prvInsertTimerInActiveList>
					break;
 8006af6:	e009      	b.n	8006b0c <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b04:	f000 fb58 	bl	80071b8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b08:	e000      	b.n	8006b0c <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b0c:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <prvProcessReceivedCommands+0x128>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f107 0108 	add.w	r1, r7, #8
 8006b14:	2200      	movs	r2, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fbe8 	bl	80052ec <xQueueReceive>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f47f af74 	bne.w	8006a0c <prvProcessReceivedCommands+0x8>
	}
}
 8006b24:	bf00      	nop
 8006b26:	3728      	adds	r7, #40	; 0x28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200008c0 	.word	0x200008c0

08006b30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b36:	e044      	b.n	8006bc2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b38:	4b2b      	ldr	r3, [pc, #172]	; (8006be8 <prvSwitchTimerLists+0xb8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b42:	4b29      	ldr	r3, [pc, #164]	; (8006be8 <prvSwitchTimerLists+0xb8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fe f919 	bl	8004d88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d12d      	bne.n	8006bc2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d90e      	bls.n	8006b96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b84:	4b18      	ldr	r3, [pc, #96]	; (8006be8 <prvSwitchTimerLists+0xb8>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f7fe f8c2 	bl	8004d18 <vListInsert>
 8006b94:	e015      	b.n	8006bc2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b96:	2300      	movs	r3, #0
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fdbd 	bl	8006720 <xTimerGenericCommand>
 8006ba6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <prvSwitchTimerLists+0x92>
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	e7fe      	b.n	8006bc0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bc2:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <prvSwitchTimerLists+0xb8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1b5      	bne.n	8006b38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <prvSwitchTimerLists+0xb8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bd2:	4b06      	ldr	r3, [pc, #24]	; (8006bec <prvSwitchTimerLists+0xbc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <prvSwitchTimerLists+0xb8>)
 8006bd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bda:	4a04      	ldr	r2, [pc, #16]	; (8006bec <prvSwitchTimerLists+0xbc>)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	200008b8 	.word	0x200008b8
 8006bec:	200008bc 	.word	0x200008bc

08006bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bf6:	f000 f927 	bl	8006e48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bfa:	4b15      	ldr	r3, [pc, #84]	; (8006c50 <prvCheckForValidListAndQueue+0x60>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d120      	bne.n	8006c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c02:	4814      	ldr	r0, [pc, #80]	; (8006c54 <prvCheckForValidListAndQueue+0x64>)
 8006c04:	f7fe f83a 	bl	8004c7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c08:	4813      	ldr	r0, [pc, #76]	; (8006c58 <prvCheckForValidListAndQueue+0x68>)
 8006c0a:	f7fe f837 	bl	8004c7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <prvCheckForValidListAndQueue+0x6c>)
 8006c10:	4a10      	ldr	r2, [pc, #64]	; (8006c54 <prvCheckForValidListAndQueue+0x64>)
 8006c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c14:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <prvCheckForValidListAndQueue+0x70>)
 8006c16:	4a10      	ldr	r2, [pc, #64]	; (8006c58 <prvCheckForValidListAndQueue+0x68>)
 8006c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <prvCheckForValidListAndQueue+0x74>)
 8006c20:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <prvCheckForValidListAndQueue+0x78>)
 8006c22:	210c      	movs	r1, #12
 8006c24:	200a      	movs	r0, #10
 8006c26:	f7fe f941 	bl	8004eac <xQueueGenericCreateStatic>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <prvCheckForValidListAndQueue+0x60>)
 8006c2e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <prvCheckForValidListAndQueue+0x60>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <prvCheckForValidListAndQueue+0x60>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	490b      	ldr	r1, [pc, #44]	; (8006c6c <prvCheckForValidListAndQueue+0x7c>)
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd40 	bl	80056c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c44:	f000 f92e 	bl	8006ea4 <vPortExitCritical>
}
 8006c48:	bf00      	nop
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200008c0 	.word	0x200008c0
 8006c54:	20000890 	.word	0x20000890
 8006c58:	200008a4 	.word	0x200008a4
 8006c5c:	200008b8 	.word	0x200008b8
 8006c60:	200008bc 	.word	0x200008bc
 8006c64:	20000944 	.word	0x20000944
 8006c68:	200008cc 	.word	0x200008cc
 8006c6c:	08007d68 	.word	0x08007d68

08006c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3b04      	subs	r3, #4
 8006c80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3b04      	subs	r3, #4
 8006c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0201 	bic.w	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ca0:	4a08      	ldr	r2, [pc, #32]	; (8006cc4 <pxPortInitialiseStack+0x54>)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3b14      	subs	r3, #20
 8006caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3b20      	subs	r3, #32
 8006cb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr
 8006cc4:	08006cc9 	.word	0x08006cc9

08006cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cd2:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <prvTaskExitError+0x4c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cda:	d009      	beq.n	8006cf0 <prvTaskExitError+0x28>
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e7fe      	b.n	8006cee <prvTaskExitError+0x26>
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d02:	bf00      	nop
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0fc      	beq.n	8006d04 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr
 8006d14:	20000010 	.word	0x20000010
	...

08006d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <pxCurrentTCBConst2>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d2a:	f380 8809 	msr	PSP, r0
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006d3e:	4770      	bx	lr

08006d40 <pxCurrentTCBConst2>:
 8006d40:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006d48:	4806      	ldr	r0, [pc, #24]	; (8006d64 <prvPortStartFirstTask+0x1c>)
 8006d4a:	6800      	ldr	r0, [r0, #0]
 8006d4c:	6800      	ldr	r0, [r0, #0]
 8006d4e:	f380 8808 	msr	MSP, r0
 8006d52:	b662      	cpsie	i
 8006d54:	b661      	cpsie	f
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	df00      	svc	0
 8006d60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d62:	bf00      	nop
 8006d64:	e000ed08 	.word	0xe000ed08

08006d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d6e:	4b31      	ldr	r3, [pc, #196]	; (8006e34 <xPortStartScheduler+0xcc>)
 8006d70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	22ff      	movs	r2, #255	; 0xff
 8006d7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <xPortStartScheduler+0xd0>)
 8006d94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d96:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006d98:	2207      	movs	r2, #7
 8006d9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d9c:	e009      	b.n	8006db2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d9e:	4b27      	ldr	r3, [pc, #156]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	4a25      	ldr	r2, [pc, #148]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006da6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d0ef      	beq.n	8006d9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dbe:	4b1f      	ldr	r3, [pc, #124]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1c3 0307 	rsb	r3, r3, #7
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d009      	beq.n	8006dde <xPortStartScheduler+0x76>
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60bb      	str	r3, [r7, #8]
 8006ddc:	e7fe      	b.n	8006ddc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dde:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	4a15      	ldr	r2, [pc, #84]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006de6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006de8:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006df0:	4a12      	ldr	r2, [pc, #72]	; (8006e3c <xPortStartScheduler+0xd4>)
 8006df2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dfc:	4b10      	ldr	r3, [pc, #64]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a0f      	ldr	r2, [pc, #60]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006e02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e08:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a0c      	ldr	r2, [pc, #48]	; (8006e40 <xPortStartScheduler+0xd8>)
 8006e0e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e14:	f000 f8b0 	bl	8006f78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <xPortStartScheduler+0xdc>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e1e:	f7ff ff93 	bl	8006d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e22:	f7ff f83d 	bl	8005ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8006e26:	f7ff ff4f 	bl	8006cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	e000e400 	.word	0xe000e400
 8006e38:	2000098c 	.word	0x2000098c
 8006e3c:	20000990 	.word	0x20000990
 8006e40:	e000ed20 	.word	0xe000ed20
 8006e44:	20000010 	.word	0x20000010

08006e48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <vPortEnterCritical+0x54>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	4a0d      	ldr	r2, [pc, #52]	; (8006e9c <vPortEnterCritical+0x54>)
 8006e68:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <vPortEnterCritical+0x54>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10e      	bne.n	8006e90 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e72:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <vPortEnterCritical+0x58>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d009      	beq.n	8006e90 <vPortEnterCritical+0x48>
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	603b      	str	r3, [r7, #0]
 8006e8e:	e7fe      	b.n	8006e8e <vPortEnterCritical+0x46>
	}
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000010 	.word	0x20000010
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <vPortExitCritical+0x48>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <vPortExitCritical+0x22>
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	607b      	str	r3, [r7, #4]
 8006ec4:	e7fe      	b.n	8006ec4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006ec6:	4b09      	ldr	r3, [pc, #36]	; (8006eec <vPortExitCritical+0x48>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	4a07      	ldr	r2, [pc, #28]	; (8006eec <vPortExitCritical+0x48>)
 8006ece:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <vPortExitCritical+0x48>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d104      	bne.n	8006ee2 <vPortExitCritical+0x3e>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr
 8006eec:	20000010 	.word	0x20000010

08006ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ef0:	f3ef 8009 	mrs	r0, PSP
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <pxCurrentTCBConst>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f00:	6010      	str	r0, [r2, #0]
 8006f02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006f06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f0a:	f380 8811 	msr	BASEPRI, r0
 8006f0e:	f7fe ffc7 	bl	8005ea0 <vTaskSwitchContext>
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	6808      	ldr	r0, [r1, #0]
 8006f22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f26:	f380 8809 	msr	PSP, r0
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	4770      	bx	lr

08006f30 <pxCurrentTCBConst>:
 8006f30:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop

08006f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f50:	f7fe feea 	bl	8005d28 <xTaskIncrementTick>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f5a:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <SysTick_Handler+0x3c>)
 8006f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <vPortSetupTimerInterrupt+0x30>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f82:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <vPortSetupTimerInterrupt+0x34>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <vPortSetupTimerInterrupt+0x38>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <vPortSetupTimerInterrupt+0x3c>)
 8006f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f92:	099b      	lsrs	r3, r3, #6
 8006f94:	4a08      	ldr	r2, [pc, #32]	; (8006fb8 <vPortSetupTimerInterrupt+0x40>)
 8006f96:	3b01      	subs	r3, #1
 8006f98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f9a:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <vPortSetupTimerInterrupt+0x30>)
 8006f9c:	2207      	movs	r2, #7
 8006f9e:	601a      	str	r2, [r3, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr
 8006fa8:	e000e010 	.word	0xe000e010
 8006fac:	e000e018 	.word	0xe000e018
 8006fb0:	20000004 	.word	0x20000004
 8006fb4:	10624dd3 	.word	0x10624dd3
 8006fb8:	e000e014 	.word	0xe000e014

08006fbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fc2:	f3ef 8305 	mrs	r3, IPSR
 8006fc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b0f      	cmp	r3, #15
 8006fcc:	d913      	bls.n	8006ff6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fce:	4a15      	ldr	r2, [pc, #84]	; (8007024 <vPortValidateInterruptPriority+0x68>)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fd8:	4b13      	ldr	r3, [pc, #76]	; (8007028 <vPortValidateInterruptPriority+0x6c>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	7afa      	ldrb	r2, [r7, #11]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d209      	bcs.n	8006ff6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	e7fe      	b.n	8006ff4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	; (800702c <vPortValidateInterruptPriority+0x70>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <vPortValidateInterruptPriority+0x74>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d909      	bls.n	800701a <vPortValidateInterruptPriority+0x5e>
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	e7fe      	b.n	8007018 <vPortValidateInterruptPriority+0x5c>
	}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr
 8007024:	e000e3f0 	.word	0xe000e3f0
 8007028:	2000098c 	.word	0x2000098c
 800702c:	e000ed0c 	.word	0xe000ed0c
 8007030:	20000990 	.word	0x20000990

08007034 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800703c:	2300      	movs	r3, #0
 800703e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007040:	f7fe fdba 	bl	8005bb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007044:	4b57      	ldr	r3, [pc, #348]	; (80071a4 <pvPortMalloc+0x170>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800704c:	f000 f90c 	bl	8007268 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007050:	4b55      	ldr	r3, [pc, #340]	; (80071a8 <pvPortMalloc+0x174>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4013      	ands	r3, r2
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 808c 	bne.w	8007176 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01c      	beq.n	800709e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007064:	2208      	movs	r2, #8
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4413      	add	r3, r2
 800706a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	2b00      	cmp	r3, #0
 8007074:	d013      	beq.n	800709e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f023 0307 	bic.w	r3, r3, #7
 800707c:	3308      	adds	r3, #8
 800707e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <pvPortMalloc+0x6a>
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e7fe      	b.n	800709c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d068      	beq.n	8007176 <pvPortMalloc+0x142>
 80070a4:	4b41      	ldr	r3, [pc, #260]	; (80071ac <pvPortMalloc+0x178>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d863      	bhi.n	8007176 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070ae:	4b40      	ldr	r3, [pc, #256]	; (80071b0 <pvPortMalloc+0x17c>)
 80070b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070b2:	4b3f      	ldr	r3, [pc, #252]	; (80071b0 <pvPortMalloc+0x17c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070b8:	e004      	b.n	80070c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d903      	bls.n	80070d6 <pvPortMalloc+0xa2>
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f1      	bne.n	80070ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070d6:	4b33      	ldr	r3, [pc, #204]	; (80071a4 <pvPortMalloc+0x170>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070dc:	429a      	cmp	r2, r3
 80070de:	d04a      	beq.n	8007176 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2208      	movs	r2, #8
 80070e6:	4413      	add	r3, r2
 80070e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	2308      	movs	r3, #8
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	429a      	cmp	r2, r3
 8007100:	d91e      	bls.n	8007140 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4413      	add	r3, r2
 8007108:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <pvPortMalloc+0xf4>
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	e7fe      	b.n	8007126 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800713a:	69b8      	ldr	r0, [r7, #24]
 800713c:	f000 f8f6 	bl	800732c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007140:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <pvPortMalloc+0x178>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	4a18      	ldr	r2, [pc, #96]	; (80071ac <pvPortMalloc+0x178>)
 800714c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800714e:	4b17      	ldr	r3, [pc, #92]	; (80071ac <pvPortMalloc+0x178>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b18      	ldr	r3, [pc, #96]	; (80071b4 <pvPortMalloc+0x180>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d203      	bcs.n	8007162 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800715a:	4b14      	ldr	r3, [pc, #80]	; (80071ac <pvPortMalloc+0x178>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <pvPortMalloc+0x180>)
 8007160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <pvPortMalloc+0x174>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	431a      	orrs	r2, r3
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007176:	f7fe fd2d 	bl	8005bd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <pvPortMalloc+0x164>
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e7fe      	b.n	8007196 <pvPortMalloc+0x162>
	return pvReturn;
 8007198:	69fb      	ldr	r3, [r7, #28]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3728      	adds	r7, #40	; 0x28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	2000159c 	.word	0x2000159c
 80071a8:	200015a8 	.word	0x200015a8
 80071ac:	200015a0 	.word	0x200015a0
 80071b0:	20001594 	.word	0x20001594
 80071b4:	200015a4 	.word	0x200015a4

080071b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d046      	beq.n	8007258 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071ca:	2308      	movs	r3, #8
 80071cc:	425b      	negs	r3, r3
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4413      	add	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	4b20      	ldr	r3, [pc, #128]	; (8007260 <vPortFree+0xa8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <vPortFree+0x42>
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	e7fe      	b.n	80071f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <vPortFree+0x5e>
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	e7fe      	b.n	8007214 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	4b11      	ldr	r3, [pc, #68]	; (8007260 <vPortFree+0xa8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4013      	ands	r3, r2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d019      	beq.n	8007258 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d115      	bne.n	8007258 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <vPortFree+0xa8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	43db      	mvns	r3, r3
 8007236:	401a      	ands	r2, r3
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800723c:	f7fe fcbc 	bl	8005bb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	4b07      	ldr	r3, [pc, #28]	; (8007264 <vPortFree+0xac>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4413      	add	r3, r2
 800724a:	4a06      	ldr	r2, [pc, #24]	; (8007264 <vPortFree+0xac>)
 800724c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800724e:	6938      	ldr	r0, [r7, #16]
 8007250:	f000 f86c 	bl	800732c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007254:	f7fe fcbe 	bl	8005bd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007258:	bf00      	nop
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	200015a8 	.word	0x200015a8
 8007264:	200015a0 	.word	0x200015a0

08007268 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800726e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007272:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007274:	4b27      	ldr	r3, [pc, #156]	; (8007314 <prvHeapInit+0xac>)
 8007276:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00c      	beq.n	800729c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3307      	adds	r3, #7
 8007286:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0307 	bic.w	r3, r3, #7
 800728e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <prvHeapInit+0xac>)
 8007298:	4413      	add	r3, r2
 800729a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072a0:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <prvHeapInit+0xb0>)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072a6:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <prvHeapInit+0xb0>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4413      	add	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072b4:	2208      	movs	r2, #8
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	1a9b      	subs	r3, r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0307 	bic.w	r3, r3, #7
 80072c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a15      	ldr	r2, [pc, #84]	; (800731c <prvHeapInit+0xb4>)
 80072c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072ca:	4b14      	ldr	r3, [pc, #80]	; (800731c <prvHeapInit+0xb4>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072d2:	4b12      	ldr	r3, [pc, #72]	; (800731c <prvHeapInit+0xb4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072e8:	4b0c      	ldr	r3, [pc, #48]	; (800731c <prvHeapInit+0xb4>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	4a0a      	ldr	r2, [pc, #40]	; (8007320 <prvHeapInit+0xb8>)
 80072f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	4a09      	ldr	r2, [pc, #36]	; (8007324 <prvHeapInit+0xbc>)
 80072fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007300:	4b09      	ldr	r3, [pc, #36]	; (8007328 <prvHeapInit+0xc0>)
 8007302:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007306:	601a      	str	r2, [r3, #0]
}
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	bc80      	pop	{r7}
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20000994 	.word	0x20000994
 8007318:	20001594 	.word	0x20001594
 800731c:	2000159c 	.word	0x2000159c
 8007320:	200015a4 	.word	0x200015a4
 8007324:	200015a0 	.word	0x200015a0
 8007328:	200015a8 	.word	0x200015a8

0800732c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007334:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <prvInsertBlockIntoFreeList+0xa8>)
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	e002      	b.n	8007340 <prvInsertBlockIntoFreeList+0x14>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	429a      	cmp	r2, r3
 8007348:	d8f7      	bhi.n	800733a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	4413      	add	r3, r2
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d108      	bne.n	800736e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	441a      	add	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d118      	bne.n	80073b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <prvInsertBlockIntoFreeList+0xac>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d00d      	beq.n	80073aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	441a      	add	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	e008      	b.n	80073bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <prvInsertBlockIntoFreeList+0xac>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	e003      	b.n	80073bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d002      	beq.n	80073ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bc80      	pop	{r7}
 80073d2:	4770      	bx	lr
 80073d4:	20001594 	.word	0x20001594
 80073d8:	2000159c 	.word	0x2000159c

080073dc <__errno>:
 80073dc:	4b01      	ldr	r3, [pc, #4]	; (80073e4 <__errno+0x8>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000014 	.word	0x20000014

080073e8 <__libc_init_array>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	2500      	movs	r5, #0
 80073ec:	4e0c      	ldr	r6, [pc, #48]	; (8007420 <__libc_init_array+0x38>)
 80073ee:	4c0d      	ldr	r4, [pc, #52]	; (8007424 <__libc_init_array+0x3c>)
 80073f0:	1ba4      	subs	r4, r4, r6
 80073f2:	10a4      	asrs	r4, r4, #2
 80073f4:	42a5      	cmp	r5, r4
 80073f6:	d109      	bne.n	800740c <__libc_init_array+0x24>
 80073f8:	f000 fc36 	bl	8007c68 <_init>
 80073fc:	2500      	movs	r5, #0
 80073fe:	4e0a      	ldr	r6, [pc, #40]	; (8007428 <__libc_init_array+0x40>)
 8007400:	4c0a      	ldr	r4, [pc, #40]	; (800742c <__libc_init_array+0x44>)
 8007402:	1ba4      	subs	r4, r4, r6
 8007404:	10a4      	asrs	r4, r4, #2
 8007406:	42a5      	cmp	r5, r4
 8007408:	d105      	bne.n	8007416 <__libc_init_array+0x2e>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007410:	4798      	blx	r3
 8007412:	3501      	adds	r5, #1
 8007414:	e7ee      	b.n	80073f4 <__libc_init_array+0xc>
 8007416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800741a:	4798      	blx	r3
 800741c:	3501      	adds	r5, #1
 800741e:	e7f2      	b.n	8007406 <__libc_init_array+0x1e>
 8007420:	08007dcc 	.word	0x08007dcc
 8007424:	08007dcc 	.word	0x08007dcc
 8007428:	08007dcc 	.word	0x08007dcc
 800742c:	08007dd0 	.word	0x08007dd0

08007430 <memcpy>:
 8007430:	b510      	push	{r4, lr}
 8007432:	1e43      	subs	r3, r0, #1
 8007434:	440a      	add	r2, r1
 8007436:	4291      	cmp	r1, r2
 8007438:	d100      	bne.n	800743c <memcpy+0xc>
 800743a:	bd10      	pop	{r4, pc}
 800743c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007444:	e7f7      	b.n	8007436 <memcpy+0x6>

08007446 <memset>:
 8007446:	4603      	mov	r3, r0
 8007448:	4402      	add	r2, r0
 800744a:	4293      	cmp	r3, r2
 800744c:	d100      	bne.n	8007450 <memset+0xa>
 800744e:	4770      	bx	lr
 8007450:	f803 1b01 	strb.w	r1, [r3], #1
 8007454:	e7f9      	b.n	800744a <memset+0x4>
	...

08007458 <siprintf>:
 8007458:	b40e      	push	{r1, r2, r3}
 800745a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800745e:	b500      	push	{lr}
 8007460:	b09c      	sub	sp, #112	; 0x70
 8007462:	ab1d      	add	r3, sp, #116	; 0x74
 8007464:	9002      	str	r0, [sp, #8]
 8007466:	9006      	str	r0, [sp, #24]
 8007468:	9107      	str	r1, [sp, #28]
 800746a:	9104      	str	r1, [sp, #16]
 800746c:	4808      	ldr	r0, [pc, #32]	; (8007490 <siprintf+0x38>)
 800746e:	4909      	ldr	r1, [pc, #36]	; (8007494 <siprintf+0x3c>)
 8007470:	f853 2b04 	ldr.w	r2, [r3], #4
 8007474:	9105      	str	r1, [sp, #20]
 8007476:	6800      	ldr	r0, [r0, #0]
 8007478:	a902      	add	r1, sp, #8
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	f000 f866 	bl	800754c <_svfiprintf_r>
 8007480:	2200      	movs	r2, #0
 8007482:	9b02      	ldr	r3, [sp, #8]
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	b01c      	add	sp, #112	; 0x70
 8007488:	f85d eb04 	ldr.w	lr, [sp], #4
 800748c:	b003      	add	sp, #12
 800748e:	4770      	bx	lr
 8007490:	20000014 	.word	0x20000014
 8007494:	ffff0208 	.word	0xffff0208

08007498 <__ssputs_r>:
 8007498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749c:	688e      	ldr	r6, [r1, #8]
 800749e:	4682      	mov	sl, r0
 80074a0:	429e      	cmp	r6, r3
 80074a2:	460c      	mov	r4, r1
 80074a4:	4690      	mov	r8, r2
 80074a6:	4699      	mov	r9, r3
 80074a8:	d837      	bhi.n	800751a <__ssputs_r+0x82>
 80074aa:	898a      	ldrh	r2, [r1, #12]
 80074ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074b0:	d031      	beq.n	8007516 <__ssputs_r+0x7e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	6909      	ldr	r1, [r1, #16]
 80074b8:	1a6f      	subs	r7, r5, r1
 80074ba:	6965      	ldr	r5, [r4, #20]
 80074bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80074c4:	f109 0301 	add.w	r3, r9, #1
 80074c8:	443b      	add	r3, r7
 80074ca:	429d      	cmp	r5, r3
 80074cc:	bf38      	it	cc
 80074ce:	461d      	movcc	r5, r3
 80074d0:	0553      	lsls	r3, r2, #21
 80074d2:	d530      	bpl.n	8007536 <__ssputs_r+0x9e>
 80074d4:	4629      	mov	r1, r5
 80074d6:	f000 fb2d 	bl	8007b34 <_malloc_r>
 80074da:	4606      	mov	r6, r0
 80074dc:	b950      	cbnz	r0, 80074f4 <__ssputs_r+0x5c>
 80074de:	230c      	movs	r3, #12
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074e4:	f8ca 3000 	str.w	r3, [sl]
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f4:	463a      	mov	r2, r7
 80074f6:	6921      	ldr	r1, [r4, #16]
 80074f8:	f7ff ff9a 	bl	8007430 <memcpy>
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	6126      	str	r6, [r4, #16]
 800750a:	443e      	add	r6, r7
 800750c:	6026      	str	r6, [r4, #0]
 800750e:	464e      	mov	r6, r9
 8007510:	6165      	str	r5, [r4, #20]
 8007512:	1bed      	subs	r5, r5, r7
 8007514:	60a5      	str	r5, [r4, #8]
 8007516:	454e      	cmp	r6, r9
 8007518:	d900      	bls.n	800751c <__ssputs_r+0x84>
 800751a:	464e      	mov	r6, r9
 800751c:	4632      	mov	r2, r6
 800751e:	4641      	mov	r1, r8
 8007520:	6820      	ldr	r0, [r4, #0]
 8007522:	f000 faa1 	bl	8007a68 <memmove>
 8007526:	68a3      	ldr	r3, [r4, #8]
 8007528:	2000      	movs	r0, #0
 800752a:	1b9b      	subs	r3, r3, r6
 800752c:	60a3      	str	r3, [r4, #8]
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	441e      	add	r6, r3
 8007532:	6026      	str	r6, [r4, #0]
 8007534:	e7dc      	b.n	80074f0 <__ssputs_r+0x58>
 8007536:	462a      	mov	r2, r5
 8007538:	f000 fb56 	bl	8007be8 <_realloc_r>
 800753c:	4606      	mov	r6, r0
 800753e:	2800      	cmp	r0, #0
 8007540:	d1e2      	bne.n	8007508 <__ssputs_r+0x70>
 8007542:	6921      	ldr	r1, [r4, #16]
 8007544:	4650      	mov	r0, sl
 8007546:	f000 faa9 	bl	8007a9c <_free_r>
 800754a:	e7c8      	b.n	80074de <__ssputs_r+0x46>

0800754c <_svfiprintf_r>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	461d      	mov	r5, r3
 8007552:	898b      	ldrh	r3, [r1, #12]
 8007554:	b09d      	sub	sp, #116	; 0x74
 8007556:	061f      	lsls	r7, r3, #24
 8007558:	4680      	mov	r8, r0
 800755a:	460c      	mov	r4, r1
 800755c:	4616      	mov	r6, r2
 800755e:	d50f      	bpl.n	8007580 <_svfiprintf_r+0x34>
 8007560:	690b      	ldr	r3, [r1, #16]
 8007562:	b96b      	cbnz	r3, 8007580 <_svfiprintf_r+0x34>
 8007564:	2140      	movs	r1, #64	; 0x40
 8007566:	f000 fae5 	bl	8007b34 <_malloc_r>
 800756a:	6020      	str	r0, [r4, #0]
 800756c:	6120      	str	r0, [r4, #16]
 800756e:	b928      	cbnz	r0, 800757c <_svfiprintf_r+0x30>
 8007570:	230c      	movs	r3, #12
 8007572:	f8c8 3000 	str.w	r3, [r8]
 8007576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800757a:	e0c8      	b.n	800770e <_svfiprintf_r+0x1c2>
 800757c:	2340      	movs	r3, #64	; 0x40
 800757e:	6163      	str	r3, [r4, #20]
 8007580:	2300      	movs	r3, #0
 8007582:	9309      	str	r3, [sp, #36]	; 0x24
 8007584:	2320      	movs	r3, #32
 8007586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800758a:	2330      	movs	r3, #48	; 0x30
 800758c:	f04f 0b01 	mov.w	fp, #1
 8007590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007594:	9503      	str	r5, [sp, #12]
 8007596:	4637      	mov	r7, r6
 8007598:	463d      	mov	r5, r7
 800759a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800759e:	b10b      	cbz	r3, 80075a4 <_svfiprintf_r+0x58>
 80075a0:	2b25      	cmp	r3, #37	; 0x25
 80075a2:	d13e      	bne.n	8007622 <_svfiprintf_r+0xd6>
 80075a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80075a8:	d00b      	beq.n	80075c2 <_svfiprintf_r+0x76>
 80075aa:	4653      	mov	r3, sl
 80075ac:	4632      	mov	r2, r6
 80075ae:	4621      	mov	r1, r4
 80075b0:	4640      	mov	r0, r8
 80075b2:	f7ff ff71 	bl	8007498 <__ssputs_r>
 80075b6:	3001      	adds	r0, #1
 80075b8:	f000 80a4 	beq.w	8007704 <_svfiprintf_r+0x1b8>
 80075bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075be:	4453      	add	r3, sl
 80075c0:	9309      	str	r3, [sp, #36]	; 0x24
 80075c2:	783b      	ldrb	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 809d 	beq.w	8007704 <_svfiprintf_r+0x1b8>
 80075ca:	2300      	movs	r3, #0
 80075cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	9307      	str	r3, [sp, #28]
 80075d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075dc:	931a      	str	r3, [sp, #104]	; 0x68
 80075de:	462f      	mov	r7, r5
 80075e0:	2205      	movs	r2, #5
 80075e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075e6:	4850      	ldr	r0, [pc, #320]	; (8007728 <_svfiprintf_r+0x1dc>)
 80075e8:	f000 fa30 	bl	8007a4c <memchr>
 80075ec:	9b04      	ldr	r3, [sp, #16]
 80075ee:	b9d0      	cbnz	r0, 8007626 <_svfiprintf_r+0xda>
 80075f0:	06d9      	lsls	r1, r3, #27
 80075f2:	bf44      	itt	mi
 80075f4:	2220      	movmi	r2, #32
 80075f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075fa:	071a      	lsls	r2, r3, #28
 80075fc:	bf44      	itt	mi
 80075fe:	222b      	movmi	r2, #43	; 0x2b
 8007600:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007604:	782a      	ldrb	r2, [r5, #0]
 8007606:	2a2a      	cmp	r2, #42	; 0x2a
 8007608:	d015      	beq.n	8007636 <_svfiprintf_r+0xea>
 800760a:	462f      	mov	r7, r5
 800760c:	2000      	movs	r0, #0
 800760e:	250a      	movs	r5, #10
 8007610:	9a07      	ldr	r2, [sp, #28]
 8007612:	4639      	mov	r1, r7
 8007614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007618:	3b30      	subs	r3, #48	; 0x30
 800761a:	2b09      	cmp	r3, #9
 800761c:	d94d      	bls.n	80076ba <_svfiprintf_r+0x16e>
 800761e:	b1b8      	cbz	r0, 8007650 <_svfiprintf_r+0x104>
 8007620:	e00f      	b.n	8007642 <_svfiprintf_r+0xf6>
 8007622:	462f      	mov	r7, r5
 8007624:	e7b8      	b.n	8007598 <_svfiprintf_r+0x4c>
 8007626:	4a40      	ldr	r2, [pc, #256]	; (8007728 <_svfiprintf_r+0x1dc>)
 8007628:	463d      	mov	r5, r7
 800762a:	1a80      	subs	r0, r0, r2
 800762c:	fa0b f000 	lsl.w	r0, fp, r0
 8007630:	4318      	orrs	r0, r3
 8007632:	9004      	str	r0, [sp, #16]
 8007634:	e7d3      	b.n	80075de <_svfiprintf_r+0x92>
 8007636:	9a03      	ldr	r2, [sp, #12]
 8007638:	1d11      	adds	r1, r2, #4
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	9103      	str	r1, [sp, #12]
 800763e:	2a00      	cmp	r2, #0
 8007640:	db01      	blt.n	8007646 <_svfiprintf_r+0xfa>
 8007642:	9207      	str	r2, [sp, #28]
 8007644:	e004      	b.n	8007650 <_svfiprintf_r+0x104>
 8007646:	4252      	negs	r2, r2
 8007648:	f043 0302 	orr.w	r3, r3, #2
 800764c:	9207      	str	r2, [sp, #28]
 800764e:	9304      	str	r3, [sp, #16]
 8007650:	783b      	ldrb	r3, [r7, #0]
 8007652:	2b2e      	cmp	r3, #46	; 0x2e
 8007654:	d10c      	bne.n	8007670 <_svfiprintf_r+0x124>
 8007656:	787b      	ldrb	r3, [r7, #1]
 8007658:	2b2a      	cmp	r3, #42	; 0x2a
 800765a:	d133      	bne.n	80076c4 <_svfiprintf_r+0x178>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	3702      	adds	r7, #2
 8007660:	1d1a      	adds	r2, r3, #4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	9203      	str	r2, [sp, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	bfb8      	it	lt
 800766a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800766e:	9305      	str	r3, [sp, #20]
 8007670:	4d2e      	ldr	r5, [pc, #184]	; (800772c <_svfiprintf_r+0x1e0>)
 8007672:	2203      	movs	r2, #3
 8007674:	7839      	ldrb	r1, [r7, #0]
 8007676:	4628      	mov	r0, r5
 8007678:	f000 f9e8 	bl	8007a4c <memchr>
 800767c:	b138      	cbz	r0, 800768e <_svfiprintf_r+0x142>
 800767e:	2340      	movs	r3, #64	; 0x40
 8007680:	1b40      	subs	r0, r0, r5
 8007682:	fa03 f000 	lsl.w	r0, r3, r0
 8007686:	9b04      	ldr	r3, [sp, #16]
 8007688:	3701      	adds	r7, #1
 800768a:	4303      	orrs	r3, r0
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	7839      	ldrb	r1, [r7, #0]
 8007690:	2206      	movs	r2, #6
 8007692:	4827      	ldr	r0, [pc, #156]	; (8007730 <_svfiprintf_r+0x1e4>)
 8007694:	1c7e      	adds	r6, r7, #1
 8007696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800769a:	f000 f9d7 	bl	8007a4c <memchr>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d038      	beq.n	8007714 <_svfiprintf_r+0x1c8>
 80076a2:	4b24      	ldr	r3, [pc, #144]	; (8007734 <_svfiprintf_r+0x1e8>)
 80076a4:	bb13      	cbnz	r3, 80076ec <_svfiprintf_r+0x1a0>
 80076a6:	9b03      	ldr	r3, [sp, #12]
 80076a8:	3307      	adds	r3, #7
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	3308      	adds	r3, #8
 80076b0:	9303      	str	r3, [sp, #12]
 80076b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b4:	444b      	add	r3, r9
 80076b6:	9309      	str	r3, [sp, #36]	; 0x24
 80076b8:	e76d      	b.n	8007596 <_svfiprintf_r+0x4a>
 80076ba:	fb05 3202 	mla	r2, r5, r2, r3
 80076be:	2001      	movs	r0, #1
 80076c0:	460f      	mov	r7, r1
 80076c2:	e7a6      	b.n	8007612 <_svfiprintf_r+0xc6>
 80076c4:	2300      	movs	r3, #0
 80076c6:	250a      	movs	r5, #10
 80076c8:	4619      	mov	r1, r3
 80076ca:	3701      	adds	r7, #1
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	4638      	mov	r0, r7
 80076d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d4:	3a30      	subs	r2, #48	; 0x30
 80076d6:	2a09      	cmp	r2, #9
 80076d8:	d903      	bls.n	80076e2 <_svfiprintf_r+0x196>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0c8      	beq.n	8007670 <_svfiprintf_r+0x124>
 80076de:	9105      	str	r1, [sp, #20]
 80076e0:	e7c6      	b.n	8007670 <_svfiprintf_r+0x124>
 80076e2:	fb05 2101 	mla	r1, r5, r1, r2
 80076e6:	2301      	movs	r3, #1
 80076e8:	4607      	mov	r7, r0
 80076ea:	e7f0      	b.n	80076ce <_svfiprintf_r+0x182>
 80076ec:	ab03      	add	r3, sp, #12
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	4622      	mov	r2, r4
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <_svfiprintf_r+0x1ec>)
 80076f4:	a904      	add	r1, sp, #16
 80076f6:	4640      	mov	r0, r8
 80076f8:	f3af 8000 	nop.w
 80076fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007700:	4681      	mov	r9, r0
 8007702:	d1d6      	bne.n	80076b2 <_svfiprintf_r+0x166>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	065b      	lsls	r3, r3, #25
 8007708:	f53f af35 	bmi.w	8007576 <_svfiprintf_r+0x2a>
 800770c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800770e:	b01d      	add	sp, #116	; 0x74
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	ab03      	add	r3, sp, #12
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	4622      	mov	r2, r4
 800771a:	4b07      	ldr	r3, [pc, #28]	; (8007738 <_svfiprintf_r+0x1ec>)
 800771c:	a904      	add	r1, sp, #16
 800771e:	4640      	mov	r0, r8
 8007720:	f000 f882 	bl	8007828 <_printf_i>
 8007724:	e7ea      	b.n	80076fc <_svfiprintf_r+0x1b0>
 8007726:	bf00      	nop
 8007728:	08007d98 	.word	0x08007d98
 800772c:	08007d9e 	.word	0x08007d9e
 8007730:	08007da2 	.word	0x08007da2
 8007734:	00000000 	.word	0x00000000
 8007738:	08007499 	.word	0x08007499

0800773c <_printf_common>:
 800773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	4691      	mov	r9, r2
 8007742:	461f      	mov	r7, r3
 8007744:	688a      	ldr	r2, [r1, #8]
 8007746:	690b      	ldr	r3, [r1, #16]
 8007748:	4606      	mov	r6, r0
 800774a:	4293      	cmp	r3, r2
 800774c:	bfb8      	it	lt
 800774e:	4613      	movlt	r3, r2
 8007750:	f8c9 3000 	str.w	r3, [r9]
 8007754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007758:	460c      	mov	r4, r1
 800775a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800775e:	b112      	cbz	r2, 8007766 <_printf_common+0x2a>
 8007760:	3301      	adds	r3, #1
 8007762:	f8c9 3000 	str.w	r3, [r9]
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	0699      	lsls	r1, r3, #26
 800776a:	bf42      	ittt	mi
 800776c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007770:	3302      	addmi	r3, #2
 8007772:	f8c9 3000 	strmi.w	r3, [r9]
 8007776:	6825      	ldr	r5, [r4, #0]
 8007778:	f015 0506 	ands.w	r5, r5, #6
 800777c:	d107      	bne.n	800778e <_printf_common+0x52>
 800777e:	f104 0a19 	add.w	sl, r4, #25
 8007782:	68e3      	ldr	r3, [r4, #12]
 8007784:	f8d9 2000 	ldr.w	r2, [r9]
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	42ab      	cmp	r3, r5
 800778c:	dc29      	bgt.n	80077e2 <_printf_common+0xa6>
 800778e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	3300      	adds	r3, #0
 8007796:	bf18      	it	ne
 8007798:	2301      	movne	r3, #1
 800779a:	0692      	lsls	r2, r2, #26
 800779c:	d42e      	bmi.n	80077fc <_printf_common+0xc0>
 800779e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077a2:	4639      	mov	r1, r7
 80077a4:	4630      	mov	r0, r6
 80077a6:	47c0      	blx	r8
 80077a8:	3001      	adds	r0, #1
 80077aa:	d021      	beq.n	80077f0 <_printf_common+0xb4>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	68e5      	ldr	r5, [r4, #12]
 80077b0:	f003 0306 	and.w	r3, r3, #6
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	bf18      	it	ne
 80077b8:	2500      	movne	r5, #0
 80077ba:	f8d9 2000 	ldr.w	r2, [r9]
 80077be:	f04f 0900 	mov.w	r9, #0
 80077c2:	bf08      	it	eq
 80077c4:	1aad      	subeq	r5, r5, r2
 80077c6:	68a3      	ldr	r3, [r4, #8]
 80077c8:	6922      	ldr	r2, [r4, #16]
 80077ca:	bf08      	it	eq
 80077cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d0:	4293      	cmp	r3, r2
 80077d2:	bfc4      	itt	gt
 80077d4:	1a9b      	subgt	r3, r3, r2
 80077d6:	18ed      	addgt	r5, r5, r3
 80077d8:	341a      	adds	r4, #26
 80077da:	454d      	cmp	r5, r9
 80077dc:	d11a      	bne.n	8007814 <_printf_common+0xd8>
 80077de:	2000      	movs	r0, #0
 80077e0:	e008      	b.n	80077f4 <_printf_common+0xb8>
 80077e2:	2301      	movs	r3, #1
 80077e4:	4652      	mov	r2, sl
 80077e6:	4639      	mov	r1, r7
 80077e8:	4630      	mov	r0, r6
 80077ea:	47c0      	blx	r8
 80077ec:	3001      	adds	r0, #1
 80077ee:	d103      	bne.n	80077f8 <_printf_common+0xbc>
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f8:	3501      	adds	r5, #1
 80077fa:	e7c2      	b.n	8007782 <_printf_common+0x46>
 80077fc:	2030      	movs	r0, #48	; 0x30
 80077fe:	18e1      	adds	r1, r4, r3
 8007800:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800780a:	4422      	add	r2, r4
 800780c:	3302      	adds	r3, #2
 800780e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007812:	e7c4      	b.n	800779e <_printf_common+0x62>
 8007814:	2301      	movs	r3, #1
 8007816:	4622      	mov	r2, r4
 8007818:	4639      	mov	r1, r7
 800781a:	4630      	mov	r0, r6
 800781c:	47c0      	blx	r8
 800781e:	3001      	adds	r0, #1
 8007820:	d0e6      	beq.n	80077f0 <_printf_common+0xb4>
 8007822:	f109 0901 	add.w	r9, r9, #1
 8007826:	e7d8      	b.n	80077da <_printf_common+0x9e>

08007828 <_printf_i>:
 8007828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800782c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007830:	460c      	mov	r4, r1
 8007832:	7e09      	ldrb	r1, [r1, #24]
 8007834:	b085      	sub	sp, #20
 8007836:	296e      	cmp	r1, #110	; 0x6e
 8007838:	4617      	mov	r7, r2
 800783a:	4606      	mov	r6, r0
 800783c:	4698      	mov	r8, r3
 800783e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007840:	f000 80b3 	beq.w	80079aa <_printf_i+0x182>
 8007844:	d822      	bhi.n	800788c <_printf_i+0x64>
 8007846:	2963      	cmp	r1, #99	; 0x63
 8007848:	d036      	beq.n	80078b8 <_printf_i+0x90>
 800784a:	d80a      	bhi.n	8007862 <_printf_i+0x3a>
 800784c:	2900      	cmp	r1, #0
 800784e:	f000 80b9 	beq.w	80079c4 <_printf_i+0x19c>
 8007852:	2958      	cmp	r1, #88	; 0x58
 8007854:	f000 8083 	beq.w	800795e <_printf_i+0x136>
 8007858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800785c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007860:	e032      	b.n	80078c8 <_printf_i+0xa0>
 8007862:	2964      	cmp	r1, #100	; 0x64
 8007864:	d001      	beq.n	800786a <_printf_i+0x42>
 8007866:	2969      	cmp	r1, #105	; 0x69
 8007868:	d1f6      	bne.n	8007858 <_printf_i+0x30>
 800786a:	6820      	ldr	r0, [r4, #0]
 800786c:	6813      	ldr	r3, [r2, #0]
 800786e:	0605      	lsls	r5, r0, #24
 8007870:	f103 0104 	add.w	r1, r3, #4
 8007874:	d52a      	bpl.n	80078cc <_printf_i+0xa4>
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	da03      	bge.n	8007886 <_printf_i+0x5e>
 800787e:	222d      	movs	r2, #45	; 0x2d
 8007880:	425b      	negs	r3, r3
 8007882:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007886:	486f      	ldr	r0, [pc, #444]	; (8007a44 <_printf_i+0x21c>)
 8007888:	220a      	movs	r2, #10
 800788a:	e039      	b.n	8007900 <_printf_i+0xd8>
 800788c:	2973      	cmp	r1, #115	; 0x73
 800788e:	f000 809d 	beq.w	80079cc <_printf_i+0x1a4>
 8007892:	d808      	bhi.n	80078a6 <_printf_i+0x7e>
 8007894:	296f      	cmp	r1, #111	; 0x6f
 8007896:	d020      	beq.n	80078da <_printf_i+0xb2>
 8007898:	2970      	cmp	r1, #112	; 0x70
 800789a:	d1dd      	bne.n	8007858 <_printf_i+0x30>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	f043 0320 	orr.w	r3, r3, #32
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	e003      	b.n	80078ae <_printf_i+0x86>
 80078a6:	2975      	cmp	r1, #117	; 0x75
 80078a8:	d017      	beq.n	80078da <_printf_i+0xb2>
 80078aa:	2978      	cmp	r1, #120	; 0x78
 80078ac:	d1d4      	bne.n	8007858 <_printf_i+0x30>
 80078ae:	2378      	movs	r3, #120	; 0x78
 80078b0:	4865      	ldr	r0, [pc, #404]	; (8007a48 <_printf_i+0x220>)
 80078b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078b6:	e055      	b.n	8007964 <_printf_i+0x13c>
 80078b8:	6813      	ldr	r3, [r2, #0]
 80078ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078be:	1d19      	adds	r1, r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6011      	str	r1, [r2, #0]
 80078c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078c8:	2301      	movs	r3, #1
 80078ca:	e08c      	b.n	80079e6 <_printf_i+0x1be>
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078d2:	6011      	str	r1, [r2, #0]
 80078d4:	bf18      	it	ne
 80078d6:	b21b      	sxthne	r3, r3
 80078d8:	e7cf      	b.n	800787a <_printf_i+0x52>
 80078da:	6813      	ldr	r3, [r2, #0]
 80078dc:	6825      	ldr	r5, [r4, #0]
 80078de:	1d18      	adds	r0, r3, #4
 80078e0:	6010      	str	r0, [r2, #0]
 80078e2:	0628      	lsls	r0, r5, #24
 80078e4:	d501      	bpl.n	80078ea <_printf_i+0xc2>
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	e002      	b.n	80078f0 <_printf_i+0xc8>
 80078ea:	0668      	lsls	r0, r5, #25
 80078ec:	d5fb      	bpl.n	80078e6 <_printf_i+0xbe>
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	296f      	cmp	r1, #111	; 0x6f
 80078f2:	bf14      	ite	ne
 80078f4:	220a      	movne	r2, #10
 80078f6:	2208      	moveq	r2, #8
 80078f8:	4852      	ldr	r0, [pc, #328]	; (8007a44 <_printf_i+0x21c>)
 80078fa:	2100      	movs	r1, #0
 80078fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007900:	6865      	ldr	r5, [r4, #4]
 8007902:	2d00      	cmp	r5, #0
 8007904:	60a5      	str	r5, [r4, #8]
 8007906:	f2c0 8095 	blt.w	8007a34 <_printf_i+0x20c>
 800790a:	6821      	ldr	r1, [r4, #0]
 800790c:	f021 0104 	bic.w	r1, r1, #4
 8007910:	6021      	str	r1, [r4, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d13d      	bne.n	8007992 <_printf_i+0x16a>
 8007916:	2d00      	cmp	r5, #0
 8007918:	f040 808e 	bne.w	8007a38 <_printf_i+0x210>
 800791c:	4665      	mov	r5, ip
 800791e:	2a08      	cmp	r2, #8
 8007920:	d10b      	bne.n	800793a <_printf_i+0x112>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	07db      	lsls	r3, r3, #31
 8007926:	d508      	bpl.n	800793a <_printf_i+0x112>
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	bfde      	ittt	le
 8007930:	2330      	movle	r3, #48	; 0x30
 8007932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007936:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800793a:	ebac 0305 	sub.w	r3, ip, r5
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	f8cd 8000 	str.w	r8, [sp]
 8007944:	463b      	mov	r3, r7
 8007946:	aa03      	add	r2, sp, #12
 8007948:	4621      	mov	r1, r4
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff fef6 	bl	800773c <_printf_common>
 8007950:	3001      	adds	r0, #1
 8007952:	d14d      	bne.n	80079f0 <_printf_i+0x1c8>
 8007954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007958:	b005      	add	sp, #20
 800795a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800795e:	4839      	ldr	r0, [pc, #228]	; (8007a44 <_printf_i+0x21c>)
 8007960:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007964:	6813      	ldr	r3, [r2, #0]
 8007966:	6821      	ldr	r1, [r4, #0]
 8007968:	1d1d      	adds	r5, r3, #4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6015      	str	r5, [r2, #0]
 800796e:	060a      	lsls	r2, r1, #24
 8007970:	d50b      	bpl.n	800798a <_printf_i+0x162>
 8007972:	07ca      	lsls	r2, r1, #31
 8007974:	bf44      	itt	mi
 8007976:	f041 0120 	orrmi.w	r1, r1, #32
 800797a:	6021      	strmi	r1, [r4, #0]
 800797c:	b91b      	cbnz	r3, 8007986 <_printf_i+0x15e>
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	f022 0220 	bic.w	r2, r2, #32
 8007984:	6022      	str	r2, [r4, #0]
 8007986:	2210      	movs	r2, #16
 8007988:	e7b7      	b.n	80078fa <_printf_i+0xd2>
 800798a:	064d      	lsls	r5, r1, #25
 800798c:	bf48      	it	mi
 800798e:	b29b      	uxthmi	r3, r3
 8007990:	e7ef      	b.n	8007972 <_printf_i+0x14a>
 8007992:	4665      	mov	r5, ip
 8007994:	fbb3 f1f2 	udiv	r1, r3, r2
 8007998:	fb02 3311 	mls	r3, r2, r1, r3
 800799c:	5cc3      	ldrb	r3, [r0, r3]
 800799e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079a2:	460b      	mov	r3, r1
 80079a4:	2900      	cmp	r1, #0
 80079a6:	d1f5      	bne.n	8007994 <_printf_i+0x16c>
 80079a8:	e7b9      	b.n	800791e <_printf_i+0xf6>
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	6825      	ldr	r5, [r4, #0]
 80079ae:	1d18      	adds	r0, r3, #4
 80079b0:	6961      	ldr	r1, [r4, #20]
 80079b2:	6010      	str	r0, [r2, #0]
 80079b4:	0628      	lsls	r0, r5, #24
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	d501      	bpl.n	80079be <_printf_i+0x196>
 80079ba:	6019      	str	r1, [r3, #0]
 80079bc:	e002      	b.n	80079c4 <_printf_i+0x19c>
 80079be:	066a      	lsls	r2, r5, #25
 80079c0:	d5fb      	bpl.n	80079ba <_printf_i+0x192>
 80079c2:	8019      	strh	r1, [r3, #0]
 80079c4:	2300      	movs	r3, #0
 80079c6:	4665      	mov	r5, ip
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	e7b9      	b.n	8007940 <_printf_i+0x118>
 80079cc:	6813      	ldr	r3, [r2, #0]
 80079ce:	1d19      	adds	r1, r3, #4
 80079d0:	6011      	str	r1, [r2, #0]
 80079d2:	681d      	ldr	r5, [r3, #0]
 80079d4:	6862      	ldr	r2, [r4, #4]
 80079d6:	2100      	movs	r1, #0
 80079d8:	4628      	mov	r0, r5
 80079da:	f000 f837 	bl	8007a4c <memchr>
 80079de:	b108      	cbz	r0, 80079e4 <_printf_i+0x1bc>
 80079e0:	1b40      	subs	r0, r0, r5
 80079e2:	6060      	str	r0, [r4, #4]
 80079e4:	6863      	ldr	r3, [r4, #4]
 80079e6:	6123      	str	r3, [r4, #16]
 80079e8:	2300      	movs	r3, #0
 80079ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ee:	e7a7      	b.n	8007940 <_printf_i+0x118>
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	462a      	mov	r2, r5
 80079f4:	4639      	mov	r1, r7
 80079f6:	4630      	mov	r0, r6
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d0aa      	beq.n	8007954 <_printf_i+0x12c>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	079b      	lsls	r3, r3, #30
 8007a02:	d413      	bmi.n	8007a2c <_printf_i+0x204>
 8007a04:	68e0      	ldr	r0, [r4, #12]
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	4298      	cmp	r0, r3
 8007a0a:	bfb8      	it	lt
 8007a0c:	4618      	movlt	r0, r3
 8007a0e:	e7a3      	b.n	8007958 <_printf_i+0x130>
 8007a10:	2301      	movs	r3, #1
 8007a12:	464a      	mov	r2, r9
 8007a14:	4639      	mov	r1, r7
 8007a16:	4630      	mov	r0, r6
 8007a18:	47c0      	blx	r8
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d09a      	beq.n	8007954 <_printf_i+0x12c>
 8007a1e:	3501      	adds	r5, #1
 8007a20:	68e3      	ldr	r3, [r4, #12]
 8007a22:	9a03      	ldr	r2, [sp, #12]
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	42ab      	cmp	r3, r5
 8007a28:	dcf2      	bgt.n	8007a10 <_printf_i+0x1e8>
 8007a2a:	e7eb      	b.n	8007a04 <_printf_i+0x1dc>
 8007a2c:	2500      	movs	r5, #0
 8007a2e:	f104 0919 	add.w	r9, r4, #25
 8007a32:	e7f5      	b.n	8007a20 <_printf_i+0x1f8>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1ac      	bne.n	8007992 <_printf_i+0x16a>
 8007a38:	7803      	ldrb	r3, [r0, #0]
 8007a3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a42:	e76c      	b.n	800791e <_printf_i+0xf6>
 8007a44:	08007da9 	.word	0x08007da9
 8007a48:	08007dba 	.word	0x08007dba

08007a4c <memchr>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	b2c9      	uxtb	r1, r1
 8007a50:	4402      	add	r2, r0
 8007a52:	4290      	cmp	r0, r2
 8007a54:	4603      	mov	r3, r0
 8007a56:	d101      	bne.n	8007a5c <memchr+0x10>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e003      	b.n	8007a64 <memchr+0x18>
 8007a5c:	781c      	ldrb	r4, [r3, #0]
 8007a5e:	3001      	adds	r0, #1
 8007a60:	428c      	cmp	r4, r1
 8007a62:	d1f6      	bne.n	8007a52 <memchr+0x6>
 8007a64:	4618      	mov	r0, r3
 8007a66:	bd10      	pop	{r4, pc}

08007a68 <memmove>:
 8007a68:	4288      	cmp	r0, r1
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	eb01 0302 	add.w	r3, r1, r2
 8007a70:	d807      	bhi.n	8007a82 <memmove+0x1a>
 8007a72:	1e42      	subs	r2, r0, #1
 8007a74:	4299      	cmp	r1, r3
 8007a76:	d00a      	beq.n	8007a8e <memmove+0x26>
 8007a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a80:	e7f8      	b.n	8007a74 <memmove+0xc>
 8007a82:	4283      	cmp	r3, r0
 8007a84:	d9f5      	bls.n	8007a72 <memmove+0xa>
 8007a86:	1881      	adds	r1, r0, r2
 8007a88:	1ad2      	subs	r2, r2, r3
 8007a8a:	42d3      	cmn	r3, r2
 8007a8c:	d100      	bne.n	8007a90 <memmove+0x28>
 8007a8e:	bd10      	pop	{r4, pc}
 8007a90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007a98:	e7f7      	b.n	8007a8a <memmove+0x22>
	...

08007a9c <_free_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	d043      	beq.n	8007b2c <_free_r+0x90>
 8007aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa8:	1f0c      	subs	r4, r1, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfb8      	it	lt
 8007aae:	18e4      	addlt	r4, r4, r3
 8007ab0:	f000 f8d0 	bl	8007c54 <__malloc_lock>
 8007ab4:	4a1e      	ldr	r2, [pc, #120]	; (8007b30 <_free_r+0x94>)
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	4610      	mov	r0, r2
 8007aba:	b933      	cbnz	r3, 8007aca <_free_r+0x2e>
 8007abc:	6063      	str	r3, [r4, #4]
 8007abe:	6014      	str	r4, [r2, #0]
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac6:	f000 b8c6 	b.w	8007c56 <__malloc_unlock>
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	d90b      	bls.n	8007ae6 <_free_r+0x4a>
 8007ace:	6821      	ldr	r1, [r4, #0]
 8007ad0:	1862      	adds	r2, r4, r1
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	bf01      	itttt	eq
 8007ad6:	681a      	ldreq	r2, [r3, #0]
 8007ad8:	685b      	ldreq	r3, [r3, #4]
 8007ada:	1852      	addeq	r2, r2, r1
 8007adc:	6022      	streq	r2, [r4, #0]
 8007ade:	6063      	str	r3, [r4, #4]
 8007ae0:	6004      	str	r4, [r0, #0]
 8007ae2:	e7ed      	b.n	8007ac0 <_free_r+0x24>
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	b10a      	cbz	r2, 8007aee <_free_r+0x52>
 8007aea:	42a2      	cmp	r2, r4
 8007aec:	d9fa      	bls.n	8007ae4 <_free_r+0x48>
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	1858      	adds	r0, r3, r1
 8007af2:	42a0      	cmp	r0, r4
 8007af4:	d10b      	bne.n	8007b0e <_free_r+0x72>
 8007af6:	6820      	ldr	r0, [r4, #0]
 8007af8:	4401      	add	r1, r0
 8007afa:	1858      	adds	r0, r3, r1
 8007afc:	4282      	cmp	r2, r0
 8007afe:	6019      	str	r1, [r3, #0]
 8007b00:	d1de      	bne.n	8007ac0 <_free_r+0x24>
 8007b02:	6810      	ldr	r0, [r2, #0]
 8007b04:	6852      	ldr	r2, [r2, #4]
 8007b06:	4401      	add	r1, r0
 8007b08:	6019      	str	r1, [r3, #0]
 8007b0a:	605a      	str	r2, [r3, #4]
 8007b0c:	e7d8      	b.n	8007ac0 <_free_r+0x24>
 8007b0e:	d902      	bls.n	8007b16 <_free_r+0x7a>
 8007b10:	230c      	movs	r3, #12
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	e7d4      	b.n	8007ac0 <_free_r+0x24>
 8007b16:	6820      	ldr	r0, [r4, #0]
 8007b18:	1821      	adds	r1, r4, r0
 8007b1a:	428a      	cmp	r2, r1
 8007b1c:	bf01      	itttt	eq
 8007b1e:	6811      	ldreq	r1, [r2, #0]
 8007b20:	6852      	ldreq	r2, [r2, #4]
 8007b22:	1809      	addeq	r1, r1, r0
 8007b24:	6021      	streq	r1, [r4, #0]
 8007b26:	6062      	str	r2, [r4, #4]
 8007b28:	605c      	str	r4, [r3, #4]
 8007b2a:	e7c9      	b.n	8007ac0 <_free_r+0x24>
 8007b2c:	bd38      	pop	{r3, r4, r5, pc}
 8007b2e:	bf00      	nop
 8007b30:	200015ac 	.word	0x200015ac

08007b34 <_malloc_r>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	1ccd      	adds	r5, r1, #3
 8007b38:	f025 0503 	bic.w	r5, r5, #3
 8007b3c:	3508      	adds	r5, #8
 8007b3e:	2d0c      	cmp	r5, #12
 8007b40:	bf38      	it	cc
 8007b42:	250c      	movcc	r5, #12
 8007b44:	2d00      	cmp	r5, #0
 8007b46:	4606      	mov	r6, r0
 8007b48:	db01      	blt.n	8007b4e <_malloc_r+0x1a>
 8007b4a:	42a9      	cmp	r1, r5
 8007b4c:	d903      	bls.n	8007b56 <_malloc_r+0x22>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	6033      	str	r3, [r6, #0]
 8007b52:	2000      	movs	r0, #0
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	f000 f87d 	bl	8007c54 <__malloc_lock>
 8007b5a:	4a21      	ldr	r2, [pc, #132]	; (8007be0 <_malloc_r+0xac>)
 8007b5c:	6814      	ldr	r4, [r2, #0]
 8007b5e:	4621      	mov	r1, r4
 8007b60:	b991      	cbnz	r1, 8007b88 <_malloc_r+0x54>
 8007b62:	4c20      	ldr	r4, [pc, #128]	; (8007be4 <_malloc_r+0xb0>)
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	b91b      	cbnz	r3, 8007b70 <_malloc_r+0x3c>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f000 f863 	bl	8007c34 <_sbrk_r>
 8007b6e:	6020      	str	r0, [r4, #0]
 8007b70:	4629      	mov	r1, r5
 8007b72:	4630      	mov	r0, r6
 8007b74:	f000 f85e 	bl	8007c34 <_sbrk_r>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d124      	bne.n	8007bc6 <_malloc_r+0x92>
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	4630      	mov	r0, r6
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	f000 f868 	bl	8007c56 <__malloc_unlock>
 8007b86:	e7e4      	b.n	8007b52 <_malloc_r+0x1e>
 8007b88:	680b      	ldr	r3, [r1, #0]
 8007b8a:	1b5b      	subs	r3, r3, r5
 8007b8c:	d418      	bmi.n	8007bc0 <_malloc_r+0x8c>
 8007b8e:	2b0b      	cmp	r3, #11
 8007b90:	d90f      	bls.n	8007bb2 <_malloc_r+0x7e>
 8007b92:	600b      	str	r3, [r1, #0]
 8007b94:	18cc      	adds	r4, r1, r3
 8007b96:	50cd      	str	r5, [r1, r3]
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 f85c 	bl	8007c56 <__malloc_unlock>
 8007b9e:	f104 000b 	add.w	r0, r4, #11
 8007ba2:	1d23      	adds	r3, r4, #4
 8007ba4:	f020 0007 	bic.w	r0, r0, #7
 8007ba8:	1ac3      	subs	r3, r0, r3
 8007baa:	d0d3      	beq.n	8007b54 <_malloc_r+0x20>
 8007bac:	425a      	negs	r2, r3
 8007bae:	50e2      	str	r2, [r4, r3]
 8007bb0:	e7d0      	b.n	8007b54 <_malloc_r+0x20>
 8007bb2:	684b      	ldr	r3, [r1, #4]
 8007bb4:	428c      	cmp	r4, r1
 8007bb6:	bf16      	itet	ne
 8007bb8:	6063      	strne	r3, [r4, #4]
 8007bba:	6013      	streq	r3, [r2, #0]
 8007bbc:	460c      	movne	r4, r1
 8007bbe:	e7eb      	b.n	8007b98 <_malloc_r+0x64>
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	6849      	ldr	r1, [r1, #4]
 8007bc4:	e7cc      	b.n	8007b60 <_malloc_r+0x2c>
 8007bc6:	1cc4      	adds	r4, r0, #3
 8007bc8:	f024 0403 	bic.w	r4, r4, #3
 8007bcc:	42a0      	cmp	r0, r4
 8007bce:	d005      	beq.n	8007bdc <_malloc_r+0xa8>
 8007bd0:	1a21      	subs	r1, r4, r0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 f82e 	bl	8007c34 <_sbrk_r>
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d0cf      	beq.n	8007b7c <_malloc_r+0x48>
 8007bdc:	6025      	str	r5, [r4, #0]
 8007bde:	e7db      	b.n	8007b98 <_malloc_r+0x64>
 8007be0:	200015ac 	.word	0x200015ac
 8007be4:	200015b0 	.word	0x200015b0

08007be8 <_realloc_r>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	4607      	mov	r7, r0
 8007bec:	4614      	mov	r4, r2
 8007bee:	460e      	mov	r6, r1
 8007bf0:	b921      	cbnz	r1, 8007bfc <_realloc_r+0x14>
 8007bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	f7ff bf9c 	b.w	8007b34 <_malloc_r>
 8007bfc:	b922      	cbnz	r2, 8007c08 <_realloc_r+0x20>
 8007bfe:	f7ff ff4d 	bl	8007a9c <_free_r>
 8007c02:	4625      	mov	r5, r4
 8007c04:	4628      	mov	r0, r5
 8007c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c08:	f000 f826 	bl	8007c58 <_malloc_usable_size_r>
 8007c0c:	42a0      	cmp	r0, r4
 8007c0e:	d20f      	bcs.n	8007c30 <_realloc_r+0x48>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4638      	mov	r0, r7
 8007c14:	f7ff ff8e 	bl	8007b34 <_malloc_r>
 8007c18:	4605      	mov	r5, r0
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d0f2      	beq.n	8007c04 <_realloc_r+0x1c>
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4622      	mov	r2, r4
 8007c22:	f7ff fc05 	bl	8007430 <memcpy>
 8007c26:	4631      	mov	r1, r6
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff ff37 	bl	8007a9c <_free_r>
 8007c2e:	e7e9      	b.n	8007c04 <_realloc_r+0x1c>
 8007c30:	4635      	mov	r5, r6
 8007c32:	e7e7      	b.n	8007c04 <_realloc_r+0x1c>

08007c34 <_sbrk_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	2300      	movs	r3, #0
 8007c38:	4c05      	ldr	r4, [pc, #20]	; (8007c50 <_sbrk_r+0x1c>)
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	f7f9 facc 	bl	80011dc <_sbrk>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_sbrk_r+0x1a>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_sbrk_r+0x1a>
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	20001cb8 	.word	0x20001cb8

08007c54 <__malloc_lock>:
 8007c54:	4770      	bx	lr

08007c56 <__malloc_unlock>:
 8007c56:	4770      	bx	lr

08007c58 <_malloc_usable_size_r>:
 8007c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5c:	1f18      	subs	r0, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bfbc      	itt	lt
 8007c62:	580b      	ldrlt	r3, [r1, r0]
 8007c64:	18c0      	addlt	r0, r0, r3
 8007c66:	4770      	bx	lr

08007c68 <_init>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

08007c74 <_fini>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr
