
roll_finger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7a4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aafc  0800aafc  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800aafc  0800aafc  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aafc  0800aafc  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aafc  0800aafc  0001aafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab00  0800ab00  0001ab00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800ab04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b9c  20000108  0800ac08  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ca4  0800ac08  00021ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a835  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409b  00000000  00000000  0003a962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0003ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba8a  00000000  00000000  00041330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016da5  00000000  00000000  0005cdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c31c  00000000  00000000  00073b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fe7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  0010fed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000108 	.word	0x20000108
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a89c 	.word	0x0800a89c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000010c 	.word	0x2000010c
 800014c:	0800a89c 	.word	0x0800a89c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <vApplicationGetIdleTaskMemory+0x28>)
 800095c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <vApplicationGetIdleTaskMemory+0x2c>)
 8000962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000124 	.word	0x20000124
 8000978:	20000178 	.word	0x20000178

0800097c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800098c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <vApplicationGetTimerTaskMemory+0x30>)
 8000992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000378 	.word	0x20000378
 80009ac:	200003cc 	.word	0x200003cc

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	db0b      	blt.n	80009f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	f003 021f 	and.w	r2, r3, #31
 80009e4:	4906      	ldr	r1, [pc, #24]	; (8000a00 <__NVIC_EnableIRQ+0x34>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	095b      	lsrs	r3, r3, #5
 80009ec:	2001      	movs	r0, #1
 80009ee:	fa00 f202 	lsl.w	r2, r0, r2
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	615a      	str	r2, [r3, #20]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	2b20      	cmp	r3, #32
 8000b16:	bf0c      	ite	eq
 8000b18:	2301      	moveq	r3, #1
 8000b1a:	2300      	movne	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b38:	2b80      	cmp	r3, #128	; 0x80
 8000b3a:	bf0c      	ite	eq
 8000b3c:	2301      	moveq	r3, #1
 8000b3e:	2300      	movne	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	f043 0220 	orr.w	r2, r3, #32
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60da      	str	r2, [r3, #12]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60da      	str	r2, [r3, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60da      	str	r2, [r3, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	2b80      	cmp	r3, #128	; 0x80
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000bee:	78fa      	ldrb	r2, [r7, #3]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	605a      	str	r2, [r3, #4]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c0a:	699a      	ldr	r2, [r3, #24]
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <lightupLED1>:
int data_fl_real, data_fr_real, data_fl_noise,data_fr_noise,data_fl,data_fr;


// set the RGB LEDs on Finger 1
void lightupLED1(struct pixel *framebuffer)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e01a      	b.n	8000c74 <lightupLED1+0x44>
	{
		framebuffer[i].r=0;
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	dde1      	ble.n	8000c3e <lightupLED1+0xe>
	}
	for(int i=5;i<12;i++)
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	e01a      	b.n	8000cb6 <lightupLED1+0x86>
	{
		framebuffer[i].r=0;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	22ff      	movs	r2, #255	; 0xff
 8000c9e:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b0b      	cmp	r3, #11
 8000cba:	dde1      	ble.n	8000c80 <lightupLED1+0x50>
	}
	for(int i=12;i<17;i++)
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	e01a      	b.n	8000cf8 <lightupLED1+0xc8>
	{
		framebuffer[i].r=0;
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	2200      	movs	r2, #0
 8000cd0:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<17;i++)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b10      	cmp	r3, #16
 8000cfc:	dde1      	ble.n	8000cc2 <lightupLED1+0x92>
	}
	for(int i=17;i<24;i++)
 8000cfe:	2311      	movs	r3, #17
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	e01a      	b.n	8000d3a <lightupLED1+0x10a>
	{
		framebuffer[i].r=255;
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	22ff      	movs	r2, #255	; 0xff
 8000d12:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4413      	add	r3, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	709a      	strb	r2, [r3, #2]
	for(int i=17;i<24;i++)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	3301      	adds	r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b17      	cmp	r3, #23
 8000d3e:	dde1      	ble.n	8000d04 <lightupLED1+0xd4>
	}
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	371c      	adds	r7, #28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <lightupLED2>:
// set the RGB LEDs on Finger 2
void lightupLED2(struct pixel *framebuffer)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e01a      	b.n	8000d90 <lightupLED2+0x44>
	{
		framebuffer[i].r=0;
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	2200      	movs	r2, #0
 8000d68:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	dde1      	ble.n	8000d5a <lightupLED2+0xe>
	}
	for(int i=5;i<12;i++)
 8000d96:	2305      	movs	r3, #5
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	e01a      	b.n	8000dd2 <lightupLED2+0x86>
	{
		framebuffer[i].r=0;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	22ff      	movs	r2, #255	; 0xff
 8000dba:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	2b0b      	cmp	r3, #11
 8000dd6:	dde1      	ble.n	8000d9c <lightupLED2+0x50>
	}
	for(int i=12;i<19;i++)
 8000dd8:	230c      	movs	r3, #12
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e01a      	b.n	8000e14 <lightupLED2+0xc8>
	{
		framebuffer[i].r=255;
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<19;i++)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b12      	cmp	r3, #18
 8000e18:	dde1      	ble.n	8000dde <lightupLED2+0x92>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
	...

08000e28 <open_gripper>:

void open_gripper(int pwmval)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]

	if((adc_value[3]>M1MinPos)||(adc_value[4]>M2MinPos))
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <open_gripper+0x78>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <open_gripper+0x7c>)
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d805      	bhi.n	8000e48 <open_gripper+0x20>
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <open_gripper+0x78>)
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <open_gripper+0x80>)
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d926      	bls.n	8000e96 <open_gripper+0x6e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <open_gripper+0x84>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 ff27 	bl	8006ca4 <osSemaphoreWait>
		mgo=1;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <open_gripper+0x88>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000e5c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	2264      	movs	r2, #100	; 0x64
 8000e66:	2100      	movs	r1, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fa51 	bl	8001310 <scale_val>
 8000e6e:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwmval);
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <open_gripper+0x8c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <open_gripper+0x90>)
 8000e7e:	f003 fdb7 	bl	80049f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2108      	movs	r1, #8
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <open_gripper+0x90>)
 8000e88:	f003 fdb2 	bl	80049f0 <HAL_GPIO_WritePin>
		osSemaphoreRelease(BinSemHandle);
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <open_gripper+0x84>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 ff55 	bl	8006d40 <osSemaphoreRelease>
	}
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200018d8 	.word	0x200018d8
 8000ea4:	20000010 	.word	0x20000010
 8000ea8:	20000018 	.word	0x20000018
 8000eac:	20001ac8 	.word	0x20001ac8
 8000eb0:	200007e0 	.word	0x200007e0
 8000eb4:	2000199c 	.word	0x2000199c
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <close_gripper>:

void close_gripper(int pwmval)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	6078      	str	r0, [r7, #4]

	if((adc_value[3]<M1MaxPos)||(adc_value[4]<M2MaxPos))
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <close_gripper+0x78>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <close_gripper+0x7c>)
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d305      	bcc.n	8000edc <close_gripper+0x20>
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <close_gripper+0x78>)
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <close_gripper+0x80>)
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d226      	bcs.n	8000f2a <close_gripper+0x6e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <close_gripper+0x84>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 fedd 	bl	8006ca4 <osSemaphoreWait>
		mgc=1;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <close_gripper+0x88>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000ef0:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2264      	movs	r2, #100	; 0x64
 8000efa:	2100      	movs	r1, #0
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fa07 	bl	8001310 <scale_val>
 8000f02:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwmval);
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <close_gripper+0x8c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2108      	movs	r1, #8
 8000f10:	480e      	ldr	r0, [pc, #56]	; (8000f4c <close_gripper+0x90>)
 8000f12:	f003 fd6d 	bl	80049f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2110      	movs	r1, #16
 8000f1a:	480c      	ldr	r0, [pc, #48]	; (8000f4c <close_gripper+0x90>)
 8000f1c:	f003 fd68 	bl	80049f0 <HAL_GPIO_WritePin>
		osSemaphoreRelease(BinSemHandle);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <close_gripper+0x84>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 ff0b 	bl	8006d40 <osSemaphoreRelease>

	}

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200018d8 	.word	0x200018d8
 8000f38:	20000014 	.word	0x20000014
 8000f3c:	2000001c 	.word	0x2000001c
 8000f40:	20001ac8 	.word	0x20001ac8
 8000f44:	200007e4 	.word	0x200007e4
 8000f48:	2000199c 	.word	0x2000199c
 8000f4c:	40010c00 	.word	0x40010c00

08000f50 <brake_lf>:
void brake_lf()
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 2800);
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <brake_lf+0x20>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 2800);
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <brake_lf+0x20>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	200016fc 	.word	0x200016fc

08000f74 <brake_rf>:
void brake_rf()
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 2800);
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <brake_rf+0x20>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000f80:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 2800);
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <brake_rf+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	200016fc 	.word	0x200016fc

08000f98 <stop_lf>:
void stop_lf()
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <stop_lf+0x1c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <stop_lf+0x1c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	200016fc 	.word	0x200016fc

08000fb8 <stop_rf>:

void stop_rf()
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <stop_rf+0x1c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <stop_rf+0x1c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	200016fc 	.word	0x200016fc

08000fd8 <brake_gripper>:
void brake_gripper()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2110      	movs	r1, #16
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <brake_gripper+0x28>)
 8000fe2:	f003 fd05 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <brake_gripper+0x28>)
 8000fec:	f003 fd00 	bl	80049f0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 2800);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <brake_gripper+0x2c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40010c00 	.word	0x40010c00
 8001004:	2000199c 	.word	0x2000199c

08001008 <stop_gripper>:
void stop_gripper()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2110      	movs	r1, #16
 8001010:	4806      	ldr	r0, [pc, #24]	; (800102c <stop_gripper+0x24>)
 8001012:	f003 fced 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2108      	movs	r1, #8
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <stop_gripper+0x24>)
 800101c:	f003 fce8 	bl	80049f0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <stop_gripper+0x28>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40010c00 	.word	0x40010c00
 8001030:	2000199c 	.word	0x2000199c

08001034 <move_lf>:
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);

}

void move_lf(int pwmval)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af02      	add	r7, sp, #8
 800103a:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[6]<LFMaxPos)
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <move_lf+0x60>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a15      	ldr	r2, [pc, #84]	; (8001098 <move_lf+0x64>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	4293      	cmp	r3, r2
 8001046:	d220      	bcs.n	800108a <move_lf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <move_lf+0x68>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001050:	4618      	mov	r0, r3
 8001052:	f005 fe27 	bl	8006ca4 <osSemaphoreWait>
		// set the moving flag
		lfw= 1;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <move_lf+0x6c>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 800105c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	2264      	movs	r2, #100	; 0x64
 8001066:	2100      	movs	r1, #0
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f951 	bl	8001310 <scale_val>
 800106e:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <move_lf+0x70>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwmval);
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <move_lf+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <move_lf+0x68>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fe5b 	bl	8006d40 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200018d8 	.word	0x200018d8
 8001098:	20000000 	.word	0x20000000
 800109c:	20001ac8 	.word	0x20001ac8
 80010a0:	200007d4 	.word	0x200007d4
 80010a4:	200016fc 	.word	0x200016fc

080010a8 <move_lb>:

void move_lb(int pwmval)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	if(adc_value[6]>LFMinPos)
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <move_lb+0x60>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a15      	ldr	r2, [pc, #84]	; (800110c <move_lb+0x64>)
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d920      	bls.n	80010fe <move_lb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <move_lb+0x68>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 fded 	bl	8006ca4 <osSemaphoreWait>
		//isMoveB_LF = 1;
		lrw=1;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <move_lb+0x6c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 80010d0:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2300      	movs	r3, #0
 80010d8:	2264      	movs	r2, #100	; 0x64
 80010da:	2100      	movs	r1, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f917 	bl	8001310 <scale_val>
 80010e2:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwmval);
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <move_lb+0x70>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <move_lb+0x70>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <move_lb+0x68>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 fe21 	bl	8006d40 <osSemaphoreRelease>

	}

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200018d8 	.word	0x200018d8
 800110c:	20000004 	.word	0x20000004
 8001110:	20001ac8 	.word	0x20001ac8
 8001114:	200007d0 	.word	0x200007d0
 8001118:	200016fc 	.word	0x200016fc

0800111c <move_rf>:

void move_rf(int pwmval)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
 8001122:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[5]<RFMaxPos)
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <move_rf+0x60>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	4a15      	ldr	r2, [pc, #84]	; (8001180 <move_rf+0x64>)
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	4293      	cmp	r3, r2
 800112e:	d220      	bcs.n	8001172 <move_rf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <move_rf+0x68>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001138:	4618      	mov	r0, r3
 800113a:	f005 fdb3 	bl	8006ca4 <osSemaphoreWait>
		// set the moving flag
		rfw= 1;
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <move_rf+0x6c>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8001144:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	2264      	movs	r2, #100	; 0x64
 800114e:	2100      	movs	r1, #0
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f8dd 	bl	8001310 <scale_val>
 8001156:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <move_rf+0x70>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwmval);
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <move_rf+0x70>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <move_rf+0x68>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f005 fde7 	bl	8006d40 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200018d8 	.word	0x200018d8
 8001180:	20000008 	.word	0x20000008
 8001184:	20001ac8 	.word	0x20001ac8
 8001188:	200007d8 	.word	0x200007d8
 800118c:	200016fc 	.word	0x200016fc

08001190 <move_rb>:

void move_rb(int pwmval)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af02      	add	r7, sp, #8
 8001196:	6078      	str	r0, [r7, #4]
	if(adc_value[5]>RFMinPos)
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <move_rb+0x60>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <move_rb+0x64>)
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d920      	bls.n	80011e6 <move_rb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <move_rb+0x68>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 fd79 	bl	8006ca4 <osSemaphoreWait>
		//isMoveB_LF = 1;
		rrw=1;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <move_rb+0x6c>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 80011b8:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	2264      	movs	r2, #100	; 0x64
 80011c2:	2100      	movs	r1, #0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f8a3 	bl	8001310 <scale_val>
 80011ca:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwmval);
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <move_rb+0x70>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <move_rb+0x70>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <move_rb+0x68>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 fdad 	bl	8006d40 <osSemaphoreRelease>

	}

}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200018d8 	.word	0x200018d8
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	20001ac8 	.word	0x20001ac8
 80011fc:	200007dc 	.word	0x200007dc
 8001200:	200016fc 	.word	0x200016fc

08001204 <ir_led_on>:

void ir_led_on()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2120      	movs	r1, #32
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <ir_led_on+0x14>)
 800120e:	f003 fbef 	bl	80049f0 <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010c00 	.word	0x40010c00

0800121c <ir_led_off>:

void ir_led_off()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2120      	movs	r1, #32
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <ir_led_off+0x14>)
 8001226:	f003 fbe3 	bl	80049f0 <HAL_GPIO_WritePin>

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40010c00 	.word	0x40010c00

08001234 <set_mux_fl>:



void set_mux_fl(value)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value & 0b0001);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <set_mux_fl+0x68>)
 800124e:	f003 fbcf 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value & 0b0010);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <set_mux_fl+0x68>)
 8001264:	f003 fbc4 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value & 0b0100);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <set_mux_fl+0x68>)
 800127a:	f003 fbb9 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, value & 0b1000);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <set_mux_fl+0x68>)
 8001290:	f003 fbae 	bl	80049f0 <HAL_GPIO_WritePin>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40010c00 	.word	0x40010c00

080012a0 <set_mux_fr>:
void set_mux_fr(value)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value & 0b0001);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b8:	4813      	ldr	r0, [pc, #76]	; (8001308 <set_mux_fr+0x68>)
 80012ba:	f003 fb99 	bl	80049f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value & 0b0010);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <set_mux_fr+0x68>)
 80012d0:	f003 fb8e 	bl	80049f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value & 0b0100);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <set_mux_fr+0x6c>)
 80012e6:	f003 fb83 	bl	80049f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value & 0b1000);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <set_mux_fr+0x6c>)
 80012fc:	f003 fb78 	bl	80049f0 <HAL_GPIO_WritePin>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40010c00 	.word	0x40010c00
 800130c:	40010800 	.word	0x40010800

08001310 <scale_val>:

int scale_val(int inval, int inmin, int inmax, int outmin, int outmax)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	if (inval>=inmax)
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	db02      	blt.n	800132c <scale_val+0x1c>
	{
		inval = inmax;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	e005      	b.n	8001338 <scale_val+0x28>
	}
	else if(inval<=inmin)
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	429a      	cmp	r2, r3
 8001332:	dc01      	bgt.n	8001338 <scale_val+0x28>
	{
		inval =inmin;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60fb      	str	r3, [r7, #12]
	}

	double slope = 1.0 * (outmax - outmin) / (inmax - inmin);
 8001338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f860 	bl	8000404 <__aeabi_i2d>
 8001344:	4604      	mov	r4, r0
 8001346:	460d      	mov	r5, r1
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f858 	bl	8000404 <__aeabi_i2d>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4620      	mov	r0, r4
 800135a:	4629      	mov	r1, r5
 800135c:	f7ff f9e6 	bl	800072c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return outmin + slope * (inval - inmin);
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f7ff f84b 	bl	8000404 <__aeabi_i2d>
 800136e:	4604      	mov	r4, r0
 8001370:	460d      	mov	r5, r1
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f843 	bl	8000404 <__aeabi_i2d>
 800137e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001382:	f7ff f8a9 	bl	80004d8 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7fe feed 	bl	800016c <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff faaf 	bl	80008fc <__aeabi_d2iz>
 800139e:	4603      	mov	r3, r0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdb0      	pop	{r4, r5, r7, pc}

080013a8 <clamp_val>:

int clamp_val(int inval, int minval, int maxval)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	if(inval<minval)
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	da01      	bge.n	80013c0 <clamp_val+0x18>
	{
		return minval;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	e006      	b.n	80013ce <clamp_val+0x26>
	}
	else if(inval>maxval)
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dd01      	ble.n	80013cc <clamp_val+0x24>
	{
		return maxval;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	e000      	b.n	80013ce <clamp_val+0x26>
	}
	else
		return inval;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <sendData>:

// send data to uart
uint8_t sendData(char* str)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	// check whether the buffer is empty after previous transmission
	if(uartTXBufferLength==0)
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <sendData+0x80>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d131      	bne.n	800144c <sendData+0x74>
	{
		uartTXBufferLength = strlen(str);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7fe feb1 	bl	8000150 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <sendData+0x80>)
 80013f4:	801a      	strh	r2, [r3, #0]
		uartTXBufferIndex = 0;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <sendData+0x84>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	801a      	strh	r2, [r3, #0]
		for(int i = 0;i<uartTXBufferLength;i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e00c      	b.n	800141c <sendData+0x44>
		{
			uartTXBuffer[i]=*str;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7819      	ldrb	r1, [r3, #0]
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <sendData+0x88>)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	460a      	mov	r2, r1
 800140e:	701a      	strb	r2, [r3, #0]
			++str;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
		for(int i = 0;i<uartTXBufferLength;i++)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <sendData+0x80>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4293      	cmp	r3, r2
 8001426:	dbec      	blt.n	8001402 <sendData+0x2a>
		}
		//Transmit the first byte, and increment the index
		LL_USART_TransmitData8(USART1, uartTXBuffer[uartTXBufferIndex++]);
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <sendData+0x84>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	b291      	uxth	r1, r2
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <sendData+0x84>)
 8001432:	8011      	strh	r1, [r2, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <sendData+0x88>)
 8001438:	5c9b      	ldrb	r3, [r3, r2]
 800143a:	4619      	mov	r1, r3
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <sendData+0x8c>)
 800143e:	f7ff fbd0 	bl	8000be2 <LL_USART_TransmitData8>
		// Enable Interrupt and let it handle the rest
		LL_USART_EnableIT_TXE(USART1);
 8001442:	4808      	ldr	r0, [pc, #32]	; (8001464 <sendData+0x8c>)
 8001444:	f7ff fb91 	bl	8000b6a <LL_USART_EnableIT_TXE>
	else
	{
		// Buffer full, so return error
		return 1;
	}
	return 0 ;
 8001448:	2300      	movs	r3, #0
 800144a:	e000      	b.n	800144e <sendData+0x76>
		return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200007ce 	.word	0x200007ce
 800145c:	200007cc 	.word	0x200007cc
 8001460:	20001744 	.word	0x20001744
 8001464:	40013800 	.word	0x40013800

08001468 <LL_USART1_IRQHandler>:
/*The following function handles the UART ISR
Open stm32f1xx_it.c and add the following line inside "void USART1_IRQHandler(void)"
 	 LL_USART1_IRQHandler();
*/
void LL_USART1_IRQHandler()
{	// RX Interrupt
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART1) == 0x01)
 800146e:	4820      	ldr	r0, [pc, #128]	; (80014f0 <LL_USART1_IRQHandler+0x88>)
 8001470:	f7ff fb48 	bl	8000b04 <LL_USART_IsActiveFlag_RXNE>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10c      	bne.n	8001494 <LL_USART1_IRQHandler+0x2c>
		{
			int data = LL_USART_ReceiveData8(USART1);
 800147a:	481d      	ldr	r0, [pc, #116]	; (80014f0 <LL_USART1_IRQHandler+0x88>)
 800147c:	f7ff fba5 	bl	8000bca <LL_USART_ReceiveData8>
 8001480:	4603      	mov	r3, r0
 8001482:	607b      	str	r3, [r7, #4]
			osMessagePut(myQueue01Handle, data, osWaitForever);
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <LL_USART1_IRQHandler+0x8c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148e:	4618      	mov	r0, r3
 8001490:	f005 fcb4 	bl	8006dfc <osMessagePut>
		}
	// TX Interrupt
	if(LL_USART_IsEnabledIT_TXE(USART1) == 0x01 && LL_USART_IsActiveFlag_TXE(USART1) == 0x01)
 8001494:	4816      	ldr	r0, [pc, #88]	; (80014f0 <LL_USART1_IRQHandler+0x88>)
 8001496:	f7ff fb86 	bl	8000ba6 <LL_USART_IsEnabledIT_TXE>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	d122      	bne.n	80014e6 <LL_USART1_IRQHandler+0x7e>
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <LL_USART1_IRQHandler+0x88>)
 80014a2:	f7ff fb41 	bl	8000b28 <LL_USART_IsActiveFlag_TXE>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d11c      	bne.n	80014e6 <LL_USART1_IRQHandler+0x7e>
		{
		//check whether we have transmitted all data in the TX  buffer
		if(uartTXBufferIndex>=uartTXBufferLength)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <LL_USART1_IRQHandler+0x90>)
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <LL_USART1_IRQHandler+0x94>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d309      	bcc.n	80014cc <LL_USART1_IRQHandler+0x64>
			{
			//if so, reset the buffer length and index
			uartTXBufferLength = 0;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <LL_USART1_IRQHandler+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	801a      	strh	r2, [r3, #0]
			uartTXBufferIndex = 0;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <LL_USART1_IRQHandler+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	801a      	strh	r2, [r3, #0]
			//Disable TX done interrupt
			LL_USART_DisableIT_TXE(USART1);
 80014c4:	480a      	ldr	r0, [pc, #40]	; (80014f0 <LL_USART1_IRQHandler+0x88>)
 80014c6:	f7ff fb5f 	bl	8000b88 <LL_USART_DisableIT_TXE>
			{
			//Transmit another byte
			LL_USART_TransmitData8(USART1, uartTXBuffer[uartTXBufferIndex++]);
			}
		}
}
 80014ca:	e00c      	b.n	80014e6 <LL_USART1_IRQHandler+0x7e>
			LL_USART_TransmitData8(USART1, uartTXBuffer[uartTXBufferIndex++]);
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <LL_USART1_IRQHandler+0x90>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	b291      	uxth	r1, r2
 80014d4:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <LL_USART1_IRQHandler+0x90>)
 80014d6:	8011      	strh	r1, [r2, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <LL_USART1_IRQHandler+0x98>)
 80014dc:	5c9b      	ldrb	r3, [r3, r2]
 80014de:	4619      	mov	r1, r3
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <LL_USART1_IRQHandler+0x88>)
 80014e2:	f7ff fb7e 	bl	8000be2 <LL_USART_TransmitData8>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40013800 	.word	0x40013800
 80014f4:	200019ec 	.word	0x200019ec
 80014f8:	200007cc 	.word	0x200007cc
 80014fc:	200007ce 	.word	0x200007ce
 8001500:	20001744 	.word	0x20001744

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b09c      	sub	sp, #112	; 0x70
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f002 f9cb 	bl	80038a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f8f7 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f000 fc43 	bl	8001d9c <MX_GPIO_Init>
  MX_DMA_Init();
 8001516:	f000 fc0b 	bl	8001d30 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800151a:	f000 fb9b 	bl	8001c54 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800151e:	f000 f94b 	bl	80017b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001522:	f000 fa81 	bl	8001a28 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001526:	f000 fafd 	bl	8001b24 <MX_TIM4_Init>
  MX_TIM1_Init();
 800152a:	f000 f9dd 	bl	80018e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //start ADC conversations
  HAL_ADC_Start_DMA(&hadc1, adc_value, 7);
 800152e:	2207      	movs	r2, #7
 8001530:	4960      	ldr	r1, [pc, #384]	; (80016b4 <main+0x1b0>)
 8001532:	4861      	ldr	r0, [pc, #388]	; (80016b8 <main+0x1b4>)
 8001534:	f002 fae4 	bl	8003b00 <HAL_ADC_Start_DMA>
   *		TIM4->CCR1 = pwm_value;
   *		or
   *		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_value);
   *
   */
  HAL_TIM_Base_Start(&htim4);
 8001538:	4860      	ldr	r0, [pc, #384]	; (80016bc <main+0x1b8>)
 800153a:	f003 ffad 	bl	8005498 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 800153e:	4860      	ldr	r0, [pc, #384]	; (80016c0 <main+0x1bc>)
 8001540:	f003 ffaa 	bl	8005498 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001544:	2100      	movs	r1, #0
 8001546:	485d      	ldr	r0, [pc, #372]	; (80016bc <main+0x1b8>)
 8001548:	f004 f89a 	bl	8005680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800154c:	2104      	movs	r1, #4
 800154e:	485b      	ldr	r0, [pc, #364]	; (80016bc <main+0x1b8>)
 8001550:	f004 f896 	bl	8005680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001554:	2108      	movs	r1, #8
 8001556:	4859      	ldr	r0, [pc, #356]	; (80016bc <main+0x1b8>)
 8001558:	f004 f892 	bl	8005680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800155c:	210c      	movs	r1, #12
 800155e:	4857      	ldr	r0, [pc, #348]	; (80016bc <main+0x1b8>)
 8001560:	f004 f88e 	bl	8005680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	4856      	ldr	r0, [pc, #344]	; (80016c0 <main+0x1bc>)
 8001568:	f004 f88a 	bl	8005680 <HAL_TIM_PWM_Start>


  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <main+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001574:	4b51      	ldr	r3, [pc, #324]	; (80016bc <main+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2200      	movs	r2, #0
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <main+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8001584:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <main+0x1b8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 800158c:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <main+0x1bc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	635a      	str	r2, [r3, #52]	; 0x34


  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

  HAL_Delay(200);
 8001594:	20c8      	movs	r0, #200	; 0xc8
 8001596:	f002 f9b7 	bl	8003908 <HAL_Delay>

//INITIALIZE NEOPIXELS
      //channel 0
      led_channels[0].framebuffer = channel_framebuffers[0];
 800159a:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <main+0x1c0>)
 800159c:	663b      	str	r3, [r7, #96]	; 0x60
      led_channels[0].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 800159e:	2348      	movs	r3, #72	; 0x48
 80015a0:	667b      	str	r3, [r7, #100]	; 0x64

      //channel1
      led_channels[1].framebuffer = channel_framebuffers[1];
 80015a2:	4b49      	ldr	r3, [pc, #292]	; (80016c8 <main+0x1c4>)
 80015a4:	66bb      	str	r3, [r7, #104]	; 0x68
      led_channels[1].length = FRAMEBUFFER2_SIZE * sizeof(struct pixel);
 80015a6:	2339      	movs	r3, #57	; 0x39
 80015a8:	66fb      	str	r3, [r7, #108]	; 0x6c

      HAL_Delay(200);
 80015aa:	20c8      	movs	r0, #200	; 0xc8
 80015ac:	f002 f9ac 	bl	8003908 <HAL_Delay>
      ws2812_init();
 80015b0:	f002 f92c 	bl	800380c <ws2812_init>
      HAL_Delay(200);
 80015b4:	20c8      	movs	r0, #200	; 0xc8
 80015b6:	f002 f9a7 	bl	8003908 <HAL_Delay>
      // SETUP LED COLORS
      lightupLED1(channel_framebuffers[0]);
 80015ba:	4842      	ldr	r0, [pc, #264]	; (80016c4 <main+0x1c0>)
 80015bc:	f7ff fb38 	bl	8000c30 <lightupLED1>
      lightupLED2(channel_framebuffers[1]);
 80015c0:	4841      	ldr	r0, [pc, #260]	; (80016c8 <main+0x1c4>)
 80015c2:	f7ff fbc3 	bl	8000d4c <lightupLED2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c6:	b672      	cpsid	i
}
 80015c8:	bf00      	nop
      // we have to disable interrupts while refreshing LEDs
   	  __disable_irq();
   	  ws2812_refresh(led_channels, GPIOB);
 80015ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015ce:	493f      	ldr	r1, [pc, #252]	; (80016cc <main+0x1c8>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 ffc1 	bl	8003558 <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 80015d6:	b662      	cpsie	i
}
 80015d8:	bf00      	nop
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 80015da:	2300      	movs	r3, #0
 80015dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80015de:	2300      	movs	r3, #0
 80015e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 80015e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015e6:	2101      	movs	r1, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 fb29 	bl	8006c40 <osSemaphoreCreate>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <main+0x1cc>)
 80015f2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of pidTimer */
  osTimerDef(pidTimer, pid_timer);
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <main+0x1d0>)
 80015f6:	653b      	str	r3, [r7, #80]	; 0x50
 80015f8:	2300      	movs	r3, #0
 80015fa:	657b      	str	r3, [r7, #84]	; 0x54
  pidTimerHandle = osTimerCreate(osTimer(pidTimer), osTimerPeriodic, NULL);
 80015fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001600:	2200      	movs	r2, #0
 8001602:	2101      	movs	r1, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f005 faa3 	bl	8006b50 <osTimerCreate>
 800160a:	4603      	mov	r3, r0
 800160c:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <main+0x1d4>)
 800160e:	6013      	str	r3, [r2, #0]

  /* definition and creation of statusUpdate */
  osTimerDef(statusUpdate, status_update_timer);
 8001610:	4b32      	ldr	r3, [pc, #200]	; (80016dc <main+0x1d8>)
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
 8001614:	2300      	movs	r3, #0
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
  statusUpdateHandle = osTimerCreate(osTimer(statusUpdate), osTimerPeriodic, NULL);
 8001618:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800161c:	2200      	movs	r2, #0
 800161e:	2101      	movs	r1, #1
 8001620:	4618      	mov	r0, r3
 8001622:	f005 fa95 	bl	8006b50 <osTimerCreate>
 8001626:	4603      	mov	r3, r0
 8001628:	4a2d      	ldr	r2, [pc, #180]	; (80016e0 <main+0x1dc>)
 800162a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  // PID timer runs at 100hz
  osTimerStart(pidTimerHandle, pid_time_period);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <main+0x1d4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <main+0x1e0>)
 8001632:	7812      	ldrb	r2, [r2, #0]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f005 fabe 	bl	8006bb8 <osTimerStart>
  //status update timer runs at 100 hz
  osTimerStart(statusUpdateHandle, 10);
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <main+0x1dc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	210a      	movs	r1, #10
 8001642:	4618      	mov	r0, r3
 8001644:	f005 fab8 	bl	8006bb8 <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 128, uint16_t);
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <main+0x1e4>)
 800164a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001654:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f005 fba6 	bl	8006dac <osMessageCreate>
 8001660:	4603      	mov	r3, r0
 8001662:	4a22      	ldr	r2, [pc, #136]	; (80016ec <main+0x1e8>)
 8001664:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adcreader */
  osThreadDef(adcreader, adc_reader_task, osPriorityNormal, 0, 128);
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <main+0x1ec>)
 8001668:	f107 041c 	add.w	r4, r7, #28
 800166c:	461d      	mov	r5, r3
 800166e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcreaderHandle = osThreadCreate(osThread(adcreader), NULL);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fa04 	bl	8006a8e <osThreadCreate>
 8001686:	4603      	mov	r3, r0
 8001688:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <main+0x1f0>)
 800168a:	6013      	str	r3, [r2, #0]

  /* definition and creation of serialreader */
  osThreadDef(serialreader, serial_reader_task, osPriorityHigh, 0, 128);
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <main+0x1f4>)
 800168e:	463c      	mov	r4, r7
 8001690:	461d      	mov	r5, r3
 8001692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800169a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialreaderHandle = osThreadCreate(osThread(serialreader), NULL);
 800169e:	463b      	mov	r3, r7
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 f9f3 	bl	8006a8e <osThreadCreate>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <main+0x1f8>)
 80016ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016ae:	f005 f9e7 	bl	8006a80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <main+0x1ae>
 80016b4:	200018d8 	.word	0x200018d8
 80016b8:	2000191c 	.word	0x2000191c
 80016bc:	200016fc 	.word	0x200016fc
 80016c0:	2000199c 	.word	0x2000199c
 80016c4:	20001a38 	.word	0x20001a38
 80016c8:	20001a80 	.word	0x20001a80
 80016cc:	40010c00 	.word	0x40010c00
 80016d0:	20001ac8 	.word	0x20001ac8
 80016d4:	08002305 	.word	0x08002305
 80016d8:	2000194c 	.word	0x2000194c
 80016dc:	08002a55 	.word	0x08002a55
 80016e0:	20001950 	.word	0x20001950
 80016e4:	20000050 	.word	0x20000050
 80016e8:	0800a8d0 	.word	0x0800a8d0
 80016ec:	200019ec 	.word	0x200019ec
 80016f0:	0800a8e0 	.word	0x0800a8e0
 80016f4:	200018d4 	.word	0x200018d4
 80016f8:	0800a8fc 	.word	0x0800a8fc
 80016fc:	2000188c 	.word	0x2000188c

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	; 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	2228      	movs	r2, #40	; 0x28
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f008 fc00 	bl	8009f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173e:	2301      	movs	r3, #1
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001742:	2302      	movs	r3, #2
 8001744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 800174c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001756:	4618      	mov	r0, r3
 8001758:	f003 f962 	bl	8004a20 <HAL_RCC_OscConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001762:	f001 fa65 	bl	8002c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001766:	230f      	movs	r3, #15
 8001768:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001776:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f003 fbcc 	bl	8004f20 <HAL_RCC_ClockConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800178e:	f001 fa4f 	bl	8002c30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001792:	2302      	movs	r3, #2
 8001794:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001796:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 fd74 	bl	800528c <HAL_RCCEx_PeriphCLKConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017aa:	f001 fa41 	bl	8002c30 <Error_Handler>
  }
}
 80017ae:	bf00      	nop
 80017b0:	3750      	adds	r7, #80	; 0x50
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <MX_ADC1_Init+0x128>)
 80017ca:	4a46      	ldr	r2, [pc, #280]	; (80018e4 <MX_ADC1_Init+0x12c>)
 80017cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <MX_ADC1_Init+0x128>)
 80017d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017d6:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <MX_ADC1_Init+0x128>)
 80017d8:	2201      	movs	r2, #1
 80017da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <MX_ADC1_Init+0x128>)
 80017de:	2200      	movs	r2, #0
 80017e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <MX_ADC1_Init+0x128>)
 80017e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <MX_ADC1_Init+0x128>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 80017f0:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <MX_ADC1_Init+0x128>)
 80017f2:	2207      	movs	r2, #7
 80017f4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f6:	483a      	ldr	r0, [pc, #232]	; (80018e0 <MX_ADC1_Init+0x128>)
 80017f8:	f002 f8aa 	bl	8003950 <HAL_ADC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001802:	f001 fa15 	bl	8002c30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800180a:	2301      	movs	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800180e:	2304      	movs	r3, #4
 8001810:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4832      	ldr	r0, [pc, #200]	; (80018e0 <MX_ADC1_Init+0x128>)
 8001818:	f002 fa6c 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001822:	f001 fa05 	bl	8002c30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001826:	2301      	movs	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800182a:	2302      	movs	r3, #2
 800182c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4619      	mov	r1, r3
 8001832:	482b      	ldr	r0, [pc, #172]	; (80018e0 <MX_ADC1_Init+0x128>)
 8001834:	f002 fa5e 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800183e:	f001 f9f7 	bl	8002c30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001842:	2302      	movs	r3, #2
 8001844:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001846:	2303      	movs	r3, #3
 8001848:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800184a:	2305      	movs	r3, #5
 800184c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <MX_ADC1_Init+0x128>)
 8001854:	f002 fa4e 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800185e:	f001 f9e7 	bl	8002c30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001862:	2303      	movs	r3, #3
 8001864:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001866:	2304      	movs	r3, #4
 8001868:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800186a:	2304      	movs	r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	4619      	mov	r1, r3
 8001872:	481b      	ldr	r0, [pc, #108]	; (80018e0 <MX_ADC1_Init+0x128>)
 8001874:	f002 fa3e 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800187e:	f001 f9d7 	bl	8002c30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001882:	2304      	movs	r3, #4
 8001884:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001886:	2305      	movs	r3, #5
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4814      	ldr	r0, [pc, #80]	; (80018e0 <MX_ADC1_Init+0x128>)
 8001890:	f002 fa30 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800189a:	f001 f9c9 	bl	8002c30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800189e:	2307      	movs	r3, #7
 80018a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80018a2:	2306      	movs	r3, #6
 80018a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_ADC1_Init+0x128>)
 80018ac:	f002 fa22 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80018b6:	f001 f9bb 	bl	8002c30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018ba:	2306      	movs	r3, #6
 80018bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80018be:	2307      	movs	r3, #7
 80018c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <MX_ADC1_Init+0x128>)
 80018c8:	f002 fa14 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80018d2:	f001 f9ad 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000191c 	.word	0x2000191c
 80018e4:	40012400 	.word	0x40012400

080018e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b096      	sub	sp, #88	; 0x58
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2220      	movs	r2, #32
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f008 faf7 	bl	8009f14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001928:	4a3e      	ldr	r2, [pc, #248]	; (8001a24 <MX_TIM1_Init+0x13c>)
 800192a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800192c:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <MX_TIM1_Init+0x138>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2799;
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <MX_TIM1_Init+0x138>)
 800193a:	f640 22ef 	movw	r2, #2799	; 0xaef
 800193e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <MX_TIM1_Init+0x138>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001952:	4833      	ldr	r0, [pc, #204]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001954:	f003 fd50 	bl	80053f8 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800195e:	f001 f967 	bl	8002c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001968:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800196c:	4619      	mov	r1, r3
 800196e:	482c      	ldr	r0, [pc, #176]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001970:	f004 f8ee 	bl	8005b50 <HAL_TIM_ConfigClockSource>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800197a:	f001 f959 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800197e:	4828      	ldr	r0, [pc, #160]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001980:	f003 fe26 	bl	80055d0 <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800198a:	f001 f951 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800199a:	4619      	mov	r1, r3
 800199c:	4820      	ldr	r0, [pc, #128]	; (8001a20 <MX_TIM1_Init+0x138>)
 800199e:	f004 fc63 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019a8:	f001 f942 	bl	8002c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4813      	ldr	r0, [pc, #76]	; (8001a20 <MX_TIM1_Init+0x138>)
 80019d2:	f003 ffff 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019dc:	f001 f928 	bl	8002c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001a04:	f004 fc8e 	bl	8006324 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001a0e:	f001 f90f 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a12:	4803      	ldr	r0, [pc, #12]	; (8001a20 <MX_TIM1_Init+0x138>)
 8001a14:	f001 fa84 	bl	8002f20 <HAL_TIM_MspPostInit>

}
 8001a18:	bf00      	nop
 8001a1a:	3758      	adds	r7, #88	; 0x58
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000199c 	.word	0x2000199c
 8001a24:	40012c00 	.word	0x40012c00

08001a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08e      	sub	sp, #56	; 0x38
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a80:	4827      	ldr	r0, [pc, #156]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001a82:	f003 fcb9 	bl	80053f8 <HAL_TIM_Base_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a8c:	f001 f8d0 	bl	8002c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4820      	ldr	r0, [pc, #128]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001a9e:	f004 f857 	bl	8005b50 <HAL_TIM_ConfigClockSource>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001aa8:	f001 f8c2 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aac:	481c      	ldr	r0, [pc, #112]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001aae:	f003 fd8f 	bl	80055d0 <HAL_TIM_PWM_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ab8:	f001 f8ba 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4815      	ldr	r0, [pc, #84]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001acc:	f004 fbcc 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ad6:	f001 f8ab 	bl	8002c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ada:	2360      	movs	r3, #96	; 0x60
 8001adc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	4619      	mov	r1, r3
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001af2:	f003 ff6f 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001afc:	f001 f898 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2204      	movs	r2, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <MX_TIM2_Init+0xf8>)
 8001b08:	f003 ff64 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001b12:	f001 f88d 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	3738      	adds	r7, #56	; 0x38
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200019f0 	.word	0x200019f0

08001b24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08e      	sub	sp, #56	; 0x38
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	f107 0320 	add.w	r3, r7, #32
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001b56:	4a3e      	ldr	r2, [pc, #248]	; (8001c50 <MX_TIM4_Init+0x12c>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2799;
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001b68:	f640 22ef 	movw	r2, #2799	; 0xaef
 8001b6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b7a:	4834      	ldr	r0, [pc, #208]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001b7c:	f003 fc3c 	bl	80053f8 <HAL_TIM_Base_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b86:	f001 f853 	bl	8002c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b94:	4619      	mov	r1, r3
 8001b96:	482d      	ldr	r0, [pc, #180]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001b98:	f003 ffda 	bl	8005b50 <HAL_TIM_ConfigClockSource>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ba2:	f001 f845 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ba6:	4829      	ldr	r0, [pc, #164]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001ba8:	f003 fd12 	bl	80055d0 <HAL_TIM_PWM_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001bb2:	f001 f83d 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bbe:	f107 0320 	add.w	r3, r7, #32
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4821      	ldr	r0, [pc, #132]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001bc6:	f004 fb4f 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bd0:	f001 f82e 	bl	8002c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd4:	2360      	movs	r3, #96	; 0x60
 8001bd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	4619      	mov	r1, r3
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001bec:	f003 fef2 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bf6:	f001 f81b 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4812      	ldr	r0, [pc, #72]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001c02:	f003 fee7 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c0c:	f001 f810 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2208      	movs	r2, #8
 8001c14:	4619      	mov	r1, r3
 8001c16:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001c18:	f003 fedc 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c22:	f001 f805 	bl	8002c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	220c      	movs	r2, #12
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001c2e:	f003 fed1 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c38:	f000 fffa 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <MX_TIM4_Init+0x128>)
 8001c3e:	f001 f96f 	bl	8002f20 <HAL_TIM_MspPostInit>

}
 8001c42:	bf00      	nop
 8001c44:	3738      	adds	r7, #56	; 0x38
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200016fc 	.word	0x200016fc
 8001c50:	40000800 	.word	0x40000800

08001c54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001c7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c80:	f7fe ffbe 	bl	8000c00 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001c84:	2004      	movs	r0, #4
 8001c86:	f7fe ffbb 	bl	8000c00 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <MX_USART1_UART_Init+0xcc>)
 8001c8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c8e:	2309      	movs	r3, #9
 8001c90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4821      	ldr	r0, [pc, #132]	; (8001d24 <MX_USART1_UART_Init+0xd0>)
 8001ca0:	f004 fc5b 	bl	800655a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <MX_USART1_UART_Init+0xd4>)
 8001ca6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	463b      	mov	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481c      	ldr	r0, [pc, #112]	; (8001d24 <MX_USART1_UART_Init+0xd0>)
 8001cb2:	f004 fc52 	bl	800655a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001cb6:	f7fe fe7b 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2105      	movs	r1, #5
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fec9 	bl	8000a58 <NVIC_EncodePriority>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2025      	movs	r0, #37	; 0x25
 8001ccc:	f7fe fe9a 	bl	8000a04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001cd0:	2025      	movs	r0, #37	; 0x25
 8001cd2:	f7fe fe7b 	bl	80009cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */
  // enable the RX and TX interrupts
  LL_USART_EnableIT_RXNE(USART1);
 8001cd6:	4815      	ldr	r0, [pc, #84]	; (8001d2c <MX_USART1_UART_Init+0xd8>)
 8001cd8:	f7fe ff38 	bl	8000b4c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_TXE(USART1);
 8001cdc:	4813      	ldr	r0, [pc, #76]	; (8001d2c <MX_USART1_UART_Init+0xd8>)
 8001cde:	f7fe ff44 	bl	8000b6a <LL_USART_EnableIT_TXE>

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001ce2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ce6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001cf4:	230c      	movs	r3, #12
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <MX_USART1_UART_Init+0xd8>)
 8001d08:	f004 fe32 	bl	8006970 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001d0c:	4807      	ldr	r0, [pc, #28]	; (8001d2c <MX_USART1_UART_Init+0xd8>)
 8001d0e:	f7fe fee4 	bl	8000ada <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <MX_USART1_UART_Init+0xd8>)
 8001d14:	f7fe fed2 	bl	8000abc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	; 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	04020002 	.word	0x04020002
 8001d24:	40010800 	.word	0x40010800
 8001d28:	04040004 	.word	0x04040004
 8001d2c:	40013800 	.word	0x40013800

08001d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6153      	str	r3, [r2, #20]
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2105      	movs	r1, #5
 8001d52:	200b      	movs	r0, #11
 8001d54:	f002 fa6d 	bl	8004232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d58:	200b      	movs	r0, #11
 8001d5a:	f002 fa86 	bl	800426a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2105      	movs	r1, #5
 8001d62:	200c      	movs	r0, #12
 8001d64:	f002 fa65 	bl	8004232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d68:	200c      	movs	r0, #12
 8001d6a:	f002 fa7e 	bl	800426a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2105      	movs	r1, #5
 8001d72:	200f      	movs	r0, #15
 8001d74:	f002 fa5d 	bl	8004232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d78:	200f      	movs	r0, #15
 8001d7a:	f002 fa76 	bl	800426a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2105      	movs	r1, #5
 8001d82:	2011      	movs	r0, #17
 8001d84:	f002 fa55 	bl	8004232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d88:	2011      	movs	r0, #17
 8001d8a:	f002 fa6e 	bl	800426a <HAL_NVIC_EnableIRQ>

}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000

08001d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001dce:	f043 0320 	orr.w	r3, r3, #32
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <MX_GPIO_Init+0xfc>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e16:	4821      	ldr	r0, [pc, #132]	; (8001e9c <MX_GPIO_Init+0x100>)
 8001e18:	f002 fdea 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f64f 413b 	movw	r1, #64571	; 0xfc3b
 8001e22:	481f      	ldr	r0, [pc, #124]	; (8001ea0 <MX_GPIO_Init+0x104>)
 8001e24:	f002 fde4 	bl	80049f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001e2e:	481d      	ldr	r0, [pc, #116]	; (8001ea4 <MX_GPIO_Init+0x108>)
 8001e30:	f002 fdde 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4813      	ldr	r0, [pc, #76]	; (8001e9c <MX_GPIO_Init+0x100>)
 8001e4e:	f002 fc4b 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001e52:	f64f 433b 	movw	r3, #64571	; 0xfc3b
 8001e56:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_GPIO_Init+0x104>)
 8001e6c:	f002 fc3c 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4619      	mov	r1, r3
 8001e88:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <MX_GPIO_Init+0x108>)
 8001e8a:	f002 fc2d 	bl	80046e8 <HAL_GPIO_Init>

}
 8001e8e:	bf00      	nop
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40010c00 	.word	0x40010c00
 8001ea4:	40010800 	.word	0x40010800

08001ea8 <adc_reader_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_adc_reader_task */
void adc_reader_task(void const * argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  for(int i=0;i<num_irsensors;i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e040      	b.n	8001f38 <adc_reader_task+0x90>
	  	  {
	  		  // set IR off
	  		  ir_led_off();
 8001eb6:	f7ff f9b1 	bl	800121c <ir_led_off>

	  		  // select mux channel
	  		  set_mux_fl(i);
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff f9ba 	bl	8001234 <set_mux_fl>
	  		  set_mux_fr(i);
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff f9ed 	bl	80012a0 <set_mux_fr>

	  		  //small delay
	  		  osDelay(1);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f004 fe2d 	bl	8006b26 <osDelay>

	  		  // get initial readings
	  		  data_fl_noise = adc_value[0];
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <adc_reader_task+0x9c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <adc_reader_task+0xa0>)
 8001ed4:	601a      	str	r2, [r3, #0]
	  		  data_fr_noise = adc_value[1];
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <adc_reader_task+0x9c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <adc_reader_task+0xa4>)
 8001ede:	601a      	str	r2, [r3, #0]

	  		  // set IR on
	  		  ir_led_on();
 8001ee0:	f7ff f990 	bl	8001204 <ir_led_on>
	  		  //small delay
	  		  osDelay(1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f004 fe1e 	bl	8006b26 <osDelay>

	  		  // get second readings
	  		  data_fl = adc_value[0];
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <adc_reader_task+0x9c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <adc_reader_task+0xa8>)
 8001ef2:	601a      	str	r2, [r3, #0]
	  		  data_fr = adc_value[1];
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <adc_reader_task+0x9c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <adc_reader_task+0xac>)
 8001efc:	601a      	str	r2, [r3, #0]

	  		  //calculate the real value and set it in ir_data array
	  		  data_fl_real = -1*(data_fl - data_fl_noise);
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <adc_reader_task+0xa0>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <adc_reader_task+0xa8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <adc_reader_task+0xb0>)
 8001f0a:	6013      	str	r3, [r2, #0]
	  		  data_fr_real = -1*(data_fr - data_fr_noise);
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <adc_reader_task+0xa4>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <adc_reader_task+0xac>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <adc_reader_task+0xb4>)
 8001f18:	6013      	str	r3, [r2, #0]

	  		  //fill the IR data buffers
	  		  irdata_fl[i] = data_fl_real;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <adc_reader_task+0xb0>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4910      	ldr	r1, [pc, #64]	; (8001f60 <adc_reader_task+0xb8>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  irdata_fr[i] = data_fr_real;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <adc_reader_task+0xb4>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <adc_reader_task+0xbc>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<num_irsensors;i++)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <adc_reader_task+0xc0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	dbb9      	blt.n	8001eb6 <adc_reader_task+0xe>
 8001f42:	e7b5      	b.n	8001eb0 <adc_reader_task+0x8>
 8001f44:	200018d8 	.word	0x200018d8
 8001f48:	200019e8 	.word	0x200019e8
 8001f4c:	20001998 	.word	0x20001998
 8001f50:	200016b0 	.word	0x200016b0
 8001f54:	20001888 	.word	0x20001888
 8001f58:	200019e4 	.word	0x200019e4
 8001f5c:	200016f8 	.word	0x200016f8
 8001f60:	200018f4 	.word	0x200018f4
 8001f64:	20001acc 	.word	0x20001acc
 8001f68:	2000008c 	.word	0x2000008c

08001f6c <serial_reader_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_reader_task */
void serial_reader_task(void const * argument)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b08f      	sub	sp, #60	; 0x3c
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serial_reader_task */
	osEvent messageHandler;

		int numchr = 7;
 8001f74:	2307      	movs	r3, #7
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
		char data[numchr];
 8001f78:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001f7a:	1e63      	subs	r3, r4, #1
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	4623      	mov	r3, r4
 8001f80:	4618      	mov	r0, r3
 8001f82:	f04f 0100 	mov.w	r1, #0
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	00cb      	lsls	r3, r1, #3
 8001f90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f94:	00c2      	lsls	r2, r0, #3
 8001f96:	4623      	mov	r3, r4
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f04f 0100 	mov.w	r1, #0
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	00cb      	lsls	r3, r1, #3
 8001fa8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fac:	00c2      	lsls	r2, r0, #3
 8001fae:	4623      	mov	r3, r4
 8001fb0:	3307      	adds	r3, #7
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	ebad 0d03 	sub.w	sp, sp, r3
 8001fba:	ab02      	add	r3, sp, #8
 8001fbc:	3300      	adds	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
		int cmd_val=0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
	   *	cggXXXe - set gripper gap to XXX ( min 0, Max 999)
	   *		  - Reset serial command queue
	   *
	   */

	  messageHandler = osMessageGet(myQueue01Handle, osWaitForever);
 8001fc4:	4ba4      	ldr	r3, [pc, #656]	; (8002258 <serial_reader_task+0x2ec>)
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 ff53 	bl	8006e7c <osMessageGet>

	  for(int i =0;i<(numchr-1);i++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fda:	e00b      	b.n	8001ff4 <serial_reader_task+0x88>
	  	  {
	  		  data[i]=data[i+1];
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	3301      	adds	r3, #1
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	5cd1      	ldrb	r1, [r2, r3]
 8001fe4:	6a3a      	ldr	r2, [r7, #32]
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	4413      	add	r3, r2
 8001fea:	460a      	mov	r2, r1
 8001fec:	701a      	strb	r2, [r3, #0]
	  for(int i =0;i<(numchr-1);i++)
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dbee      	blt.n	8001fdc <serial_reader_task+0x70>
	  	  }
	  data[numchr-1] =messageHandler.value.p;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	461a      	mov	r2, r3
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	3b01      	subs	r3, #1
 8002006:	b2d1      	uxtb	r1, r2
 8002008:	6a3a      	ldr	r2, [r7, #32]
 800200a:	54d1      	strb	r1, [r2, r3]
		  //check for start and end characters
		  if(data[0]=='c' && data[6]=='e')
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b63      	cmp	r3, #99	; 0x63
 8002012:	f040 816b 	bne.w	80022ec <serial_reader_task+0x380>
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	799b      	ldrb	r3, [r3, #6]
 800201a:	2b65      	cmp	r3, #101	; 0x65
 800201c:	f040 8166 	bne.w	80022ec <serial_reader_task+0x380>
		  {
			  // got command
			  // extract the numerical value
			  char val_ar[4]= {data[3], data[4], data[5], NULL};
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	78db      	ldrb	r3, [r3, #3]
 8002024:	723b      	strb	r3, [r7, #8]
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	791b      	ldrb	r3, [r3, #4]
 800202a:	727b      	strb	r3, [r7, #9]
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	795b      	ldrb	r3, [r3, #5]
 8002030:	72bb      	strb	r3, [r7, #10]
 8002032:	2300      	movs	r3, #0
 8002034:	72fb      	strb	r3, [r7, #11]
			  cmd_val = atoi(val_ar);
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	4618      	mov	r0, r3
 800203c:	f007 ff2e 	bl	8009e9c <atoi>
 8002040:	61f8      	str	r0, [r7, #28]

			  switch(data[1])
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	785b      	ldrb	r3, [r3, #1]
 8002046:	3b62      	subs	r3, #98	; 0x62
 8002048:	2b11      	cmp	r3, #17
 800204a:	f200 814f 	bhi.w	80022ec <serial_reader_task+0x380>
 800204e:	a201      	add	r2, pc, #4	; (adr r2, 8002054 <serial_reader_task+0xe8>)
 8002050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002054:	08002125 	.word	0x08002125
 8002058:	0800209d 	.word	0x0800209d
 800205c:	080022ed 	.word	0x080022ed
 8002060:	080022ed 	.word	0x080022ed
 8002064:	080022ed 	.word	0x080022ed
 8002068:	0800221f 	.word	0x0800221f
 800206c:	080022ed 	.word	0x080022ed
 8002070:	080022ed 	.word	0x080022ed
 8002074:	080022ed 	.word	0x080022ed
 8002078:	080022ed 	.word	0x080022ed
 800207c:	080021cd 	.word	0x080021cd
 8002080:	080022ed 	.word	0x080022ed
 8002084:	080022ed 	.word	0x080022ed
 8002088:	08002151 	.word	0x08002151
 800208c:	080022ed 	.word	0x080022ed
 8002090:	080022ed 	.word	0x080022ed
 8002094:	08002179 	.word	0x08002179
 8002098:	080020f9 	.word	0x080020f9
			  {
			  case 'c': // CLOSE GRIPPER
			  	  	  {   //close in current control mode
			  	  		  if(data[2]=='c')
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	789b      	ldrb	r3, [r3, #2]
 80020a0:	2b63      	cmp	r3, #99	; 0x63
 80020a2:	d103      	bne.n	80020ac <serial_reader_task+0x140>
			  	  		  {
			  	  			gPid = 1;
 80020a4:	4b6d      	ldr	r3, [pc, #436]	; (800225c <serial_reader_task+0x2f0>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
			  	  		  {
			  	  			gPid = 3;
			  	  			close_gripper(cmd_val);
			  	  			startTick = HAL_GetTick();
			  	  		  }
			  	  	  }break;
 80020aa:	e112      	b.n	80022d2 <serial_reader_task+0x366>
			  	  		  else if(data[2]=='p')
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	789b      	ldrb	r3, [r3, #2]
 80020b0:	2b70      	cmp	r3, #112	; 0x70
 80020b2:	d10f      	bne.n	80020d4 <serial_reader_task+0x168>
			  	  			gForceThres = cmd_val;
 80020b4:	4a6a      	ldr	r2, [pc, #424]	; (8002260 <serial_reader_task+0x2f4>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	6013      	str	r3, [r2, #0]
			  	  			gPid = 2;
 80020ba:	4b68      	ldr	r3, [pc, #416]	; (800225c <serial_reader_task+0x2f0>)
 80020bc:	2202      	movs	r2, #2
 80020be:	601a      	str	r2, [r3, #0]
			  	  			close_gripper(100);
 80020c0:	2064      	movs	r0, #100	; 0x64
 80020c2:	f7fe fefb 	bl	8000ebc <close_gripper>
			  	  			startTick = HAL_GetTick();
 80020c6:	f001 fc15 	bl	80038f4 <HAL_GetTick>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <serial_reader_task+0x2f8>)
 80020d0:	601a      	str	r2, [r3, #0]
			  	  	  }break;
 80020d2:	e0fe      	b.n	80022d2 <serial_reader_task+0x366>
			  	  		  else if(data[2]=='s')
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	789b      	ldrb	r3, [r3, #2]
 80020d8:	2b73      	cmp	r3, #115	; 0x73
 80020da:	f040 80fa 	bne.w	80022d2 <serial_reader_task+0x366>
			  	  			gPid = 3;
 80020de:	4b5f      	ldr	r3, [pc, #380]	; (800225c <serial_reader_task+0x2f0>)
 80020e0:	2203      	movs	r2, #3
 80020e2:	601a      	str	r2, [r3, #0]
			  	  			close_gripper(cmd_val);
 80020e4:	69f8      	ldr	r0, [r7, #28]
 80020e6:	f7fe fee9 	bl	8000ebc <close_gripper>
			  	  			startTick = HAL_GetTick();
 80020ea:	f001 fc03 	bl	80038f4 <HAL_GetTick>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <serial_reader_task+0x2f8>)
 80020f4:	601a      	str	r2, [r3, #0]
			  	  	  }break;
 80020f6:	e0ec      	b.n	80022d2 <serial_reader_task+0x366>
			  case 's': // STOP MOTION
				  	  	// motors inputs disconnected, can move by hand
			  		  {
			  	  		  if(data[2]=='g')
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	789b      	ldrb	r3, [r3, #2]
 80020fc:	2b67      	cmp	r3, #103	; 0x67
 80020fe:	d102      	bne.n	8002106 <serial_reader_task+0x19a>
			  	  		  {
			  	  			 stop_gripper(); // stop all motors
 8002100:	f7fe ff82 	bl	8001008 <stop_gripper>
			  	  		  {
			  	  			stop_rf(); // stop right finger
			  	  		  }


			  		 }break;
 8002104:	e0e7      	b.n	80022d6 <serial_reader_task+0x36a>
			  	  		  else if(data[2]=='l')
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	789b      	ldrb	r3, [r3, #2]
 800210a:	2b6c      	cmp	r3, #108	; 0x6c
 800210c:	d102      	bne.n	8002114 <serial_reader_task+0x1a8>
			  	  			stop_lf(); // stop left finger
 800210e:	f7fe ff43 	bl	8000f98 <stop_lf>
			  		 }break;
 8002112:	e0e0      	b.n	80022d6 <serial_reader_task+0x36a>
			  	  		  else if(data[2]=='r')
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	2b72      	cmp	r3, #114	; 0x72
 800211a:	f040 80dc 	bne.w	80022d6 <serial_reader_task+0x36a>
			  	  			stop_rf(); // stop right finger
 800211e:	f7fe ff4b 	bl	8000fb8 <stop_rf>
			  		 }break;
 8002122:	e0d8      	b.n	80022d6 <serial_reader_task+0x36a>
			  case 'b': // BRAKE MOTORS
				  	  	// motor inputs are shorted. cannot move by hand
			  		  {
			  	  		  if(data[2]=='g')
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	2b67      	cmp	r3, #103	; 0x67
 800212a:	d102      	bne.n	8002132 <serial_reader_task+0x1c6>
			  	  		  {
			  	  			brake_gripper(); // brake all motors
 800212c:	f7fe ff54 	bl	8000fd8 <brake_gripper>
			  	  		  }
			  	  		  else if(data[2]=='r')
			  	  		  {
			  	  			  brake_rf(); // brake right finger
			  	  		  }
			  		 }break;
 8002130:	e0d3      	b.n	80022da <serial_reader_task+0x36e>
			  	  		  else if(data[2]=='l')
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	2b6c      	cmp	r3, #108	; 0x6c
 8002138:	d102      	bne.n	8002140 <serial_reader_task+0x1d4>
			  	  			  brake_lf(); // brake left finger
 800213a:	f7fe ff09 	bl	8000f50 <brake_lf>
			  		 }break;
 800213e:	e0cc      	b.n	80022da <serial_reader_task+0x36e>
			  	  		  else if(data[2]=='r')
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	789b      	ldrb	r3, [r3, #2]
 8002144:	2b72      	cmp	r3, #114	; 0x72
 8002146:	f040 80c8 	bne.w	80022da <serial_reader_task+0x36e>
			  	  			  brake_rf(); // brake right finger
 800214a:	f7fe ff13 	bl	8000f74 <brake_rf>
			  		 }break;
 800214e:	e0c4      	b.n	80022da <serial_reader_task+0x36e>
			  case 'o': // OPEN THE GRIPPPER
			  		  {
			  	  		  if(data[2]=='p')
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	789b      	ldrb	r3, [r3, #2]
 8002154:	2b70      	cmp	r3, #112	; 0x70
 8002156:	d106      	bne.n	8002166 <serial_reader_task+0x1fa>
			  	  		  {
			  	  			open_gripper(100); // open fully
 8002158:	2064      	movs	r0, #100	; 0x64
 800215a:	f7fe fe65 	bl	8000e28 <open_gripper>
			  	  			sendData("open");
 800215e:	4842      	ldr	r0, [pc, #264]	; (8002268 <serial_reader_task+0x2fc>)
 8002160:	f7ff f93a 	bl	80013d8 <sendData>
			  	  		  }
			  	  		  else if(data[2]=='s')
			  	  		  {
			  	  			open_gripper(cmd_val); // open with speed control
			  	  		  }
			  		 }break;
 8002164:	e0bb      	b.n	80022de <serial_reader_task+0x372>
			  	  		  else if(data[2]=='s')
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	2b73      	cmp	r3, #115	; 0x73
 800216c:	f040 80b7 	bne.w	80022de <serial_reader_task+0x372>
			  	  			open_gripper(cmd_val); // open with speed control
 8002170:	69f8      	ldr	r0, [r7, #28]
 8002172:	f7fe fe59 	bl	8000e28 <open_gripper>
			  		 }break;
 8002176:	e0b2      	b.n	80022de <serial_reader_task+0x372>
			  case 'r': // UP DOWN CONTROL OF RIGHT FINGER
			  		  {
			  	  		  if(data[2]=='p')
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d111      	bne.n	80021a4 <serial_reader_task+0x238>
			  	  		  {
			  	  			//right finger position control
			  	  			rPid= 1;
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <serial_reader_task+0x300>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
			  	  			rPosDesired =  scale_val(cmd_val,0,200,RFMinPos,RFMaxPos);
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <serial_reader_task+0x304>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <serial_reader_task+0x308>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	22c8      	movs	r2, #200	; 0xc8
 8002194:	2100      	movs	r1, #0
 8002196:	69f8      	ldr	r0, [r7, #28]
 8002198:	f7ff f8ba 	bl	8001310 <scale_val>
 800219c:	4603      	mov	r3, r0
 800219e:	4a36      	ldr	r2, [pc, #216]	; (8002278 <serial_reader_task+0x30c>)
 80021a0:	6013      	str	r3, [r2, #0]
			  	  			move_rb(cmd_val);
			  	  			rPid=0;

			  	  		  }

			  		 }break;
 80021a2:	e09e      	b.n	80022e2 <serial_reader_task+0x376>
			  	  		  else if(data[2]=='f')
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	789b      	ldrb	r3, [r3, #2]
 80021a8:	2b66      	cmp	r3, #102	; 0x66
 80021aa:	d103      	bne.n	80021b4 <serial_reader_task+0x248>
			  	  			move_rf(cmd_val);
 80021ac:	69f8      	ldr	r0, [r7, #28]
 80021ae:	f7fe ffb5 	bl	800111c <move_rf>
			  		 }break;
 80021b2:	e096      	b.n	80022e2 <serial_reader_task+0x376>
			  	  		  else if(data[2]=='r')
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	789b      	ldrb	r3, [r3, #2]
 80021b8:	2b72      	cmp	r3, #114	; 0x72
 80021ba:	f040 8092 	bne.w	80022e2 <serial_reader_task+0x376>
			  	  			move_rb(cmd_val);
 80021be:	69f8      	ldr	r0, [r7, #28]
 80021c0:	f7fe ffe6 	bl	8001190 <move_rb>
			  	  			rPid=0;
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <serial_reader_task+0x300>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
			  		 }break;
 80021ca:	e08a      	b.n	80022e2 <serial_reader_task+0x376>
			  case 'l': // UP DOWN CONTROL OF LEFT FINGER
			  		  {
			  	  		  if(data[2]=='p')
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	789b      	ldrb	r3, [r3, #2]
 80021d0:	2b70      	cmp	r3, #112	; 0x70
 80021d2:	d111      	bne.n	80021f8 <serial_reader_task+0x28c>
			  	  		  {
			  	  			  //left finger position control
			  	  			lPid = 1;
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <serial_reader_task+0x310>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
			  	  			lPosDesired = scale_val(cmd_val,0,200,LFMinPos,LFMaxPos);
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <serial_reader_task+0x314>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <serial_reader_task+0x318>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	22c8      	movs	r2, #200	; 0xc8
 80021e8:	2100      	movs	r1, #0
 80021ea:	69f8      	ldr	r0, [r7, #28]
 80021ec:	f7ff f890 	bl	8001310 <scale_val>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a25      	ldr	r2, [pc, #148]	; (8002288 <serial_reader_task+0x31c>)
 80021f4:	6013      	str	r3, [r2, #0]
			  	  			  // move left finger at reverse velocity
			  	  			move_lb(cmd_val);
			  	  			lPid=0;
			  	  		  }

			  		 }break;
 80021f6:	e076      	b.n	80022e6 <serial_reader_task+0x37a>
			  	  		  else if(data[2]=='f')
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	789b      	ldrb	r3, [r3, #2]
 80021fc:	2b66      	cmp	r3, #102	; 0x66
 80021fe:	d103      	bne.n	8002208 <serial_reader_task+0x29c>
			  	  			move_lf(cmd_val);
 8002200:	69f8      	ldr	r0, [r7, #28]
 8002202:	f7fe ff17 	bl	8001034 <move_lf>
			  		 }break;
 8002206:	e06e      	b.n	80022e6 <serial_reader_task+0x37a>
			  	  		  else if(data[2]=='r')
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	789b      	ldrb	r3, [r3, #2]
 800220c:	2b72      	cmp	r3, #114	; 0x72
 800220e:	d16a      	bne.n	80022e6 <serial_reader_task+0x37a>
			  	  			move_lb(cmd_val);
 8002210:	69f8      	ldr	r0, [r7, #28]
 8002212:	f7fe ff49 	bl	80010a8 <move_lb>
			  	  			lPid=0;
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <serial_reader_task+0x310>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
			  		 }break;
 800221c:	e063      	b.n	80022e6 <serial_reader_task+0x37a>
			  case 'g': // Gripper gap control
			  			  	  	  {
			  			  	  		  //M1z = 234;
			  			  	  		  if(data[2]=='z')
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	789b      	ldrb	r3, [r3, #2]
 8002222:	2b7a      	cmp	r3, #122	; 0x7a
 8002224:	d13e      	bne.n	80022a4 <serial_reader_task+0x338>
			  			  	  		  {
			  			  	  			  //get the current gap
			  			  	  		int gripper_gap = (M1MaxPos-adc_value[2])+(M2MaxPos-adc_value[3])-(M1MinPos+M2MinPos);
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <serial_reader_task+0x320>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <serial_reader_task+0x324>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <serial_reader_task+0x328>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <serial_reader_task+0x324>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	1acb      	subs	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	4a15      	ldr	r2, [pc, #84]	; (8002298 <serial_reader_task+0x32c>)
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <serial_reader_task+0x330>)
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	440a      	add	r2, r1
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
			  			  	  		gmin = gripper_gap-55;
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	3b37      	subs	r3, #55	; 0x37
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <serial_reader_task+0x334>)
 8002254:	6013      	str	r3, [r2, #0]
			  			  	  			  gripperGapcmd = scale_val(cmd_val,0,999,gmin,gmax);;
					  			  	  			  gPid = 4;

			  			  	  		  }

			  			  	  	  }break;
 8002256:	e048      	b.n	80022ea <serial_reader_task+0x37e>
 8002258:	200019ec 	.word	0x200019ec
 800225c:	200007f0 	.word	0x200007f0
 8002260:	20000830 	.word	0x20000830
 8002264:	20000834 	.word	0x20000834
 8002268:	0800a918 	.word	0x0800a918
 800226c:	200007ec 	.word	0x200007ec
 8002270:	2000000c 	.word	0x2000000c
 8002274:	20000008 	.word	0x20000008
 8002278:	2000080c 	.word	0x2000080c
 800227c:	200007e8 	.word	0x200007e8
 8002280:	20000004 	.word	0x20000004
 8002284:	20000000 	.word	0x20000000
 8002288:	20000808 	.word	0x20000808
 800228c:	20000014 	.word	0x20000014
 8002290:	200018d8 	.word	0x200018d8
 8002294:	2000001c 	.word	0x2000001c
 8002298:	20000010 	.word	0x20000010
 800229c:	20000018 	.word	0x20000018
 80022a0:	20000040 	.word	0x20000040
			  			  	  		  else if(data[2]=='g')
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	789b      	ldrb	r3, [r3, #2]
 80022a8:	2b67      	cmp	r3, #103	; 0x67
 80022aa:	d11e      	bne.n	80022ea <serial_reader_task+0x37e>
			  			  	  			  gripperGapcmd = scale_val(cmd_val,0,999,gmin,gmax);;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <serial_reader_task+0x388>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <serial_reader_task+0x38c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4613      	mov	r3, r2
 80022b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022bc:	2100      	movs	r1, #0
 80022be:	69f8      	ldr	r0, [r7, #28]
 80022c0:	f7ff f826 	bl	8001310 <scale_val>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <serial_reader_task+0x390>)
 80022c8:	6013      	str	r3, [r2, #0]
					  			  	  			  gPid = 4;
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <serial_reader_task+0x394>)
 80022cc:	2204      	movs	r2, #4
 80022ce:	601a      	str	r2, [r3, #0]
			  			  	  	  }break;
 80022d0:	e00b      	b.n	80022ea <serial_reader_task+0x37e>
			  	  	  }break;
 80022d2:	bf00      	nop
 80022d4:	e00a      	b.n	80022ec <serial_reader_task+0x380>
			  		 }break;
 80022d6:	bf00      	nop
 80022d8:	e008      	b.n	80022ec <serial_reader_task+0x380>
			  		 }break;
 80022da:	bf00      	nop
 80022dc:	e006      	b.n	80022ec <serial_reader_task+0x380>
			  		 }break;
 80022de:	bf00      	nop
 80022e0:	e004      	b.n	80022ec <serial_reader_task+0x380>
			  		 }break;
 80022e2:	bf00      	nop
 80022e4:	e002      	b.n	80022ec <serial_reader_task+0x380>
			  		 }break;
 80022e6:	bf00      	nop
 80022e8:	e000      	b.n	80022ec <serial_reader_task+0x380>
			  			  	  	  }break;
 80022ea:	bf00      	nop

			  }
		  }

	    osDelay(1);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f004 fc1a 	bl	8006b26 <osDelay>
	  messageHandler = osMessageGet(myQueue01Handle, osWaitForever);
 80022f2:	e667      	b.n	8001fc4 <serial_reader_task+0x58>
 80022f4:	20000040 	.word	0x20000040
 80022f8:	20000044 	.word	0x20000044
 80022fc:	200007f4 	.word	0x200007f4
 8002300:	200007f0 	.word	0x200007f0

08002304 <pid_timer>:
  /* USER CODE END serial_reader_task */
}

/* pid_timer function */
void pid_timer(void const * argument)
{
 8002304:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002308:	b08c      	sub	sp, #48	; 0x30
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	// so check whether L finger goes beyond and stop the motion only
	// when L finger is moving forward (and then set lfw=0).
	// if we dont use flags like lfw, lrw, rfw, rrw, mgo, mgc, it will get
	// stuck at a position and cant move

  if((adc_value[6]>LFMaxPos) && (lfw==1))
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <pid_timer+0x174>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	4a5a      	ldr	r2, [pc, #360]	; (800247c <pid_timer+0x178>)
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	4293      	cmp	r3, r2
 8002318:	d91b      	bls.n	8002352 <pid_timer+0x4e>
 800231a:	4b59      	ldr	r3, [pc, #356]	; (8002480 <pid_timer+0x17c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d117      	bne.n	8002352 <pid_timer+0x4e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8002322:	4b58      	ldr	r3, [pc, #352]	; (8002484 <pid_timer+0x180>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800232a:	4618      	mov	r0, r3
 800232c:	f004 fcba 	bl	8006ca4 <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8002330:	4b55      	ldr	r3, [pc, #340]	; (8002488 <pid_timer+0x184>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2200      	movs	r2, #0
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <pid_timer+0x184>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	639a      	str	r2, [r3, #56]	; 0x38
		lfw=0;
 8002340:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <pid_timer+0x17c>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 8002346:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <pid_timer+0x180>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 fcf8 	bl	8006d40 <osSemaphoreRelease>
 8002350:	e020      	b.n	8002394 <pid_timer+0x90>
	}
	else if((adc_value[6]<LFMinPos) && (lrw==1))
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <pid_timer+0x174>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	4a4d      	ldr	r2, [pc, #308]	; (800248c <pid_timer+0x188>)
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	4293      	cmp	r3, r2
 800235c:	d21a      	bcs.n	8002394 <pid_timer+0x90>
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <pid_timer+0x18c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d116      	bne.n	8002394 <pid_timer+0x90>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <pid_timer+0x180>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800236e:	4618      	mov	r0, r3
 8002370:	f004 fc98 	bl	8006ca4 <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8002374:	4b44      	ldr	r3, [pc, #272]	; (8002488 <pid_timer+0x184>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2200      	movs	r2, #0
 800237a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 800237c:	4b42      	ldr	r3, [pc, #264]	; (8002488 <pid_timer+0x184>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	639a      	str	r2, [r3, #56]	; 0x38
		lrw=0;
 8002384:	4b42      	ldr	r3, [pc, #264]	; (8002490 <pid_timer+0x18c>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 800238a:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <pid_timer+0x180>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f004 fcd6 	bl	8006d40 <osSemaphoreRelease>
	}

	if((adc_value[5]>RFMaxPos) && (rfw==1))
 8002394:	4b38      	ldr	r3, [pc, #224]	; (8002478 <pid_timer+0x174>)
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	4a3e      	ldr	r2, [pc, #248]	; (8002494 <pid_timer+0x190>)
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	4293      	cmp	r3, r2
 800239e:	d91b      	bls.n	80023d8 <pid_timer+0xd4>
 80023a0:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <pid_timer+0x194>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d117      	bne.n	80023d8 <pid_timer+0xd4>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <pid_timer+0x180>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b0:	4618      	mov	r0, r3
 80023b2:	f004 fc77 	bl	8006ca4 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <pid_timer+0x184>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2200      	movs	r2, #0
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <pid_timer+0x184>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
			rfw=0;
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <pid_timer+0x194>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 80023cc:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <pid_timer+0x180>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 fcb5 	bl	8006d40 <osSemaphoreRelease>
 80023d6:	e020      	b.n	800241a <pid_timer+0x116>
		}
		else if((adc_value[5]<RFMinPos) && (rrw==1))
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <pid_timer+0x174>)
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	4a2f      	ldr	r2, [pc, #188]	; (800249c <pid_timer+0x198>)
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d21a      	bcs.n	800241a <pid_timer+0x116>
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <pid_timer+0x19c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d116      	bne.n	800241a <pid_timer+0x116>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <pid_timer+0x180>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 fc55 	bl	8006ca4 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <pid_timer+0x184>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <pid_timer+0x184>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
			rrw=0;
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <pid_timer+0x19c>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <pid_timer+0x180>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f004 fc93 	bl	8006d40 <osSemaphoreRelease>
		}

	if((adc_value[3]<M1MinPos) && (mgo==1) &&(adc_value[4]<M2MinPos))
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <pid_timer+0x174>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <pid_timer+0x1a0>)
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	4293      	cmp	r3, r2
 8002424:	d248      	bcs.n	80024b8 <pid_timer+0x1b4>
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <pid_timer+0x1a4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d144      	bne.n	80024b8 <pid_timer+0x1b4>
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <pid_timer+0x174>)
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <pid_timer+0x1a8>)
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4293      	cmp	r3, r2
 8002438:	d23e      	bcs.n	80024b8 <pid_timer+0x1b4>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <pid_timer+0x180>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fc2e 	bl	8006ca4 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <pid_timer+0x1ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	2108      	movs	r1, #8
 8002454:	4817      	ldr	r0, [pc, #92]	; (80024b4 <pid_timer+0x1b0>)
 8002456:	f002 facb 	bl	80049f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	2110      	movs	r1, #16
 800245e:	4815      	ldr	r0, [pc, #84]	; (80024b4 <pid_timer+0x1b0>)
 8002460:	f002 fac6 	bl	80049f0 <HAL_GPIO_WritePin>
			mgo=0;
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <pid_timer+0x1a4>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <pid_timer+0x180>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 fc66 	bl	8006d40 <osSemaphoreRelease>
 8002474:	e04d      	b.n	8002512 <pid_timer+0x20e>
 8002476:	bf00      	nop
 8002478:	200018d8 	.word	0x200018d8
 800247c:	20000000 	.word	0x20000000
 8002480:	200007d4 	.word	0x200007d4
 8002484:	20001ac8 	.word	0x20001ac8
 8002488:	200016fc 	.word	0x200016fc
 800248c:	20000004 	.word	0x20000004
 8002490:	200007d0 	.word	0x200007d0
 8002494:	20000008 	.word	0x20000008
 8002498:	200007d8 	.word	0x200007d8
 800249c:	2000000c 	.word	0x2000000c
 80024a0:	200007dc 	.word	0x200007dc
 80024a4:	20000010 	.word	0x20000010
 80024a8:	200007e0 	.word	0x200007e0
 80024ac:	20000018 	.word	0x20000018
 80024b0:	2000199c 	.word	0x2000199c
 80024b4:	40010c00 	.word	0x40010c00
		}
		else if((adc_value[3]>M1MaxPos) && (mgc==1) &&(adc_value[4]>M2MaxPos))
 80024b8:	4bb7      	ldr	r3, [pc, #732]	; (8002798 <pid_timer+0x494>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4ab7      	ldr	r2, [pc, #732]	; (800279c <pid_timer+0x498>)
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d926      	bls.n	8002512 <pid_timer+0x20e>
 80024c4:	4bb6      	ldr	r3, [pc, #728]	; (80027a0 <pid_timer+0x49c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d122      	bne.n	8002512 <pid_timer+0x20e>
 80024cc:	4bb2      	ldr	r3, [pc, #712]	; (8002798 <pid_timer+0x494>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	4ab4      	ldr	r2, [pc, #720]	; (80027a4 <pid_timer+0x4a0>)
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d91c      	bls.n	8002512 <pid_timer+0x20e>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 80024d8:	4bb3      	ldr	r3, [pc, #716]	; (80027a8 <pid_timer+0x4a4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fbdf 	bl	8006ca4 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 80024e6:	4bb1      	ldr	r3, [pc, #708]	; (80027ac <pid_timer+0x4a8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2108      	movs	r1, #8
 80024f2:	48af      	ldr	r0, [pc, #700]	; (80027b0 <pid_timer+0x4ac>)
 80024f4:	f002 fa7c 	bl	80049f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2110      	movs	r1, #16
 80024fc:	48ac      	ldr	r0, [pc, #688]	; (80027b0 <pid_timer+0x4ac>)
 80024fe:	f002 fa77 	bl	80049f0 <HAL_GPIO_WritePin>
			mgc=0;
 8002502:	4ba7      	ldr	r3, [pc, #668]	; (80027a0 <pid_timer+0x49c>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8002508:	4ba7      	ldr	r3, [pc, #668]	; (80027a8 <pid_timer+0x4a4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f004 fc17 	bl	8006d40 <osSemaphoreRelease>
		}

	//PID position control for LFinger
	if(lPid==1)
 8002512:	4ba8      	ldr	r3, [pc, #672]	; (80027b4 <pid_timer+0x4b0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	f040 80a2 	bne.w	8002660 <pid_timer+0x35c>
	{
		// get the commanded position
		// get current position
		// calculate error
		int error = lPosDesired - adc_value[6];
 800251c:	4ba6      	ldr	r3, [pc, #664]	; (80027b8 <pid_timer+0x4b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b9d      	ldr	r3, [pc, #628]	; (8002798 <pid_timer+0x494>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
		l_error_integral = l_error_integral + error;
 800252a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800252c:	f7fd ff6a 	bl	8000404 <__aeabi_i2d>
 8002530:	4ba2      	ldr	r3, [pc, #648]	; (80027bc <pid_timer+0x4b8>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fd fe19 	bl	800016c <__adddf3>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	499f      	ldr	r1, [pc, #636]	; (80027bc <pid_timer+0x4b8>)
 8002540:	e9c1 2300 	strd	r2, r3, [r1]
		int l_error_derivative = error  - l_error_prev;
 8002544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002546:	f7fd ff5d 	bl	8000404 <__aeabi_i2d>
 800254a:	4b9d      	ldr	r3, [pc, #628]	; (80027c0 <pid_timer+0x4bc>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fd fe0a 	bl	8000168 <__aeabi_dsub>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe f9ce 	bl	80008fc <__aeabi_d2iz>
 8002560:	4603      	mov	r3, r0
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
		// calculate control value
		int l_ctrl   = (l_Kp * error) + ((l_Kd/pid_time_period)* l_error_derivative) + (l_Ki*l_error_integral*pid_time_period);
 8002564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002566:	f7fd ff4d 	bl	8000404 <__aeabi_i2d>
 800256a:	4b96      	ldr	r3, [pc, #600]	; (80027c4 <pid_timer+0x4c0>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fd ffb2 	bl	80004d8 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4690      	mov	r8, r2
 800257a:	4699      	mov	r9, r3
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <pid_timer+0x4c4>)
 800257e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002582:	4b92      	ldr	r3, [pc, #584]	; (80027cc <pid_timer+0x4c8>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ff3c 	bl	8000404 <__aeabi_i2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4620      	mov	r0, r4
 8002592:	4629      	mov	r1, r5
 8002594:	f7fe f8ca 	bl	800072c <__aeabi_ddiv>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4614      	mov	r4, r2
 800259e:	461d      	mov	r5, r3
 80025a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a2:	f7fd ff2f 	bl	8000404 <__aeabi_i2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4620      	mov	r0, r4
 80025ac:	4629      	mov	r1, r5
 80025ae:	f7fd ff93 	bl	80004d8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4640      	mov	r0, r8
 80025b8:	4649      	mov	r1, r9
 80025ba:	f7fd fdd7 	bl	800016c <__adddf3>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4614      	mov	r4, r2
 80025c4:	461d      	mov	r5, r3
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <pid_timer+0x4cc>)
 80025c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025cc:	4b7b      	ldr	r3, [pc, #492]	; (80027bc <pid_timer+0x4b8>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fd ff81 	bl	80004d8 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4690      	mov	r8, r2
 80025dc:	4699      	mov	r9, r3
 80025de:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <pid_timer+0x4c8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff0e 	bl	8000404 <__aeabi_i2d>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4640      	mov	r0, r8
 80025ee:	4649      	mov	r1, r9
 80025f0:	f7fd ff72 	bl	80004d8 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4620      	mov	r0, r4
 80025fa:	4629      	mov	r1, r5
 80025fc:	f7fd fdb6 	bl	800016c <__adddf3>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f7fe f978 	bl	80008fc <__aeabi_d2iz>
 800260c:	4603      	mov	r3, r0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
		// ensure control value is within limits
		l_ctrl = clamp_val(abs(l_ctrl), 20, 80);// constrain to max 80 % PWM since its a 6V motor at 12V
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	bfb8      	it	lt
 8002616:	425b      	neglt	r3, r3
 8002618:	2250      	movs	r2, #80	; 0x50
 800261a:	2114      	movs	r1, #20
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fec3 	bl	80013a8 <clamp_val>
 8002622:	6278      	str	r0, [r7, #36]	; 0x24
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "PID L %d \t %d \t %d \t %d\n", lPosDesired, adc_value[6],error, l_ctrl), 100);
		// move motors
		if(error>lPosDelta)
 8002624:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <pid_timer+0x4d0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	429a      	cmp	r2, r3
 800262c:	dd03      	ble.n	8002636 <pid_timer+0x332>
		{
			//forward
			move_lf(l_ctrl);
 800262e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002630:	f7fe fd00 	bl	8001034 <move_lf>
 8002634:	e014      	b.n	8002660 <pid_timer+0x35c>
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE FWD %d\n", 1), 100);
		}
		else if(error<(-1*lPosDelta))
 8002636:	4b67      	ldr	r3, [pc, #412]	; (80027d4 <pid_timer+0x4d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	425b      	negs	r3, r3
 800263c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263e:	429a      	cmp	r2, r3
 8002640:	da03      	bge.n	800264a <pid_timer+0x346>
		{
			move_lb(l_ctrl);
 8002642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002644:	f7fe fd30 	bl	80010a8 <move_lb>
 8002648:	e00a      	b.n	8002660 <pid_timer+0x35c>
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE BACK %d\n", 1), 100);
		}
		else
		{
			brake_lf();
 800264a:	f7fe fc81 	bl	8000f50 <brake_lf>
			l_error_integral = l_error_prev;
 800264e:	4b5c      	ldr	r3, [pc, #368]	; (80027c0 <pid_timer+0x4bc>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	4959      	ldr	r1, [pc, #356]	; (80027bc <pid_timer+0x4b8>)
 8002656:	e9c1 2300 	strd	r2, r3, [r1]
			lPid=0;
 800265a:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <pid_timer+0x4b0>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
		//	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "REACHED L %d \t %d \t %d\n", lPosDesired, l_ctrl, error), 100);

		}
	}
	//PID position control for RFinger
	if(rPid==1)
 8002660:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <pid_timer+0x4d4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	f040 80d2 	bne.w	800280e <pid_timer+0x50a>
	{
		// get the commanded position
		// get current position
		// calculate error
		int error = rPosDesired - adc_value[5];
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <pid_timer+0x4d8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4b49      	ldr	r3, [pc, #292]	; (8002798 <pid_timer+0x494>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	623b      	str	r3, [r7, #32]
		r_error_integral = r_error_integral + error;
 8002678:	6a38      	ldr	r0, [r7, #32]
 800267a:	f7fd fec3 	bl	8000404 <__aeabi_i2d>
 800267e:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <pid_timer+0x4dc>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	f7fd fd72 	bl	800016c <__adddf3>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4954      	ldr	r1, [pc, #336]	; (80027e0 <pid_timer+0x4dc>)
 800268e:	e9c1 2300 	strd	r2, r3, [r1]
		int r_error_derivative = error  - r_error_prev;
 8002692:	6a38      	ldr	r0, [r7, #32]
 8002694:	f7fd feb6 	bl	8000404 <__aeabi_i2d>
 8002698:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <pid_timer+0x4e0>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd fd63 	bl	8000168 <__aeabi_dsub>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe f927 	bl	80008fc <__aeabi_d2iz>
 80026ae:	4603      	mov	r3, r0
 80026b0:	61fb      	str	r3, [r7, #28]
		// calculate control value
		int r_ctrl   = (r_Kp * error) + ((r_Kd/pid_time_period)* r_error_derivative) + (r_Ki*r_error_integral*pid_time_period);
 80026b2:	6a38      	ldr	r0, [r7, #32]
 80026b4:	f7fd fea6 	bl	8000404 <__aeabi_i2d>
 80026b8:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <pid_timer+0x4e4>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fd ff0b 	bl	80004d8 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4690      	mov	r8, r2
 80026c8:	4699      	mov	r9, r3
 80026ca:	4b48      	ldr	r3, [pc, #288]	; (80027ec <pid_timer+0x4e8>)
 80026cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026d0:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <pid_timer+0x4c8>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd fe95 	bl	8000404 <__aeabi_i2d>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4620      	mov	r0, r4
 80026e0:	4629      	mov	r1, r5
 80026e2:	f7fe f823 	bl	800072c <__aeabi_ddiv>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4614      	mov	r4, r2
 80026ec:	461d      	mov	r5, r3
 80026ee:	69f8      	ldr	r0, [r7, #28]
 80026f0:	f7fd fe88 	bl	8000404 <__aeabi_i2d>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4620      	mov	r0, r4
 80026fa:	4629      	mov	r1, r5
 80026fc:	f7fd feec 	bl	80004d8 <__aeabi_dmul>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4640      	mov	r0, r8
 8002706:	4649      	mov	r1, r9
 8002708:	f7fd fd30 	bl	800016c <__adddf3>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4614      	mov	r4, r2
 8002712:	461d      	mov	r5, r3
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <pid_timer+0x4ec>)
 8002716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <pid_timer+0x4dc>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fd feda 	bl	80004d8 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4690      	mov	r8, r2
 800272a:	4699      	mov	r9, r3
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <pid_timer+0x4c8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fe67 	bl	8000404 <__aeabi_i2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4640      	mov	r0, r8
 800273c:	4649      	mov	r1, r9
 800273e:	f7fd fecb 	bl	80004d8 <__aeabi_dmul>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4620      	mov	r0, r4
 8002748:	4629      	mov	r1, r5
 800274a:	f7fd fd0f 	bl	800016c <__adddf3>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe f8d1 	bl	80008fc <__aeabi_d2iz>
 800275a:	4603      	mov	r3, r0
 800275c:	61bb      	str	r3, [r7, #24]
		// ensure control value is within limits
		r_ctrl = clamp_val(abs(r_ctrl), 20, 80);// constrain to max 80 % PWM since its a 6V motor at 12V
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	bfb8      	it	lt
 8002764:	425b      	neglt	r3, r3
 8002766:	2250      	movs	r2, #80	; 0x50
 8002768:	2114      	movs	r1, #20
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fe1c 	bl	80013a8 <clamp_val>
 8002770:	61b8      	str	r0, [r7, #24]
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "PID L %d \t %d \t %d \t %d\n", lPosDesired, adc_value[6],error, l_ctrl), 100);
		// move motors
		if(error>rPosDelta)
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <pid_timer+0x4f0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a3a      	ldr	r2, [r7, #32]
 8002778:	429a      	cmp	r2, r3
 800277a:	dd03      	ble.n	8002784 <pid_timer+0x480>
		{
			//forward
			move_rf(r_ctrl);
 800277c:	69b8      	ldr	r0, [r7, #24]
 800277e:	f7fe fccd 	bl	800111c <move_rf>
 8002782:	e044      	b.n	800280e <pid_timer+0x50a>
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE FWD %d\n", 1), 100);
		}
		else if(error<(-1*rPosDelta))
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <pid_timer+0x4f0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	425b      	negs	r3, r3
 800278a:	6a3a      	ldr	r2, [r7, #32]
 800278c:	429a      	cmp	r2, r3
 800278e:	da33      	bge.n	80027f8 <pid_timer+0x4f4>
		{
			move_rb(r_ctrl);
 8002790:	69b8      	ldr	r0, [r7, #24]
 8002792:	f7fe fcfd 	bl	8001190 <move_rb>
 8002796:	e03a      	b.n	800280e <pid_timer+0x50a>
 8002798:	200018d8 	.word	0x200018d8
 800279c:	20000014 	.word	0x20000014
 80027a0:	200007e4 	.word	0x200007e4
 80027a4:	2000001c 	.word	0x2000001c
 80027a8:	20001ac8 	.word	0x20001ac8
 80027ac:	2000199c 	.word	0x2000199c
 80027b0:	40010c00 	.word	0x40010c00
 80027b4:	200007e8 	.word	0x200007e8
 80027b8:	20000808 	.word	0x20000808
 80027bc:	20000818 	.word	0x20000818
 80027c0:	20000810 	.word	0x20000810
 80027c4:	20000058 	.word	0x20000058
 80027c8:	20000060 	.word	0x20000060
 80027cc:	20000050 	.word	0x20000050
 80027d0:	20000068 	.word	0x20000068
 80027d4:	20000048 	.word	0x20000048
 80027d8:	200007ec 	.word	0x200007ec
 80027dc:	2000080c 	.word	0x2000080c
 80027e0:	20000828 	.word	0x20000828
 80027e4:	20000820 	.word	0x20000820
 80027e8:	20000070 	.word	0x20000070
 80027ec:	20000078 	.word	0x20000078
 80027f0:	20000080 	.word	0x20000080
 80027f4:	2000004c 	.word	0x2000004c
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE BACK %d\n", 1), 100);
		}
		else
		{
			brake_rf();
 80027f8:	f7fe fbbc 	bl	8000f74 <brake_rf>
			r_error_integral = r_error_prev;
 80027fc:	4b81      	ldr	r3, [pc, #516]	; (8002a04 <pid_timer+0x700>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	4981      	ldr	r1, [pc, #516]	; (8002a08 <pid_timer+0x704>)
 8002804:	e9c1 2300 	strd	r2, r3, [r1]
			rPid=0;
 8002808:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <pid_timer+0x708>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

		}
	}

	// control of gripper motors
	if(gPid==2)
 800280e:	4b80      	ldr	r3, [pc, #512]	; (8002a10 <pid_timer+0x70c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d126      	bne.n	8002864 <pid_timer+0x560>
	{  // for mode in which gripper close, check for current and hold position if current> threshold
		// check for current
		if(adc_value[2]>gForceThres)
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <pid_timer+0x710>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4a7f      	ldr	r2, [pc, #508]	; (8002a18 <pid_timer+0x714>)
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	4293      	cmp	r3, r2
 8002820:	d90d      	bls.n	800283e <pid_timer+0x53a>
		{	// verify again after a short delay
			osDelay(2);
 8002822:	2002      	movs	r0, #2
 8002824:	f004 f97f 	bl	8006b26 <osDelay>
			if(adc_value[2]>gForceThres)
 8002828:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <pid_timer+0x710>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a7a      	ldr	r2, [pc, #488]	; (8002a18 <pid_timer+0x714>)
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	4293      	cmp	r3, r2
 8002832:	d904      	bls.n	800283e <pid_timer+0x53a>
			{
				// brake
				brake_gripper();
 8002834:	f7fe fbd0 	bl	8000fd8 <brake_gripper>
				gPid = 0;
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <pid_timer+0x70c>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
			}

		}
		// check for timeout
		if( abs(HAL_GetTick()-startTick)>gTimeOut)
 800283e:	f001 f859 	bl	80038f4 <HAL_GetTick>
 8002842:	4603      	mov	r3, r0
 8002844:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <pid_timer+0x718>)
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800284e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002852:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <pid_timer+0x71c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	dd04      	ble.n	8002864 <pid_timer+0x560>
		{
			// brake
			brake_gripper();
 800285a:	f7fe fbbd 	bl	8000fd8 <brake_gripper>
			gPid = 0;
 800285e:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <pid_timer+0x70c>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
		}
	}
	 if(gPid==3)
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <pid_timer+0x70c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d112      	bne.n	8002892 <pid_timer+0x58e>
	{ // for velocity move mode, no current checking --<<< WARNING
		// check for timeout
				if( abs(HAL_GetTick()-startTick)>gTimeOut)
 800286c:	f001 f842 	bl	80038f4 <HAL_GetTick>
 8002870:	4603      	mov	r3, r0
 8002872:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <pid_timer+0x718>)
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800287c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002880:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <pid_timer+0x71c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	dd04      	ble.n	8002892 <pid_timer+0x58e>
				{
					// brake
					brake_gripper();
 8002888:	f7fe fba6 	bl	8000fd8 <brake_gripper>
					gPid = 0;
 800288c:	4b60      	ldr	r3, [pc, #384]	; (8002a10 <pid_timer+0x70c>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
				}
	}
	 if(gPid==4)
 8002892:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <pid_timer+0x70c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b04      	cmp	r3, #4
 8002898:	f040 80ae 	bne.w	80029f8 <pid_timer+0x6f4>
	 	 {
		 int gripper_gap = (M1MaxPos-adc_value[2])+(M2MaxPos-adc_value[3])-(M1MinPos+M2MinPos);
 800289c:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <pid_timer+0x720>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <pid_timer+0x710>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	1ad2      	subs	r2, r2, r3
 80028a8:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <pid_timer+0x724>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <pid_timer+0x710>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	1acb      	subs	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	4a5d      	ldr	r2, [pc, #372]	; (8002a2c <pid_timer+0x728>)
 80028b8:	6811      	ldr	r1, [r2, #0]
 80028ba:	4a5d      	ldr	r2, [pc, #372]	; (8002a30 <pid_timer+0x72c>)
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	440a      	add	r2, r1
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
	 		 int gap_error = gripperGapcmd - gripper_gap;
 80028c4:	4b5b      	ldr	r3, [pc, #364]	; (8002a34 <pid_timer+0x730>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	613b      	str	r3, [r7, #16]
	 		// TODO  - implement PID
	 		 g_error_integral = g_error_integral + gap_error;
 80028ce:	6938      	ldr	r0, [r7, #16]
 80028d0:	f7fd fd98 	bl	8000404 <__aeabi_i2d>
 80028d4:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <pid_timer+0x734>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fd fc47 	bl	800016c <__adddf3>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4955      	ldr	r1, [pc, #340]	; (8002a38 <pid_timer+0x734>)
 80028e4:	e9c1 2300 	strd	r2, r3, [r1]
	 		 		int g_error_derivative = gap_error  - g_error_prev;
 80028e8:	6938      	ldr	r0, [r7, #16]
 80028ea:	f7fd fd8b 	bl	8000404 <__aeabi_i2d>
 80028ee:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <pid_timer+0x738>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fc38 	bl	8000168 <__aeabi_dsub>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fd fffc 	bl	80008fc <__aeabi_d2iz>
 8002904:	4603      	mov	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]
	 		 		// calculate control value
	 		 		int g_ctrl   = (g_Kp * gap_error) + ((g_Kd/pid_time_period)* g_error_derivative) + (g_Ki*g_error_integral*pid_time_period);
 8002908:	6938      	ldr	r0, [r7, #16]
 800290a:	f7fd fd7b 	bl	8000404 <__aeabi_i2d>
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <pid_timer+0x73c>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fde0 	bl	80004d8 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4690      	mov	r8, r2
 800291e:	4699      	mov	r9, r3
 8002920:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <pid_timer+0x740>)
 8002922:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002926:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <pid_timer+0x744>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fd6a 	bl	8000404 <__aeabi_i2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4620      	mov	r0, r4
 8002936:	4629      	mov	r1, r5
 8002938:	f7fd fef8 	bl	800072c <__aeabi_ddiv>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4614      	mov	r4, r2
 8002942:	461d      	mov	r5, r3
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7fd fd5d 	bl	8000404 <__aeabi_i2d>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4620      	mov	r0, r4
 8002950:	4629      	mov	r1, r5
 8002952:	f7fd fdc1 	bl	80004d8 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4640      	mov	r0, r8
 800295c:	4649      	mov	r1, r9
 800295e:	f7fd fc05 	bl	800016c <__adddf3>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4614      	mov	r4, r2
 8002968:	461d      	mov	r5, r3
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <pid_timer+0x748>)
 800296c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002970:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <pid_timer+0x734>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fdaf 	bl	80004d8 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <pid_timer+0x744>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fd3c 	bl	8000404 <__aeabi_i2d>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4640      	mov	r0, r8
 8002992:	4649      	mov	r1, r9
 8002994:	f7fd fda0 	bl	80004d8 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4620      	mov	r0, r4
 800299e:	4629      	mov	r1, r5
 80029a0:	f7fd fbe4 	bl	800016c <__adddf3>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	f7fd ffa6 	bl	80008fc <__aeabi_d2iz>
 80029b0:	4603      	mov	r3, r0
 80029b2:	60bb      	str	r3, [r7, #8]

	 		 		g_ctrl = clamp_val(abs(g_ctrl), 75, 100);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bfb8      	it	lt
 80029ba:	425b      	neglt	r3, r3
 80029bc:	2264      	movs	r2, #100	; 0x64
 80029be:	214b      	movs	r1, #75	; 0x4b
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fcf1 	bl	80013a8 <clamp_val>
 80029c6:	60b8      	str	r0, [r7, #8]
	 		 		if(gap_error> gripperGapDelta)
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <pid_timer+0x74c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	dd03      	ble.n	80029da <pid_timer+0x6d6>
	 		 		{
	 		 			open_gripper(g_ctrl);
 80029d2:	68b8      	ldr	r0, [r7, #8]
 80029d4:	f7fe fa28 	bl	8000e28 <open_gripper>
	 		 			brake_gripper();
	 		 			gPid = 0;
	 		 		}
	 	 }
  /* USER CODE END pid_timer */
}
 80029d8:	e00e      	b.n	80029f8 <pid_timer+0x6f4>
	 		 		else if(gap_error<(-1*gripperGapDelta))
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <pid_timer+0x74c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	425b      	negs	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	da03      	bge.n	80029ee <pid_timer+0x6ea>
	 		 			close_gripper(g_ctrl);
 80029e6:	68b8      	ldr	r0, [r7, #8]
 80029e8:	f7fe fa68 	bl	8000ebc <close_gripper>
}
 80029ec:	e004      	b.n	80029f8 <pid_timer+0x6f4>
	 		 			brake_gripper();
 80029ee:	f7fe faf3 	bl	8000fd8 <brake_gripper>
	 		 			gPid = 0;
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <pid_timer+0x70c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
}
 80029f8:	bf00      	nop
 80029fa:	3730      	adds	r7, #48	; 0x30
 80029fc:	46bd      	mov	sp, r7
 80029fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a02:	bf00      	nop
 8002a04:	20000820 	.word	0x20000820
 8002a08:	20000828 	.word	0x20000828
 8002a0c:	200007ec 	.word	0x200007ec
 8002a10:	200007f0 	.word	0x200007f0
 8002a14:	200018d8 	.word	0x200018d8
 8002a18:	20000830 	.word	0x20000830
 8002a1c:	20000834 	.word	0x20000834
 8002a20:	20000088 	.word	0x20000088
 8002a24:	20000014 	.word	0x20000014
 8002a28:	2000001c 	.word	0x2000001c
 8002a2c:	20000010 	.word	0x20000010
 8002a30:	20000018 	.word	0x20000018
 8002a34:	200007f4 	.word	0x200007f4
 8002a38:	20000800 	.word	0x20000800
 8002a3c:	200007f8 	.word	0x200007f8
 8002a40:	20000028 	.word	0x20000028
 8002a44:	20000030 	.word	0x20000030
 8002a48:	20000050 	.word	0x20000050
 8002a4c:	20000038 	.word	0x20000038
 8002a50:	20000020 	.word	0x20000020

08002a54 <status_update_timer>:

/* status_update_timer function */
void status_update_timer(void const * argument)
{
 8002a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a56:	b0dd      	sub	sp, #372	; 0x174
 8002a58:	af18      	add	r7, sp, #96	; 0x60
 8002a5a:	6578      	str	r0, [r7, #84]	; 0x54
	 *  M1-2_current, M1Pos, M2Pos, RFPos, LFPos, irsens_left[10], irsens_right[10]
	 *
	 */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

	int gripper_gap = (M1MaxPos-adc_value[2])+(M2MaxPos-adc_value[3])-(M1MinPos+M2MinPos);
 8002a5c:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <status_update_timer+0x180>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <status_update_timer+0x184>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	1ad2      	subs	r2, r2, r3
 8002a68:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <status_update_timer+0x188>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4b5a      	ldr	r3, [pc, #360]	; (8002bd8 <status_update_timer+0x184>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	1acb      	subs	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	4a5a      	ldr	r2, [pc, #360]	; (8002be0 <status_update_timer+0x18c>)
 8002a78:	6811      	ldr	r1, [r2, #0]
 8002a7a:	4a5a      	ldr	r2, [pc, #360]	; (8002be4 <status_update_timer+0x190>)
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	440a      	add	r2, r1
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	// 3600 when closed
	//6456 when fully open
	//int gmin = (M1MinPos+M2MinPos); // TODO - can we estimate this from zero position calibration
	//int gmax = (M1MaxPos-M1MinPos)+(M2MaxPos-M2MinPos)-(M1MinPos+M2MinPos);
gripper_gap =scale_val(gripper_gap, gmin, gmax, 0, 999);
 8002a86:	4b58      	ldr	r3, [pc, #352]	; (8002be8 <status_update_timer+0x194>)
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	4b58      	ldr	r3, [pc, #352]	; (8002bec <status_update_timer+0x198>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8002a9a:	f7fe fc39 	bl	8001310 <scale_val>
 8002a9e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	char MSG[180];

		sprintf(MSG, "s\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\te\n",
 8002aa2:	4b4d      	ldr	r3, [pc, #308]	; (8002bd8 <status_update_timer+0x184>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <status_update_timer+0x184>)
 8002aaa:	68d9      	ldr	r1, [r3, #12]
 8002aac:	64f9      	str	r1, [r7, #76]	; 0x4c
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <status_update_timer+0x184>)
 8002ab0:	6918      	ldr	r0, [r3, #16]
 8002ab2:	64b8      	str	r0, [r7, #72]	; 0x48
				adc_value[2], adc_value[3], adc_value[4], scale_val(adc_value[5],RFMinPos,RFMaxPos,0,200), scale_val(adc_value[6],LFMinPos,LFMaxPos,0,200),
 8002ab4:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <status_update_timer+0x184>)
 8002ab6:	695b      	ldr	r3, [r3, #20]
		sprintf(MSG, "s\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\te\n",
 8002ab8:	4618      	mov	r0, r3
 8002aba:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <status_update_timer+0x19c>)
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	4b4d      	ldr	r3, [pc, #308]	; (8002bf4 <status_update_timer+0x1a0>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	23c8      	movs	r3, #200	; 0xc8
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f7fe fc22 	bl	8001310 <scale_val>
 8002acc:	6478      	str	r0, [r7, #68]	; 0x44
				adc_value[2], adc_value[3], adc_value[4], scale_val(adc_value[5],RFMinPos,RFMaxPos,0,200), scale_val(adc_value[6],LFMinPos,LFMaxPos,0,200),
 8002ace:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <status_update_timer+0x184>)
 8002ad0:	699b      	ldr	r3, [r3, #24]
		sprintf(MSG, "s\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\te\n",
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <status_update_timer+0x1a4>)
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <status_update_timer+0x1a8>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	23c8      	movs	r3, #200	; 0xc8
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f7fe fc15 	bl	8001310 <scale_val>
 8002ae6:	6438      	str	r0, [r7, #64]	; 0x40
 8002ae8:	4b45      	ldr	r3, [pc, #276]	; (8002c00 <status_update_timer+0x1ac>)
 8002aea:	681c      	ldr	r4, [r3, #0]
 8002aec:	63fc      	str	r4, [r7, #60]	; 0x3c
 8002aee:	4b44      	ldr	r3, [pc, #272]	; (8002c00 <status_update_timer+0x1ac>)
 8002af0:	685d      	ldr	r5, [r3, #4]
 8002af2:	63bd      	str	r5, [r7, #56]	; 0x38
 8002af4:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <status_update_timer+0x1ac>)
 8002af6:	689e      	ldr	r6, [r3, #8]
 8002af8:	637e      	str	r6, [r7, #52]	; 0x34
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <status_update_timer+0x1ac>)
 8002afc:	68d9      	ldr	r1, [r3, #12]
 8002afe:	6339      	str	r1, [r7, #48]	; 0x30
 8002b00:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <status_update_timer+0x1ac>)
 8002b02:	691e      	ldr	r6, [r3, #16]
 8002b04:	62fe      	str	r6, [r7, #44]	; 0x2c
 8002b06:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <status_update_timer+0x1ac>)
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b0c:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <status_update_timer+0x1ac>)
 8002b0e:	699c      	ldr	r4, [r3, #24]
 8002b10:	627c      	str	r4, [r7, #36]	; 0x24
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <status_update_timer+0x1ac>)
 8002b14:	69dd      	ldr	r5, [r3, #28]
 8002b16:	623d      	str	r5, [r7, #32]
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <status_update_timer+0x1ac>)
 8002b1a:	6a1e      	ldr	r6, [r3, #32]
 8002b1c:	61fe      	str	r6, [r7, #28]
 8002b1e:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <status_update_timer+0x1ac>)
 8002b20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b22:	61b9      	str	r1, [r7, #24]
 8002b24:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <status_update_timer+0x1b0>)
 8002b26:	681e      	ldr	r6, [r3, #0]
 8002b28:	617e      	str	r6, [r7, #20]
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <status_update_timer+0x1b0>)
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	613a      	str	r2, [r7, #16]
 8002b30:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <status_update_timer+0x1b0>)
 8002b32:	6898      	ldr	r0, [r3, #8]
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <status_update_timer+0x1b0>)
 8002b38:	68dc      	ldr	r4, [r3, #12]
 8002b3a:	60bc      	str	r4, [r7, #8]
 8002b3c:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <status_update_timer+0x1b0>)
 8002b3e:	691d      	ldr	r5, [r3, #16]
 8002b40:	607d      	str	r5, [r7, #4]
 8002b42:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <status_update_timer+0x1b0>)
 8002b44:	695d      	ldr	r5, [r3, #20]
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <status_update_timer+0x1b0>)
 8002b48:	699c      	ldr	r4, [r3, #24]
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <status_update_timer+0x1b0>)
 8002b4c:	69d8      	ldr	r0, [r3, #28]
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <status_update_timer+0x1b0>)
 8002b50:	6a19      	ldr	r1, [r3, #32]
 8002b52:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <status_update_timer+0x1b0>)
 8002b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b56:	f107 0658 	add.w	r6, r7, #88	; 0x58
 8002b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8002b60:	9216      	str	r2, [sp, #88]	; 0x58
 8002b62:	9115      	str	r1, [sp, #84]	; 0x54
 8002b64:	9014      	str	r0, [sp, #80]	; 0x50
 8002b66:	9413      	str	r4, [sp, #76]	; 0x4c
 8002b68:	9512      	str	r5, [sp, #72]	; 0x48
 8002b6a:	687d      	ldr	r5, [r7, #4]
 8002b6c:	9511      	str	r5, [sp, #68]	; 0x44
 8002b6e:	68bc      	ldr	r4, [r7, #8]
 8002b70:	9410      	str	r4, [sp, #64]	; 0x40
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	900f      	str	r0, [sp, #60]	; 0x3c
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	920e      	str	r2, [sp, #56]	; 0x38
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	910c      	str	r1, [sp, #48]	; 0x30
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b86:	6a3d      	ldr	r5, [r7, #32]
 8002b88:	950a      	str	r5, [sp, #40]	; 0x28
 8002b8a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002b8c:	9409      	str	r4, [sp, #36]	; 0x24
 8002b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b90:	9208      	str	r2, [sp, #32]
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	9307      	str	r3, [sp, #28]
 8002b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b98:	9106      	str	r1, [sp, #24]
 8002b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b9c:	9205      	str	r2, [sp, #20]
 8002b9e:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8002ba0:	9504      	str	r5, [sp, #16]
 8002ba2:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002ba4:	9403      	str	r4, [sp, #12]
 8002ba6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8002ba8:	9402      	str	r4, [sp, #8]
 8002baa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002bac:	9401      	str	r4, [sp, #4]
 8002bae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002bb0:	9000      	str	r0, [sp, #0]
 8002bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bb6:	4914      	ldr	r1, [pc, #80]	; (8002c08 <status_update_timer+0x1b4>)
 8002bb8:	4630      	mov	r0, r6
 8002bba:	f007 f9b3 	bl	8009f24 <siprintf>
					irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6],irdata_fr[7],irdata_fr[8],irdata_fr[9],
					irdata_fl[0],irdata_fl[1], irdata_fl[2], irdata_fl[3], irdata_fl[4], irdata_fl[5], irdata_fl[6],irdata_fl[7],irdata_fl[8],irdata_fl[9], gripper_gap);



	sendData(MSG);
 8002bbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe fc08 	bl	80013d8 <sendData>
	//HAL_UART_Transmit_IT(&huart1, MSG, strlen(MSG));


  /* USER CODE END status_update_timer */
}
 8002bc8:	bf00      	nop
 8002bca:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000014 	.word	0x20000014
 8002bd8:	200018d8 	.word	0x200018d8
 8002bdc:	2000001c 	.word	0x2000001c
 8002be0:	20000010 	.word	0x20000010
 8002be4:	20000018 	.word	0x20000018
 8002be8:	20000040 	.word	0x20000040
 8002bec:	20000044 	.word	0x20000044
 8002bf0:	2000000c 	.word	0x2000000c
 8002bf4:	20000008 	.word	0x20000008
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20001acc 	.word	0x20001acc
 8002c04:	200018f4 	.word	0x200018f4
 8002c08:	0800a920 	.word	0x0800a920

08002c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c1e:	f000 fe57 	bl	80038d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40000400 	.word	0x40000400

08002c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_MspInit+0x68>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_MspInit+0x68>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6193      	str	r3, [r2, #24]
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_MspInit+0x68>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_MspInit+0x68>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <HAL_MspInit+0x68>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	61d3      	str	r3, [r2, #28]
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_MspInit+0x68>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	210f      	movs	r1, #15
 8002c76:	f06f 0001 	mvn.w	r0, #1
 8002c7a:	f001 fada 	bl	8004232 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_MspInit+0x6c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_MspInit+0x6c>)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010000 	.word	0x40010000

08002cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_ADC_MspInit+0xbc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d149      	bne.n	8002d60 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <HAL_ADC_MspInit+0xc0>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	4a26      	ldr	r2, [pc, #152]	; (8002d6c <HAL_ADC_MspInit+0xc0>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6193      	str	r3, [r2, #24]
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_ADC_MspInit+0xc0>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce4:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <HAL_ADC_MspInit+0xc0>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <HAL_ADC_MspInit+0xc0>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6193      	str	r3, [r2, #24]
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_ADC_MspInit+0xc0>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002cfc:	23ff      	movs	r3, #255	; 0xff
 8002cfe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d00:	2303      	movs	r3, #3
 8002d02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4819      	ldr	r0, [pc, #100]	; (8002d70 <HAL_ADC_MspInit+0xc4>)
 8002d0c:	f001 fcec 	bl	80046e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d12:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_ADC_MspInit+0xcc>)
 8002d14:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d44:	480b      	ldr	r0, [pc, #44]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d46:	f001 fa9f 	bl	8004288 <HAL_DMA_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002d50:	f7ff ff6e 	bl	8002c30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d58:	621a      	str	r2, [r3, #32]
 8002d5a:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_ADC_MspInit+0xc8>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d60:	bf00      	nop
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40012400 	.word	0x40012400
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010800 	.word	0x40010800
 8002d74:	20001954 	.word	0x20001954
 8002d78:	40020008 	.word	0x40020008

08002d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a5c      	ldr	r2, [pc, #368]	; (8002efc <HAL_TIM_Base_MspInit+0x180>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10c      	bne.n	8002da8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d8e:	4b5c      	ldr	r3, [pc, #368]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	4a5b      	ldr	r2, [pc, #364]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d98:	6193      	str	r3, [r2, #24]
 8002d9a:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002da6:	e0a4      	b.n	8002ef2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	f040 808e 	bne.w	8002ed0 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002db4:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	4a51      	ldr	r2, [pc, #324]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	61d3      	str	r3, [r2, #28]
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002dce:	4a4e      	ldr	r2, [pc, #312]	; (8002f08 <HAL_TIM_Base_MspInit+0x18c>)
 8002dd0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd2:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd8:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002de4:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dec:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002df6:	2220      	movs	r2, #32
 8002df8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002dfc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002e00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002e02:	4840      	ldr	r0, [pc, #256]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002e04:	f001 fa40 	bl	8004288 <HAL_DMA_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_TIM_Base_MspInit+0x96>
      Error_Handler();
 8002e0e:	f7ff ff0f 	bl	8002c30 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
 8002e18:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
 8002e24:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <HAL_TIM_Base_MspInit+0x188>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002e2a:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e2c:	4a38      	ldr	r2, [pc, #224]	; (8002f10 <HAL_TIM_Base_MspInit+0x194>)
 8002e2e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e30:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e32:	2210      	movs	r2, #16
 8002e34:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e36:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002e3c:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e42:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e48:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e50:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002e52:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e54:	2220      	movs	r2, #32
 8002e56:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e58:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e5a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002e5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002e60:	482a      	ldr	r0, [pc, #168]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e62:	f001 fa11 	bl	8004288 <HAL_DMA_Init>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_TIM_Base_MspInit+0xf4>
      Error_Handler();
 8002e6c:	f7ff fee0 	bl	8002c30 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
 8002e76:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <HAL_TIM_Base_MspInit+0x190>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_up.Instance = DMA1_Channel2;
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002e7e:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <HAL_TIM_Base_MspInit+0x19c>)
 8002e80:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002e84:	2210      	movs	r2, #16
 8002e86:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e88:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 8002e8e:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e94:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea2:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002eac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002eb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8002eb2:	4818      	ldr	r0, [pc, #96]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002eb4:	f001 f9e8 	bl	8004288 <HAL_DMA_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_TIM_Base_MspInit+0x146>
      Error_Handler();
 8002ebe:	f7ff feb7 	bl	8002c30 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002ec6:	621a      	str	r2, [r3, #32]
 8002ec8:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_TIM_Base_MspInit+0x198>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002ece:	e010      	b.n	8002ef2 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a11      	ldr	r2, [pc, #68]	; (8002f1c <HAL_TIM_Base_MspInit+0x1a0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	61d3      	str	r3, [r2, #28]
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_TIM_Base_MspInit+0x184>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	20001890 	.word	0x20001890
 8002f08:	40020080 	.word	0x40020080
 8002f0c:	200016b4 	.word	0x200016b4
 8002f10:	40020058 	.word	0x40020058
 8002f14:	20001844 	.word	0x20001844
 8002f18:	4002001c 	.word	0x4002001c
 8002f1c:	40000800 	.word	0x40000800

08002f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <HAL_TIM_MspPostInit+0x98>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d119      	bne.n	8002f74 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f40:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <HAL_TIM_MspPostInit+0x9c>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <HAL_TIM_MspPostInit+0x9c>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	6193      	str	r3, [r2, #24]
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_TIM_MspPostInit+0x9c>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f62:	2302      	movs	r3, #2
 8002f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4814      	ldr	r0, [pc, #80]	; (8002fc0 <HAL_TIM_MspPostInit+0xa0>)
 8002f6e:	f001 fbbb 	bl	80046e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f72:	e01d      	b.n	8002fb0 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <HAL_TIM_MspPostInit+0xa4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d118      	bne.n	8002fb0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <HAL_TIM_MspPostInit+0x9c>)
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <HAL_TIM_MspPostInit+0x9c>)
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	6193      	str	r3, [r2, #24]
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_TIM_MspPostInit+0x9c>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002f96:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4807      	ldr	r0, [pc, #28]	; (8002fc8 <HAL_TIM_MspPostInit+0xa8>)
 8002fac:	f001 fb9c 	bl	80046e8 <HAL_GPIO_Init>
}
 8002fb0:	bf00      	nop
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40010800 	.word	0x40010800
 8002fc4:	40000800 	.word	0x40000800
 8002fc8:	40010c00 	.word	0x40010c00

08002fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	; 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	201d      	movs	r0, #29
 8002fe2:	f001 f926 	bl	8004232 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fe6:	201d      	movs	r0, #29
 8002fe8:	f001 f93f 	bl	800426a <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_InitTick+0xa0>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	; (800306c <HAL_InitTick+0xa0>)
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	61d3      	str	r3, [r2, #28]
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_InitTick+0xa0>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003004:	f107 0210 	add.w	r2, r7, #16
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f002 f8ee 	bl	80051f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003014:	f002 f8d8 	bl	80051c8 <HAL_RCC_GetPCLK1Freq>
 8003018:	4603      	mov	r3, r0
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	4a13      	ldr	r2, [pc, #76]	; (8003070 <HAL_InitTick+0xa4>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0c9b      	lsrs	r3, r3, #18
 8003028:	3b01      	subs	r3, #1
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_InitTick+0xa8>)
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_InitTick+0xac>)
 8003030:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_InitTick+0xa8>)
 8003034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003038:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800303a:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <HAL_InitTick+0xa8>)
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_InitTick+0xa8>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_InitTick+0xa8>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800304c:	4809      	ldr	r0, [pc, #36]	; (8003074 <HAL_InitTick+0xa8>)
 800304e:	f002 f9d3 	bl	80053f8 <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8003058:	4806      	ldr	r0, [pc, #24]	; (8003074 <HAL_InitTick+0xa8>)
 800305a:	f002 fa67 	bl	800552c <HAL_TIM_Base_Start_IT>
 800305e:	4603      	mov	r3, r0
 8003060:	e000      	b.n	8003064 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
}
 8003064:	4618      	mov	r0, r3
 8003066:	3730      	adds	r7, #48	; 0x30
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	431bde83 	.word	0x431bde83
 8003074:	20001af4 	.word	0x20001af4
 8003078:	40000400 	.word	0x40000400

0800307c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308c:	e7fe      	b.n	800308c <HardFault_Handler+0x4>

0800308e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003092:	e7fe      	b.n	8003092 <MemManage_Handler+0x4>

08003094 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003098:	e7fe      	b.n	8003098 <BusFault_Handler+0x4>

0800309a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800309a:	b480      	push	{r7}
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309e:	e7fe      	b.n	800309e <UsageFault_Handler+0x4>

080030a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <DMA1_Channel1_IRQHandler+0x10>)
 80030b2:	f001 f9e5 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20001954 	.word	0x20001954

080030c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <DMA1_Channel2_IRQHandler+0x10>)
 80030c6:	f001 f9db 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20001844 	.word	0x20001844

080030d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <DMA1_Channel5_IRQHandler+0x10>)
 80030da:	f001 f9d1 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200016b4 	.word	0x200016b4

080030e8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <DMA1_Channel7_IRQHandler+0x10>)
 80030ee:	f001 f9c7 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20001890 	.word	0x20001890

080030fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <TIM3_IRQHandler+0x10>)
 8003102:	f002 fb5f 	bl	80057c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20001af4 	.word	0x20001af4

08003110 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	LL_USART1_IRQHandler();
 8003114:	f7fe f9a8 	bl	8001468 <LL_USART1_IRQHandler>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}

0800311c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <_sbrk+0x5c>)
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <_sbrk+0x60>)
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <_sbrk+0x64>)
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <_sbrk+0x68>)
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800314c:	f006 feaa 	bl	8009ea4 <__errno>
 8003150:	4603      	mov	r3, r0
 8003152:	220c      	movs	r2, #12
 8003154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315a:	e009      	b.n	8003170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <_sbrk+0x64>)
 800316c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20005000 	.word	0x20005000
 800317c:	00000400 	.word	0x00000400
 8003180:	20000838 	.word	0x20000838
 8003184:	20001ca8 	.word	0x20001ca8

08003188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <ws2812_timer2_init>:
    WS2812_CH14_GPIO,
    WS2812_CH15_GPIO
};

static void ws2812_timer2_init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800319a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a8:	f107 0320 	add.w	r3, r7, #32
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
 80031c0:	615a      	str	r2, [r3, #20]
 80031c2:	619a      	str	r2, [r3, #24]

    htimer2.Instance = TIM2;
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <ws2812_timer2_init+0xc8>)
 80031c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031ca:	601a      	str	r2, [r3, #0]
    htimer2.Init.Prescaler = 0;
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <ws2812_timer2_init+0xc8>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <ws2812_timer2_init+0xc8>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 80031d8:	4b20      	ldr	r3, [pc, #128]	; (800325c <ws2812_timer2_init+0xc8>)
 80031da:	2246      	movs	r2, #70	; 0x46
 80031dc:	60da      	str	r2, [r3, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <ws2812_timer2_init+0xc8>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <ws2812_timer2_init+0xc8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer2);
 80031ea:	481c      	ldr	r0, [pc, #112]	; (800325c <ws2812_timer2_init+0xc8>)
 80031ec:	f002 f904 	bl	80053f8 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 80031f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031fa:	4619      	mov	r1, r3
 80031fc:	4817      	ldr	r0, [pc, #92]	; (800325c <ws2812_timer2_init+0xc8>)
 80031fe:	f002 fca7 	bl	8005b50 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8003202:	4816      	ldr	r0, [pc, #88]	; (800325c <ws2812_timer2_init+0xc8>)
 8003204:	f002 f9e4 	bl	80055d0 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003208:	2300      	movs	r3, #0
 800320a:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8003210:	f107 0320 	add.w	r3, r7, #32
 8003214:	4619      	mov	r1, r3
 8003216:	4811      	ldr	r0, [pc, #68]	; (800325c <ws2812_timer2_init+0xc8>)
 8003218:	f003 f826 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800321c:	2360      	movs	r3, #96	; 0x60
 800321e:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8003220:	2316      	movs	r3, #22
 8003222:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	2200      	movs	r2, #0
 8003230:	4619      	mov	r1, r3
 8003232:	480a      	ldr	r0, [pc, #40]	; (800325c <ws2812_timer2_init+0xc8>)
 8003234:	f002 fbce 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003238:	2360      	movs	r3, #96	; 0x60
 800323a:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 800323c:	232c      	movs	r3, #44	; 0x2c
 800323e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	2204      	movs	r2, #4
 800324c:	4619      	mov	r1, r3
 800324e:	4803      	ldr	r0, [pc, #12]	; (800325c <ws2812_timer2_init+0xc8>)
 8003250:	f002 fbc0 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
}
 8003254:	bf00      	nop
 8003256:	3738      	adds	r7, #56	; 0x38
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20001c08 	.word	0x20001c08

08003260 <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003268:	4b4c      	ldr	r3, [pc, #304]	; (800339c <ws2812_dma_start+0x13c>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4a4b      	ldr	r2, [pc, #300]	; (800339c <ws2812_dma_start+0x13c>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	61d3      	str	r3, [r2, #28]
 8003274:	4b49      	ldr	r3, [pc, #292]	; (800339c <ws2812_dma_start+0x13c>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_update.Instance = DMA1_Channel2;
 8003280:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <ws2812_dma_start+0x140>)
 8003282:	4a48      	ldr	r2, [pc, #288]	; (80033a4 <ws2812_dma_start+0x144>)
 8003284:	601a      	str	r2, [r3, #0]
    hdma_tim2_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <ws2812_dma_start+0x140>)
 8003288:	2210      	movs	r2, #16
 800328a:	605a      	str	r2, [r3, #4]
    hdma_tim2_update.Init.PeriphInc = DMA_PINC_DISABLE;
 800328c:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <ws2812_dma_start+0x140>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
    hdma_tim2_update.Init.MemInc = DMA_MINC_DISABLE;
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <ws2812_dma_start+0x140>)
 8003294:	2200      	movs	r2, #0
 8003296:	60da      	str	r2, [r3, #12]
    hdma_tim2_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <ws2812_dma_start+0x140>)
 800329a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800329e:	611a      	str	r2, [r3, #16]
    hdma_tim2_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <ws2812_dma_start+0x140>)
 80032a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_update.Init.Mode = DMA_CIRCULAR;
 80032a8:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <ws2812_dma_start+0x140>)
 80032aa:	2220      	movs	r2, #32
 80032ac:	619a      	str	r2, [r3, #24]
    hdma_tim2_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032ae:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <ws2812_dma_start+0x140>)
 80032b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80032b4:	61da      	str	r2, [r3, #28]

    /* TIM2_CH1 Init */
    hdma_tim2_pwm_ch1.Instance = DMA1_Channel5;
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <ws2812_dma_start+0x148>)
 80032b8:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <ws2812_dma_start+0x14c>)
 80032ba:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032bc:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <ws2812_dma_start+0x148>)
 80032be:	2210      	movs	r2, #16
 80032c0:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <ws2812_dma_start+0x148>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80032c8:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <ws2812_dma_start+0x148>)
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ce:	4b36      	ldr	r3, [pc, #216]	; (80033a8 <ws2812_dma_start+0x148>)
 80032d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d4:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <ws2812_dma_start+0x148>)
 80032d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032dc:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch1.Init.Mode = DMA_CIRCULAR;
 80032de:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <ws2812_dma_start+0x148>)
 80032e0:	2220      	movs	r2, #32
 80032e2:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032e4:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <ws2812_dma_start+0x148>)
 80032e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80032ea:	61da      	str	r2, [r3, #28]

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_pwm_ch2.Instance = DMA1_Channel7;
 80032ec:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <ws2812_dma_start+0x150>)
 80032ee:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <ws2812_dma_start+0x154>)
 80032f0:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032f2:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <ws2812_dma_start+0x150>)
 80032f4:	2210      	movs	r2, #16
 80032f6:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f8:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <ws2812_dma_start+0x150>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch2.Init.MemInc = DMA_MINC_DISABLE;
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <ws2812_dma_start+0x150>)
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003304:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <ws2812_dma_start+0x150>)
 8003306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330a:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800330c:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <ws2812_dma_start+0x150>)
 800330e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003312:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch2.Init.Mode = DMA_CIRCULAR;
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <ws2812_dma_start+0x150>)
 8003316:	2220      	movs	r2, #32
 8003318:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <ws2812_dma_start+0x150>)
 800331c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003320:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim2_update);
 8003322:	481f      	ldr	r0, [pc, #124]	; (80033a0 <ws2812_dma_start+0x140>)
 8003324:	f000 ffb0 	bl	8004288 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch1);
 8003328:	481f      	ldr	r0, [pc, #124]	; (80033a8 <ws2812_dma_start+0x148>)
 800332a:	f000 ffad 	bl	8004288 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch2);
 800332e:	4820      	ldr	r0, [pc, #128]	; (80033b0 <ws2812_dma_start+0x150>)
 8003330:	f000 ffaa 	bl	8004288 <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim2_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 8003334:	4920      	ldr	r1, [pc, #128]	; (80033b8 <ws2812_dma_start+0x158>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3310      	adds	r3, #16
 800333a:	461a      	mov	r2, r3
 800333c:	2310      	movs	r3, #16
 800333e:	4818      	ldr	r0, [pc, #96]	; (80033a0 <ws2812_dma_start+0x140>)
 8003340:	f000 fffc 	bl	800433c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_pwm_ch1, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 8003344:	491d      	ldr	r1, [pc, #116]	; (80033bc <ws2812_dma_start+0x15c>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3314      	adds	r3, #20
 800334a:	461a      	mov	r2, r3
 800334c:	2310      	movs	r3, #16
 800334e:	4816      	ldr	r0, [pc, #88]	; (80033a8 <ws2812_dma_start+0x148>)
 8003350:	f000 fff4 	bl	800433c <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim2_pwm_ch2, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 8003354:	4918      	ldr	r1, [pc, #96]	; (80033b8 <ws2812_dma_start+0x158>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3314      	adds	r3, #20
 800335a:	461a      	mov	r2, r3
 800335c:	2310      	movs	r3, #16
 800335e:	4814      	ldr	r0, [pc, #80]	; (80033b0 <ws2812_dma_start+0x150>)
 8003360:	f000 ffec 	bl	800433c <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <ws2812_dma_start+0x160>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <ws2812_dma_start+0x160>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003372:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC1);
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <ws2812_dma_start+0x160>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <ws2812_dma_start+0x160>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC2);
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <ws2812_dma_start+0x160>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <ws2812_dma_start+0x160>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	20001bc4 	.word	0x20001bc4
 80033a4:	4002001c 	.word	0x4002001c
 80033a8:	20001b80 	.word	0x20001b80
 80033ac:	40020058 	.word	0x40020058
 80033b0:	20001b3c 	.word	0x20001b3c
 80033b4:	40020080 	.word	0x40020080
 80033b8:	2000083c 	.word	0x2000083c
 80033bc:	20000840 	.word	0x20000840
 80033c0:	20001c08 	.word	0x20001c08

080033c4 <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    /* If all channels are the same length, we can skip the 'pos' range check, and speed up our
     * inner loop *substantially*
     */

    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	da07      	bge.n	80033e8 <get_channel_byte+0x24>
        return channel->framebuffer[pos] ^ 0xff;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e000      	b.n	80033ea <get_channel_byte+0x26>

    return 0xff;
 80033e8:	23ff      	movs	r3, #255	; 0xff
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 80033f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f8:	b087      	sub	sp, #28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	f04f 0b00 	mov.w	fp, #0
 800340a:	2600      	movs	r6, #0
 800340c:	2500      	movs	r5, #0
 800340e:	2400      	movs	r4, #0
 8003410:	f04f 0a00 	mov.w	sl, #0
 8003414:	f04f 0900 	mov.w	r9, #0
 8003418:	f04f 0800 	mov.w	r8, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffd0 	bl	80033c4 <get_channel_byte>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]
 8003428:	7df8      	ldrb	r0, [r7, #23]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	469e      	mov	lr, r3
 800342e:	46dc      	mov	ip, fp
 8003430:	4651      	mov	r1, sl
 8003432:	464a      	mov	r2, r9
 8003434:	4643      	mov	r3, r8
 8003436:	4680      	mov	r8, r0
 8003438:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 800343c:	f360 0e00 	bfi	lr, r0, #0, #1
 8003440:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8003444:	f360 0c00 	bfi	ip, r0, #0, #1
 8003448:	f3c8 1040 	ubfx	r0, r8, #5, #1
 800344c:	f360 0600 	bfi	r6, r0, #0, #1
 8003450:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8003454:	f360 0500 	bfi	r5, r0, #0, #1
 8003458:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 800345c:	f360 0400 	bfi	r4, r0, #0, #1
 8003460:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8003464:	f360 0100 	bfi	r1, r0, #0, #1
 8003468:	f3c8 0040 	ubfx	r0, r8, #1, #1
 800346c:	f360 0200 	bfi	r2, r0, #0, #1
 8003470:	f3c8 0000 	ubfx	r0, r8, #0, #1
 8003474:	f360 0300 	bfi	r3, r0, #0, #1
 8003478:	fa1f f08e 	uxth.w	r0, lr
 800347c:	6038      	str	r0, [r7, #0]
 800347e:	fa1f fb8c 	uxth.w	fp, ip
 8003482:	b2b6      	uxth	r6, r6
 8003484:	b2ad      	uxth	r5, r5
 8003486:	b2a4      	uxth	r4, r4
 8003488:	fa1f fa81 	uxth.w	sl, r1
 800348c:	fa1f f982 	uxth.w	r9, r2
 8003490:	fa1f f883 	uxth.w	r8, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3308      	adds	r3, #8
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff92 	bl	80033c4 <get_channel_byte>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	4618      	mov	r0, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	469e      	mov	lr, r3
 80034ac:	46dc      	mov	ip, fp
 80034ae:	4651      	mov	r1, sl
 80034b0:	464a      	mov	r2, r9
 80034b2:	4643      	mov	r3, r8
 80034b4:	4680      	mov	r8, r0
 80034b6:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 80034ba:	f360 0e41 	bfi	lr, r0, #1, #1
 80034be:	f3c8 1080 	ubfx	r0, r8, #6, #1
 80034c2:	f360 0c41 	bfi	ip, r0, #1, #1
 80034c6:	f3c8 1040 	ubfx	r0, r8, #5, #1
 80034ca:	f360 0641 	bfi	r6, r0, #1, #1
 80034ce:	f3c8 1000 	ubfx	r0, r8, #4, #1
 80034d2:	f360 0541 	bfi	r5, r0, #1, #1
 80034d6:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 80034da:	f360 0441 	bfi	r4, r0, #1, #1
 80034de:	f3c8 0080 	ubfx	r0, r8, #2, #1
 80034e2:	f360 0141 	bfi	r1, r0, #1, #1
 80034e6:	f3c8 0040 	ubfx	r0, r8, #1, #1
 80034ea:	f360 0241 	bfi	r2, r0, #1, #1
 80034ee:	f3c8 0000 	ubfx	r0, r8, #0, #1
 80034f2:	f360 0341 	bfi	r3, r0, #1, #1
 80034f6:	fa1f f08e 	uxth.w	r0, lr
 80034fa:	fa1f fb8c 	uxth.w	fp, ip
 80034fe:	b2b6      	uxth	r6, r6
 8003500:	b2ad      	uxth	r5, r5
 8003502:	b2a4      	uxth	r4, r4
 8003504:	fa1f fa81 	uxth.w	sl, r1
 8003508:	fa1f f982 	uxth.w	r9, r2
 800350c:	fa1f f883 	uxth.w	r8, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4602      	mov	r2, r0
 8003514:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3302      	adds	r3, #2
 800351a:	465a      	mov	r2, fp
 800351c:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3304      	adds	r3, #4
 8003522:	4632      	mov	r2, r6
 8003524:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3306      	adds	r3, #6
 800352a:	462a      	mov	r2, r5
 800352c:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3308      	adds	r3, #8
 8003532:	4622      	mov	r2, r4
 8003534:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	330a      	adds	r3, #10
 800353a:	4652      	mov	r2, sl
 800353c:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	330c      	adds	r3, #12
 8003542:	464a      	mov	r2, r9
 8003544:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	330e      	adds	r3, #14
 800354a:	4642      	mov	r2, r8
 800354c:	801a      	strh	r2, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003558 <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 800356e:	4b80      	ldr	r3, [pc, #512]	; (8003770 <ws2812_refresh+0x218>)
 8003570:	2200      	movs	r2, #0
 8003572:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	e00e      	b.n	8003598 <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4a7d      	ldr	r2, [pc, #500]	; (8003774 <ws2812_refresh+0x21c>)
 8003580:	4413      	add	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6979      	ldr	r1, [r7, #20]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff34 	bl	80033f4 <fill_dma_buffer>
        pos++;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3301      	adds	r3, #1
 8003590:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	3308      	adds	r3, #8
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	dded      	ble.n	800357a <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	e027      	b.n	80035f4 <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	da05      	bge.n	80035c0 <ws2812_refresh+0x68>
            max_length = channels[i].length;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00f      	beq.n	80035ee <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 80035ce:	4a6a      	ldr	r2, [pc, #424]	; (8003778 <ws2812_refresh+0x220>)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	2301      	movs	r3, #1
 80035da:	4093      	lsls	r3, r2
 80035dc:	b21a      	sxth	r2, r3
 80035de:	4b64      	ldr	r3, [pc, #400]	; (8003770 <ws2812_refresh+0x218>)
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	4313      	orrs	r3, r2
 80035e6:	b21b      	sxth	r3, r3
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	4b61      	ldr	r3, [pc, #388]	; (8003770 <ws2812_refresh+0x218>)
 80035ec:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	ddd4      	ble.n	80035a4 <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	3302      	adds	r3, #2
 80035fe:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3303      	adds	r3, #3
 8003604:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8003606:	4b5d      	ldr	r3, [pc, #372]	; (800377c <ws2812_refresh+0x224>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4b5b      	ldr	r3, [pc, #364]	; (800377c <ws2812_refresh+0x224>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003614:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC1);
 8003616:	4b59      	ldr	r3, [pc, #356]	; (800377c <ws2812_refresh+0x224>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4b57      	ldr	r3, [pc, #348]	; (800377c <ws2812_refresh+0x224>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003624:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC2);
 8003626:	4b55      	ldr	r3, [pc, #340]	; (800377c <ws2812_refresh+0x224>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <ws2812_refresh+0x224>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer2);
 8003636:	4b51      	ldr	r3, [pc, #324]	; (800377c <ws2812_refresh+0x224>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <ws2812_refresh+0x10e>
 8003646:	4b4d      	ldr	r3, [pc, #308]	; (800377c <ws2812_refresh+0x224>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	f240 4344 	movw	r3, #1092	; 0x444
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <ws2812_refresh+0x10e>
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <ws2812_refresh+0x224>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <ws2812_refresh+0x224>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8003666:	4b42      	ldr	r3, [pc, #264]	; (8003770 <ws2812_refresh+0x218>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer2);
 8003670:	4b42      	ldr	r3, [pc, #264]	; (800377c <ws2812_refresh+0x224>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4b41      	ldr	r3, [pc, #260]	; (800377c <ws2812_refresh+0x224>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	e00f      	b.n	80036a6 <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer2, TIM_FLAG_UPDATE));
 8003686:	bf00      	nop
 8003688:	4b3c      	ldr	r3, [pc, #240]	; (800377c <ws2812_refresh+0x224>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d1f8      	bne.n	8003688 <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer2, TIM_FLAG_UPDATE);
 8003696:	4b39      	ldr	r3, [pc, #228]	; (800377c <ws2812_refresh+0x224>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f06f 0201 	mvn.w	r2, #1
 800369e:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	3301      	adds	r3, #1
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2be0      	cmp	r3, #224	; 0xe0
 80036aa:	ddec      	ble.n	8003686 <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer2);
 80036ac:	4b33      	ldr	r3, [pc, #204]	; (800377c <ws2812_refresh+0x224>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a1a      	ldr	r2, [r3, #32]
 80036b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10f      	bne.n	80036dc <ws2812_refresh+0x184>
 80036bc:	4b2f      	ldr	r3, [pc, #188]	; (800377c <ws2812_refresh+0x224>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6a1a      	ldr	r2, [r3, #32]
 80036c2:	f240 4344 	movw	r3, #1092	; 0x444
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <ws2812_refresh+0x184>
 80036cc:	4b2b      	ldr	r3, [pc, #172]	; (800377c <ws2812_refresh+0x224>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <ws2812_refresh+0x224>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f7ff fdbf 	bl	8003260 <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer2, __HAL_TIM_GET_AUTORELOAD(&htimer2) - 10);
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <ws2812_refresh+0x224>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <ws2812_refresh+0x224>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3a0a      	subs	r2, #10
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <ws2812_refresh+0x228>)
 80036f2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80036f6:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer2);
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <ws2812_refresh+0x224>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <ws2812_refresh+0x224>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_ISR_TCIF5 | DMA_ISR_HTIF5))) {
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <ws2812_refresh+0x228>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <ws2812_refresh+0x1c4>
            cycles++;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3301      	adds	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
            continue;
 800371a:	e027      	b.n	800376c <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 800371c:	4b15      	ldr	r3, [pc, #84]	; (8003774 <ws2812_refresh+0x21c>)
 800371e:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_ISR_TCIF5)
 8003720:	4b17      	ldr	r3, [pc, #92]	; (8003780 <ws2812_refresh+0x228>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3310      	adds	r3, #16
 8003730:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <ws2812_refresh+0x228>)
 8003734:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8003738:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e00e      	b.n	800375e <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6979      	ldr	r1, [r7, #20]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fe51 	bl	80033f4 <fill_dma_buffer>
            pos++;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	3301      	adds	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	3308      	adds	r3, #8
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b07      	cmp	r3, #7
 8003762:	dded      	ble.n	8003740 <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	429a      	cmp	r2, r3
 800376a:	dc0b      	bgt.n	8003784 <ws2812_refresh+0x22c>
    while(1) {
 800376c:	e7cc      	b.n	8003708 <ws2812_refresh+0x1b0>
 800376e:	bf00      	nop
 8003770:	2000083c 	.word	0x2000083c
 8003774:	20000840 	.word	0x20000840
 8003778:	0800a9b8 	.word	0x0800a9b8
 800377c:	20001c08 	.word	0x20001c08
 8003780:	40020000 	.word	0x40020000
            break;
 8003784:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer2);
 8003786:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <ws2812_refresh+0x2a0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a1a      	ldr	r2, [r3, #32]
 800378c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <ws2812_refresh+0x25e>
 8003796:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <ws2812_refresh+0x2a0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a1a      	ldr	r2, [r3, #32]
 800379c:	f240 4344 	movw	r3, #1092	; 0x444
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <ws2812_refresh+0x25e>
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <ws2812_refresh+0x2a0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <ws2812_refresh+0x2a0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <ws2812_refresh+0x2a4>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim2_update);
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <ws2812_refresh+0x2a8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <ws2812_refresh+0x2a8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <ws2812_refresh+0x2ac>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <ws2812_refresh+0x2ac>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <ws2812_refresh+0x2b0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <ws2812_refresh+0x2b0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
}
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20001c08 	.word	0x20001c08
 80037fc:	2000083c 	.word	0x2000083c
 8003800:	20001bc4 	.word	0x20001bc4
 8003804:	20001b80 	.word	0x20001b80
 8003808:	20001b3c 	.word	0x20001b3c

0800380c <ws2812_init>:

void ws2812_init()
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <ws2812_init+0x48>)
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4a0f      	ldr	r2, [pc, #60]	; (8003854 <ws2812_init+0x48>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6153      	str	r3, [r2, #20]
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <ws2812_init+0x48>)
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	200c      	movs	r0, #12
 8003830:	f000 fcff 	bl	8004232 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2100      	movs	r1, #0
 8003838:	200f      	movs	r0, #15
 800383a:	f000 fcfa 	bl	8004232 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	2011      	movs	r0, #17
 8003844:	f000 fcf5 	bl	8004232 <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8003848:	f7ff fca4 	bl	8003194 <ws2812_timer2_init>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003858:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800385a:	e003      	b.n	8003864 <LoopCopyDataInit>

0800385c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800385e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003860:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003862:	3104      	adds	r1, #4

08003864 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003864:	480a      	ldr	r0, [pc, #40]	; (8003890 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003868:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800386a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800386c:	d3f6      	bcc.n	800385c <CopyDataInit>
  ldr r2, =_sbss
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003870:	e002      	b.n	8003878 <LoopFillZerobss>

08003872 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003874:	f842 3b04 	str.w	r3, [r2], #4

08003878 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800387a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800387c:	d3f9      	bcc.n	8003872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800387e:	f7ff fc83 	bl	8003188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003882:	f006 fb15 	bl	8009eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003886:	f7fd fe3d 	bl	8001504 <main>
  bx lr
 800388a:	4770      	bx	lr
  ldr r3, =_sidata
 800388c:	0800ab04 	.word	0x0800ab04
  ldr r0, =_sdata
 8003890:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003894:	20000104 	.word	0x20000104
  ldr r2, =_sbss
 8003898:	20000108 	.word	0x20000108
  ldr r3, = _ebss
 800389c:	20001ca4 	.word	0x20001ca4

080038a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC1_2_IRQHandler>
	...

080038a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_Init+0x28>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_Init+0x28>)
 80038ae:	f043 0310 	orr.w	r3, r3, #16
 80038b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b4:	2003      	movs	r0, #3
 80038b6:	f000 fcb1 	bl	800421c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ba:	2000      	movs	r0, #0
 80038bc:	f7ff fb86 	bl	8002fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c0:	f7ff f9bc 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40022000 	.word	0x40022000

080038d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_IncTick+0x1c>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_IncTick+0x20>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <HAL_IncTick+0x20>)
 80038e2:	6013      	str	r3, [r2, #0]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	20000098 	.word	0x20000098
 80038f0:	20001c50 	.word	0x20001c50

080038f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return uwTick;
 80038f8:	4b02      	ldr	r3, [pc, #8]	; (8003904 <HAL_GetTick+0x10>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	20001c50 	.word	0x20001c50

08003908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7ff fff0 	bl	80038f4 <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003920:	d005      	beq.n	800392e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_Delay+0x44>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800392e:	bf00      	nop
 8003930:	f7ff ffe0 	bl	80038f4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	429a      	cmp	r2, r3
 800393e:	d8f7      	bhi.n	8003930 <HAL_Delay+0x28>
  {
  }
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000098 	.word	0x20000098

08003950 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0be      	b.n	8003af0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff f98c 	bl	8002cac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 faf7 	bl	8003f88 <ADC_ConversionStop_Disable>
 800399a:	4603      	mov	r3, r0
 800399c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 8099 	bne.w	8003ade <HAL_ADC_Init+0x18e>
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 8095 	bne.w	8003ade <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039bc:	f023 0302 	bic.w	r3, r3, #2
 80039c0:	f043 0202 	orr.w	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7b1b      	ldrb	r3, [r3, #12]
 80039d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d003      	beq.n	80039f2 <HAL_ADC_Init+0xa2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <HAL_ADC_Init+0xa8>
 80039f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f6:	e000      	b.n	80039fa <HAL_ADC_Init+0xaa>
 80039f8:	2300      	movs	r3, #0
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7d1b      	ldrb	r3, [r3, #20]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d119      	bne.n	8003a3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7b1b      	ldrb	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	035a      	lsls	r2, r3, #13
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e00b      	b.n	8003a3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <HAL_ADC_Init+0x1a8>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6c:	d003      	beq.n	8003a76 <HAL_ADC_Init+0x126>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d104      	bne.n	8003a80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	051b      	lsls	r3, r3, #20
 8003a7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <HAL_ADC_Init+0x1ac>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d10b      	bne.n	8003abc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	f043 0201 	orr.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003aba:	e018      	b.n	8003aee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	f023 0312 	bic.w	r3, r3, #18
 8003ac4:	f043 0210 	orr.w	r2, r3, #16
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003adc:	e007      	b.n	8003aee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f043 0210 	orr.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	ffe1f7fd 	.word	0xffe1f7fd
 8003afc:	ff1f0efe 	.word	0xff1f0efe

08003b00 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <HAL_ADC_Start_DMA+0x24>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a63      	ldr	r2, [pc, #396]	; (8003cac <HAL_ADC_Start_DMA+0x1ac>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d106      	bne.n	8003b32 <HAL_ADC_Start_DMA+0x32>
 8003b24:	4b60      	ldr	r3, [pc, #384]	; (8003ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 80b3 	bne.w	8003c98 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_Start_DMA+0x40>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e0ae      	b.n	8003c9e <HAL_ADC_Start_DMA+0x19e>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f9cb 	bl	8003ee4 <ADC_Enable>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 809a 	bne.w	8003c8e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4e      	ldr	r2, [pc, #312]	; (8003cac <HAL_ADC_Start_DMA+0x1ac>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d105      	bne.n	8003b84 <HAL_ADC_Start_DMA+0x84>
 8003b78:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d115      	bne.n	8003bb0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d026      	beq.n	8003bec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ba6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bae:	e01d      	b.n	8003bec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a39      	ldr	r2, [pc, #228]	; (8003ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_ADC_Start_DMA+0xd0>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a38      	ldr	r2, [pc, #224]	; (8003cac <HAL_ADC_Start_DMA+0x1ac>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10d      	bne.n	8003bec <HAL_ADC_Start_DMA+0xec>
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003be4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	f023 0206 	bic.w	r2, r3, #6
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c04:	e002      	b.n	8003c0c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <HAL_ADC_Start_DMA+0x1b0>)
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <HAL_ADC_Start_DMA+0x1b4>)
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4a23      	ldr	r2, [pc, #140]	; (8003cb8 <HAL_ADC_Start_DMA+0x1b8>)
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0202 	mvn.w	r2, #2
 8003c34:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c44:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a18      	ldr	r0, [r3, #32]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	334c      	adds	r3, #76	; 0x4c
 8003c50:	4619      	mov	r1, r3
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f000 fbb3 	bl	80043c0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c68:	d108      	bne.n	8003c7c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003c78:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003c7a:	e00f      	b.n	8003c9c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c8a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003c8c:	e006      	b.n	8003c9c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003c96:	e001      	b.n	8003c9c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40012400 	.word	0x40012400
 8003cac:	40012800 	.word	0x40012800
 8003cb0:	08003ffd 	.word	0x08003ffd
 8003cb4:	08004079 	.word	0x08004079
 8003cb8:	08004095 	.word	0x08004095

08003cbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x20>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0dc      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1da>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d81c      	bhi.n	8003d5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	3b05      	subs	r3, #5
 8003d36:	221f      	movs	r2, #31
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	4019      	ands	r1, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3b05      	subs	r3, #5
 8003d50:	fa00 f203 	lsl.w	r2, r0, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d5c:	e03c      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d81c      	bhi.n	8003da0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	3b23      	subs	r3, #35	; 0x23
 8003d78:	221f      	movs	r2, #31
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	4019      	ands	r1, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	3b23      	subs	r3, #35	; 0x23
 8003d92:	fa00 f203 	lsl.w	r2, r0, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d9e:	e01b      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	3b41      	subs	r3, #65	; 0x41
 8003db2:	221f      	movs	r2, #31
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	4019      	ands	r1, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	3b41      	subs	r3, #65	; 0x41
 8003dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b09      	cmp	r3, #9
 8003dde:	d91c      	bls.n	8003e1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68d9      	ldr	r1, [r3, #12]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4413      	add	r3, r2
 8003df0:	3b1e      	subs	r3, #30
 8003df2:	2207      	movs	r2, #7
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	4019      	ands	r1, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6898      	ldr	r0, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	3b1e      	subs	r3, #30
 8003e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	60da      	str	r2, [r3, #12]
 8003e18:	e019      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6919      	ldr	r1, [r3, #16]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	4019      	ands	r1, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6898      	ldr	r0, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	fa00 f203 	lsl.w	r2, r0, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d003      	beq.n	8003e5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e5a:	2b11      	cmp	r3, #17
 8003e5c:	d132      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d125      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d126      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003e84:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d11a      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <HAL_ADC_ConfigChannel+0x1e8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	0c9a      	lsrs	r2, r3, #18
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ea4:	e002      	b.n	8003eac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f9      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x1b2>
 8003eb2:	e007      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	40012400 	.word	0x40012400
 8003edc:	20000090 	.word	0x20000090
 8003ee0:	431bde83 	.word	0x431bde83

08003ee4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d039      	beq.n	8003f76 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <ADC_Enable+0x9c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <ADC_Enable+0xa0>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	0c9b      	lsrs	r3, r3, #18
 8003f1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f20:	e002      	b.n	8003f28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f9      	bne.n	8003f22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f2e:	f7ff fce1 	bl	80038f4 <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f34:	e018      	b.n	8003f68 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f36:	f7ff fcdd 	bl	80038f4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d911      	bls.n	8003f68 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f043 0210 	orr.w	r2, r3, #16
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d1df      	bne.n	8003f36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000090 	.word	0x20000090
 8003f84:	431bde83 	.word	0x431bde83

08003f88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d127      	bne.n	8003ff2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fb2:	f7ff fc9f 	bl	80038f4 <HAL_GetTick>
 8003fb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003fb8:	e014      	b.n	8003fe4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fba:	f7ff fc9b 	bl	80038f4 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d90d      	bls.n	8003fe4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	f043 0210 	orr.w	r2, r3, #16
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	f043 0201 	orr.w	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e007      	b.n	8003ff4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d0e3      	beq.n	8003fba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004012:	2b00      	cmp	r3, #0
 8004014:	d127      	bne.n	8004066 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800402c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004030:	d115      	bne.n	800405e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004036:	2b00      	cmp	r3, #0
 8004038:	d111      	bne.n	800405e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	f043 0201 	orr.w	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff fe2c 	bl	8003cbc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004064:	e004      	b.n	8004070 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff fe21 	bl	8003cce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff fe10 	bl	8003ce0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <__NVIC_SetPriorityGrouping>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e4:	4013      	ands	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	60d3      	str	r3, [r2, #12]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <__NVIC_GetPriorityGrouping>:
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__NVIC_GetPriorityGrouping+0x18>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	f003 0307 	and.w	r3, r3, #7
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_EnableIRQ>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	db0b      	blt.n	8004156 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4906      	ldr	r1, [pc, #24]	; (8004160 <__NVIC_EnableIRQ+0x34>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2001      	movs	r0, #1
 800414e:	fa00 f202 	lsl.w	r2, r0, r2
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_SetPriority>:
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	490c      	ldr	r1, [pc, #48]	; (80041b0 <__NVIC_SetPriority+0x4c>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	440b      	add	r3, r1
 8004188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800418c:	e00a      	b.n	80041a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4908      	ldr	r1, [pc, #32]	; (80041b4 <__NVIC_SetPriority+0x50>)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3b04      	subs	r3, #4
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	e000e100 	.word	0xe000e100
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <NVIC_EncodePriority>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	bf28      	it	cs
 80041d6:	2304      	movcs	r3, #4
 80041d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3304      	adds	r3, #4
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d902      	bls.n	80041e8 <NVIC_EncodePriority+0x30>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b03      	subs	r3, #3
 80041e6:	e000      	b.n	80041ea <NVIC_EncodePriority+0x32>
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	401a      	ands	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	43d9      	mvns	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	4313      	orrs	r3, r2
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	; 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff4f 	bl	80040c8 <__NVIC_SetPriorityGrouping>
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af00      	add	r7, sp, #0
 8004238:	4603      	mov	r3, r0
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004244:	f7ff ff64 	bl	8004110 <__NVIC_GetPriorityGrouping>
 8004248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	6978      	ldr	r0, [r7, #20]
 8004250:	f7ff ffb2 	bl	80041b8 <NVIC_EncodePriority>
 8004254:	4602      	mov	r2, r0
 8004256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff81 	bl	8004164 <__NVIC_SetPriority>
}
 8004262:	bf00      	nop
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	4603      	mov	r3, r0
 8004272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff57 	bl	800412c <__NVIC_EnableIRQ>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e043      	b.n	8004326 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b22      	ldr	r3, [pc, #136]	; (8004330 <HAL_DMA_Init+0xa8>)
 80042a6:	4413      	add	r3, r2
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <HAL_DMA_Init+0xac>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	009a      	lsls	r2, r3, #2
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_DMA_Init+0xb0>)
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80042e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	bffdfff8 	.word	0xbffdfff8
 8004334:	cccccccd 	.word	0xcccccccd
 8004338:	40020000 	.word	0x40020000

0800433c <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_DMA_Start+0x20>
 8004358:	2302      	movs	r3, #2
 800435a:	e02d      	b.n	80043b8 <HAL_DMA_Start+0x7c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800436a:	2b01      	cmp	r3, #1
 800436c:	d11d      	bne.n	80043aa <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f97a 	bl	800468c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e005      	b.n	80043b6 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
 80043b4:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_DMA_Start_IT+0x20>
 80043dc:	2302      	movs	r3, #2
 80043de:	e04a      	b.n	8004476 <HAL_DMA_Start_IT+0xb6>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d13a      	bne.n	8004468 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f938 	bl	800468c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 020e 	orr.w	r2, r2, #14
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e00f      	b.n	8004456 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0204 	bic.w	r2, r2, #4
 8004444:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 020a 	orr.w	r2, r2, #10
 8004454:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e005      	b.n	8004474 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004470:	2302      	movs	r3, #2
 8004472:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004474:	7dfb      	ldrb	r3, [r7, #23]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	2204      	movs	r2, #4
 800449e:	409a      	lsls	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d04f      	beq.n	8004548 <HAL_DMA_IRQHandler+0xc8>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04a      	beq.n	8004548 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0204 	bic.w	r2, r2, #4
 80044ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a66      	ldr	r2, [pc, #408]	; (8004670 <HAL_DMA_IRQHandler+0x1f0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d029      	beq.n	800452e <HAL_DMA_IRQHandler+0xae>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a65      	ldr	r2, [pc, #404]	; (8004674 <HAL_DMA_IRQHandler+0x1f4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d022      	beq.n	800452a <HAL_DMA_IRQHandler+0xaa>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a63      	ldr	r2, [pc, #396]	; (8004678 <HAL_DMA_IRQHandler+0x1f8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01a      	beq.n	8004524 <HAL_DMA_IRQHandler+0xa4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a62      	ldr	r2, [pc, #392]	; (800467c <HAL_DMA_IRQHandler+0x1fc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d012      	beq.n	800451e <HAL_DMA_IRQHandler+0x9e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a60      	ldr	r2, [pc, #384]	; (8004680 <HAL_DMA_IRQHandler+0x200>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00a      	beq.n	8004518 <HAL_DMA_IRQHandler+0x98>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a5f      	ldr	r2, [pc, #380]	; (8004684 <HAL_DMA_IRQHandler+0x204>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d102      	bne.n	8004512 <HAL_DMA_IRQHandler+0x92>
 800450c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004510:	e00e      	b.n	8004530 <HAL_DMA_IRQHandler+0xb0>
 8004512:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004516:	e00b      	b.n	8004530 <HAL_DMA_IRQHandler+0xb0>
 8004518:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800451c:	e008      	b.n	8004530 <HAL_DMA_IRQHandler+0xb0>
 800451e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004522:	e005      	b.n	8004530 <HAL_DMA_IRQHandler+0xb0>
 8004524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004528:	e002      	b.n	8004530 <HAL_DMA_IRQHandler+0xb0>
 800452a:	2340      	movs	r3, #64	; 0x40
 800452c:	e000      	b.n	8004530 <HAL_DMA_IRQHandler+0xb0>
 800452e:	2304      	movs	r3, #4
 8004530:	4a55      	ldr	r2, [pc, #340]	; (8004688 <HAL_DMA_IRQHandler+0x208>)
 8004532:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8094 	beq.w	8004666 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004546:	e08e      	b.n	8004666 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	2202      	movs	r2, #2
 800454e:	409a      	lsls	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d056      	beq.n	8004606 <HAL_DMA_IRQHandler+0x186>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d051      	beq.n	8004606 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 020a 	bic.w	r2, r2, #10
 800457e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a38      	ldr	r2, [pc, #224]	; (8004670 <HAL_DMA_IRQHandler+0x1f0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d029      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x166>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a37      	ldr	r2, [pc, #220]	; (8004674 <HAL_DMA_IRQHandler+0x1f4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d022      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x162>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a35      	ldr	r2, [pc, #212]	; (8004678 <HAL_DMA_IRQHandler+0x1f8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01a      	beq.n	80045dc <HAL_DMA_IRQHandler+0x15c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a34      	ldr	r2, [pc, #208]	; (800467c <HAL_DMA_IRQHandler+0x1fc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d012      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x156>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a32      	ldr	r2, [pc, #200]	; (8004680 <HAL_DMA_IRQHandler+0x200>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00a      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x150>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a31      	ldr	r2, [pc, #196]	; (8004684 <HAL_DMA_IRQHandler+0x204>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d102      	bne.n	80045ca <HAL_DMA_IRQHandler+0x14a>
 80045c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045c8:	e00e      	b.n	80045e8 <HAL_DMA_IRQHandler+0x168>
 80045ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ce:	e00b      	b.n	80045e8 <HAL_DMA_IRQHandler+0x168>
 80045d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d4:	e008      	b.n	80045e8 <HAL_DMA_IRQHandler+0x168>
 80045d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045da:	e005      	b.n	80045e8 <HAL_DMA_IRQHandler+0x168>
 80045dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e0:	e002      	b.n	80045e8 <HAL_DMA_IRQHandler+0x168>
 80045e2:	2320      	movs	r3, #32
 80045e4:	e000      	b.n	80045e8 <HAL_DMA_IRQHandler+0x168>
 80045e6:	2302      	movs	r3, #2
 80045e8:	4a27      	ldr	r2, [pc, #156]	; (8004688 <HAL_DMA_IRQHandler+0x208>)
 80045ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d034      	beq.n	8004666 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004604:	e02f      	b.n	8004666 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2208      	movs	r2, #8
 800460c:	409a      	lsls	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d028      	beq.n	8004668 <HAL_DMA_IRQHandler+0x1e8>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d023      	beq.n	8004668 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 020e 	bic.w	r2, r2, #14
 800462e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f202 	lsl.w	r2, r1, r2
 800463e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
    }
  }
  return;
 8004666:	bf00      	nop
 8004668:	bf00      	nop
}
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40020008 	.word	0x40020008
 8004674:	4002001c 	.word	0x4002001c
 8004678:	40020030 	.word	0x40020030
 800467c:	40020044 	.word	0x40020044
 8004680:	40020058 	.word	0x40020058
 8004684:	4002006c 	.word	0x4002006c
 8004688:	40020000 	.word	0x40020000

0800468c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	2101      	movs	r1, #1
 80046a4:	fa01 f202 	lsl.w	r2, r1, r2
 80046a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d108      	bne.n	80046cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046ca:	e007      	b.n	80046dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	60da      	str	r2, [r3, #12]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
	...

080046e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b08b      	sub	sp, #44	; 0x2c
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046f2:	2300      	movs	r3, #0
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046f6:	2300      	movs	r3, #0
 80046f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046fa:	e169      	b.n	80049d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046fc:	2201      	movs	r2, #1
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	429a      	cmp	r2, r3
 8004716:	f040 8158 	bne.w	80049ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4a9a      	ldr	r2, [pc, #616]	; (8004988 <HAL_GPIO_Init+0x2a0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d05e      	beq.n	80047e2 <HAL_GPIO_Init+0xfa>
 8004724:	4a98      	ldr	r2, [pc, #608]	; (8004988 <HAL_GPIO_Init+0x2a0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d875      	bhi.n	8004816 <HAL_GPIO_Init+0x12e>
 800472a:	4a98      	ldr	r2, [pc, #608]	; (800498c <HAL_GPIO_Init+0x2a4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d058      	beq.n	80047e2 <HAL_GPIO_Init+0xfa>
 8004730:	4a96      	ldr	r2, [pc, #600]	; (800498c <HAL_GPIO_Init+0x2a4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d86f      	bhi.n	8004816 <HAL_GPIO_Init+0x12e>
 8004736:	4a96      	ldr	r2, [pc, #600]	; (8004990 <HAL_GPIO_Init+0x2a8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d052      	beq.n	80047e2 <HAL_GPIO_Init+0xfa>
 800473c:	4a94      	ldr	r2, [pc, #592]	; (8004990 <HAL_GPIO_Init+0x2a8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d869      	bhi.n	8004816 <HAL_GPIO_Init+0x12e>
 8004742:	4a94      	ldr	r2, [pc, #592]	; (8004994 <HAL_GPIO_Init+0x2ac>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d04c      	beq.n	80047e2 <HAL_GPIO_Init+0xfa>
 8004748:	4a92      	ldr	r2, [pc, #584]	; (8004994 <HAL_GPIO_Init+0x2ac>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d863      	bhi.n	8004816 <HAL_GPIO_Init+0x12e>
 800474e:	4a92      	ldr	r2, [pc, #584]	; (8004998 <HAL_GPIO_Init+0x2b0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d046      	beq.n	80047e2 <HAL_GPIO_Init+0xfa>
 8004754:	4a90      	ldr	r2, [pc, #576]	; (8004998 <HAL_GPIO_Init+0x2b0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d85d      	bhi.n	8004816 <HAL_GPIO_Init+0x12e>
 800475a:	2b12      	cmp	r3, #18
 800475c:	d82a      	bhi.n	80047b4 <HAL_GPIO_Init+0xcc>
 800475e:	2b12      	cmp	r3, #18
 8004760:	d859      	bhi.n	8004816 <HAL_GPIO_Init+0x12e>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <HAL_GPIO_Init+0x80>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	080047e3 	.word	0x080047e3
 800476c:	080047bd 	.word	0x080047bd
 8004770:	080047cf 	.word	0x080047cf
 8004774:	08004811 	.word	0x08004811
 8004778:	08004817 	.word	0x08004817
 800477c:	08004817 	.word	0x08004817
 8004780:	08004817 	.word	0x08004817
 8004784:	08004817 	.word	0x08004817
 8004788:	08004817 	.word	0x08004817
 800478c:	08004817 	.word	0x08004817
 8004790:	08004817 	.word	0x08004817
 8004794:	08004817 	.word	0x08004817
 8004798:	08004817 	.word	0x08004817
 800479c:	08004817 	.word	0x08004817
 80047a0:	08004817 	.word	0x08004817
 80047a4:	08004817 	.word	0x08004817
 80047a8:	08004817 	.word	0x08004817
 80047ac:	080047c5 	.word	0x080047c5
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	4a79      	ldr	r2, [pc, #484]	; (800499c <HAL_GPIO_Init+0x2b4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047ba:	e02c      	b.n	8004816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	623b      	str	r3, [r7, #32]
          break;
 80047c2:	e029      	b.n	8004818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	3304      	adds	r3, #4
 80047ca:	623b      	str	r3, [r7, #32]
          break;
 80047cc:	e024      	b.n	8004818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	3308      	adds	r3, #8
 80047d4:	623b      	str	r3, [r7, #32]
          break;
 80047d6:	e01f      	b.n	8004818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	330c      	adds	r3, #12
 80047de:	623b      	str	r3, [r7, #32]
          break;
 80047e0:	e01a      	b.n	8004818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047ea:	2304      	movs	r3, #4
 80047ec:	623b      	str	r3, [r7, #32]
          break;
 80047ee:	e013      	b.n	8004818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d105      	bne.n	8004804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047f8:	2308      	movs	r3, #8
 80047fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	611a      	str	r2, [r3, #16]
          break;
 8004802:	e009      	b.n	8004818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004804:	2308      	movs	r3, #8
 8004806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	615a      	str	r2, [r3, #20]
          break;
 800480e:	e003      	b.n	8004818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004810:	2300      	movs	r3, #0
 8004812:	623b      	str	r3, [r7, #32]
          break;
 8004814:	e000      	b.n	8004818 <HAL_GPIO_Init+0x130>
          break;
 8004816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2bff      	cmp	r3, #255	; 0xff
 800481c:	d801      	bhi.n	8004822 <HAL_GPIO_Init+0x13a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	e001      	b.n	8004826 <HAL_GPIO_Init+0x13e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2bff      	cmp	r3, #255	; 0xff
 800482c:	d802      	bhi.n	8004834 <HAL_GPIO_Init+0x14c>
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	e002      	b.n	800483a <HAL_GPIO_Init+0x152>
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	3b08      	subs	r3, #8
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	210f      	movs	r1, #15
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	401a      	ands	r2, r3
 800484c:	6a39      	ldr	r1, [r7, #32]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	431a      	orrs	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80b1 	beq.w	80049ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004868:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <HAL_GPIO_Init+0x2b8>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	4a4c      	ldr	r2, [pc, #304]	; (80049a0 <HAL_GPIO_Init+0x2b8>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6193      	str	r3, [r2, #24]
 8004874:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <HAL_GPIO_Init+0x2b8>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004880:	4a48      	ldr	r2, [pc, #288]	; (80049a4 <HAL_GPIO_Init+0x2bc>)
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	3302      	adds	r3, #2
 8004888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	220f      	movs	r2, #15
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4013      	ands	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <HAL_GPIO_Init+0x2c0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_GPIO_Init+0x1ec>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3f      	ldr	r2, [pc, #252]	; (80049ac <HAL_GPIO_Init+0x2c4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00d      	beq.n	80048d0 <HAL_GPIO_Init+0x1e8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3e      	ldr	r2, [pc, #248]	; (80049b0 <HAL_GPIO_Init+0x2c8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <HAL_GPIO_Init+0x1e4>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3d      	ldr	r2, [pc, #244]	; (80049b4 <HAL_GPIO_Init+0x2cc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_GPIO_Init+0x1e0>
 80048c4:	2303      	movs	r3, #3
 80048c6:	e006      	b.n	80048d6 <HAL_GPIO_Init+0x1ee>
 80048c8:	2304      	movs	r3, #4
 80048ca:	e004      	b.n	80048d6 <HAL_GPIO_Init+0x1ee>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e002      	b.n	80048d6 <HAL_GPIO_Init+0x1ee>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_GPIO_Init+0x1ee>
 80048d4:	2300      	movs	r3, #0
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	f002 0203 	and.w	r2, r2, #3
 80048dc:	0092      	lsls	r2, r2, #2
 80048de:	4093      	lsls	r3, r2
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048e6:	492f      	ldr	r1, [pc, #188]	; (80049a4 <HAL_GPIO_Init+0x2bc>)
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	3302      	adds	r3, #2
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004900:	4b2d      	ldr	r3, [pc, #180]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	492c      	ldr	r1, [pc, #176]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	4313      	orrs	r3, r2
 800490a:	600b      	str	r3, [r1, #0]
 800490c:	e006      	b.n	800491c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800490e:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	43db      	mvns	r3, r3
 8004916:	4928      	ldr	r1, [pc, #160]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004918:	4013      	ands	r3, r2
 800491a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d006      	beq.n	8004936 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4922      	ldr	r1, [pc, #136]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
 8004934:	e006      	b.n	8004944 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004936:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	43db      	mvns	r3, r3
 800493e:	491e      	ldr	r1, [pc, #120]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004940:	4013      	ands	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d006      	beq.n	800495e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4918      	ldr	r1, [pc, #96]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	608b      	str	r3, [r1, #8]
 800495c:	e006      	b.n	800496c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800495e:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	43db      	mvns	r3, r3
 8004966:	4914      	ldr	r1, [pc, #80]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004968:	4013      	ands	r3, r2
 800496a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d021      	beq.n	80049bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	490e      	ldr	r1, [pc, #56]	; (80049b8 <HAL_GPIO_Init+0x2d0>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	60cb      	str	r3, [r1, #12]
 8004984:	e021      	b.n	80049ca <HAL_GPIO_Init+0x2e2>
 8004986:	bf00      	nop
 8004988:	10320000 	.word	0x10320000
 800498c:	10310000 	.word	0x10310000
 8004990:	10220000 	.word	0x10220000
 8004994:	10210000 	.word	0x10210000
 8004998:	10120000 	.word	0x10120000
 800499c:	10110000 	.word	0x10110000
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010800 	.word	0x40010800
 80049ac:	40010c00 	.word	0x40010c00
 80049b0:	40011000 	.word	0x40011000
 80049b4:	40011400 	.word	0x40011400
 80049b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_GPIO_Init+0x304>)
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	43db      	mvns	r3, r3
 80049c4:	4909      	ldr	r1, [pc, #36]	; (80049ec <HAL_GPIO_Init+0x304>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	3301      	adds	r3, #1
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f47f ae8e 	bne.w	80046fc <HAL_GPIO_Init+0x14>
  }
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	372c      	adds	r7, #44	; 0x2c
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	40010400 	.word	0x40010400

080049f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	807b      	strh	r3, [r7, #2]
 80049fc:	4613      	mov	r3, r2
 80049fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a00:	787b      	ldrb	r3, [r7, #1]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a0c:	e003      	b.n	8004a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a0e:	887b      	ldrh	r3, [r7, #2]
 8004a10:	041a      	lsls	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e26c      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8087 	beq.w	8004b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a40:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d00c      	beq.n	8004a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a4c:	4b8f      	ldr	r3, [pc, #572]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d112      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5e>
 8004a58:	4b8c      	ldr	r3, [pc, #560]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d10b      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a66:	4b89      	ldr	r3, [pc, #548]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d06c      	beq.n	8004b4c <HAL_RCC_OscConfig+0x12c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d168      	bne.n	8004b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e246      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a86:	d106      	bne.n	8004a96 <HAL_RCC_OscConfig+0x76>
 8004a88:	4b80      	ldr	r3, [pc, #512]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a7f      	ldr	r2, [pc, #508]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e02e      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x98>
 8004a9e:	4b7b      	ldr	r3, [pc, #492]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7a      	ldr	r2, [pc, #488]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b78      	ldr	r3, [pc, #480]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a77      	ldr	r2, [pc, #476]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e01d      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0xbc>
 8004ac2:	4b72      	ldr	r3, [pc, #456]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a71      	ldr	r2, [pc, #452]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6e      	ldr	r2, [pc, #440]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e00b      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004adc:	4b6b      	ldr	r3, [pc, #428]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b68      	ldr	r3, [pc, #416]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a67      	ldr	r2, [pc, #412]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d013      	beq.n	8004b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fe fefa 	bl	80038f4 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fe fef6 	bl	80038f4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1fa      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0xe4>
 8004b22:	e014      	b.n	8004b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fe fee6 	bl	80038f4 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7fe fee2 	bl	80038f4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e1e6      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3e:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x10c>
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d063      	beq.n	8004c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b5a:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b66:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d11c      	bne.n	8004bac <HAL_RCC_OscConfig+0x18c>
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d116      	bne.n	8004bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7e:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_RCC_OscConfig+0x176>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e1ba      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4939      	ldr	r1, [pc, #228]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	e03a      	b.n	8004c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d020      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb4:	4b36      	ldr	r3, [pc, #216]	; (8004c90 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bba:	f7fe fe9b 	bl	80038f4 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7fe fe97 	bl	80038f4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e19b      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4927      	ldr	r1, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe fe7a 	bl	80038f4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c04:	f7fe fe76 	bl	80038f4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e17a      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d03a      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d019      	beq.n	8004c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3c:	f7fe fe5a 	bl	80038f4 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fe fe56 	bl	80038f4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e15a      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c62:	2001      	movs	r0, #1
 8004c64:	f000 faf4 	bl	8005250 <RCC_Delay>
 8004c68:	e01c      	b.n	8004ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7fe fe40 	bl	80038f4 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c76:	e00f      	b.n	8004c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c78:	f7fe fe3c 	bl	80038f4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d908      	bls.n	8004c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e140      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	42420000 	.word	0x42420000
 8004c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c98:	4b9e      	ldr	r3, [pc, #632]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e9      	bne.n	8004c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a6 	beq.w	8004dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb6:	4b97      	ldr	r3, [pc, #604]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	4b94      	ldr	r3, [pc, #592]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4a93      	ldr	r2, [pc, #588]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	61d3      	str	r3, [r2, #28]
 8004cce:	4b91      	ldr	r3, [pc, #580]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b8e      	ldr	r3, [pc, #568]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d118      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a8a      	ldr	r2, [pc, #552]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fe fdfd 	bl	80038f4 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fe fdf9 	bl	80038f4 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b64      	cmp	r3, #100	; 0x64
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e0fd      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d10:	4b81      	ldr	r3, [pc, #516]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x312>
 8004d24:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	4a7a      	ldr	r2, [pc, #488]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6213      	str	r3, [r2, #32]
 8004d30:	e02d      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x334>
 8004d3a:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4a75      	ldr	r2, [pc, #468]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	6213      	str	r3, [r2, #32]
 8004d46:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4a72      	ldr	r2, [pc, #456]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d4c:	f023 0304 	bic.w	r3, r3, #4
 8004d50:	6213      	str	r3, [r2, #32]
 8004d52:	e01c      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b05      	cmp	r3, #5
 8004d5a:	d10c      	bne.n	8004d76 <HAL_RCC_OscConfig+0x356>
 8004d5c:	4b6d      	ldr	r3, [pc, #436]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4a6c      	ldr	r2, [pc, #432]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d62:	f043 0304 	orr.w	r3, r3, #4
 8004d66:	6213      	str	r3, [r2, #32]
 8004d68:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4a69      	ldr	r2, [pc, #420]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	e00b      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d76:	4b67      	ldr	r3, [pc, #412]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a66      	ldr	r2, [pc, #408]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	6213      	str	r3, [r2, #32]
 8004d82:	4b64      	ldr	r3, [pc, #400]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a63      	ldr	r2, [pc, #396]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d015      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7fe fdad 	bl	80038f4 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fe fda9 	bl	80038f4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e0ab      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	4b57      	ldr	r3, [pc, #348]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ee      	beq.n	8004d9e <HAL_RCC_OscConfig+0x37e>
 8004dc0:	e014      	b.n	8004dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7fe fd97 	bl	80038f4 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7fe fd93 	bl	80038f4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e095      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de0:	4b4c      	ldr	r3, [pc, #304]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ee      	bne.n	8004dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d105      	bne.n	8004dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df2:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4a47      	ldr	r2, [pc, #284]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8081 	beq.w	8004f0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e08:	4b42      	ldr	r3, [pc, #264]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d061      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d146      	bne.n	8004eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fe fd67 	bl	80038f4 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fe fd63 	bl	80038f4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e067      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f0      	bne.n	8004e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d108      	bne.n	8004e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e52:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	492d      	ldr	r1, [pc, #180]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e64:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a19      	ldr	r1, [r3, #32]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	430b      	orrs	r3, r1
 8004e76:	4927      	ldr	r1, [pc, #156]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fe fd37 	bl	80038f4 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fe fd33 	bl	80038f4 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e037      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x46a>
 8004ea8:	e02f      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fe fd20 	bl	80038f4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fe fd1c 	bl	80038f4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e020      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x498>
 8004ed6:	e018      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e013      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	42420060 	.word	0x42420060

08004f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0d0      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f34:	4b6a      	ldr	r3, [pc, #424]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d910      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 0207 	bic.w	r2, r3, #7
 8004f4a:	4965      	ldr	r1, [pc, #404]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b63      	ldr	r3, [pc, #396]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0b8      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d020      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f7c:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f94:	4b53      	ldr	r3, [pc, #332]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a52      	ldr	r2, [pc, #328]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	494d      	ldr	r1, [pc, #308]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d040      	beq.n	8005040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	4b47      	ldr	r3, [pc, #284]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d115      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e07f      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e073      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fee:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06b      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ffe:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f023 0203 	bic.w	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4936      	ldr	r1, [pc, #216]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005010:	f7fe fc70 	bl	80038f4 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005016:	e00a      	b.n	800502e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005018:	f7fe fc6c 	bl	80038f4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e053      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f003 020c 	and.w	r2, r3, #12
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	429a      	cmp	r2, r3
 800503e:	d1eb      	bne.n	8005018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d210      	bcs.n	8005070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 0207 	bic.w	r2, r3, #7
 8005056:	4922      	ldr	r1, [pc, #136]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e032      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800507c:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4916      	ldr	r1, [pc, #88]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	4313      	orrs	r3, r2
 800508c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	490e      	ldr	r1, [pc, #56]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ae:	f000 f821 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	490a      	ldr	r1, [pc, #40]	; (80050e8 <HAL_RCC_ClockConfig+0x1c8>)
 80050c0:	5ccb      	ldrb	r3, [r1, r3]
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <HAL_RCC_ClockConfig+0x1cc>)
 80050c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_ClockConfig+0x1d0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fd ff7c 	bl	8002fcc <HAL_InitTick>

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40022000 	.word	0x40022000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	0800a9a0 	.word	0x0800a9a0
 80050ec:	20000090 	.word	0x20000090
 80050f0:	20000094 	.word	0x20000094

080050f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b490      	push	{r4, r7}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050fa:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050fc:	1d3c      	adds	r4, r7, #4
 80050fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005104:	f240 2301 	movw	r3, #513	; 0x201
 8005108:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	2300      	movs	r3, #0
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800511e:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b04      	cmp	r3, #4
 800512c:	d002      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x40>
 800512e:	2b08      	cmp	r3, #8
 8005130:	d003      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x46>
 8005132:	e02d      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005134:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005136:	623b      	str	r3, [r7, #32]
      break;
 8005138:	e02d      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	0c9b      	lsrs	r3, r3, #18
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005146:	4413      	add	r3, r2
 8005148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800514c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005158:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	0c5b      	lsrs	r3, r3, #17
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005166:	4413      	add	r3, r2
 8005168:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800516c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005172:	fb02 f203 	mul.w	r2, r2, r3
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	e004      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	623b      	str	r3, [r7, #32]
      break;
 800518e:	e002      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005190:	4b06      	ldr	r3, [pc, #24]	; (80051ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005192:	623b      	str	r3, [r7, #32]
      break;
 8005194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005196:	6a3b      	ldr	r3, [r7, #32]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bc90      	pop	{r4, r7}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	0800a974 	.word	0x0800a974
 80051a8:	40021000 	.word	0x40021000
 80051ac:	007a1200 	.word	0x007a1200
 80051b0:	003d0900 	.word	0x003d0900

080051b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051b8:	4b02      	ldr	r3, [pc, #8]	; (80051c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ba:	681b      	ldr	r3, [r3, #0]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	20000090 	.word	0x20000090

080051c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051cc:	f7ff fff2 	bl	80051b4 <HAL_RCC_GetHCLKFreq>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	4903      	ldr	r1, [pc, #12]	; (80051ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80051de:	5ccb      	ldrb	r3, [r1, r3]
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000
 80051ec:	0800a9b0 	.word	0x0800a9b0

080051f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	220f      	movs	r2, #15
 80051fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <HAL_RCC_GetClockConfig+0x58>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 0203 	and.w	r2, r3, #3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <HAL_RCC_GetClockConfig+0x58>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_GetClockConfig+0x58>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <HAL_RCC_GetClockConfig+0x58>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	08db      	lsrs	r3, r3, #3
 800522a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCC_GetClockConfig+0x5c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0207 	and.w	r2, r3, #7
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr
 8005248:	40021000 	.word	0x40021000
 800524c:	40022000 	.word	0x40022000

08005250 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <RCC_Delay+0x34>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <RCC_Delay+0x38>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	0a5b      	lsrs	r3, r3, #9
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800526c:	bf00      	nop
  }
  while (Delay --);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1e5a      	subs	r2, r3, #1
 8005272:	60fa      	str	r2, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f9      	bne.n	800526c <RCC_Delay+0x1c>
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	20000090 	.word	0x20000090
 8005288:	10624dd3 	.word	0x10624dd3

0800528c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d07d      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80052a8:	2300      	movs	r3, #0
 80052aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ac:	4b4f      	ldr	r3, [pc, #316]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10d      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b8:	4b4c      	ldr	r3, [pc, #304]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	4a4b      	ldr	r2, [pc, #300]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c2:	61d3      	str	r3, [r2, #28]
 80052c4:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d0:	2301      	movs	r3, #1
 80052d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d4:	4b46      	ldr	r3, [pc, #280]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d118      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052e0:	4b43      	ldr	r3, [pc, #268]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a42      	ldr	r2, [pc, #264]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ec:	f7fe fb02 	bl	80038f4 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f2:	e008      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f4:	f7fe fafe 	bl	80038f4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d901      	bls.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e06d      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005306:	4b3a      	ldr	r3, [pc, #232]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005312:	4b36      	ldr	r3, [pc, #216]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02e      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	429a      	cmp	r2, r3
 800532e:	d027      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005330:	4b2e      	ldr	r3, [pc, #184]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005338:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800533a:	4b2e      	ldr	r3, [pc, #184]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005340:	4b2c      	ldr	r3, [pc, #176]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005346:	4a29      	ldr	r2, [pc, #164]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d014      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005356:	f7fe facd 	bl	80038f4 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535c:	e00a      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7fe fac9 	bl	80038f4 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f241 3288 	movw	r2, #5000	; 0x1388
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e036      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005374:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0ee      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4917      	ldr	r1, [pc, #92]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538e:	4313      	orrs	r3, r2
 8005390:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005398:	4b14      	ldr	r3, [pc, #80]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	490b      	ldr	r1, [pc, #44]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053ce:	4b07      	ldr	r3, [pc, #28]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4904      	ldr	r1, [pc, #16]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40007000 	.word	0x40007000
 80053f4:	42420440 	.word	0x42420440

080053f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e041      	b.n	800548e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd fcac 	bl	8002d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f000 fc72 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d001      	beq.n	80054b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e032      	b.n	8005516 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a18      	ldr	r2, [pc, #96]	; (8005520 <HAL_TIM_Base_Start+0x88>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_TIM_Base_Start+0x48>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d009      	beq.n	80054e0 <HAL_TIM_Base_Start+0x48>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a14      	ldr	r2, [pc, #80]	; (8005524 <HAL_TIM_Base_Start+0x8c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIM_Base_Start+0x48>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a13      	ldr	r2, [pc, #76]	; (8005528 <HAL_TIM_Base_Start+0x90>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d111      	bne.n	8005504 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d010      	beq.n	8005514 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	e007      	b.n	8005514 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800

0800552c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d001      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e03a      	b.n	80055ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <HAL_TIM_Base_Start_IT+0x98>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x58>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556e:	d009      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x58>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x58>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a13      	ldr	r2, [pc, #76]	; (80055cc <HAL_TIM_Base_Start_IT+0xa0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d111      	bne.n	80055a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b06      	cmp	r3, #6
 8005594:	d010      	beq.n	80055b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a6:	e007      	b.n	80055b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800

080055d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e041      	b.n	8005666 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f839 	bl	800566e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 fb86 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <HAL_TIM_PWM_Start+0x24>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	bf14      	ite	ne
 800569c:	2301      	movne	r3, #1
 800569e:	2300      	moveq	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e022      	b.n	80056ea <HAL_TIM_PWM_Start+0x6a>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d109      	bne.n	80056be <HAL_TIM_PWM_Start+0x3e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	bf14      	ite	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	2300      	moveq	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	e015      	b.n	80056ea <HAL_TIM_PWM_Start+0x6a>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d109      	bne.n	80056d8 <HAL_TIM_PWM_Start+0x58>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e008      	b.n	80056ea <HAL_TIM_PWM_Start+0x6a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	bf14      	ite	ne
 80056e4:	2301      	movne	r3, #1
 80056e6:	2300      	moveq	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e05e      	b.n	80057b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <HAL_TIM_PWM_Start+0x82>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	e013      	b.n	800572a <HAL_TIM_PWM_Start+0xaa>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d104      	bne.n	8005712 <HAL_TIM_PWM_Start+0x92>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005710:	e00b      	b.n	800572a <HAL_TIM_PWM_Start+0xaa>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d104      	bne.n	8005722 <HAL_TIM_PWM_Start+0xa2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005720:	e003      	b.n	800572a <HAL_TIM_PWM_Start+0xaa>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2201      	movs	r2, #1
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fd74 	bl	8006220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <HAL_TIM_PWM_Start+0x138>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d107      	bne.n	8005752 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005750:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_TIM_PWM_Start+0x138>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00e      	beq.n	800577a <HAL_TIM_PWM_Start+0xfa>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005764:	d009      	beq.n	800577a <HAL_TIM_PWM_Start+0xfa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a14      	ldr	r2, [pc, #80]	; (80057bc <HAL_TIM_PWM_Start+0x13c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_TIM_PWM_Start+0xfa>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a12      	ldr	r2, [pc, #72]	; (80057c0 <HAL_TIM_PWM_Start+0x140>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d111      	bne.n	800579e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b06      	cmp	r3, #6
 800578a:	d010      	beq.n	80057ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	e007      	b.n	80057ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800

080057c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d122      	bne.n	8005820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d11b      	bne.n	8005820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0202 	mvn.w	r2, #2
 80057f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa6f 	bl	8005cea <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa62 	bl	8005cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa71 	bl	8005cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b04      	cmp	r3, #4
 800582c:	d122      	bne.n	8005874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b04      	cmp	r3, #4
 800583a:	d11b      	bne.n	8005874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0204 	mvn.w	r2, #4
 8005844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa45 	bl	8005cea <HAL_TIM_IC_CaptureCallback>
 8005860:	e005      	b.n	800586e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa38 	bl	8005cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fa47 	bl	8005cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b08      	cmp	r3, #8
 8005880:	d122      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b08      	cmp	r3, #8
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0208 	mvn.w	r2, #8
 8005898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2204      	movs	r2, #4
 800589e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa1b 	bl	8005cea <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fa0e 	bl	8005cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fa1d 	bl	8005cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d122      	bne.n	800591c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d11b      	bne.n	800591c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0210 	mvn.w	r2, #16
 80058ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2208      	movs	r2, #8
 80058f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9f1 	bl	8005cea <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f9e4 	bl	8005cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f9f3 	bl	8005cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d10e      	bne.n	8005948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d107      	bne.n	8005948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0201 	mvn.w	r2, #1
 8005940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fd f962 	bl	8002c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d10e      	bne.n	8005974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005960:	2b80      	cmp	r3, #128	; 0x80
 8005962:	d107      	bne.n	8005974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800596c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fd32 	bl	80063d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d10e      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d107      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f9b7 	bl	8005d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0220 	mvn.w	r2, #32
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fcfd 	bl	80063c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e0ac      	b.n	8005b48 <HAL_TIM_PWM_ConfigChannel+0x174>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b0c      	cmp	r3, #12
 80059fa:	f200 809f 	bhi.w	8005b3c <HAL_TIM_PWM_ConfigChannel+0x168>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a39 	.word	0x08005a39
 8005a08:	08005b3d 	.word	0x08005b3d
 8005a0c:	08005b3d 	.word	0x08005b3d
 8005a10:	08005b3d 	.word	0x08005b3d
 8005a14:	08005a79 	.word	0x08005a79
 8005a18:	08005b3d 	.word	0x08005b3d
 8005a1c:	08005b3d 	.word	0x08005b3d
 8005a20:	08005b3d 	.word	0x08005b3d
 8005a24:	08005abb 	.word	0x08005abb
 8005a28:	08005b3d 	.word	0x08005b3d
 8005a2c:	08005b3d 	.word	0x08005b3d
 8005a30:	08005b3d 	.word	0x08005b3d
 8005a34:	08005afb 	.word	0x08005afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f9d0 	bl	8005de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0208 	orr.w	r2, r2, #8
 8005a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0204 	bic.w	r2, r2, #4
 8005a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6999      	ldr	r1, [r3, #24]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	619a      	str	r2, [r3, #24]
      break;
 8005a76:	e062      	b.n	8005b3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fa16 	bl	8005eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6999      	ldr	r1, [r3, #24]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	619a      	str	r2, [r3, #24]
      break;
 8005ab8:	e041      	b.n	8005b3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fa5f 	bl	8005f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0208 	orr.w	r2, r2, #8
 8005ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0204 	bic.w	r2, r2, #4
 8005ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69d9      	ldr	r1, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	61da      	str	r2, [r3, #28]
      break;
 8005af8:	e021      	b.n	8005b3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 faa9 	bl	8006058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69d9      	ldr	r1, [r3, #28]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	021a      	lsls	r2, r3, #8
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	61da      	str	r2, [r3, #28]
      break;
 8005b3a:	e000      	b.n	8005b3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005b3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_ConfigClockSource+0x18>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e0b3      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x180>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba0:	d03e      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0xd0>
 8005ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba6:	f200 8087 	bhi.w	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bae:	f000 8085 	beq.w	8005cbc <HAL_TIM_ConfigClockSource+0x16c>
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb6:	d87f      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
 8005bb8:	2b70      	cmp	r3, #112	; 0x70
 8005bba:	d01a      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0xa2>
 8005bbc:	2b70      	cmp	r3, #112	; 0x70
 8005bbe:	d87b      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
 8005bc0:	2b60      	cmp	r3, #96	; 0x60
 8005bc2:	d050      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x116>
 8005bc4:	2b60      	cmp	r3, #96	; 0x60
 8005bc6:	d877      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
 8005bc8:	2b50      	cmp	r3, #80	; 0x50
 8005bca:	d03c      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0xf6>
 8005bcc:	2b50      	cmp	r3, #80	; 0x50
 8005bce:	d873      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d058      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x136>
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d86f      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
 8005bd8:	2b30      	cmp	r3, #48	; 0x30
 8005bda:	d064      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x156>
 8005bdc:	2b30      	cmp	r3, #48	; 0x30
 8005bde:	d86b      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d060      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x156>
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d867      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d05c      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x156>
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d05a      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005bf0:	e062      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6899      	ldr	r1, [r3, #8]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f000 faee 	bl	80061e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	609a      	str	r2, [r3, #8]
      break;
 8005c1e:	e04e      	b.n	8005cbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6899      	ldr	r1, [r3, #8]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f000 fad7 	bl	80061e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c42:	609a      	str	r2, [r3, #8]
      break;
 8005c44:	e03b      	b.n	8005cbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 fa4e 	bl	80060f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2150      	movs	r1, #80	; 0x50
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 faa5 	bl	80061ae <TIM_ITRx_SetConfig>
      break;
 8005c64:	e02b      	b.n	8005cbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f000 fa6c 	bl	8006150 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2160      	movs	r1, #96	; 0x60
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fa95 	bl	80061ae <TIM_ITRx_SetConfig>
      break;
 8005c84:	e01b      	b.n	8005cbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f000 fa2e 	bl	80060f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2140      	movs	r1, #64	; 0x40
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fa85 	bl	80061ae <TIM_ITRx_SetConfig>
      break;
 8005ca4:	e00b      	b.n	8005cbe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f000 fa7c 	bl	80061ae <TIM_ITRx_SetConfig>
        break;
 8005cb6:	e002      	b.n	8005cbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005cb8:	bf00      	nop
 8005cba:	e000      	b.n	8005cbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005cbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr

08005cea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <TIM_Base_SetConfig+0xb8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_Base_SetConfig+0x30>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d007      	beq.n	8005d50 <TIM_Base_SetConfig+0x30>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <TIM_Base_SetConfig+0xbc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0x30>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <TIM_Base_SetConfig+0xc0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d108      	bne.n	8005d62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <TIM_Base_SetConfig+0xb8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00b      	beq.n	8005d82 <TIM_Base_SetConfig+0x62>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d70:	d007      	beq.n	8005d82 <TIM_Base_SetConfig+0x62>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a19      	ldr	r2, [pc, #100]	; (8005ddc <TIM_Base_SetConfig+0xbc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <TIM_Base_SetConfig+0x62>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <TIM_Base_SetConfig+0xc0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d108      	bne.n	8005d94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <TIM_Base_SetConfig+0xb8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d103      	bne.n	8005dc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	615a      	str	r2, [r3, #20]
}
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40000400 	.word	0x40000400
 8005de0:	40000800 	.word	0x40000800

08005de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0201 	bic.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0303 	bic.w	r3, r3, #3
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f023 0302 	bic.w	r3, r3, #2
 8005e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <TIM_OC1_SetConfig+0xc8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d10c      	bne.n	8005e5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0308 	bic.w	r3, r3, #8
 8005e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f023 0304 	bic.w	r3, r3, #4
 8005e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a13      	ldr	r2, [pc, #76]	; (8005eac <TIM_OC1_SetConfig+0xc8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d111      	bne.n	8005e86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40012c00 	.word	0x40012c00

08005eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f023 0210 	bic.w	r2, r3, #16
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0320 	bic.w	r3, r3, #32
 8005efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <TIM_OC2_SetConfig+0xd0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10d      	bne.n	8005f2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a14      	ldr	r2, [pc, #80]	; (8005f80 <TIM_OC2_SetConfig+0xd0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d113      	bne.n	8005f5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr
 8005f80:	40012c00 	.word	0x40012c00

08005f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <TIM_OC3_SetConfig+0xd0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10d      	bne.n	8005ffe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <TIM_OC3_SetConfig+0xd0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d113      	bne.n	800602e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800600c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	621a      	str	r2, [r3, #32]
}
 8006048:	bf00      	nop
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40012c00 	.word	0x40012c00

08006058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	031b      	lsls	r3, r3, #12
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <TIM_OC4_SetConfig+0x98>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d109      	bne.n	80060cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	019b      	lsls	r3, r3, #6
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr
 80060f0:	40012c00 	.word	0x40012c00

080060f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f023 0201 	bic.w	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800611e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 030a 	bic.w	r3, r3, #10
 8006130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f023 0210 	bic.w	r2, r3, #16
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800617a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	031b      	lsls	r3, r3, #12
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800618c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr

080061ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f043 0307 	orr.w	r3, r3, #7
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	609a      	str	r2, [r3, #8]
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr

080061e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b087      	sub	sp, #28
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
 80061ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	021a      	lsls	r2, r3, #8
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	431a      	orrs	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4313      	orrs	r3, r2
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	609a      	str	r2, [r3, #8]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2201      	movs	r2, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1a      	ldr	r2, [r3, #32]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	431a      	orrs	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr

08006268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800627c:	2302      	movs	r3, #2
 800627e:	e046      	b.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a16      	ldr	r2, [pc, #88]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d009      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a12      	ldr	r2, [pc, #72]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a10      	ldr	r2, [pc, #64]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10c      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800

08006324 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800633c:	2302      	movs	r3, #2
 800633e:	e03d      	b.n	80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr

080063ea <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80063ea:	b490      	push	{r4, r7}
 80063ec:	b088      	sub	sp, #32
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	461a      	mov	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	0e1b      	lsrs	r3, r3, #24
 80063fe:	4413      	add	r3, r2
 8006400:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	fa93 f3a3 	rbit	r3, r3
 800640e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	fab3 f383 	clz	r3, r3
 8006416:	b2db      	uxtb	r3, r3
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	210f      	movs	r1, #15
 800641c:	fa01 f303 	lsl.w	r3, r1, r3
 8006420:	43db      	mvns	r3, r3
 8006422:	401a      	ands	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	fa93 f3a3 	rbit	r3, r3
 800642e:	61bb      	str	r3, [r7, #24]
  return result;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	fab3 f383 	clz	r3, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	4313      	orrs	r3, r2
 8006442:	6023      	str	r3, [r4, #0]
}
 8006444:	bf00      	nop
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bc90      	pop	{r4, r7}
 800644c:	4770      	bx	lr

0800644e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800644e:	b490      	push	{r4, r7}
 8006450:	b088      	sub	sp, #32
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	0e1b      	lsrs	r3, r3, #24
 8006462:	4413      	add	r3, r2
 8006464:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	613b      	str	r3, [r7, #16]
  return result;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	fab3 f383 	clz	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	2103      	movs	r1, #3
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	401a      	ands	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	fa93 f3a3 	rbit	r3, r3
 8006492:	61bb      	str	r3, [r7, #24]
  return result;
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	fab3 f383 	clz	r3, r3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	fa01 f303 	lsl.w	r3, r1, r3
 80064a4:	4313      	orrs	r3, r2
 80064a6:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80064a8:	bf00      	nop
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc90      	pop	{r4, r7}
 80064b0:	4770      	bx	lr

080064b2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 80064b2:	b490      	push	{r4, r7}
 80064b4:	b088      	sub	sp, #32
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	461a      	mov	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	4413      	add	r3, r2
 80064c8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	fa93 f3a3 	rbit	r3, r3
 80064d6:	613b      	str	r3, [r7, #16]
  return result;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	fab3 f383 	clz	r3, r3
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	2104      	movs	r1, #4
 80064e4:	fa01 f303 	lsl.w	r3, r1, r3
 80064e8:	43db      	mvns	r3, r3
 80064ea:	401a      	ands	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	fa93 f3a3 	rbit	r3, r3
 80064f6:	61bb      	str	r3, [r7, #24]
  return result;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	fab3 f383 	clz	r3, r3
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	fa01 f303 	lsl.w	r3, r1, r3
 8006508:	4313      	orrs	r3, r2
 800650a:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800650c:	bf00      	nop
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bc90      	pop	{r4, r7}
 8006514:	4770      	bx	lr

08006516 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006516:	b480      	push	{r7}
 8006518:	b087      	sub	sp, #28
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	0a1b      	lsrs	r3, r3, #8
 800652a:	43db      	mvns	r3, r3
 800652c:	401a      	ands	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	fa93 f3a3 	rbit	r3, r3
 800653a:	613b      	str	r3, [r7, #16]
  return result;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	fab3 f383 	clz	r3, r3
 8006542:	b2db      	uxtb	r3, r3
 8006544:	4619      	mov	r1, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	408b      	lsls	r3, r1
 800654a:	431a      	orrs	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	60da      	str	r2, [r3, #12]
}
 8006550:	bf00      	nop
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b088      	sub	sp, #32
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	fa93 f3a3 	rbit	r3, r3
 8006578:	60fb      	str	r3, [r7, #12]
  return result;
 800657a:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800657c:	fab3 f383 	clz	r3, r3
 8006580:	b2db      	uxtb	r3, r3
 8006582:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8006584:	e040      	b.n	8006608 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8006586:	2201      	movs	r2, #1
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	409a      	lsls	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d036      	beq.n	8006602 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	2b07      	cmp	r3, #7
 8006598:	d806      	bhi.n	80065a8 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800659a:	f240 1201 	movw	r2, #257	; 0x101
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	e008      	b.n	80065ba <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	3b08      	subs	r3, #8
 80065ac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065b8:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	461a      	mov	r2, r3
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ffa7 	bl	8006516 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	461a      	mov	r2, r3
 80065ce:	69b9      	ldr	r1, [r7, #24]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff ff0a 	bl	80063ea <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d003      	beq.n	80065e6 <LL_GPIO_Init+0x8c>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b09      	cmp	r3, #9
 80065e4:	d10d      	bne.n	8006602 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	461a      	mov	r2, r3
 80065ec:	69b9      	ldr	r1, [r7, #24]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ff2d 	bl	800644e <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	461a      	mov	r2, r3
 80065fa:	69b9      	ldr	r1, [r7, #24]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff ff58 	bl	80064b2 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	3301      	adds	r3, #1
 8006606:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1b8      	bne.n	8006586 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <LL_RCC_GetSysClkSource+0x14>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 030c 	and.w	r3, r3, #12
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr
 8006634:	40021000 	.word	0x40021000

08006638 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800663c:	4b03      	ldr	r3, [pc, #12]	; (800664c <LL_RCC_GetAHBPrescaler+0x14>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006644:	4618      	mov	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	40021000 	.word	0x40021000

08006650 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006654:	4b03      	ldr	r3, [pc, #12]	; (8006664 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800665c:	4618      	mov	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr
 8006664:	40021000 	.word	0x40021000

08006668 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800666c:	4b03      	ldr	r3, [pc, #12]	; (800667c <LL_RCC_GetAPB2Prescaler+0x14>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr
 800667c:	40021000 	.word	0x40021000

08006680 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8006684:	4b03      	ldr	r3, [pc, #12]	; (8006694 <LL_RCC_PLL_GetMainSource+0x14>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800668c:	4618      	mov	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr
 8006694:	40021000 	.word	0x40021000

08006698 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <LL_RCC_PLL_GetMultiplicator+0x14>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr
 80066ac:	40021000 	.word	0x40021000

080066b0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80066b4:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <LL_RCC_PLL_GetPrediv+0x18>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	0c5b      	lsrs	r3, r3, #17
 80066ba:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80066be:	4618      	mov	r0, r3
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000

080066cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80066d4:	f000 f820 	bl	8006718 <RCC_GetSystemClockFreq>
 80066d8:	4602      	mov	r2, r0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f83e 	bl	8006764 <RCC_GetHCLKClockFreq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f84c 	bl	8006790 <RCC_GetPCLK1ClockFreq>
 80066f8:	4602      	mov	r2, r0
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f858 	bl	80067b8 <RCC_GetPCLK2ClockFreq>
 8006708:	4602      	mov	r2, r0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60da      	str	r2, [r3, #12]
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006722:	f7ff ff7d 	bl	8006620 <LL_RCC_GetSysClkSource>
 8006726:	4603      	mov	r3, r0
 8006728:	2b08      	cmp	r3, #8
 800672a:	d00c      	beq.n	8006746 <RCC_GetSystemClockFreq+0x2e>
 800672c:	2b08      	cmp	r3, #8
 800672e:	d80e      	bhi.n	800674e <RCC_GetSystemClockFreq+0x36>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <RCC_GetSystemClockFreq+0x22>
 8006734:	2b04      	cmp	r3, #4
 8006736:	d003      	beq.n	8006740 <RCC_GetSystemClockFreq+0x28>
 8006738:	e009      	b.n	800674e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <RCC_GetSystemClockFreq+0x48>)
 800673c:	607b      	str	r3, [r7, #4]
      break;
 800673e:	e009      	b.n	8006754 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <RCC_GetSystemClockFreq+0x48>)
 8006742:	607b      	str	r3, [r7, #4]
      break;
 8006744:	e006      	b.n	8006754 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006746:	f000 f84b 	bl	80067e0 <RCC_PLL_GetFreqDomain_SYS>
 800674a:	6078      	str	r0, [r7, #4]
      break;
 800674c:	e002      	b.n	8006754 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800674e:	4b04      	ldr	r3, [pc, #16]	; (8006760 <RCC_GetSystemClockFreq+0x48>)
 8006750:	607b      	str	r3, [r7, #4]
      break;
 8006752:	bf00      	nop
  }

  return frequency;
 8006754:	687b      	ldr	r3, [r7, #4]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	007a1200 	.word	0x007a1200

08006764 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800676c:	f7ff ff64 	bl	8006638 <LL_RCC_GetAHBPrescaler>
 8006770:	4603      	mov	r3, r0
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	4a04      	ldr	r2, [pc, #16]	; (800678c <RCC_GetHCLKClockFreq+0x28>)
 800677a:	5cd3      	ldrb	r3, [r2, r3]
 800677c:	461a      	mov	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	40d3      	lsrs	r3, r2
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	0800a9a0 	.word	0x0800a9a0

08006790 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006798:	f7ff ff5a 	bl	8006650 <LL_RCC_GetAPB1Prescaler>
 800679c:	4603      	mov	r3, r0
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <RCC_GetPCLK1ClockFreq+0x24>)
 80067a2:	5cd3      	ldrb	r3, [r2, r3]
 80067a4:	461a      	mov	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	40d3      	lsrs	r3, r2
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	0800a9b0 	.word	0x0800a9b0

080067b8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80067c0:	f7ff ff52 	bl	8006668 <LL_RCC_GetAPB2Prescaler>
 80067c4:	4603      	mov	r3, r0
 80067c6:	0adb      	lsrs	r3, r3, #11
 80067c8:	4a04      	ldr	r2, [pc, #16]	; (80067dc <RCC_GetPCLK2ClockFreq+0x24>)
 80067ca:	5cd3      	ldrb	r3, [r2, r3]
 80067cc:	461a      	mov	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	40d3      	lsrs	r3, r2
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	0800a9b0 	.word	0x0800a9b0

080067e0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	2300      	movs	r3, #0
 80067ec:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80067ee:	f7ff ff47 	bl	8006680 <LL_RCC_PLL_GetMainSource>
 80067f2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006800:	d003      	beq.n	800680a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006802:	e00b      	b.n	800681c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8006806:	607b      	str	r3, [r7, #4]
      break;
 8006808:	e00b      	b.n	8006822 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800680a:	f7ff ff51 	bl	80066b0 <LL_RCC_PLL_GetPrediv>
 800680e:	4603      	mov	r3, r0
 8006810:	3301      	adds	r3, #1
 8006812:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8006814:	fbb2 f3f3 	udiv	r3, r2, r3
 8006818:	607b      	str	r3, [r7, #4]
      break;
 800681a:	e002      	b.n	8006822 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800681e:	607b      	str	r3, [r7, #4]
      break;
 8006820:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8006822:	f7ff ff39 	bl	8006698 <LL_RCC_PLL_GetMultiplicator>
 8006826:	4603      	mov	r3, r0
 8006828:	0c9b      	lsrs	r3, r3, #18
 800682a:	3302      	adds	r3, #2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	003d0900 	.word	0x003d0900
 8006840:	007a1200 	.word	0x007a1200

08006844 <LL_USART_IsEnabled>:
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <LL_USART_SetStopBitsLength>:
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	611a      	str	r2, [r3, #16]
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <LL_USART_SetHWFlowCtrl>:
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	615a      	str	r2, [r3, #20]
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
	...

080068b4 <LL_USART_SetBaudRate>:
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009a      	lsls	r2, r3, #2
 80068ca:	441a      	add	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d4:	4a25      	ldr	r2, [pc, #148]	; (800696c <LL_USART_SetBaudRate+0xb8>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	b29b      	uxth	r3, r3
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	b299      	uxth	r1, r3
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009a      	lsls	r2, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80068f6:	4b1d      	ldr	r3, [pc, #116]	; (800696c <LL_USART_SetBaudRate+0xb8>)
 80068f8:	fba3 0302 	umull	r0, r3, r3, r2
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	2064      	movs	r0, #100	; 0x64
 8006900:	fb00 f303 	mul.w	r3, r0, r3
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	3332      	adds	r3, #50	; 0x32
 800690a:	4a18      	ldr	r2, [pc, #96]	; (800696c <LL_USART_SetBaudRate+0xb8>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	b29b      	uxth	r3, r3
 8006914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006918:	b29b      	uxth	r3, r3
 800691a:	440b      	add	r3, r1
 800691c:	b299      	uxth	r1, r3
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009a      	lsls	r2, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <LL_USART_SetBaudRate+0xb8>)
 8006934:	fba3 0302 	umull	r0, r3, r3, r2
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	2064      	movs	r0, #100	; 0x64
 800693c:	fb00 f303 	mul.w	r3, r0, r3
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	3332      	adds	r3, #50	; 0x32
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <LL_USART_SetBaudRate+0xb8>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	b29b      	uxth	r3, r3
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	b29b      	uxth	r3, r3
 8006956:	440b      	add	r3, r1
 8006958:	b29b      	uxth	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	609a      	str	r2, [r3, #8]
}
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	51eb851f 	.word	0x51eb851f

08006970 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800697e:	2300      	movs	r3, #0
 8006980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff ff5e 	bl	8006844 <LL_USART_IsEnabled>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d145      	bne.n	8006a1a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006996:	f023 030c 	bic.w	r3, r3, #12
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	6851      	ldr	r1, [r2, #4]
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	68d2      	ldr	r2, [r2, #12]
 80069a2:	4311      	orrs	r1, r2
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	6912      	ldr	r2, [r2, #16]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff57 	bl	800686a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff63 	bl	800688e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80069c8:	f107 0308 	add.w	r3, r7, #8
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff fe7d 	bl	80066cc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <LL_USART_Init+0xb4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d102      	bne.n	80069e0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	e00c      	b.n	80069fa <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a11      	ldr	r2, [pc, #68]	; (8006a28 <LL_USART_Init+0xb8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d102      	bne.n	80069ee <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e005      	b.n	80069fa <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a0e      	ldr	r2, [pc, #56]	; (8006a2c <LL_USART_Init+0xbc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00c      	beq.n	8006a1a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	69b9      	ldr	r1, [r7, #24]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff ff4d 	bl	80068b4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40013800 	.word	0x40013800
 8006a28:	40004400 	.word	0x40004400
 8006a2c:	40004800 	.word	0x40004800

08006a30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a42:	2b84      	cmp	r3, #132	; 0x84
 8006a44:	d005      	beq.n	8006a52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	3303      	adds	r3, #3
 8006a50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a52:	68fb      	ldr	r3, [r7, #12]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a64:	f3ef 8305 	mrs	r3, IPSR
 8006a68:	607b      	str	r3, [r7, #4]
  return(result);
 8006a6a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf14      	ite	ne
 8006a70:	2301      	movne	r3, #1
 8006a72:	2300      	moveq	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a84:	f001 fc2c 	bl	80082e0 <vTaskStartScheduler>
  
  return osOK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a90:	b089      	sub	sp, #36	; 0x24
 8006a92:	af04      	add	r7, sp, #16
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d020      	beq.n	8006ae2 <osThreadCreate+0x54>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01c      	beq.n	8006ae2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685c      	ldr	r4, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681d      	ldr	r5, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691e      	ldr	r6, [r3, #16]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff ffb8 	bl	8006a30 <makeFreeRtosPriority>
 8006ac0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aca:	9202      	str	r2, [sp, #8]
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	9100      	str	r1, [sp, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	4632      	mov	r2, r6
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f001 fa44 	bl	8007f64 <xTaskCreateStatic>
 8006adc:	4603      	mov	r3, r0
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e01c      	b.n	8006b1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685c      	ldr	r4, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aee:	b29e      	uxth	r6, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff ff9a 	bl	8006a30 <makeFreeRtosPriority>
 8006afc:	4602      	mov	r2, r0
 8006afe:	f107 030c 	add.w	r3, r7, #12
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	9200      	str	r2, [sp, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	4632      	mov	r2, r6
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f001 fa85 	bl	800801c <xTaskCreate>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d001      	beq.n	8006b1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e000      	b.n	8006b1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <osDelay+0x16>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	e000      	b.n	8006b3e <osDelay+0x18>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 fb9a 	bl	8008278 <vTaskDelay>
  
  return osOK;
 8006b44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d013      	beq.n	8006b8e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8006b66:	7afb      	ldrb	r3, [r7, #11]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <osTimerCreate+0x20>
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	e000      	b.n	8006b72 <osTimerCreate+0x22>
 8006b70:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	460a      	mov	r2, r1
 8006b82:	2101      	movs	r1, #1
 8006b84:	480b      	ldr	r0, [pc, #44]	; (8006bb4 <osTimerCreate+0x64>)
 8006b86:	f002 fa9e 	bl	80090c6 <xTimerCreateStatic>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	e00e      	b.n	8006bac <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <osTimerCreate+0x48>
 8006b94:	2201      	movs	r2, #1
 8006b96:	e000      	b.n	8006b9a <osTimerCreate+0x4a>
 8006b98:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	4803      	ldr	r0, [pc, #12]	; (8006bb4 <osTimerCreate+0x64>)
 8006ba6:	f002 fa6d 	bl	8009084 <xTimerCreate>
 8006baa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	0800a984 	.word	0x0800a984

08006bb8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <osTimerStart+0x20>
    ticks = 1;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006bd8:	f7ff ff41 	bl	8006a5e <inHandlerMode>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01a      	beq.n	8006c18 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	2200      	movs	r2, #0
 8006be8:	9200      	str	r2, [sp, #0]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	2109      	movs	r1, #9
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f002 fad8 	bl	80091a4 <xTimerGenericCommand>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d002      	beq.n	8006c00 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8006bfa:	23ff      	movs	r3, #255	; 0xff
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e018      	b.n	8006c32 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d015      	beq.n	8006c32 <osTimerStart+0x7a>
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <osTimerStart+0x84>)
 8006c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	e00c      	b.n	8006c32 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	2104      	movs	r1, #4
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f002 fabe 	bl	80091a4 <xTimerGenericCommand>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d001      	beq.n	8006c32 <osTimerStart+0x7a>
      result = osErrorOS;
 8006c2e:	23ff      	movs	r3, #255	; 0xff
 8006c30:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8006c32:	697b      	ldr	r3, [r7, #20]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00f      	beq.n	8006c72 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d10a      	bne.n	8006c6e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	9200      	str	r2, [sp, #0]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	2001      	movs	r0, #1
 8006c66:	f000 fa95 	bl	8007194 <xQueueGenericCreateStatic>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	e016      	b.n	8006c9c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e014      	b.n	8006c9c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d110      	bne.n	8006c9a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006c78:	2203      	movs	r2, #3
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	2001      	movs	r0, #1
 8006c7e:	f000 fb00 	bl	8007282 <xQueueGenericCreate>
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d005      	beq.n	8006c96 <osSemaphoreCreate+0x56>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2100      	movs	r1, #0
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fb53 	bl	800733c <xQueueGenericSend>
      return sema;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	e000      	b.n	8006c9c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006c9a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	e03a      	b.n	8006d32 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc6:	d103      	bne.n	8006cd0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e009      	b.n	8006ce4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d006      	beq.n	8006ce4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <osSemaphoreWait+0x40>
      ticks = 1;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006ce4:	f7ff febb 	bl	8006a5e <inHandlerMode>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d017      	beq.n	8006d1e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 ff30 	bl	8007b5c <xQueueReceiveFromISR>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d001      	beq.n	8006d06 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006d02:	23ff      	movs	r3, #255	; 0xff
 8006d04:	e015      	b.n	8006d32 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d011      	beq.n	8006d30 <osSemaphoreWait+0x8c>
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <osSemaphoreWait+0x98>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	e008      	b.n	8006d30 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fe0f 	bl	8007944 <xQueueSemaphoreTake>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d001      	beq.n	8006d30 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006d2c:	23ff      	movs	r3, #255	; 0xff
 8006d2e:	e000      	b.n	8006d32 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006d50:	f7ff fe85 	bl	8006a5e <inHandlerMode>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d016      	beq.n	8006d88 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fc81 	bl	8007668 <xQueueGiveFromISR>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d001      	beq.n	8006d70 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006d6c:	23ff      	movs	r3, #255	; 0xff
 8006d6e:	e017      	b.n	8006da0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d013      	beq.n	8006d9e <osSemaphoreRelease+0x5e>
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <osSemaphoreRelease+0x68>)
 8006d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	e00a      	b.n	8006d9e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fad4 	bl	800733c <xQueueGenericSend>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d001      	beq.n	8006d9e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006d9a:	23ff      	movs	r3, #255	; 0xff
 8006d9c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006dac:	b590      	push	{r4, r7, lr}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d011      	beq.n	8006de2 <osMessageCreate+0x36>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00d      	beq.n	8006de2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6859      	ldr	r1, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	2400      	movs	r4, #0
 8006dd8:	9400      	str	r4, [sp, #0]
 8006dda:	f000 f9db 	bl	8007194 <xQueueGenericCreateStatic>
 8006dde:	4603      	mov	r3, r0
 8006de0:	e008      	b.n	8006df4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	4619      	mov	r1, r3
 8006dee:	f000 fa48 	bl	8007282 <xQueueGenericCreate>
 8006df2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}

08006dfc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <osMessagePut+0x1e>
    ticks = 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006e1a:	f7ff fe20 	bl	8006a5e <inHandlerMode>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d018      	beq.n	8006e56 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006e24:	f107 0210 	add.w	r2, r7, #16
 8006e28:	f107 0108 	add.w	r1, r7, #8
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fb82 	bl	8007538 <xQueueGenericSendFromISR>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d001      	beq.n	8006e3e <osMessagePut+0x42>
      return osErrorOS;
 8006e3a:	23ff      	movs	r3, #255	; 0xff
 8006e3c:	e018      	b.n	8006e70 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d014      	beq.n	8006e6e <osMessagePut+0x72>
 8006e44:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <osMessagePut+0x7c>)
 8006e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	e00b      	b.n	8006e6e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006e56:	f107 0108 	add.w	r1, r7, #8
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fa6c 	bl	800733c <xQueueGenericSend>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d001      	beq.n	8006e6e <osMessagePut+0x72>
      return osErrorOS;
 8006e6a:	23ff      	movs	r3, #255	; 0xff
 8006e6c:	e000      	b.n	8006e70 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	e000ed04 	.word	0xe000ed04

08006e7c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006e7c:	b590      	push	{r4, r7, lr}
 8006e7e:	b08b      	sub	sp, #44	; 0x2c
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006e96:	2380      	movs	r3, #128	; 0x80
 8006e98:	617b      	str	r3, [r7, #20]
    return event;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	461c      	mov	r4, r3
 8006e9e:	f107 0314 	add.w	r3, r7, #20
 8006ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006eaa:	e054      	b.n	8006f56 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006eac:	2300      	movs	r3, #0
 8006eae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eba:	d103      	bne.n	8006ec4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec2:	e009      	b.n	8006ed8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <osMessageGet+0x5c>
      ticks = 1;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006ed8:	f7ff fdc1 	bl	8006a5e <inHandlerMode>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01c      	beq.n	8006f1c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006ee2:	f107 0220 	add.w	r2, r7, #32
 8006ee6:	f107 0314 	add.w	r3, r7, #20
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	68b8      	ldr	r0, [r7, #8]
 8006ef0:	f000 fe34 	bl	8007b5c <xQueueReceiveFromISR>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d102      	bne.n	8006f00 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006efa:	2310      	movs	r3, #16
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e001      	b.n	8006f04 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01d      	beq.n	8006f46 <osMessageGet+0xca>
 8006f0a:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <osMessageGet+0xe4>)
 8006f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	e014      	b.n	8006f46 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	3304      	adds	r3, #4
 8006f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f24:	4619      	mov	r1, r3
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	f000 fc2c 	bl	8007784 <xQueueReceive>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d102      	bne.n	8006f38 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006f32:	2310      	movs	r3, #16
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e006      	b.n	8006f46 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <osMessageGet+0xc6>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e000      	b.n	8006f44 <osMessageGet+0xc8>
 8006f42:	2340      	movs	r3, #64	; 0x40
 8006f44:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	461c      	mov	r4, r3
 8006f4a:	f107 0314 	add.w	r3, r7, #20
 8006f4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	372c      	adds	r7, #44	; 0x2c
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd90      	pop	{r4, r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f103 0208 	add.w	r2, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f103 0208 	add.w	r2, r3, #8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f103 0208 	add.w	r2, r3, #8
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007016:	d103      	bne.n	8007020 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e00c      	b.n	800703a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3308      	adds	r3, #8
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e002      	b.n	800702e <vListInsert+0x2e>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d2f6      	bcs.n	8007028 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr

08007070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6892      	ldr	r2, [r2, #8]
 8007086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6852      	ldr	r2, [r2, #4]
 8007090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d103      	bne.n	80070a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	1e5a      	subs	r2, r3, #1
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr
	...

080070c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070ee:	f002 fbfd 	bl	80098ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070fe:	fb01 f303 	mul.w	r3, r1, r3
 8007102:	441a      	add	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	3b01      	subs	r3, #1
 8007120:	68f9      	ldr	r1, [r7, #12]
 8007122:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	441a      	add	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	22ff      	movs	r2, #255	; 0xff
 8007132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d114      	bne.n	800716e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01a      	beq.n	8007182 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3310      	adds	r3, #16
 8007150:	4618      	mov	r0, r3
 8007152:	f001 fb4b 	bl	80087ec <xTaskRemoveFromEventList>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d012      	beq.n	8007182 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800715c:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <xQueueGenericReset+0xcc>)
 800715e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	e009      	b.n	8007182 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3310      	adds	r3, #16
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff fef6 	bl	8006f64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3324      	adds	r3, #36	; 0x24
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff fef1 	bl	8006f64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007182:	f002 fbe3 	bl	800994c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007186:	2301      	movs	r3, #1
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08e      	sub	sp, #56	; 0x38
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <xQueueGenericCreateStatic+0x52>
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <xQueueGenericCreateStatic+0x56>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <xQueueGenericCreateStatic+0x58>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	623b      	str	r3, [r7, #32]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <xQueueGenericCreateStatic+0x7e>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <xQueueGenericCreateStatic+0x82>
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <xQueueGenericCreateStatic+0x84>
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	61fb      	str	r3, [r7, #28]
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007232:	2348      	movs	r3, #72	; 0x48
 8007234:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b48      	cmp	r3, #72	; 0x48
 800723a:	d00a      	beq.n	8007252 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	61bb      	str	r3, [r7, #24]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00d      	beq.n	8007278 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007264:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 f843 	bl	80072fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800727a:	4618      	mov	r0, r3
 800727c:	3730      	adds	r7, #48	; 0x30
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007282:	b580      	push	{r7, lr}
 8007284:	b08a      	sub	sp, #40	; 0x28
 8007286:	af02      	add	r7, sp, #8
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	4613      	mov	r3, r2
 800728e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <xQueueGenericCreate+0x2a>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	613b      	str	r3, [r7, #16]
}
 80072a8:	bf00      	nop
 80072aa:	e7fe      	b.n	80072aa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	e004      	b.n	80072c2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	fb02 f303 	mul.w	r3, r2, r3
 80072c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	3348      	adds	r3, #72	; 0x48
 80072c6:	4618      	mov	r0, r3
 80072c8:	f002 fc10 	bl	8009aec <pvPortMalloc>
 80072cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00f      	beq.n	80072f4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	3348      	adds	r3, #72	; 0x48
 80072d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072e2:	79fa      	ldrb	r2, [r7, #7]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f805 	bl	80072fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80072f4:	69bb      	ldr	r3, [r7, #24]
	}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e002      	b.n	8007320 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800732c:	2101      	movs	r1, #1
 800732e:	69b8      	ldr	r0, [r7, #24]
 8007330:	f7ff fec8 	bl	80070c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08e      	sub	sp, #56	; 0x38
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800734a:	2300      	movs	r3, #0
 800734c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xQueueGenericSend+0x32>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d103      	bne.n	800737c <xQueueGenericSend+0x40>
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <xQueueGenericSend+0x44>
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <xQueueGenericSend+0x46>
 8007380:	2300      	movs	r3, #0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <xQueueGenericSend+0x60>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007398:	bf00      	nop
 800739a:	e7fe      	b.n	800739a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d103      	bne.n	80073aa <xQueueGenericSend+0x6e>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <xQueueGenericSend+0x72>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <xQueueGenericSend+0x74>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <xQueueGenericSend+0x8e>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	623b      	str	r3, [r7, #32]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ca:	f001 fbcf 	bl	8008b6c <xTaskGetSchedulerState>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d102      	bne.n	80073da <xQueueGenericSend+0x9e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <xQueueGenericSend+0xa2>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <xQueueGenericSend+0xa4>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <xQueueGenericSend+0xbe>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	61fb      	str	r3, [r7, #28]
}
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073fa:	f002 fa77 	bl	80098ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	429a      	cmp	r2, r3
 8007408:	d302      	bcc.n	8007410 <xQueueGenericSend+0xd4>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d129      	bne.n	8007464 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007416:	f000 fc38 	bl	8007c8a <prvCopyDataToQueue>
 800741a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2b00      	cmp	r3, #0
 8007422:	d010      	beq.n	8007446 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	3324      	adds	r3, #36	; 0x24
 8007428:	4618      	mov	r0, r3
 800742a:	f001 f9df 	bl	80087ec <xTaskRemoveFromEventList>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d013      	beq.n	800745c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007434:	4b3f      	ldr	r3, [pc, #252]	; (8007534 <xQueueGenericSend+0x1f8>)
 8007436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	e00a      	b.n	800745c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800744c:	4b39      	ldr	r3, [pc, #228]	; (8007534 <xQueueGenericSend+0x1f8>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800745c:	f002 fa76 	bl	800994c <vPortExitCritical>
				return pdPASS;
 8007460:	2301      	movs	r3, #1
 8007462:	e063      	b.n	800752c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800746a:	f002 fa6f 	bl	800994c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800746e:	2300      	movs	r3, #0
 8007470:	e05c      	b.n	800752c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007478:	f107 0314 	add.w	r3, r7, #20
 800747c:	4618      	mov	r0, r3
 800747e:	f001 fa17 	bl	80088b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007482:	2301      	movs	r3, #1
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007486:	f002 fa61 	bl	800994c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800748a:	f000 ff8f 	bl	80083ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800748e:	f002 fa2d 	bl	80098ec <vPortEnterCritical>
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007498:	b25b      	sxtb	r3, r3
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800749e:	d103      	bne.n	80074a8 <xQueueGenericSend+0x16c>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ae:	b25b      	sxtb	r3, r3
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b4:	d103      	bne.n	80074be <xQueueGenericSend+0x182>
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074be:	f002 fa45 	bl	800994c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074c2:	1d3a      	adds	r2, r7, #4
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fa06 	bl	80088dc <xTaskCheckForTimeOut>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d124      	bne.n	8007520 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d8:	f000 fccf 	bl	8007e7a <prvIsQueueFull>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d018      	beq.n	8007514 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	3310      	adds	r3, #16
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 f92e 	bl	800874c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f2:	f000 fc5a 	bl	8007daa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074f6:	f000 ff67 	bl	80083c8 <xTaskResumeAll>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f47f af7c 	bne.w	80073fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007502:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <xQueueGenericSend+0x1f8>)
 8007504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	e772      	b.n	80073fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007516:	f000 fc48 	bl	8007daa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800751a:	f000 ff55 	bl	80083c8 <xTaskResumeAll>
 800751e:	e76c      	b.n	80073fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007522:	f000 fc42 	bl	8007daa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007526:	f000 ff4f 	bl	80083c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800752a:	2300      	movs	r3, #0
		}
	}
}
 800752c:	4618      	mov	r0, r3
 800752e:	3738      	adds	r7, #56	; 0x38
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08e      	sub	sp, #56	; 0x38
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <xQueueGenericSendFromISR+0x3c>
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <xQueueGenericSendFromISR+0x40>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <xQueueGenericSendFromISR+0x42>
 8007578:	2300      	movs	r3, #0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	623b      	str	r3, [r7, #32]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d103      	bne.n	80075a2 <xQueueGenericSendFromISR+0x6a>
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <xQueueGenericSendFromISR+0x6e>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e000      	b.n	80075a8 <xQueueGenericSendFromISR+0x70>
 80075a6:	2300      	movs	r3, #0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	61fb      	str	r3, [r7, #28]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075c2:	f002 fa55 	bl	8009a70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075c6:	f3ef 8211 	mrs	r2, BASEPRI
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	61ba      	str	r2, [r7, #24]
 80075dc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075de:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <xQueueGenericSendFromISR+0xbc>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d12c      	bne.n	800764e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007604:	f000 fb41 	bl	8007c8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007608:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007610:	d112      	bne.n	8007638 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d016      	beq.n	8007648 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	3324      	adds	r3, #36	; 0x24
 800761e:	4618      	mov	r0, r3
 8007620:	f001 f8e4 	bl	80087ec <xTaskRemoveFromEventList>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00e      	beq.n	8007648 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	e007      	b.n	8007648 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800763c:	3301      	adds	r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	b25a      	sxtb	r2, r3
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007648:	2301      	movs	r3, #1
 800764a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800764c:	e001      	b.n	8007652 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800764e:	2300      	movs	r3, #0
 8007650:	637b      	str	r3, [r7, #52]	; 0x34
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800765c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800765e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007660:	4618      	mov	r0, r3
 8007662:	3738      	adds	r7, #56	; 0x38
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08e      	sub	sp, #56	; 0x38
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	623b      	str	r3, [r7, #32]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	61fb      	str	r3, [r7, #28]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d103      	bne.n	80076c0 <xQueueGiveFromISR+0x58>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <xQueueGiveFromISR+0x5c>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <xQueueGiveFromISR+0x5e>
 80076c4:	2300      	movs	r3, #0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	61bb      	str	r3, [r7, #24]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076e0:	f002 f9c6 	bl	8009a70 <vPortValidateInterruptPriority>
	__asm volatile
 80076e4:	f3ef 8211 	mrs	r2, BASEPRI
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	617a      	str	r2, [r7, #20]
 80076fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80076fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800770c:	429a      	cmp	r2, r3
 800770e:	d22b      	bcs.n	8007768 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007722:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800772a:	d112      	bne.n	8007752 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b00      	cmp	r3, #0
 8007732:	d016      	beq.n	8007762 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	3324      	adds	r3, #36	; 0x24
 8007738:	4618      	mov	r0, r3
 800773a:	f001 f857 	bl	80087ec <xTaskRemoveFromEventList>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00e      	beq.n	8007762 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	e007      	b.n	8007762 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007756:	3301      	adds	r3, #1
 8007758:	b2db      	uxtb	r3, r3
 800775a:	b25a      	sxtb	r2, r3
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007762:	2301      	movs	r3, #1
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
 8007766:	e001      	b.n	800776c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007768:	2300      	movs	r3, #0
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f383 8811 	msr	BASEPRI, r3
}
 8007776:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800777a:	4618      	mov	r0, r3
 800777c:	3738      	adds	r7, #56	; 0x38
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08c      	sub	sp, #48	; 0x30
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007790:	2300      	movs	r3, #0
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <xQueueReceive+0x30>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	623b      	str	r3, [r7, #32]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <xQueueReceive+0x3e>
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <xQueueReceive+0x42>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xQueueReceive+0x44>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueReceive+0x5e>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	61fb      	str	r3, [r7, #28]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077e2:	f001 f9c3 	bl	8008b6c <xTaskGetSchedulerState>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d102      	bne.n	80077f2 <xQueueReceive+0x6e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <xQueueReceive+0x72>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <xQueueReceive+0x74>
 80077f6:	2300      	movs	r3, #0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <xQueueReceive+0x8e>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	61bb      	str	r3, [r7, #24]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007812:	f002 f86b 	bl	80098ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01f      	beq.n	8007862 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007826:	f000 fa9a 	bl	8007d5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	1e5a      	subs	r2, r3, #1
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00f      	beq.n	800785a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	3310      	adds	r3, #16
 800783e:	4618      	mov	r0, r3
 8007840:	f000 ffd4 	bl	80087ec <xTaskRemoveFromEventList>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d007      	beq.n	800785a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800784a:	4b3d      	ldr	r3, [pc, #244]	; (8007940 <xQueueReceive+0x1bc>)
 800784c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800785a:	f002 f877 	bl	800994c <vPortExitCritical>
				return pdPASS;
 800785e:	2301      	movs	r3, #1
 8007860:	e069      	b.n	8007936 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007868:	f002 f870 	bl	800994c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800786c:	2300      	movs	r3, #0
 800786e:	e062      	b.n	8007936 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007876:	f107 0310 	add.w	r3, r7, #16
 800787a:	4618      	mov	r0, r3
 800787c:	f001 f818 	bl	80088b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007880:	2301      	movs	r3, #1
 8007882:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007884:	f002 f862 	bl	800994c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007888:	f000 fd90 	bl	80083ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800788c:	f002 f82e 	bl	80098ec <vPortEnterCritical>
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007896:	b25b      	sxtb	r3, r3
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800789c:	d103      	bne.n	80078a6 <xQueueReceive+0x122>
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078b2:	d103      	bne.n	80078bc <xQueueReceive+0x138>
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078bc:	f002 f846 	bl	800994c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078c0:	1d3a      	adds	r2, r7, #4
 80078c2:	f107 0310 	add.w	r3, r7, #16
 80078c6:	4611      	mov	r1, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 f807 	bl	80088dc <xTaskCheckForTimeOut>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d123      	bne.n	800791c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d6:	f000 faba 	bl	8007e4e <prvIsQueueEmpty>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d017      	beq.n	8007910 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	3324      	adds	r3, #36	; 0x24
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 ff2f 	bl	800874c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f0:	f000 fa5b 	bl	8007daa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078f4:	f000 fd68 	bl	80083c8 <xTaskResumeAll>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d189      	bne.n	8007812 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078fe:	4b10      	ldr	r3, [pc, #64]	; (8007940 <xQueueReceive+0x1bc>)
 8007900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	e780      	b.n	8007812 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007912:	f000 fa4a 	bl	8007daa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007916:	f000 fd57 	bl	80083c8 <xTaskResumeAll>
 800791a:	e77a      	b.n	8007812 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800791c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791e:	f000 fa44 	bl	8007daa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007922:	f000 fd51 	bl	80083c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007928:	f000 fa91 	bl	8007e4e <prvIsQueueEmpty>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	f43f af6f 	beq.w	8007812 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007934:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007936:	4618      	mov	r0, r3
 8007938:	3730      	adds	r7, #48	; 0x30
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08e      	sub	sp, #56	; 0x38
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007956:	2300      	movs	r3, #0
 8007958:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	623b      	str	r3, [r7, #32]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	61fb      	str	r3, [r7, #28]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007994:	f001 f8ea 	bl	8008b6c <xTaskGetSchedulerState>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d102      	bne.n	80079a4 <xQueueSemaphoreTake+0x60>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <xQueueSemaphoreTake+0x64>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <xQueueSemaphoreTake+0x66>
 80079a8:	2300      	movs	r3, #0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	61bb      	str	r3, [r7, #24]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80079c4:	f001 ff92 	bl	80098ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d024      	beq.n	8007a1e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	1e5a      	subs	r2, r3, #1
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80079e4:	f001 fa8c 	bl	8008f00 <pvTaskIncrementMutexHeldCount>
 80079e8:	4602      	mov	r2, r0
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00f      	beq.n	8007a16 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	3310      	adds	r3, #16
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 fef6 	bl	80087ec <xTaskRemoveFromEventList>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a06:	4b54      	ldr	r3, [pc, #336]	; (8007b58 <xQueueSemaphoreTake+0x214>)
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a16:	f001 ff99 	bl	800994c <vPortExitCritical>
				return pdPASS;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e097      	b.n	8007b4e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d111      	bne.n	8007a48 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	617b      	str	r3, [r7, #20]
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a40:	f001 ff84 	bl	800994c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e082      	b.n	8007b4e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a4e:	f107 030c 	add.w	r3, r7, #12
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 ff2c 	bl	80088b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a5c:	f001 ff76 	bl	800994c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a60:	f000 fca4 	bl	80083ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a64:	f001 ff42 	bl	80098ec <vPortEnterCritical>
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a6e:	b25b      	sxtb	r3, r3
 8007a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a74:	d103      	bne.n	8007a7e <xQueueSemaphoreTake+0x13a>
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a84:	b25b      	sxtb	r3, r3
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a8a:	d103      	bne.n	8007a94 <xQueueSemaphoreTake+0x150>
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a94:	f001 ff5a 	bl	800994c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a98:	463a      	mov	r2, r7
 8007a9a:	f107 030c 	add.w	r3, r7, #12
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 ff1b 	bl	80088dc <xTaskCheckForTimeOut>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d132      	bne.n	8007b12 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aae:	f000 f9ce 	bl	8007e4e <prvIsQueueEmpty>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d026      	beq.n	8007b06 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d109      	bne.n	8007ad4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007ac0:	f001 ff14 	bl	80098ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 f86d 	bl	8008ba8 <xTaskPriorityInherit>
 8007ace:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ad0:	f001 ff3c 	bl	800994c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	3324      	adds	r3, #36	; 0x24
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fe35 	bl	800874c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ae4:	f000 f961 	bl	8007daa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ae8:	f000 fc6e 	bl	80083c8 <xTaskResumeAll>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f47f af68 	bne.w	80079c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007af4:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <xQueueSemaphoreTake+0x214>)
 8007af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	e75e      	b.n	80079c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b08:	f000 f94f 	bl	8007daa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b0c:	f000 fc5c 	bl	80083c8 <xTaskResumeAll>
 8007b10:	e758      	b.n	80079c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b14:	f000 f949 	bl	8007daa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b18:	f000 fc56 	bl	80083c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b1e:	f000 f996 	bl	8007e4e <prvIsQueueEmpty>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f43f af4d 	beq.w	80079c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00d      	beq.n	8007b4c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007b30:	f001 fedc 	bl	80098ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b36:	f000 f891 	bl	8007c5c <prvGetDisinheritPriorityAfterTimeout>
 8007b3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f93c 	bl	8008dc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b48:	f001 ff00 	bl	800994c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3738      	adds	r7, #56	; 0x38
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08e      	sub	sp, #56	; 0x38
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	623b      	str	r3, [r7, #32]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <xQueueReceiveFromISR+0x3a>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <xQueueReceiveFromISR+0x3e>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <xQueueReceiveFromISR+0x40>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	61fb      	str	r3, [r7, #28]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bb6:	f001 ff5b 	bl	8009a70 <vPortValidateInterruptPriority>
	__asm volatile
 8007bba:	f3ef 8211 	mrs	r2, BASEPRI
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	61ba      	str	r2, [r7, #24]
 8007bd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007bd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d02f      	beq.n	8007c42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bf0:	f000 f8b5 	bl	8007d5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	1e5a      	subs	r2, r3, #1
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c04:	d112      	bne.n	8007c2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d016      	beq.n	8007c3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	3310      	adds	r3, #16
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fdea 	bl	80087ec <xTaskRemoveFromEventList>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00e      	beq.n	8007c3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e007      	b.n	8007c3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c30:	3301      	adds	r3, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	b25a      	sxtb	r2, r3
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c40:	e001      	b.n	8007c46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f383 8811 	msr	BASEPRI, r3
}
 8007c50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3738      	adds	r7, #56	; 0x38
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d006      	beq.n	8007c7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1c3 0307 	rsb	r3, r3, #7
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e001      	b.n	8007c7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
	}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr

08007c8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b086      	sub	sp, #24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10d      	bne.n	8007cc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d14d      	bne.n	8007d4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fffd 	bl	8008cb4 <xTaskPriorityDisinherit>
 8007cba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	605a      	str	r2, [r3, #4]
 8007cc2:	e043      	b.n	8007d4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d119      	bne.n	8007cfe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6898      	ldr	r0, [r3, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	f002 f90f 	bl	8009ef8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	441a      	add	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d32b      	bcc.n	8007d4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	609a      	str	r2, [r3, #8]
 8007cfc:	e026      	b.n	8007d4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68d8      	ldr	r0, [r3, #12]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	461a      	mov	r2, r3
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	f002 f8f5 	bl	8009ef8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	425b      	negs	r3, r3
 8007d18:	441a      	add	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d207      	bcs.n	8007d3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	425b      	negs	r3, r3
 8007d34:	441a      	add	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d105      	bne.n	8007d4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d54:	697b      	ldr	r3, [r7, #20]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d018      	beq.n	8007da2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	441a      	add	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d303      	bcc.n	8007d92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68d9      	ldr	r1, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6838      	ldr	r0, [r7, #0]
 8007d9e:	f002 f8ab 	bl	8009ef8 <memcpy>
	}
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007db2:	f001 fd9b 	bl	80098ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dbe:	e011      	b.n	8007de4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d012      	beq.n	8007dee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3324      	adds	r3, #36	; 0x24
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fd0d 	bl	80087ec <xTaskRemoveFromEventList>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dd8:	f000 fde2 	bl	80089a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	dce9      	bgt.n	8007dc0 <prvUnlockQueue+0x16>
 8007dec:	e000      	b.n	8007df0 <prvUnlockQueue+0x46>
					break;
 8007dee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	22ff      	movs	r2, #255	; 0xff
 8007df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007df8:	f001 fda8 	bl	800994c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007dfc:	f001 fd76 	bl	80098ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e08:	e011      	b.n	8007e2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d012      	beq.n	8007e38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3310      	adds	r3, #16
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fce8 	bl	80087ec <xTaskRemoveFromEventList>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e22:	f000 fdbd 	bl	80089a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dce9      	bgt.n	8007e0a <prvUnlockQueue+0x60>
 8007e36:	e000      	b.n	8007e3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	22ff      	movs	r2, #255	; 0xff
 8007e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e42:	f001 fd83 	bl	800994c <vPortExitCritical>
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e56:	f001 fd49 	bl	80098ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e62:	2301      	movs	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	e001      	b.n	8007e6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e6c:	f001 fd6e 	bl	800994c <vPortExitCritical>

	return xReturn;
 8007e70:	68fb      	ldr	r3, [r7, #12]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e82:	f001 fd33 	bl	80098ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d102      	bne.n	8007e98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e92:	2301      	movs	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	e001      	b.n	8007e9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e9c:	f001 fd56 	bl	800994c <vPortExitCritical>

	return xReturn;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	e014      	b.n	8007ee6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ebc:	4a0e      	ldr	r2, [pc, #56]	; (8007ef8 <vQueueAddToRegistry+0x4c>)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ec8:	490b      	ldr	r1, [pc, #44]	; (8007ef8 <vQueueAddToRegistry+0x4c>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ed2:	4a09      	ldr	r2, [pc, #36]	; (8007ef8 <vQueueAddToRegistry+0x4c>)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	4413      	add	r3, r2
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ede:	e006      	b.n	8007eee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b07      	cmp	r3, #7
 8007eea:	d9e7      	bls.n	8007ebc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr
 8007ef8:	20001c54 	.word	0x20001c54

08007efc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f0c:	f001 fcee 	bl	80098ec <vPortEnterCritical>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f16:	b25b      	sxtb	r3, r3
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f1c:	d103      	bne.n	8007f26 <vQueueWaitForMessageRestricted+0x2a>
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f2c:	b25b      	sxtb	r3, r3
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f32:	d103      	bne.n	8007f3c <vQueueWaitForMessageRestricted+0x40>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f3c:	f001 fd06 	bl	800994c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d106      	bne.n	8007f56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	3324      	adds	r3, #36	; 0x24
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fc1f 	bl	8008794 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f56:	6978      	ldr	r0, [r7, #20]
 8007f58:	f7ff ff27 	bl	8007daa <prvUnlockQueue>
	}
 8007f5c:	bf00      	nop
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08e      	sub	sp, #56	; 0x38
 8007f68:	af04      	add	r7, sp, #16
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	623b      	str	r3, [r7, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10a      	bne.n	8007faa <xTaskCreateStatic+0x46>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	61fb      	str	r3, [r7, #28]
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007faa:	2354      	movs	r3, #84	; 0x54
 8007fac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b54      	cmp	r3, #84	; 0x54
 8007fb2:	d00a      	beq.n	8007fca <xTaskCreateStatic+0x66>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	61bb      	str	r3, [r7, #24]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01e      	beq.n	800800e <xTaskCreateStatic+0xaa>
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d01b      	beq.n	800800e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	9302      	str	r3, [sp, #8]
 8007ff0:	f107 0314 	add.w	r3, r7, #20
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f850 	bl	80080a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008008:	f000 f8cc 	bl	80081a4 <prvAddNewTaskToReadyList>
 800800c:	e001      	b.n	8008012 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008012:	697b      	ldr	r3, [r7, #20]
	}
 8008014:	4618      	mov	r0, r3
 8008016:	3728      	adds	r7, #40	; 0x28
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08c      	sub	sp, #48	; 0x30
 8008020:	af04      	add	r7, sp, #16
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802c:	88fb      	ldrh	r3, [r7, #6]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fd5b 	bl	8009aec <pvPortMalloc>
 8008036:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00e      	beq.n	800805c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800803e:	2054      	movs	r0, #84	; 0x54
 8008040:	f001 fd54 	bl	8009aec <pvPortMalloc>
 8008044:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	631a      	str	r2, [r3, #48]	; 0x30
 8008052:	e005      	b.n	8008060 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008054:	6978      	ldr	r0, [r7, #20]
 8008056:	f001 fe0d 	bl	8009c74 <vPortFree>
 800805a:	e001      	b.n	8008060 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d017      	beq.n	8008096 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800806e:	88fa      	ldrh	r2, [r7, #6]
 8008070:	2300      	movs	r3, #0
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	9302      	str	r3, [sp, #8]
 8008078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f80e 	bl	80080a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800808a:	69f8      	ldr	r0, [r7, #28]
 800808c:	f000 f88a 	bl	80081a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008090:	2301      	movs	r3, #1
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	e002      	b.n	800809c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800809a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800809c:	69bb      	ldr	r3, [r7, #24]
	}
 800809e:	4618      	mov	r0, r3
 80080a0:	3720      	adds	r7, #32
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b088      	sub	sp, #32
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
 80080b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080be:	3b01      	subs	r3, #1
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	f023 0307 	bic.w	r3, r3, #7
 80080cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <prvInitialiseNewTask+0x48>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	617b      	str	r3, [r7, #20]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080ee:	2300      	movs	r3, #0
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	e012      	b.n	800811a <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	4413      	add	r3, r2
 80080fa:	7819      	ldrb	r1, [r3, #0]
 80080fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	4413      	add	r3, r2
 8008102:	3334      	adds	r3, #52	; 0x34
 8008104:	460a      	mov	r2, r1
 8008106:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d006      	beq.n	8008122 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	3301      	adds	r3, #1
 8008118:	61fb      	str	r3, [r7, #28]
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	2b0f      	cmp	r3, #15
 800811e:	d9e9      	bls.n	80080f4 <prvInitialiseNewTask+0x4e>
 8008120:	e000      	b.n	8008124 <prvInitialiseNewTask+0x7e>
		{
			break;
 8008122:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	2b06      	cmp	r3, #6
 8008130:	d901      	bls.n	8008136 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008132:	2306      	movs	r3, #6
 8008134:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008140:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	2200      	movs	r2, #0
 8008146:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	3304      	adds	r3, #4
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe ff28 	bl	8006fa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	3318      	adds	r3, #24
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe ff23 	bl	8006fa2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008160:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	f1c3 0207 	rsb	r2, r3, #7
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008170:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	2200      	movs	r2, #0
 8008176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	68f9      	ldr	r1, [r7, #12]
 8008184:	69b8      	ldr	r0, [r7, #24]
 8008186:	f001 fabd 	bl	8009704 <pxPortInitialiseStack>
 800818a:	4602      	mov	r2, r0
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800819c:	bf00      	nop
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081ac:	f001 fb9e 	bl	80098ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081b0:	4b2a      	ldr	r3, [pc, #168]	; (800825c <prvAddNewTaskToReadyList+0xb8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a29      	ldr	r2, [pc, #164]	; (800825c <prvAddNewTaskToReadyList+0xb8>)
 80081b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081ba:	4b29      	ldr	r3, [pc, #164]	; (8008260 <prvAddNewTaskToReadyList+0xbc>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081c2:	4a27      	ldr	r2, [pc, #156]	; (8008260 <prvAddNewTaskToReadyList+0xbc>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081c8:	4b24      	ldr	r3, [pc, #144]	; (800825c <prvAddNewTaskToReadyList+0xb8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d110      	bne.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081d0:	f000 fc0a 	bl	80089e8 <prvInitialiseTaskLists>
 80081d4:	e00d      	b.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081d6:	4b23      	ldr	r3, [pc, #140]	; (8008264 <prvAddNewTaskToReadyList+0xc0>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081de:	4b20      	ldr	r3, [pc, #128]	; (8008260 <prvAddNewTaskToReadyList+0xbc>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d802      	bhi.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081ec:	4a1c      	ldr	r2, [pc, #112]	; (8008260 <prvAddNewTaskToReadyList+0xbc>)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081f2:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <prvAddNewTaskToReadyList+0xc4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3301      	adds	r3, #1
 80081f8:	4a1b      	ldr	r2, [pc, #108]	; (8008268 <prvAddNewTaskToReadyList+0xc4>)
 80081fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	2201      	movs	r2, #1
 8008202:	409a      	lsls	r2, r3
 8008204:	4b19      	ldr	r3, [pc, #100]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4313      	orrs	r3, r2
 800820a:	4a18      	ldr	r2, [pc, #96]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008212:	4613      	mov	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4a15      	ldr	r2, [pc, #84]	; (8008270 <prvAddNewTaskToReadyList+0xcc>)
 800821c:	441a      	add	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3304      	adds	r3, #4
 8008222:	4619      	mov	r1, r3
 8008224:	4610      	mov	r0, r2
 8008226:	f7fe fec8 	bl	8006fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800822a:	f001 fb8f 	bl	800994c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800822e:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <prvAddNewTaskToReadyList+0xc0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00e      	beq.n	8008254 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008236:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <prvAddNewTaskToReadyList+0xbc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	429a      	cmp	r2, r3
 8008242:	d207      	bcs.n	8008254 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008244:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <prvAddNewTaskToReadyList+0xd0>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20000960 	.word	0x20000960
 8008260:	20000860 	.word	0x20000860
 8008264:	2000096c 	.word	0x2000096c
 8008268:	2000097c 	.word	0x2000097c
 800826c:	20000968 	.word	0x20000968
 8008270:	20000864 	.word	0x20000864
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d017      	beq.n	80082ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <vTaskDelay+0x60>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <vTaskDelay+0x30>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	60bb      	str	r3, [r7, #8]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082a8:	f000 f880 	bl	80083ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082ac:	2100      	movs	r1, #0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fe3a 	bl	8008f28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082b4:	f000 f888 	bl	80083c8 <xTaskResumeAll>
 80082b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d107      	bne.n	80082d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <vTaskDelay+0x64>)
 80082c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20000988 	.word	0x20000988
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	; 0x28
 80082e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ee:	463a      	mov	r2, r7
 80082f0:	1d39      	adds	r1, r7, #4
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7f8 fb28 	bl	800094c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	2300      	movs	r3, #0
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	2300      	movs	r3, #0
 800830c:	460a      	mov	r2, r1
 800830e:	4921      	ldr	r1, [pc, #132]	; (8008394 <vTaskStartScheduler+0xb4>)
 8008310:	4821      	ldr	r0, [pc, #132]	; (8008398 <vTaskStartScheduler+0xb8>)
 8008312:	f7ff fe27 	bl	8007f64 <xTaskCreateStatic>
 8008316:	4603      	mov	r3, r0
 8008318:	4a20      	ldr	r2, [pc, #128]	; (800839c <vTaskStartScheduler+0xbc>)
 800831a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800831c:	4b1f      	ldr	r3, [pc, #124]	; (800839c <vTaskStartScheduler+0xbc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e001      	b.n	800832e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d102      	bne.n	800833a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008334:	f000 fe5e 	bl	8008ff4 <xTimerCreateTimerTask>
 8008338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d116      	bne.n	800836e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <vTaskStartScheduler+0xc0>)
 8008356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800835a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800835c:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <vTaskStartScheduler+0xc4>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008362:	4b11      	ldr	r3, [pc, #68]	; (80083a8 <vTaskStartScheduler+0xc8>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008368:	f001 fa4e 	bl	8009808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800836c:	e00e      	b.n	800838c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008374:	d10a      	bne.n	800838c <vTaskStartScheduler+0xac>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	60fb      	str	r3, [r7, #12]
}
 8008388:	bf00      	nop
 800838a:	e7fe      	b.n	800838a <vTaskStartScheduler+0xaa>
}
 800838c:	bf00      	nop
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	0800a988 	.word	0x0800a988
 8008398:	080089b9 	.word	0x080089b9
 800839c:	20000984 	.word	0x20000984
 80083a0:	20000980 	.word	0x20000980
 80083a4:	2000096c 	.word	0x2000096c
 80083a8:	20000964 	.word	0x20000964

080083ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083b0:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <vTaskSuspendAll+0x18>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	4a03      	ldr	r2, [pc, #12]	; (80083c4 <vTaskSuspendAll+0x18>)
 80083b8:	6013      	str	r3, [r2, #0]
}
 80083ba:	bf00      	nop
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20000988 	.word	0x20000988

080083c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083d6:	4b41      	ldr	r3, [pc, #260]	; (80084dc <xTaskResumeAll+0x114>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	603b      	str	r3, [r7, #0]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083f4:	f001 fa7a 	bl	80098ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083f8:	4b38      	ldr	r3, [pc, #224]	; (80084dc <xTaskResumeAll+0x114>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	4a37      	ldr	r2, [pc, #220]	; (80084dc <xTaskResumeAll+0x114>)
 8008400:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008402:	4b36      	ldr	r3, [pc, #216]	; (80084dc <xTaskResumeAll+0x114>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d161      	bne.n	80084ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800840a:	4b35      	ldr	r3, [pc, #212]	; (80084e0 <xTaskResumeAll+0x118>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d05d      	beq.n	80084ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008412:	e02e      	b.n	8008472 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008414:	4b33      	ldr	r3, [pc, #204]	; (80084e4 <xTaskResumeAll+0x11c>)
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3318      	adds	r3, #24
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fe25 	bl	8007070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3304      	adds	r3, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fe20 	bl	8007070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	2201      	movs	r2, #1
 8008436:	409a      	lsls	r2, r3
 8008438:	4b2b      	ldr	r3, [pc, #172]	; (80084e8 <xTaskResumeAll+0x120>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4313      	orrs	r3, r2
 800843e:	4a2a      	ldr	r2, [pc, #168]	; (80084e8 <xTaskResumeAll+0x120>)
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4a27      	ldr	r2, [pc, #156]	; (80084ec <xTaskResumeAll+0x124>)
 8008450:	441a      	add	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3304      	adds	r3, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7fe fdae 	bl	8006fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008462:	4b23      	ldr	r3, [pc, #140]	; (80084f0 <xTaskResumeAll+0x128>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800846c:	4b21      	ldr	r3, [pc, #132]	; (80084f4 <xTaskResumeAll+0x12c>)
 800846e:	2201      	movs	r2, #1
 8008470:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008472:	4b1c      	ldr	r3, [pc, #112]	; (80084e4 <xTaskResumeAll+0x11c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1cc      	bne.n	8008414 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008480:	f000 fb50 	bl	8008b24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008484:	4b1c      	ldr	r3, [pc, #112]	; (80084f8 <xTaskResumeAll+0x130>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d010      	beq.n	80084b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008490:	f000 f844 	bl	800851c <xTaskIncrementTick>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800849a:	4b16      	ldr	r3, [pc, #88]	; (80084f4 <xTaskResumeAll+0x12c>)
 800849c:	2201      	movs	r2, #1
 800849e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f1      	bne.n	8008490 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80084ac:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <xTaskResumeAll+0x130>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084b2:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <xTaskResumeAll+0x12c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d009      	beq.n	80084ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <xTaskResumeAll+0x134>)
 80084c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ce:	f001 fa3d 	bl	800994c <vPortExitCritical>

	return xAlreadyYielded;
 80084d2:	68bb      	ldr	r3, [r7, #8]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20000988 	.word	0x20000988
 80084e0:	20000960 	.word	0x20000960
 80084e4:	20000920 	.word	0x20000920
 80084e8:	20000968 	.word	0x20000968
 80084ec:	20000864 	.word	0x20000864
 80084f0:	20000860 	.word	0x20000860
 80084f4:	20000974 	.word	0x20000974
 80084f8:	20000970 	.word	0x20000970
 80084fc:	e000ed04 	.word	0xe000ed04

08008500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008506:	4b04      	ldr	r3, [pc, #16]	; (8008518 <xTaskGetTickCount+0x18>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800850c:	687b      	ldr	r3, [r7, #4]
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr
 8008518:	20000964 	.word	0x20000964

0800851c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008526:	4b51      	ldr	r3, [pc, #324]	; (800866c <xTaskIncrementTick+0x150>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f040 808d 	bne.w	800864a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008530:	4b4f      	ldr	r3, [pc, #316]	; (8008670 <xTaskIncrementTick+0x154>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3301      	adds	r3, #1
 8008536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008538:	4a4d      	ldr	r2, [pc, #308]	; (8008670 <xTaskIncrementTick+0x154>)
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d120      	bne.n	8008586 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008544:	4b4b      	ldr	r3, [pc, #300]	; (8008674 <xTaskIncrementTick+0x158>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <xTaskIncrementTick+0x48>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	603b      	str	r3, [r7, #0]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <xTaskIncrementTick+0x46>
 8008564:	4b43      	ldr	r3, [pc, #268]	; (8008674 <xTaskIncrementTick+0x158>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	4b43      	ldr	r3, [pc, #268]	; (8008678 <xTaskIncrementTick+0x15c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a41      	ldr	r2, [pc, #260]	; (8008674 <xTaskIncrementTick+0x158>)
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	4a41      	ldr	r2, [pc, #260]	; (8008678 <xTaskIncrementTick+0x15c>)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	4b40      	ldr	r3, [pc, #256]	; (800867c <xTaskIncrementTick+0x160>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3301      	adds	r3, #1
 800857e:	4a3f      	ldr	r2, [pc, #252]	; (800867c <xTaskIncrementTick+0x160>)
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	f000 facf 	bl	8008b24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008586:	4b3e      	ldr	r3, [pc, #248]	; (8008680 <xTaskIncrementTick+0x164>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	429a      	cmp	r2, r3
 800858e:	d34d      	bcc.n	800862c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008590:	4b38      	ldr	r3, [pc, #224]	; (8008674 <xTaskIncrementTick+0x158>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <xTaskIncrementTick+0x82>
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <xTaskIncrementTick+0x84>
 800859e:	2300      	movs	r3, #0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a4:	4b36      	ldr	r3, [pc, #216]	; (8008680 <xTaskIncrementTick+0x164>)
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085aa:	601a      	str	r2, [r3, #0]
					break;
 80085ac:	e03e      	b.n	800862c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80085ae:	4b31      	ldr	r3, [pc, #196]	; (8008674 <xTaskIncrementTick+0x158>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d203      	bcs.n	80085ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085c6:	4a2e      	ldr	r2, [pc, #184]	; (8008680 <xTaskIncrementTick+0x164>)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6013      	str	r3, [r2, #0]
						break;
 80085cc:	e02e      	b.n	800862c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	3304      	adds	r3, #4
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fd4c 	bl	8007070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	3318      	adds	r3, #24
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe fd43 	bl	8007070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ee:	2201      	movs	r2, #1
 80085f0:	409a      	lsls	r2, r3
 80085f2:	4b24      	ldr	r3, [pc, #144]	; (8008684 <xTaskIncrementTick+0x168>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	4a22      	ldr	r2, [pc, #136]	; (8008684 <xTaskIncrementTick+0x168>)
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4a1f      	ldr	r2, [pc, #124]	; (8008688 <xTaskIncrementTick+0x16c>)
 800860a:	441a      	add	r2, r3
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f7fe fcd1 	bl	8006fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4b1b      	ldr	r3, [pc, #108]	; (800868c <xTaskIncrementTick+0x170>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	429a      	cmp	r2, r3
 8008624:	d3b4      	bcc.n	8008590 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008626:	2301      	movs	r3, #1
 8008628:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800862a:	e7b1      	b.n	8008590 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800862c:	4b17      	ldr	r3, [pc, #92]	; (800868c <xTaskIncrementTick+0x170>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008632:	4915      	ldr	r1, [pc, #84]	; (8008688 <xTaskIncrementTick+0x16c>)
 8008634:	4613      	mov	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d907      	bls.n	8008654 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e004      	b.n	8008654 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800864a:	4b11      	ldr	r3, [pc, #68]	; (8008690 <xTaskIncrementTick+0x174>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	4a0f      	ldr	r2, [pc, #60]	; (8008690 <xTaskIncrementTick+0x174>)
 8008652:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008654:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <xTaskIncrementTick+0x178>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800865c:	2301      	movs	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008660:	697b      	ldr	r3, [r7, #20]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000988 	.word	0x20000988
 8008670:	20000964 	.word	0x20000964
 8008674:	20000918 	.word	0x20000918
 8008678:	2000091c 	.word	0x2000091c
 800867c:	20000978 	.word	0x20000978
 8008680:	20000980 	.word	0x20000980
 8008684:	20000968 	.word	0x20000968
 8008688:	20000864 	.word	0x20000864
 800868c:	20000860 	.word	0x20000860
 8008690:	20000970 	.word	0x20000970
 8008694:	20000974 	.word	0x20000974

08008698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800869e:	4b26      	ldr	r3, [pc, #152]	; (8008738 <vTaskSwitchContext+0xa0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086a6:	4b25      	ldr	r3, [pc, #148]	; (800873c <vTaskSwitchContext+0xa4>)
 80086a8:	2201      	movs	r2, #1
 80086aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086ac:	e03f      	b.n	800872e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80086ae:	4b23      	ldr	r3, [pc, #140]	; (800873c <vTaskSwitchContext+0xa4>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80086b4:	4b22      	ldr	r3, [pc, #136]	; (8008740 <vTaskSwitchContext+0xa8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	fab3 f383 	clz	r3, r3
 80086c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	f1c3 031f 	rsb	r3, r3, #31
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	491e      	ldr	r1, [pc, #120]	; (8008744 <vTaskSwitchContext+0xac>)
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	440b      	add	r3, r1
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	607b      	str	r3, [r7, #4]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <vTaskSwitchContext+0x5a>
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4a11      	ldr	r2, [pc, #68]	; (8008744 <vTaskSwitchContext+0xac>)
 8008700:	4413      	add	r3, r2
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	605a      	str	r2, [r3, #4]
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3308      	adds	r3, #8
 8008716:	429a      	cmp	r2, r3
 8008718:	d104      	bne.n	8008724 <vTaskSwitchContext+0x8c>
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	605a      	str	r2, [r3, #4]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	4a07      	ldr	r2, [pc, #28]	; (8008748 <vTaskSwitchContext+0xb0>)
 800872c:	6013      	str	r3, [r2, #0]
}
 800872e:	bf00      	nop
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr
 8008738:	20000988 	.word	0x20000988
 800873c:	20000974 	.word	0x20000974
 8008740:	20000968 	.word	0x20000968
 8008744:	20000864 	.word	0x20000864
 8008748:	20000860 	.word	0x20000860

0800874c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	60fb      	str	r3, [r7, #12]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <vTaskPlaceOnEventList+0x44>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3318      	adds	r3, #24
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7fe fc40 	bl	8007000 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008780:	2101      	movs	r1, #1
 8008782:	6838      	ldr	r0, [r7, #0]
 8008784:	f000 fbd0 	bl	8008f28 <prvAddCurrentTaskToDelayedList>
}
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000860 	.word	0x20000860

08008794 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	617b      	str	r3, [r7, #20]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3318      	adds	r3, #24
 80087c2:	4619      	mov	r1, r3
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7fe fbf8 	bl	8006fba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80087d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	68b8      	ldr	r0, [r7, #8]
 80087da:	f000 fba5 	bl	8008f28 <prvAddCurrentTaskToDelayedList>
	}
 80087de:	bf00      	nop
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000860 	.word	0x20000860

080087ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60fb      	str	r3, [r7, #12]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	3318      	adds	r3, #24
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fc27 	bl	8007070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008822:	4b1d      	ldr	r3, [pc, #116]	; (8008898 <xTaskRemoveFromEventList+0xac>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d11c      	bne.n	8008864 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3304      	adds	r3, #4
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fc1e 	bl	8007070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	2201      	movs	r2, #1
 800883a:	409a      	lsls	r2, r3
 800883c:	4b17      	ldr	r3, [pc, #92]	; (800889c <xTaskRemoveFromEventList+0xb0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4313      	orrs	r3, r2
 8008842:	4a16      	ldr	r2, [pc, #88]	; (800889c <xTaskRemoveFromEventList+0xb0>)
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4a13      	ldr	r2, [pc, #76]	; (80088a0 <xTaskRemoveFromEventList+0xb4>)
 8008854:	441a      	add	r2, r3
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7fe fbac 	bl	8006fba <vListInsertEnd>
 8008862:	e005      	b.n	8008870 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	3318      	adds	r3, #24
 8008868:	4619      	mov	r1, r3
 800886a:	480e      	ldr	r0, [pc, #56]	; (80088a4 <xTaskRemoveFromEventList+0xb8>)
 800886c:	f7fe fba5 	bl	8006fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008874:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <xTaskRemoveFromEventList+0xbc>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	429a      	cmp	r2, r3
 800887c:	d905      	bls.n	800888a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800887e:	2301      	movs	r3, #1
 8008880:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008882:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <xTaskRemoveFromEventList+0xc0>)
 8008884:	2201      	movs	r2, #1
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	e001      	b.n	800888e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800888e:	697b      	ldr	r3, [r7, #20]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000988 	.word	0x20000988
 800889c:	20000968 	.word	0x20000968
 80088a0:	20000864 	.word	0x20000864
 80088a4:	20000920 	.word	0x20000920
 80088a8:	20000860 	.word	0x20000860
 80088ac:	20000974 	.word	0x20000974

080088b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088b8:	4b06      	ldr	r3, [pc, #24]	; (80088d4 <vTaskInternalSetTimeOutState+0x24>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088c0:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <vTaskInternalSetTimeOutState+0x28>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	605a      	str	r2, [r3, #4]
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20000978 	.word	0x20000978
 80088d8:	20000964 	.word	0x20000964

080088dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	613b      	str	r3, [r7, #16]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10a      	bne.n	800891e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	60fb      	str	r3, [r7, #12]
}
 800891a:	bf00      	nop
 800891c:	e7fe      	b.n	800891c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800891e:	f000 ffe5 	bl	80098ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <xTaskCheckForTimeOut+0xbc>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800893a:	d102      	bne.n	8008942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	e023      	b.n	800898a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	4b15      	ldr	r3, [pc, #84]	; (800899c <xTaskCheckForTimeOut+0xc0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d007      	beq.n	800895e <xTaskCheckForTimeOut+0x82>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	429a      	cmp	r2, r3
 8008956:	d302      	bcc.n	800895e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008958:	2301      	movs	r3, #1
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	e015      	b.n	800898a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	429a      	cmp	r2, r3
 8008966:	d20b      	bcs.n	8008980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ff9b 	bl	80088b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	e004      	b.n	800898a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008986:	2301      	movs	r3, #1
 8008988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800898a:	f000 ffdf 	bl	800994c <vPortExitCritical>

	return xReturn;
 800898e:	69fb      	ldr	r3, [r7, #28]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000964 	.word	0x20000964
 800899c:	20000978 	.word	0x20000978

080089a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089a4:	4b03      	ldr	r3, [pc, #12]	; (80089b4 <vTaskMissedYield+0x14>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
}
 80089aa:	bf00      	nop
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20000974 	.word	0x20000974

080089b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089c0:	f000 f852 	bl	8008a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089c4:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <prvIdleTask+0x28>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d9f9      	bls.n	80089c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089cc:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <prvIdleTask+0x2c>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089dc:	e7f0      	b.n	80089c0 <prvIdleTask+0x8>
 80089de:	bf00      	nop
 80089e0:	20000864 	.word	0x20000864
 80089e4:	e000ed04 	.word	0xe000ed04

080089e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
 80089f2:	e00c      	b.n	8008a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4a12      	ldr	r2, [pc, #72]	; (8008a48 <prvInitialiseTaskLists+0x60>)
 8008a00:	4413      	add	r3, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe faae 	bl	8006f64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	607b      	str	r3, [r7, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b06      	cmp	r3, #6
 8008a12:	d9ef      	bls.n	80089f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a14:	480d      	ldr	r0, [pc, #52]	; (8008a4c <prvInitialiseTaskLists+0x64>)
 8008a16:	f7fe faa5 	bl	8006f64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a1a:	480d      	ldr	r0, [pc, #52]	; (8008a50 <prvInitialiseTaskLists+0x68>)
 8008a1c:	f7fe faa2 	bl	8006f64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a20:	480c      	ldr	r0, [pc, #48]	; (8008a54 <prvInitialiseTaskLists+0x6c>)
 8008a22:	f7fe fa9f 	bl	8006f64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a26:	480c      	ldr	r0, [pc, #48]	; (8008a58 <prvInitialiseTaskLists+0x70>)
 8008a28:	f7fe fa9c 	bl	8006f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a2c:	480b      	ldr	r0, [pc, #44]	; (8008a5c <prvInitialiseTaskLists+0x74>)
 8008a2e:	f7fe fa99 	bl	8006f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <prvInitialiseTaskLists+0x78>)
 8008a34:	4a05      	ldr	r2, [pc, #20]	; (8008a4c <prvInitialiseTaskLists+0x64>)
 8008a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a38:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <prvInitialiseTaskLists+0x7c>)
 8008a3a:	4a05      	ldr	r2, [pc, #20]	; (8008a50 <prvInitialiseTaskLists+0x68>)
 8008a3c:	601a      	str	r2, [r3, #0]
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20000864 	.word	0x20000864
 8008a4c:	200008f0 	.word	0x200008f0
 8008a50:	20000904 	.word	0x20000904
 8008a54:	20000920 	.word	0x20000920
 8008a58:	20000934 	.word	0x20000934
 8008a5c:	2000094c 	.word	0x2000094c
 8008a60:	20000918 	.word	0x20000918
 8008a64:	2000091c 	.word	0x2000091c

08008a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a6e:	e019      	b.n	8008aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a70:	f000 ff3c 	bl	80098ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008a74:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <prvCheckTasksWaitingTermination+0x50>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3304      	adds	r3, #4
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe faf5 	bl	8007070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a86:	4b0d      	ldr	r3, [pc, #52]	; (8008abc <prvCheckTasksWaitingTermination+0x54>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	4a0b      	ldr	r2, [pc, #44]	; (8008abc <prvCheckTasksWaitingTermination+0x54>)
 8008a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a90:	4b0b      	ldr	r3, [pc, #44]	; (8008ac0 <prvCheckTasksWaitingTermination+0x58>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	4a0a      	ldr	r2, [pc, #40]	; (8008ac0 <prvCheckTasksWaitingTermination+0x58>)
 8008a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a9a:	f000 ff57 	bl	800994c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f810 	bl	8008ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aa4:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <prvCheckTasksWaitingTermination+0x58>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e1      	bne.n	8008a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000934 	.word	0x20000934
 8008abc:	20000960 	.word	0x20000960
 8008ac0:	20000948 	.word	0x20000948

08008ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d108      	bne.n	8008ae8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	4618      	mov	r0, r3
 8008adc:	f001 f8ca 	bl	8009c74 <vPortFree>
				vPortFree( pxTCB );
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 f8c7 	bl	8009c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ae6:	e018      	b.n	8008b1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d103      	bne.n	8008afa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 f8be 	bl	8009c74 <vPortFree>
	}
 8008af8:	e00f      	b.n	8008b1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d00a      	beq.n	8008b1a <prvDeleteTCB+0x56>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <prvDeleteTCB+0x54>
	}
 8008b1a:	bf00      	nop
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b2a:	4b0e      	ldr	r3, [pc, #56]	; (8008b64 <prvResetNextTaskUnblockTime+0x40>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <prvResetNextTaskUnblockTime+0x14>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e000      	b.n	8008b3a <prvResetNextTaskUnblockTime+0x16>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d004      	beq.n	8008b48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b3e:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <prvResetNextTaskUnblockTime+0x44>)
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b46:	e008      	b.n	8008b5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b48:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <prvResetNextTaskUnblockTime+0x40>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	4a04      	ldr	r2, [pc, #16]	; (8008b68 <prvResetNextTaskUnblockTime+0x44>)
 8008b58:	6013      	str	r3, [r2, #0]
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr
 8008b64:	20000918 	.word	0x20000918
 8008b68:	20000980 	.word	0x20000980

08008b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b72:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <xTaskGetSchedulerState+0x34>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	607b      	str	r3, [r7, #4]
 8008b7e:	e008      	b.n	8008b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b80:	4b08      	ldr	r3, [pc, #32]	; (8008ba4 <xTaskGetSchedulerState+0x38>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	607b      	str	r3, [r7, #4]
 8008b8c:	e001      	b.n	8008b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b92:	687b      	ldr	r3, [r7, #4]
	}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bc80      	pop	{r7}
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	2000096c 	.word	0x2000096c
 8008ba4:	20000988 	.word	0x20000988

08008ba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d06e      	beq.n	8008c9c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	4b39      	ldr	r3, [pc, #228]	; (8008ca8 <xTaskPriorityInherit+0x100>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d25e      	bcs.n	8008c8a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	db06      	blt.n	8008be2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bd4:	4b34      	ldr	r3, [pc, #208]	; (8008ca8 <xTaskPriorityInherit+0x100>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	f1c3 0207 	rsb	r2, r3, #7
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6959      	ldr	r1, [r3, #20]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4a2e      	ldr	r2, [pc, #184]	; (8008cac <xTaskPriorityInherit+0x104>)
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	d101      	bne.n	8008bfe <xTaskPriorityInherit+0x56>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <xTaskPriorityInherit+0x58>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d03a      	beq.n	8008c7a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	3304      	adds	r3, #4
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fe fa31 	bl	8007070 <uxListRemove>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d115      	bne.n	8008c40 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c18:	4924      	ldr	r1, [pc, #144]	; (8008cac <xTaskPriorityInherit+0x104>)
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10a      	bne.n	8008c40 <xTaskPriorityInherit+0x98>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	2201      	movs	r2, #1
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	43da      	mvns	r2, r3
 8008c36:	4b1e      	ldr	r3, [pc, #120]	; (8008cb0 <xTaskPriorityInherit+0x108>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	4a1c      	ldr	r2, [pc, #112]	; (8008cb0 <xTaskPriorityInherit+0x108>)
 8008c3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c40:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <xTaskPriorityInherit+0x100>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	2201      	movs	r2, #1
 8008c50:	409a      	lsls	r2, r3
 8008c52:	4b17      	ldr	r3, [pc, #92]	; (8008cb0 <xTaskPriorityInherit+0x108>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	4a15      	ldr	r2, [pc, #84]	; (8008cb0 <xTaskPriorityInherit+0x108>)
 8008c5a:	6013      	str	r3, [r2, #0]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c60:	4613      	mov	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4a10      	ldr	r2, [pc, #64]	; (8008cac <xTaskPriorityInherit+0x104>)
 8008c6a:	441a      	add	r2, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4619      	mov	r1, r3
 8008c72:	4610      	mov	r0, r2
 8008c74:	f7fe f9a1 	bl	8006fba <vListInsertEnd>
 8008c78:	e004      	b.n	8008c84 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <xTaskPriorityInherit+0x100>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e008      	b.n	8008c9c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c8e:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <xTaskPriorityInherit+0x100>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d201      	bcs.n	8008c9c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
	}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000860 	.word	0x20000860
 8008cac:	20000864 	.word	0x20000864
 8008cb0:	20000968 	.word	0x20000968

08008cb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d06e      	beq.n	8008da8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cca:	4b3a      	ldr	r3, [pc, #232]	; (8008db4 <xTaskPriorityDisinherit+0x100>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d00a      	beq.n	8008cea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	60fb      	str	r3, [r7, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	60bb      	str	r3, [r7, #8]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d0c:	1e5a      	subs	r2, r3, #1
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d044      	beq.n	8008da8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d140      	bne.n	8008da8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe f9a0 	bl	8007070 <uxListRemove>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d115      	bne.n	8008d62 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3a:	491f      	ldr	r1, [pc, #124]	; (8008db8 <xTaskPriorityDisinherit+0x104>)
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	440b      	add	r3, r1
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <xTaskPriorityDisinherit+0xae>
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	2201      	movs	r2, #1
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	43da      	mvns	r2, r3
 8008d58:	4b18      	ldr	r3, [pc, #96]	; (8008dbc <xTaskPriorityDisinherit+0x108>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	4a17      	ldr	r2, [pc, #92]	; (8008dbc <xTaskPriorityDisinherit+0x108>)
 8008d60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6e:	f1c3 0207 	rsb	r2, r3, #7
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	409a      	lsls	r2, r3
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	; (8008dbc <xTaskPriorityDisinherit+0x108>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	4a0d      	ldr	r2, [pc, #52]	; (8008dbc <xTaskPriorityDisinherit+0x108>)
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4a08      	ldr	r2, [pc, #32]	; (8008db8 <xTaskPriorityDisinherit+0x104>)
 8008d96:	441a      	add	r2, r3
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4610      	mov	r0, r2
 8008da0:	f7fe f90b 	bl	8006fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008da4:	2301      	movs	r3, #1
 8008da6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008da8:	697b      	ldr	r3, [r7, #20]
	}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20000860 	.word	0x20000860
 8008db8:	20000864 	.word	0x20000864
 8008dbc:	20000968 	.word	0x20000968

08008dc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 8088 	beq.w	8008eea <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10a      	bne.n	8008df8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	60fb      	str	r3, [r7, #12]
}
 8008df4:	bf00      	nop
 8008df6:	e7fe      	b.n	8008df6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d902      	bls.n	8008e08 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	61fb      	str	r3, [r7, #28]
 8008e06:	e002      	b.n	8008e0e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d068      	beq.n	8008eea <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d163      	bne.n	8008eea <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e22:	4b34      	ldr	r3, [pc, #208]	; (8008ef4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d10a      	bne.n	8008e42 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	60bb      	str	r3, [r7, #8]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	db04      	blt.n	8008e60 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	f1c3 0207 	rsb	r2, r3, #7
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	6959      	ldr	r1, [r3, #20]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4a22      	ldr	r2, [pc, #136]	; (8008ef8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e70:	4413      	add	r3, r2
 8008e72:	4299      	cmp	r1, r3
 8008e74:	d101      	bne.n	8008e7a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e000      	b.n	8008e7c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d034      	beq.n	8008eea <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	3304      	adds	r3, #4
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe f8f3 	bl	8007070 <uxListRemove>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d115      	bne.n	8008ebc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e94:	4918      	ldr	r1, [pc, #96]	; (8008ef8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10a      	bne.n	8008ebc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	2201      	movs	r2, #1
 8008eac:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb0:	43da      	mvns	r2, r3
 8008eb2:	4b12      	ldr	r3, [pc, #72]	; (8008efc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	4a10      	ldr	r2, [pc, #64]	; (8008efc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008eba:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	409a      	lsls	r2, r3
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	4a0c      	ldr	r2, [pc, #48]	; (8008efc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4a07      	ldr	r2, [pc, #28]	; (8008ef8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008edc:	441a      	add	r2, r3
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f7fe f868 	bl	8006fba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008eea:	bf00      	nop
 8008eec:	3720      	adds	r7, #32
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20000860 	.word	0x20000860
 8008ef8:	20000864 	.word	0x20000864
 8008efc:	20000968 	.word	0x20000968

08008f00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f04:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d004      	beq.n	8008f16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f0c:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f12:	3201      	adds	r2, #1
 8008f14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008f16:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f18:	681b      	ldr	r3, [r3, #0]
	}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20000860 	.word	0x20000860

08008f28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f32:	4b29      	ldr	r3, [pc, #164]	; (8008fd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f38:	4b28      	ldr	r3, [pc, #160]	; (8008fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe f896 	bl	8007070 <uxListRemove>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10b      	bne.n	8008f62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008f4a:	4b24      	ldr	r3, [pc, #144]	; (8008fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	2201      	movs	r2, #1
 8008f52:	fa02 f303 	lsl.w	r3, r2, r3
 8008f56:	43da      	mvns	r2, r3
 8008f58:	4b21      	ldr	r3, [pc, #132]	; (8008fe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	4a20      	ldr	r2, [pc, #128]	; (8008fe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f68:	d10a      	bne.n	8008f80 <prvAddCurrentTaskToDelayedList+0x58>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d007      	beq.n	8008f80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f70:	4b1a      	ldr	r3, [pc, #104]	; (8008fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4619      	mov	r1, r3
 8008f78:	481a      	ldr	r0, [pc, #104]	; (8008fe4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008f7a:	f7fe f81e 	bl	8006fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f7e:	e026      	b.n	8008fce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4413      	add	r3, r2
 8008f86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f88:	4b14      	ldr	r3, [pc, #80]	; (8008fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d209      	bcs.n	8008fac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f98:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f7fe f82b 	bl	8007000 <vListInsert>
}
 8008faa:	e010      	b.n	8008fce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fac:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <prvAddCurrentTaskToDelayedList+0xc4>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	4b0a      	ldr	r3, [pc, #40]	; (8008fdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f7fe f821 	bl	8007000 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	; (8008ff0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d202      	bcs.n	8008fce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008fc8:	4a09      	ldr	r2, [pc, #36]	; (8008ff0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	6013      	str	r3, [r2, #0]
}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000964 	.word	0x20000964
 8008fdc:	20000860 	.word	0x20000860
 8008fe0:	20000968 	.word	0x20000968
 8008fe4:	2000094c 	.word	0x2000094c
 8008fe8:	2000091c 	.word	0x2000091c
 8008fec:	20000918 	.word	0x20000918
 8008ff0:	20000980 	.word	0x20000980

08008ff4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08a      	sub	sp, #40	; 0x28
 8008ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ffe:	f000 fb41 	bl	8009684 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <xTimerCreateTimerTask+0x80>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d021      	beq.n	800904e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009012:	1d3a      	adds	r2, r7, #4
 8009014:	f107 0108 	add.w	r1, r7, #8
 8009018:	f107 030c 	add.w	r3, r7, #12
 800901c:	4618      	mov	r0, r3
 800901e:	f7f7 fcad 	bl	800097c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	9202      	str	r2, [sp, #8]
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	2305      	movs	r3, #5
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	2300      	movs	r3, #0
 8009032:	460a      	mov	r2, r1
 8009034:	4910      	ldr	r1, [pc, #64]	; (8009078 <xTimerCreateTimerTask+0x84>)
 8009036:	4811      	ldr	r0, [pc, #68]	; (800907c <xTimerCreateTimerTask+0x88>)
 8009038:	f7fe ff94 	bl	8007f64 <xTaskCreateStatic>
 800903c:	4603      	mov	r3, r0
 800903e:	4a10      	ldr	r2, [pc, #64]	; (8009080 <xTimerCreateTimerTask+0x8c>)
 8009040:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009042:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <xTimerCreateTimerTask+0x8c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800904a:	2301      	movs	r3, #1
 800904c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	613b      	str	r3, [r7, #16]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800906a:	697b      	ldr	r3, [r7, #20]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200009bc 	.word	0x200009bc
 8009078:	0800a990 	.word	0x0800a990
 800907c:	080092c1 	.word	0x080092c1
 8009080:	200009c0 	.word	0x200009c0

08009084 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af02      	add	r7, sp, #8
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009092:	202c      	movs	r0, #44	; 0x2c
 8009094:	f000 fd2a 	bl	8009aec <pvPortMalloc>
 8009098:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00d      	beq.n	80090bc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	9301      	str	r3, [sp, #4]
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 f846 	bl	8009140 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80090bc:	697b      	ldr	r3, [r7, #20]
	}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b08a      	sub	sp, #40	; 0x28
 80090ca:	af02      	add	r7, sp, #8
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80090d4:	232c      	movs	r3, #44	; 0x2c
 80090d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2b2c      	cmp	r3, #44	; 0x2c
 80090dc:	d00a      	beq.n	80090f4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	61bb      	str	r3, [r7, #24]
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <xTimerCreateStatic+0x4a>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	617b      	str	r3, [r7, #20]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009112:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00d      	beq.n	8009136 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 f809 	bl	8009140 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8009136:	69fb      	ldr	r3, [r7, #28]
	}
 8009138:	4618      	mov	r0, r3
 800913a:	3720      	adds	r7, #32
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	617b      	str	r3, [r7, #20]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d015      	beq.n	800919c <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009170:	f000 fa88 	bl	8009684 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	6a3a      	ldr	r2, [r7, #32]
 8009190:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	3304      	adds	r3, #4
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd ff03 	bl	8006fa2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800919c:	bf00      	nop
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08a      	sub	sp, #40	; 0x28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	623b      	str	r3, [r7, #32]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091d2:	4b1a      	ldr	r3, [pc, #104]	; (800923c <xTimerGenericCommand+0x98>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d02a      	beq.n	8009230 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b05      	cmp	r3, #5
 80091ea:	dc18      	bgt.n	800921e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091ec:	f7ff fcbe 	bl	8008b6c <xTaskGetSchedulerState>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d109      	bne.n	800920a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091f6:	4b11      	ldr	r3, [pc, #68]	; (800923c <xTimerGenericCommand+0x98>)
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	f107 0114 	add.w	r1, r7, #20
 80091fe:	2300      	movs	r3, #0
 8009200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009202:	f7fe f89b 	bl	800733c <xQueueGenericSend>
 8009206:	6278      	str	r0, [r7, #36]	; 0x24
 8009208:	e012      	b.n	8009230 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800920a:	4b0c      	ldr	r3, [pc, #48]	; (800923c <xTimerGenericCommand+0x98>)
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	f107 0114 	add.w	r1, r7, #20
 8009212:	2300      	movs	r3, #0
 8009214:	2200      	movs	r2, #0
 8009216:	f7fe f891 	bl	800733c <xQueueGenericSend>
 800921a:	6278      	str	r0, [r7, #36]	; 0x24
 800921c:	e008      	b.n	8009230 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800921e:	4b07      	ldr	r3, [pc, #28]	; (800923c <xTimerGenericCommand+0x98>)
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f107 0114 	add.w	r1, r7, #20
 8009226:	2300      	movs	r3, #0
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	f7fe f985 	bl	8007538 <xQueueGenericSendFromISR>
 800922e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009232:	4618      	mov	r0, r3
 8009234:	3728      	adds	r7, #40	; 0x28
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	200009bc 	.word	0x200009bc

08009240 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af02      	add	r7, sp, #8
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800924a:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <prvProcessExpiredTimer+0x7c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	3304      	adds	r3, #4
 8009258:	4618      	mov	r0, r3
 800925a:	f7fd ff09 	bl	8007070 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d122      	bne.n	80092ac <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	18d1      	adds	r1, r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	6978      	ldr	r0, [r7, #20]
 8009274:	f000 f8c8 	bl	8009408 <prvInsertTimerInActiveList>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d016      	beq.n	80092ac <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800927e:	2300      	movs	r3, #0
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	2300      	movs	r3, #0
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	2100      	movs	r1, #0
 8009288:	6978      	ldr	r0, [r7, #20]
 800928a:	f7ff ff8b 	bl	80091a4 <xTimerGenericCommand>
 800928e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10a      	bne.n	80092ac <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	60fb      	str	r3, [r7, #12]
}
 80092a8:	bf00      	nop
 80092aa:	e7fe      	b.n	80092aa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	6978      	ldr	r0, [r7, #20]
 80092b2:	4798      	blx	r3
}
 80092b4:	bf00      	nop
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	200009b4 	.word	0x200009b4

080092c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 f857 	bl	8009380 <prvGetNextExpireTime>
 80092d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4619      	mov	r1, r3
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f803 	bl	80092e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092de:	f000 f8d5 	bl	800948c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092e2:	e7f1      	b.n	80092c8 <prvTimerTask+0x8>

080092e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092ee:	f7ff f85d 	bl	80083ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092f2:	f107 0308 	add.w	r3, r7, #8
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f866 	bl	80093c8 <prvSampleTimeNow>
 80092fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d130      	bne.n	8009366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10a      	bne.n	8009320 <prvProcessTimerOrBlockTask+0x3c>
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	429a      	cmp	r2, r3
 8009310:	d806      	bhi.n	8009320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009312:	f7ff f859 	bl	80083c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff ff91 	bl	8009240 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800931e:	e024      	b.n	800936a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d008      	beq.n	8009338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009326:	4b13      	ldr	r3, [pc, #76]	; (8009374 <prvProcessTimerOrBlockTask+0x90>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	bf0c      	ite	eq
 8009330:	2301      	moveq	r3, #1
 8009332:	2300      	movne	r3, #0
 8009334:	b2db      	uxtb	r3, r3
 8009336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009338:	4b0f      	ldr	r3, [pc, #60]	; (8009378 <prvProcessTimerOrBlockTask+0x94>)
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4619      	mov	r1, r3
 8009346:	f7fe fdd9 	bl	8007efc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800934a:	f7ff f83d 	bl	80083c8 <xTaskResumeAll>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009354:	4b09      	ldr	r3, [pc, #36]	; (800937c <prvProcessTimerOrBlockTask+0x98>)
 8009356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	f3bf 8f6f 	isb	sy
}
 8009364:	e001      	b.n	800936a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009366:	f7ff f82f 	bl	80083c8 <xTaskResumeAll>
}
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200009b8 	.word	0x200009b8
 8009378:	200009bc 	.word	0x200009bc
 800937c:	e000ed04 	.word	0xe000ed04

08009380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009388:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <prvGetNextExpireTime+0x44>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	bf0c      	ite	eq
 8009392:	2301      	moveq	r3, #1
 8009394:	2300      	movne	r3, #0
 8009396:	b2db      	uxtb	r3, r3
 8009398:	461a      	mov	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d105      	bne.n	80093b2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093a6:	4b07      	ldr	r3, [pc, #28]	; (80093c4 <prvGetNextExpireTime+0x44>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e001      	b.n	80093b6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	200009b4 	.word	0x200009b4

080093c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093d0:	f7ff f896 	bl	8008500 <xTaskGetTickCount>
 80093d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093d6:	4b0b      	ldr	r3, [pc, #44]	; (8009404 <prvSampleTimeNow+0x3c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d205      	bcs.n	80093ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093e0:	f000 f8ee 	bl	80095c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	e002      	b.n	80093f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093f2:	4a04      	ldr	r2, [pc, #16]	; (8009404 <prvSampleTimeNow+0x3c>)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093f8:	68fb      	ldr	r3, [r7, #12]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	200009c4 	.word	0x200009c4

08009408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009416:	2300      	movs	r3, #0
 8009418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	429a      	cmp	r2, r3
 800942c:	d812      	bhi.n	8009454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	1ad2      	subs	r2, r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	429a      	cmp	r2, r3
 800943a:	d302      	bcc.n	8009442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800943c:	2301      	movs	r3, #1
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	e01b      	b.n	800947a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009442:	4b10      	ldr	r3, [pc, #64]	; (8009484 <prvInsertTimerInActiveList+0x7c>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3304      	adds	r3, #4
 800944a:	4619      	mov	r1, r3
 800944c:	4610      	mov	r0, r2
 800944e:	f7fd fdd7 	bl	8007000 <vListInsert>
 8009452:	e012      	b.n	800947a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d206      	bcs.n	800946a <prvInsertTimerInActiveList+0x62>
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d302      	bcc.n	800946a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009464:	2301      	movs	r3, #1
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	e007      	b.n	800947a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800946a:	4b07      	ldr	r3, [pc, #28]	; (8009488 <prvInsertTimerInActiveList+0x80>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3304      	adds	r3, #4
 8009472:	4619      	mov	r1, r3
 8009474:	4610      	mov	r0, r2
 8009476:	f7fd fdc3 	bl	8007000 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800947a:	697b      	ldr	r3, [r7, #20]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	200009b8 	.word	0x200009b8
 8009488:	200009b4 	.word	0x200009b4

0800948c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08c      	sub	sp, #48	; 0x30
 8009490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009492:	e081      	b.n	8009598 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	db7d      	blt.n	8009596 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	3304      	adds	r3, #4
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fd fde0 	bl	8007070 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094b0:	1d3b      	adds	r3, r7, #4
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff ff88 	bl	80093c8 <prvSampleTimeNow>
 80094b8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b09      	cmp	r3, #9
 80094be:	d86b      	bhi.n	8009598 <prvProcessReceivedCommands+0x10c>
 80094c0:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <prvProcessReceivedCommands+0x3c>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094f1 	.word	0x080094f1
 80094cc:	080094f1 	.word	0x080094f1
 80094d0:	080094f1 	.word	0x080094f1
 80094d4:	08009599 	.word	0x08009599
 80094d8:	0800954d 	.word	0x0800954d
 80094dc:	08009585 	.word	0x08009585
 80094e0:	080094f1 	.word	0x080094f1
 80094e4:	080094f1 	.word	0x080094f1
 80094e8:	08009599 	.word	0x08009599
 80094ec:	0800954d 	.word	0x0800954d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	18d1      	adds	r1, r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a3a      	ldr	r2, [r7, #32]
 80094fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094fe:	f7ff ff83 	bl	8009408 <prvInsertTimerInActiveList>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d047      	beq.n	8009598 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800950e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d13f      	bne.n	8009598 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	441a      	add	r2, r3
 8009520:	2300      	movs	r3, #0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2300      	movs	r3, #0
 8009526:	2100      	movs	r1, #0
 8009528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800952a:	f7ff fe3b 	bl	80091a4 <xTimerGenericCommand>
 800952e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d130      	bne.n	8009598 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	61bb      	str	r3, [r7, #24]
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10a      	bne.n	8009570 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	617b      	str	r3, [r7, #20]
}
 800956c:	bf00      	nop
 800956e:	e7fe      	b.n	800956e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	699a      	ldr	r2, [r3, #24]
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	18d1      	adds	r1, r2, r3
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	6a3a      	ldr	r2, [r7, #32]
 800957c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800957e:	f7ff ff43 	bl	8009408 <prvInsertTimerInActiveList>
					break;
 8009582:	e009      	b.n	8009598 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d104      	bne.n	8009598 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800958e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009590:	f000 fb70 	bl	8009c74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009594:	e000      	b.n	8009598 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009596:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009598:	4b08      	ldr	r3, [pc, #32]	; (80095bc <prvProcessReceivedCommands+0x130>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f107 0108 	add.w	r1, r7, #8
 80095a0:	2200      	movs	r2, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe f8ee 	bl	8007784 <xQueueReceive>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f47f af72 	bne.w	8009494 <prvProcessReceivedCommands+0x8>
	}
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	3728      	adds	r7, #40	; 0x28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200009bc 	.word	0x200009bc

080095c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095c6:	e045      	b.n	8009654 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095c8:	4b2c      	ldr	r3, [pc, #176]	; (800967c <prvSwitchTimerLists+0xbc>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095d2:	4b2a      	ldr	r3, [pc, #168]	; (800967c <prvSwitchTimerLists+0xbc>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3304      	adds	r3, #4
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fd fd45 	bl	8007070 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d12e      	bne.n	8009654 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	4413      	add	r3, r2
 80095fe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	d90e      	bls.n	8009626 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009614:	4b19      	ldr	r3, [pc, #100]	; (800967c <prvSwitchTimerLists+0xbc>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3304      	adds	r3, #4
 800961c:	4619      	mov	r1, r3
 800961e:	4610      	mov	r0, r2
 8009620:	f7fd fcee 	bl	8007000 <vListInsert>
 8009624:	e016      	b.n	8009654 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009626:	2300      	movs	r3, #0
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	2300      	movs	r3, #0
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	2100      	movs	r1, #0
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f7ff fdb7 	bl	80091a4 <xTimerGenericCommand>
 8009636:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <prvSwitchTimerLists+0x94>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	603b      	str	r3, [r7, #0]
}
 8009650:	bf00      	nop
 8009652:	e7fe      	b.n	8009652 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009654:	4b09      	ldr	r3, [pc, #36]	; (800967c <prvSwitchTimerLists+0xbc>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1b4      	bne.n	80095c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <prvSwitchTimerLists+0xbc>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009664:	4b06      	ldr	r3, [pc, #24]	; (8009680 <prvSwitchTimerLists+0xc0>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a04      	ldr	r2, [pc, #16]	; (800967c <prvSwitchTimerLists+0xbc>)
 800966a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800966c:	4a04      	ldr	r2, [pc, #16]	; (8009680 <prvSwitchTimerLists+0xc0>)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	6013      	str	r3, [r2, #0]
}
 8009672:	bf00      	nop
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	200009b4 	.word	0x200009b4
 8009680:	200009b8 	.word	0x200009b8

08009684 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800968a:	f000 f92f 	bl	80098ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800968e:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <prvCheckForValidListAndQueue+0x60>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d120      	bne.n	80096d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009696:	4814      	ldr	r0, [pc, #80]	; (80096e8 <prvCheckForValidListAndQueue+0x64>)
 8009698:	f7fd fc64 	bl	8006f64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800969c:	4813      	ldr	r0, [pc, #76]	; (80096ec <prvCheckForValidListAndQueue+0x68>)
 800969e:	f7fd fc61 	bl	8006f64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096a2:	4b13      	ldr	r3, [pc, #76]	; (80096f0 <prvCheckForValidListAndQueue+0x6c>)
 80096a4:	4a10      	ldr	r2, [pc, #64]	; (80096e8 <prvCheckForValidListAndQueue+0x64>)
 80096a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096a8:	4b12      	ldr	r3, [pc, #72]	; (80096f4 <prvCheckForValidListAndQueue+0x70>)
 80096aa:	4a10      	ldr	r2, [pc, #64]	; (80096ec <prvCheckForValidListAndQueue+0x68>)
 80096ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096ae:	2300      	movs	r3, #0
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <prvCheckForValidListAndQueue+0x74>)
 80096b4:	4a11      	ldr	r2, [pc, #68]	; (80096fc <prvCheckForValidListAndQueue+0x78>)
 80096b6:	210c      	movs	r1, #12
 80096b8:	200a      	movs	r0, #10
 80096ba:	f7fd fd6b 	bl	8007194 <xQueueGenericCreateStatic>
 80096be:	4603      	mov	r3, r0
 80096c0:	4a08      	ldr	r2, [pc, #32]	; (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	490b      	ldr	r1, [pc, #44]	; (8009700 <prvCheckForValidListAndQueue+0x7c>)
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fbea 	bl	8007eac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096d8:	f000 f938 	bl	800994c <vPortExitCritical>
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200009bc 	.word	0x200009bc
 80096e8:	2000098c 	.word	0x2000098c
 80096ec:	200009a0 	.word	0x200009a0
 80096f0:	200009b4 	.word	0x200009b4
 80096f4:	200009b8 	.word	0x200009b8
 80096f8:	20000a40 	.word	0x20000a40
 80096fc:	200009c8 	.word	0x200009c8
 8009700:	0800a998 	.word	0x0800a998

08009704 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3b04      	subs	r3, #4
 8009714:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800971c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3b04      	subs	r3, #4
 8009722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f023 0201 	bic.w	r2, r3, #1
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3b04      	subs	r3, #4
 8009732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009734:	4a08      	ldr	r2, [pc, #32]	; (8009758 <pxPortInitialiseStack+0x54>)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3b14      	subs	r3, #20
 800973e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3b20      	subs	r3, #32
 800974a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800974c:	68fb      	ldr	r3, [r7, #12]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr
 8009758:	0800975d 	.word	0x0800975d

0800975c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009762:	2300      	movs	r3, #0
 8009764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009766:	4b12      	ldr	r3, [pc, #72]	; (80097b0 <prvTaskExitError+0x54>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800976e:	d00a      	beq.n	8009786 <prvTaskExitError+0x2a>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	60fb      	str	r3, [r7, #12]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <prvTaskExitError+0x28>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60bb      	str	r3, [r7, #8]
}
 8009798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800979a:	bf00      	nop
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0fc      	beq.n	800979c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097a2:	bf00      	nop
 80097a4:	bf00      	nop
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bc80      	pop	{r7}
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	2000009c 	.word	0x2000009c
	...

080097c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <pxCurrentTCBConst2>)
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	6808      	ldr	r0, [r1, #0]
 80097c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097ca:	f380 8809 	msr	PSP, r0
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8811 	msr	BASEPRI, r0
 80097da:	f04e 0e0d 	orr.w	lr, lr, #13
 80097de:	4770      	bx	lr

080097e0 <pxCurrentTCBConst2>:
 80097e0:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80097e8:	4806      	ldr	r0, [pc, #24]	; (8009804 <prvPortStartFirstTask+0x1c>)
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	6800      	ldr	r0, [r0, #0]
 80097ee:	f380 8808 	msr	MSP, r0
 80097f2:	b662      	cpsie	i
 80097f4:	b661      	cpsie	f
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	df00      	svc	0
 8009800:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009802:	bf00      	nop
 8009804:	e000ed08 	.word	0xe000ed08

08009808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800980e:	4b32      	ldr	r3, [pc, #200]	; (80098d8 <xPortStartScheduler+0xd0>)
 8009810:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	b2db      	uxtb	r3, r3
 8009818:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	22ff      	movs	r2, #255	; 0xff
 800981e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009830:	b2da      	uxtb	r2, r3
 8009832:	4b2a      	ldr	r3, [pc, #168]	; (80098dc <xPortStartScheduler+0xd4>)
 8009834:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009836:	4b2a      	ldr	r3, [pc, #168]	; (80098e0 <xPortStartScheduler+0xd8>)
 8009838:	2207      	movs	r2, #7
 800983a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800983c:	e009      	b.n	8009852 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800983e:	4b28      	ldr	r3, [pc, #160]	; (80098e0 <xPortStartScheduler+0xd8>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3b01      	subs	r3, #1
 8009844:	4a26      	ldr	r2, [pc, #152]	; (80098e0 <xPortStartScheduler+0xd8>)
 8009846:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	b2db      	uxtb	r3, r3
 8009850:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985a:	2b80      	cmp	r3, #128	; 0x80
 800985c:	d0ef      	beq.n	800983e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800985e:	4b20      	ldr	r3, [pc, #128]	; (80098e0 <xPortStartScheduler+0xd8>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f1c3 0307 	rsb	r3, r3, #7
 8009866:	2b04      	cmp	r3, #4
 8009868:	d00a      	beq.n	8009880 <xPortStartScheduler+0x78>
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	60bb      	str	r3, [r7, #8]
}
 800987c:	bf00      	nop
 800987e:	e7fe      	b.n	800987e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009880:	4b17      	ldr	r3, [pc, #92]	; (80098e0 <xPortStartScheduler+0xd8>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	4a16      	ldr	r2, [pc, #88]	; (80098e0 <xPortStartScheduler+0xd8>)
 8009888:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800988a:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <xPortStartScheduler+0xd8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009892:	4a13      	ldr	r2, [pc, #76]	; (80098e0 <xPortStartScheduler+0xd8>)
 8009894:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	b2da      	uxtb	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800989e:	4b11      	ldr	r3, [pc, #68]	; (80098e4 <xPortStartScheduler+0xdc>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a10      	ldr	r2, [pc, #64]	; (80098e4 <xPortStartScheduler+0xdc>)
 80098a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098aa:	4b0e      	ldr	r3, [pc, #56]	; (80098e4 <xPortStartScheduler+0xdc>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a0d      	ldr	r2, [pc, #52]	; (80098e4 <xPortStartScheduler+0xdc>)
 80098b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098b6:	f000 f8b9 	bl	8009a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098ba:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <xPortStartScheduler+0xe0>)
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098c0:	f7ff ff92 	bl	80097e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098c4:	f7fe fee8 	bl	8008698 <vTaskSwitchContext>
	prvTaskExitError();
 80098c8:	f7ff ff48 	bl	800975c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	e000e400 	.word	0xe000e400
 80098dc:	20000a88 	.word	0x20000a88
 80098e0:	20000a8c 	.word	0x20000a8c
 80098e4:	e000ed20 	.word	0xe000ed20
 80098e8:	2000009c 	.word	0x2000009c

080098ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	607b      	str	r3, [r7, #4]
}
 8009904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009906:	4b0f      	ldr	r3, [pc, #60]	; (8009944 <vPortEnterCritical+0x58>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	4a0d      	ldr	r2, [pc, #52]	; (8009944 <vPortEnterCritical+0x58>)
 800990e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009910:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <vPortEnterCritical+0x58>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d10f      	bne.n	8009938 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009918:	4b0b      	ldr	r3, [pc, #44]	; (8009948 <vPortEnterCritical+0x5c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <vPortEnterCritical+0x4c>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	603b      	str	r3, [r7, #0]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vPortEnterCritical+0x4a>
	}
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	2000009c 	.word	0x2000009c
 8009948:	e000ed04 	.word	0xe000ed04

0800994c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009952:	4b11      	ldr	r3, [pc, #68]	; (8009998 <vPortExitCritical+0x4c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <vPortExitCritical+0x24>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	607b      	str	r3, [r7, #4]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009970:	4b09      	ldr	r3, [pc, #36]	; (8009998 <vPortExitCritical+0x4c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3b01      	subs	r3, #1
 8009976:	4a08      	ldr	r2, [pc, #32]	; (8009998 <vPortExitCritical+0x4c>)
 8009978:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <vPortExitCritical+0x4c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d105      	bne.n	800998e <vPortExitCritical+0x42>
 8009982:	2300      	movs	r3, #0
 8009984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	f383 8811 	msr	BASEPRI, r3
}
 800998c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800998e:	bf00      	nop
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	bc80      	pop	{r7}
 8009996:	4770      	bx	lr
 8009998:	2000009c 	.word	0x2000009c
 800999c:	00000000 	.word	0x00000000

080099a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099a0:	f3ef 8009 	mrs	r0, PSP
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <pxCurrentTCBConst>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80099b0:	6010      	str	r0, [r2, #0]
 80099b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80099b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099ba:	f380 8811 	msr	BASEPRI, r0
 80099be:	f7fe fe6b 	bl	8008698 <vTaskSwitchContext>
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8811 	msr	BASEPRI, r0
 80099ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	6808      	ldr	r0, [r1, #0]
 80099d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80099d6:	f380 8809 	msr	PSP, r0
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	4770      	bx	lr

080099e0 <pxCurrentTCBConst>:
 80099e0:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop

080099e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	607b      	str	r3, [r7, #4]
}
 8009a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a02:	f7fe fd8b 	bl	800851c <xTaskIncrementTick>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a0c:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <SysTick_Handler+0x40>)
 8009a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	2300      	movs	r3, #0
 8009a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	f383 8811 	msr	BASEPRI, r3
}
 8009a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	e000ed04 	.word	0xe000ed04

08009a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a30:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <vPortSetupTimerInterrupt+0x30>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a36:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <vPortSetupTimerInterrupt+0x34>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <vPortSetupTimerInterrupt+0x38>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a09      	ldr	r2, [pc, #36]	; (8009a68 <vPortSetupTimerInterrupt+0x3c>)
 8009a42:	fba2 2303 	umull	r2, r3, r2, r3
 8009a46:	099b      	lsrs	r3, r3, #6
 8009a48:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <vPortSetupTimerInterrupt+0x40>)
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a4e:	4b03      	ldr	r3, [pc, #12]	; (8009a5c <vPortSetupTimerInterrupt+0x30>)
 8009a50:	2207      	movs	r2, #7
 8009a52:	601a      	str	r2, [r3, #0]
}
 8009a54:	bf00      	nop
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr
 8009a5c:	e000e010 	.word	0xe000e010
 8009a60:	e000e018 	.word	0xe000e018
 8009a64:	20000090 	.word	0x20000090
 8009a68:	10624dd3 	.word	0x10624dd3
 8009a6c:	e000e014 	.word	0xe000e014

08009a70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a76:	f3ef 8305 	mrs	r3, IPSR
 8009a7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b0f      	cmp	r3, #15
 8009a80:	d914      	bls.n	8009aac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a82:	4a16      	ldr	r2, [pc, #88]	; (8009adc <vPortValidateInterruptPriority+0x6c>)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a8c:	4b14      	ldr	r3, [pc, #80]	; (8009ae0 <vPortValidateInterruptPriority+0x70>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	7afa      	ldrb	r2, [r7, #11]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d20a      	bcs.n	8009aac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	607b      	str	r3, [r7, #4]
}
 8009aa8:	bf00      	nop
 8009aaa:	e7fe      	b.n	8009aaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009aac:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <vPortValidateInterruptPriority+0x74>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ab4:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <vPortValidateInterruptPriority+0x78>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d90a      	bls.n	8009ad2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	603b      	str	r3, [r7, #0]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <vPortValidateInterruptPriority+0x60>
	}
 8009ad2:	bf00      	nop
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bc80      	pop	{r7}
 8009ada:	4770      	bx	lr
 8009adc:	e000e3f0 	.word	0xe000e3f0
 8009ae0:	20000a88 	.word	0x20000a88
 8009ae4:	e000ed0c 	.word	0xe000ed0c
 8009ae8:	20000a8c 	.word	0x20000a8c

08009aec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08a      	sub	sp, #40	; 0x28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009af8:	f7fe fc58 	bl	80083ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009afc:	4b58      	ldr	r3, [pc, #352]	; (8009c60 <pvPortMalloc+0x174>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b04:	f000 f910 	bl	8009d28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b08:	4b56      	ldr	r3, [pc, #344]	; (8009c64 <pvPortMalloc+0x178>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4013      	ands	r3, r2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 808e 	bne.w	8009c32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01d      	beq.n	8009b58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b1c:	2208      	movs	r2, #8
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4413      	add	r3, r2
 8009b22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d014      	beq.n	8009b58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f023 0307 	bic.w	r3, r3, #7
 8009b34:	3308      	adds	r3, #8
 8009b36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <pvPortMalloc+0x6c>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	617b      	str	r3, [r7, #20]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d069      	beq.n	8009c32 <pvPortMalloc+0x146>
 8009b5e:	4b42      	ldr	r3, [pc, #264]	; (8009c68 <pvPortMalloc+0x17c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d864      	bhi.n	8009c32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b68:	4b40      	ldr	r3, [pc, #256]	; (8009c6c <pvPortMalloc+0x180>)
 8009b6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b6c:	4b3f      	ldr	r3, [pc, #252]	; (8009c6c <pvPortMalloc+0x180>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b72:	e004      	b.n	8009b7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d903      	bls.n	8009b90 <pvPortMalloc+0xa4>
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1f1      	bne.n	8009b74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b90:	4b33      	ldr	r3, [pc, #204]	; (8009c60 <pvPortMalloc+0x174>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d04b      	beq.n	8009c32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	4413      	add	r3, r2
 8009ba2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	1ad2      	subs	r2, r2, r3
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	005b      	lsls	r3, r3, #1
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d91f      	bls.n	8009bfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <pvPortMalloc+0xf8>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	613b      	str	r3, [r7, #16]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	685a      	ldr	r2, [r3, #4]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bf6:	69b8      	ldr	r0, [r7, #24]
 8009bf8:	f000 f8f8 	bl	8009dec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bfc:	4b1a      	ldr	r3, [pc, #104]	; (8009c68 <pvPortMalloc+0x17c>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	4a18      	ldr	r2, [pc, #96]	; (8009c68 <pvPortMalloc+0x17c>)
 8009c08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c0a:	4b17      	ldr	r3, [pc, #92]	; (8009c68 <pvPortMalloc+0x17c>)
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	4b18      	ldr	r3, [pc, #96]	; (8009c70 <pvPortMalloc+0x184>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d203      	bcs.n	8009c1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c16:	4b14      	ldr	r3, [pc, #80]	; (8009c68 <pvPortMalloc+0x17c>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a15      	ldr	r2, [pc, #84]	; (8009c70 <pvPortMalloc+0x184>)
 8009c1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	4b10      	ldr	r3, [pc, #64]	; (8009c64 <pvPortMalloc+0x178>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c32:	f7fe fbc9 	bl	80083c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00a      	beq.n	8009c56 <pvPortMalloc+0x16a>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	60fb      	str	r3, [r7, #12]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <pvPortMalloc+0x168>
	return pvReturn;
 8009c56:	69fb      	ldr	r3, [r7, #28]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3728      	adds	r7, #40	; 0x28
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20001698 	.word	0x20001698
 8009c64:	200016a4 	.word	0x200016a4
 8009c68:	2000169c 	.word	0x2000169c
 8009c6c:	20001690 	.word	0x20001690
 8009c70:	200016a0 	.word	0x200016a0

08009c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d048      	beq.n	8009d18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c86:	2308      	movs	r3, #8
 8009c88:	425b      	negs	r3, r3
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <vPortFree+0xac>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <vPortFree+0x44>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	60fb      	str	r3, [r7, #12]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <vPortFree+0x62>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	60bb      	str	r3, [r7, #8]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	4b11      	ldr	r3, [pc, #68]	; (8009d20 <vPortFree+0xac>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d019      	beq.n	8009d18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d115      	bne.n	8009d18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <vPortFree+0xac>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	43db      	mvns	r3, r3
 8009cf6:	401a      	ands	r2, r3
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cfc:	f7fe fb56 	bl	80083ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <vPortFree+0xb0>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4413      	add	r3, r2
 8009d0a:	4a06      	ldr	r2, [pc, #24]	; (8009d24 <vPortFree+0xb0>)
 8009d0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d0e:	6938      	ldr	r0, [r7, #16]
 8009d10:	f000 f86c 	bl	8009dec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d14:	f7fe fb58 	bl	80083c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d18:	bf00      	nop
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	200016a4 	.word	0x200016a4
 8009d24:	2000169c 	.word	0x2000169c

08009d28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009d32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d34:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <prvHeapInit+0xac>)
 8009d36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f003 0307 	and.w	r3, r3, #7
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00c      	beq.n	8009d5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3307      	adds	r3, #7
 8009d46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	4a1f      	ldr	r2, [pc, #124]	; (8009dd4 <prvHeapInit+0xac>)
 8009d58:	4413      	add	r3, r2
 8009d5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d60:	4a1d      	ldr	r2, [pc, #116]	; (8009dd8 <prvHeapInit+0xb0>)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d66:	4b1c      	ldr	r3, [pc, #112]	; (8009dd8 <prvHeapInit+0xb0>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	4413      	add	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d74:	2208      	movs	r2, #8
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	1a9b      	subs	r3, r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 0307 	bic.w	r3, r3, #7
 8009d82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4a15      	ldr	r2, [pc, #84]	; (8009ddc <prvHeapInit+0xb4>)
 8009d88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d8a:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <prvHeapInit+0xb4>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d92:	4b12      	ldr	r3, [pc, #72]	; (8009ddc <prvHeapInit+0xb4>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	1ad2      	subs	r2, r2, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009da8:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <prvHeapInit+0xb4>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	4a0a      	ldr	r2, [pc, #40]	; (8009de0 <prvHeapInit+0xb8>)
 8009db6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4a09      	ldr	r2, [pc, #36]	; (8009de4 <prvHeapInit+0xbc>)
 8009dbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dc0:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <prvHeapInit+0xc0>)
 8009dc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009dc6:	601a      	str	r2, [r3, #0]
}
 8009dc8:	bf00      	nop
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bc80      	pop	{r7}
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20000a90 	.word	0x20000a90
 8009dd8:	20001690 	.word	0x20001690
 8009ddc:	20001698 	.word	0x20001698
 8009de0:	200016a0 	.word	0x200016a0
 8009de4:	2000169c 	.word	0x2000169c
 8009de8:	200016a4 	.word	0x200016a4

08009dec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009df4:	4b27      	ldr	r3, [pc, #156]	; (8009e94 <prvInsertBlockIntoFreeList+0xa8>)
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	e002      	b.n	8009e00 <prvInsertBlockIntoFreeList+0x14>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d8f7      	bhi.n	8009dfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	4413      	add	r3, r2
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d108      	bne.n	8009e2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	441a      	add	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	441a      	add	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d118      	bne.n	8009e74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <prvInsertBlockIntoFreeList+0xac>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d00d      	beq.n	8009e6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	441a      	add	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	e008      	b.n	8009e7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e6a:	4b0b      	ldr	r3, [pc, #44]	; (8009e98 <prvInsertBlockIntoFreeList+0xac>)
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	e003      	b.n	8009e7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d002      	beq.n	8009e8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e8a:	bf00      	nop
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bc80      	pop	{r7}
 8009e92:	4770      	bx	lr
 8009e94:	20001690 	.word	0x20001690
 8009e98:	20001698 	.word	0x20001698

08009e9c <atoi>:
 8009e9c:	220a      	movs	r2, #10
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	f000 b8e6 	b.w	800a070 <strtol>

08009ea4 <__errno>:
 8009ea4:	4b01      	ldr	r3, [pc, #4]	; (8009eac <__errno+0x8>)
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	200000a0 	.word	0x200000a0

08009eb0 <__libc_init_array>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	4d0c      	ldr	r5, [pc, #48]	; (8009ee8 <__libc_init_array+0x38>)
 8009eb6:	4c0d      	ldr	r4, [pc, #52]	; (8009eec <__libc_init_array+0x3c>)
 8009eb8:	1b64      	subs	r4, r4, r5
 8009eba:	10a4      	asrs	r4, r4, #2
 8009ebc:	42a6      	cmp	r6, r4
 8009ebe:	d109      	bne.n	8009ed4 <__libc_init_array+0x24>
 8009ec0:	f000 fcec 	bl	800a89c <_init>
 8009ec4:	2600      	movs	r6, #0
 8009ec6:	4d0a      	ldr	r5, [pc, #40]	; (8009ef0 <__libc_init_array+0x40>)
 8009ec8:	4c0a      	ldr	r4, [pc, #40]	; (8009ef4 <__libc_init_array+0x44>)
 8009eca:	1b64      	subs	r4, r4, r5
 8009ecc:	10a4      	asrs	r4, r4, #2
 8009ece:	42a6      	cmp	r6, r4
 8009ed0:	d105      	bne.n	8009ede <__libc_init_array+0x2e>
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed8:	4798      	blx	r3
 8009eda:	3601      	adds	r6, #1
 8009edc:	e7ee      	b.n	8009ebc <__libc_init_array+0xc>
 8009ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee2:	4798      	blx	r3
 8009ee4:	3601      	adds	r6, #1
 8009ee6:	e7f2      	b.n	8009ece <__libc_init_array+0x1e>
 8009ee8:	0800aafc 	.word	0x0800aafc
 8009eec:	0800aafc 	.word	0x0800aafc
 8009ef0:	0800aafc 	.word	0x0800aafc
 8009ef4:	0800ab00 	.word	0x0800ab00

08009ef8 <memcpy>:
 8009ef8:	440a      	add	r2, r1
 8009efa:	4291      	cmp	r1, r2
 8009efc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f00:	d100      	bne.n	8009f04 <memcpy+0xc>
 8009f02:	4770      	bx	lr
 8009f04:	b510      	push	{r4, lr}
 8009f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f0a:	4291      	cmp	r1, r2
 8009f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f10:	d1f9      	bne.n	8009f06 <memcpy+0xe>
 8009f12:	bd10      	pop	{r4, pc}

08009f14 <memset>:
 8009f14:	4603      	mov	r3, r0
 8009f16:	4402      	add	r2, r0
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d100      	bne.n	8009f1e <memset+0xa>
 8009f1c:	4770      	bx	lr
 8009f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f22:	e7f9      	b.n	8009f18 <memset+0x4>

08009f24 <siprintf>:
 8009f24:	b40e      	push	{r1, r2, r3}
 8009f26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f2a:	b500      	push	{lr}
 8009f2c:	b09c      	sub	sp, #112	; 0x70
 8009f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f30:	9002      	str	r0, [sp, #8]
 8009f32:	9006      	str	r0, [sp, #24]
 8009f34:	9107      	str	r1, [sp, #28]
 8009f36:	9104      	str	r1, [sp, #16]
 8009f38:	4808      	ldr	r0, [pc, #32]	; (8009f5c <siprintf+0x38>)
 8009f3a:	4909      	ldr	r1, [pc, #36]	; (8009f60 <siprintf+0x3c>)
 8009f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f40:	9105      	str	r1, [sp, #20]
 8009f42:	6800      	ldr	r0, [r0, #0]
 8009f44:	a902      	add	r1, sp, #8
 8009f46:	9301      	str	r3, [sp, #4]
 8009f48:	f000 f8f8 	bl	800a13c <_svfiprintf_r>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	9b02      	ldr	r3, [sp, #8]
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	b01c      	add	sp, #112	; 0x70
 8009f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f58:	b003      	add	sp, #12
 8009f5a:	4770      	bx	lr
 8009f5c:	200000a0 	.word	0x200000a0
 8009f60:	ffff0208 	.word	0xffff0208

08009f64 <_strtol_l.isra.0>:
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6a:	4686      	mov	lr, r0
 8009f6c:	d001      	beq.n	8009f72 <_strtol_l.isra.0+0xe>
 8009f6e:	2b24      	cmp	r3, #36	; 0x24
 8009f70:	d906      	bls.n	8009f80 <_strtol_l.isra.0+0x1c>
 8009f72:	f7ff ff97 	bl	8009ea4 <__errno>
 8009f76:	2316      	movs	r3, #22
 8009f78:	6003      	str	r3, [r0, #0]
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f80:	468c      	mov	ip, r1
 8009f82:	4e3a      	ldr	r6, [pc, #232]	; (800a06c <_strtol_l.isra.0+0x108>)
 8009f84:	4660      	mov	r0, ip
 8009f86:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009f8a:	5da5      	ldrb	r5, [r4, r6]
 8009f8c:	f015 0508 	ands.w	r5, r5, #8
 8009f90:	d1f8      	bne.n	8009f84 <_strtol_l.isra.0+0x20>
 8009f92:	2c2d      	cmp	r4, #45	; 0x2d
 8009f94:	d133      	bne.n	8009ffe <_strtol_l.isra.0+0x9a>
 8009f96:	f04f 0801 	mov.w	r8, #1
 8009f9a:	f89c 4000 	ldrb.w	r4, [ip]
 8009f9e:	f100 0c02 	add.w	ip, r0, #2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d05d      	beq.n	800a062 <_strtol_l.isra.0+0xfe>
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	d10c      	bne.n	8009fc4 <_strtol_l.isra.0+0x60>
 8009faa:	2c30      	cmp	r4, #48	; 0x30
 8009fac:	d10a      	bne.n	8009fc4 <_strtol_l.isra.0+0x60>
 8009fae:	f89c 0000 	ldrb.w	r0, [ip]
 8009fb2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009fb6:	2858      	cmp	r0, #88	; 0x58
 8009fb8:	d14e      	bne.n	800a058 <_strtol_l.isra.0+0xf4>
 8009fba:	2310      	movs	r3, #16
 8009fbc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009fc0:	f10c 0c02 	add.w	ip, ip, #2
 8009fc4:	2500      	movs	r5, #0
 8009fc6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009fca:	3f01      	subs	r7, #1
 8009fcc:	fbb7 f9f3 	udiv	r9, r7, r3
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	fb03 7a19 	mls	sl, r3, r9, r7
 8009fd6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009fda:	2e09      	cmp	r6, #9
 8009fdc:	d818      	bhi.n	800a010 <_strtol_l.isra.0+0xac>
 8009fde:	4634      	mov	r4, r6
 8009fe0:	42a3      	cmp	r3, r4
 8009fe2:	dd24      	ble.n	800a02e <_strtol_l.isra.0+0xca>
 8009fe4:	2d00      	cmp	r5, #0
 8009fe6:	db1f      	blt.n	800a028 <_strtol_l.isra.0+0xc4>
 8009fe8:	4581      	cmp	r9, r0
 8009fea:	d31d      	bcc.n	800a028 <_strtol_l.isra.0+0xc4>
 8009fec:	d101      	bne.n	8009ff2 <_strtol_l.isra.0+0x8e>
 8009fee:	45a2      	cmp	sl, r4
 8009ff0:	db1a      	blt.n	800a028 <_strtol_l.isra.0+0xc4>
 8009ff2:	2501      	movs	r5, #1
 8009ff4:	fb00 4003 	mla	r0, r0, r3, r4
 8009ff8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009ffc:	e7eb      	b.n	8009fd6 <_strtol_l.isra.0+0x72>
 8009ffe:	2c2b      	cmp	r4, #43	; 0x2b
 800a000:	bf08      	it	eq
 800a002:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a006:	46a8      	mov	r8, r5
 800a008:	bf08      	it	eq
 800a00a:	f100 0c02 	addeq.w	ip, r0, #2
 800a00e:	e7c8      	b.n	8009fa2 <_strtol_l.isra.0+0x3e>
 800a010:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a014:	2e19      	cmp	r6, #25
 800a016:	d801      	bhi.n	800a01c <_strtol_l.isra.0+0xb8>
 800a018:	3c37      	subs	r4, #55	; 0x37
 800a01a:	e7e1      	b.n	8009fe0 <_strtol_l.isra.0+0x7c>
 800a01c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a020:	2e19      	cmp	r6, #25
 800a022:	d804      	bhi.n	800a02e <_strtol_l.isra.0+0xca>
 800a024:	3c57      	subs	r4, #87	; 0x57
 800a026:	e7db      	b.n	8009fe0 <_strtol_l.isra.0+0x7c>
 800a028:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a02c:	e7e4      	b.n	8009ff8 <_strtol_l.isra.0+0x94>
 800a02e:	2d00      	cmp	r5, #0
 800a030:	da08      	bge.n	800a044 <_strtol_l.isra.0+0xe0>
 800a032:	2322      	movs	r3, #34	; 0x22
 800a034:	4638      	mov	r0, r7
 800a036:	f8ce 3000 	str.w	r3, [lr]
 800a03a:	2a00      	cmp	r2, #0
 800a03c:	d09e      	beq.n	8009f7c <_strtol_l.isra.0+0x18>
 800a03e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800a042:	e007      	b.n	800a054 <_strtol_l.isra.0+0xf0>
 800a044:	f1b8 0f00 	cmp.w	r8, #0
 800a048:	d000      	beq.n	800a04c <_strtol_l.isra.0+0xe8>
 800a04a:	4240      	negs	r0, r0
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	d095      	beq.n	8009f7c <_strtol_l.isra.0+0x18>
 800a050:	2d00      	cmp	r5, #0
 800a052:	d1f4      	bne.n	800a03e <_strtol_l.isra.0+0xda>
 800a054:	6011      	str	r1, [r2, #0]
 800a056:	e791      	b.n	8009f7c <_strtol_l.isra.0+0x18>
 800a058:	2430      	movs	r4, #48	; 0x30
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1b2      	bne.n	8009fc4 <_strtol_l.isra.0+0x60>
 800a05e:	2308      	movs	r3, #8
 800a060:	e7b0      	b.n	8009fc4 <_strtol_l.isra.0+0x60>
 800a062:	2c30      	cmp	r4, #48	; 0x30
 800a064:	d0a3      	beq.n	8009fae <_strtol_l.isra.0+0x4a>
 800a066:	230a      	movs	r3, #10
 800a068:	e7ac      	b.n	8009fc4 <_strtol_l.isra.0+0x60>
 800a06a:	bf00      	nop
 800a06c:	0800a9c9 	.word	0x0800a9c9

0800a070 <strtol>:
 800a070:	4613      	mov	r3, r2
 800a072:	460a      	mov	r2, r1
 800a074:	4601      	mov	r1, r0
 800a076:	4802      	ldr	r0, [pc, #8]	; (800a080 <strtol+0x10>)
 800a078:	6800      	ldr	r0, [r0, #0]
 800a07a:	f7ff bf73 	b.w	8009f64 <_strtol_l.isra.0>
 800a07e:	bf00      	nop
 800a080:	200000a0 	.word	0x200000a0

0800a084 <__ssputs_r>:
 800a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	688e      	ldr	r6, [r1, #8]
 800a08a:	4682      	mov	sl, r0
 800a08c:	429e      	cmp	r6, r3
 800a08e:	460c      	mov	r4, r1
 800a090:	4690      	mov	r8, r2
 800a092:	461f      	mov	r7, r3
 800a094:	d838      	bhi.n	800a108 <__ssputs_r+0x84>
 800a096:	898a      	ldrh	r2, [r1, #12]
 800a098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a09c:	d032      	beq.n	800a104 <__ssputs_r+0x80>
 800a09e:	6825      	ldr	r5, [r4, #0]
 800a0a0:	6909      	ldr	r1, [r1, #16]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	eba5 0901 	sub.w	r9, r5, r1
 800a0a8:	6965      	ldr	r5, [r4, #20]
 800a0aa:	444b      	add	r3, r9
 800a0ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0b4:	106d      	asrs	r5, r5, #1
 800a0b6:	429d      	cmp	r5, r3
 800a0b8:	bf38      	it	cc
 800a0ba:	461d      	movcc	r5, r3
 800a0bc:	0553      	lsls	r3, r2, #21
 800a0be:	d531      	bpl.n	800a124 <__ssputs_r+0xa0>
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f000 fb45 	bl	800a750 <_malloc_r>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	b950      	cbnz	r0, 800a0e0 <__ssputs_r+0x5c>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d0:	f8ca 3000 	str.w	r3, [sl]
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0da:	81a3      	strh	r3, [r4, #12]
 800a0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e0:	464a      	mov	r2, r9
 800a0e2:	6921      	ldr	r1, [r4, #16]
 800a0e4:	f7ff ff08 	bl	8009ef8 <memcpy>
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	6126      	str	r6, [r4, #16]
 800a0f6:	444e      	add	r6, r9
 800a0f8:	6026      	str	r6, [r4, #0]
 800a0fa:	463e      	mov	r6, r7
 800a0fc:	6165      	str	r5, [r4, #20]
 800a0fe:	eba5 0509 	sub.w	r5, r5, r9
 800a102:	60a5      	str	r5, [r4, #8]
 800a104:	42be      	cmp	r6, r7
 800a106:	d900      	bls.n	800a10a <__ssputs_r+0x86>
 800a108:	463e      	mov	r6, r7
 800a10a:	4632      	mov	r2, r6
 800a10c:	4641      	mov	r1, r8
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	f000 fab8 	bl	800a684 <memmove>
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	6822      	ldr	r2, [r4, #0]
 800a118:	1b9b      	subs	r3, r3, r6
 800a11a:	4432      	add	r2, r6
 800a11c:	2000      	movs	r0, #0
 800a11e:	60a3      	str	r3, [r4, #8]
 800a120:	6022      	str	r2, [r4, #0]
 800a122:	e7db      	b.n	800a0dc <__ssputs_r+0x58>
 800a124:	462a      	mov	r2, r5
 800a126:	f000 fb6d 	bl	800a804 <_realloc_r>
 800a12a:	4606      	mov	r6, r0
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d1e1      	bne.n	800a0f4 <__ssputs_r+0x70>
 800a130:	4650      	mov	r0, sl
 800a132:	6921      	ldr	r1, [r4, #16]
 800a134:	f000 fac0 	bl	800a6b8 <_free_r>
 800a138:	e7c7      	b.n	800a0ca <__ssputs_r+0x46>
	...

0800a13c <_svfiprintf_r>:
 800a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	4698      	mov	r8, r3
 800a142:	898b      	ldrh	r3, [r1, #12]
 800a144:	4607      	mov	r7, r0
 800a146:	061b      	lsls	r3, r3, #24
 800a148:	460d      	mov	r5, r1
 800a14a:	4614      	mov	r4, r2
 800a14c:	b09d      	sub	sp, #116	; 0x74
 800a14e:	d50e      	bpl.n	800a16e <_svfiprintf_r+0x32>
 800a150:	690b      	ldr	r3, [r1, #16]
 800a152:	b963      	cbnz	r3, 800a16e <_svfiprintf_r+0x32>
 800a154:	2140      	movs	r1, #64	; 0x40
 800a156:	f000 fafb 	bl	800a750 <_malloc_r>
 800a15a:	6028      	str	r0, [r5, #0]
 800a15c:	6128      	str	r0, [r5, #16]
 800a15e:	b920      	cbnz	r0, 800a16a <_svfiprintf_r+0x2e>
 800a160:	230c      	movs	r3, #12
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a168:	e0d1      	b.n	800a30e <_svfiprintf_r+0x1d2>
 800a16a:	2340      	movs	r3, #64	; 0x40
 800a16c:	616b      	str	r3, [r5, #20]
 800a16e:	2300      	movs	r3, #0
 800a170:	9309      	str	r3, [sp, #36]	; 0x24
 800a172:	2320      	movs	r3, #32
 800a174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a178:	2330      	movs	r3, #48	; 0x30
 800a17a:	f04f 0901 	mov.w	r9, #1
 800a17e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a328 <_svfiprintf_r+0x1ec>
 800a186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a18a:	4623      	mov	r3, r4
 800a18c:	469a      	mov	sl, r3
 800a18e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a192:	b10a      	cbz	r2, 800a198 <_svfiprintf_r+0x5c>
 800a194:	2a25      	cmp	r2, #37	; 0x25
 800a196:	d1f9      	bne.n	800a18c <_svfiprintf_r+0x50>
 800a198:	ebba 0b04 	subs.w	fp, sl, r4
 800a19c:	d00b      	beq.n	800a1b6 <_svfiprintf_r+0x7a>
 800a19e:	465b      	mov	r3, fp
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	f7ff ff6d 	bl	800a084 <__ssputs_r>
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	f000 80aa 	beq.w	800a304 <_svfiprintf_r+0x1c8>
 800a1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b2:	445a      	add	r2, fp
 800a1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80a2 	beq.w	800a304 <_svfiprintf_r+0x1c8>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ca:	f10a 0a01 	add.w	sl, sl, #1
 800a1ce:	9304      	str	r3, [sp, #16]
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d8:	4654      	mov	r4, sl
 800a1da:	2205      	movs	r2, #5
 800a1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e0:	4851      	ldr	r0, [pc, #324]	; (800a328 <_svfiprintf_r+0x1ec>)
 800a1e2:	f000 fa41 	bl	800a668 <memchr>
 800a1e6:	9a04      	ldr	r2, [sp, #16]
 800a1e8:	b9d8      	cbnz	r0, 800a222 <_svfiprintf_r+0xe6>
 800a1ea:	06d0      	lsls	r0, r2, #27
 800a1ec:	bf44      	itt	mi
 800a1ee:	2320      	movmi	r3, #32
 800a1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f4:	0711      	lsls	r1, r2, #28
 800a1f6:	bf44      	itt	mi
 800a1f8:	232b      	movmi	r3, #43	; 0x2b
 800a1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a202:	2b2a      	cmp	r3, #42	; 0x2a
 800a204:	d015      	beq.n	800a232 <_svfiprintf_r+0xf6>
 800a206:	4654      	mov	r4, sl
 800a208:	2000      	movs	r0, #0
 800a20a:	f04f 0c0a 	mov.w	ip, #10
 800a20e:	9a07      	ldr	r2, [sp, #28]
 800a210:	4621      	mov	r1, r4
 800a212:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a216:	3b30      	subs	r3, #48	; 0x30
 800a218:	2b09      	cmp	r3, #9
 800a21a:	d94e      	bls.n	800a2ba <_svfiprintf_r+0x17e>
 800a21c:	b1b0      	cbz	r0, 800a24c <_svfiprintf_r+0x110>
 800a21e:	9207      	str	r2, [sp, #28]
 800a220:	e014      	b.n	800a24c <_svfiprintf_r+0x110>
 800a222:	eba0 0308 	sub.w	r3, r0, r8
 800a226:	fa09 f303 	lsl.w	r3, r9, r3
 800a22a:	4313      	orrs	r3, r2
 800a22c:	46a2      	mov	sl, r4
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	e7d2      	b.n	800a1d8 <_svfiprintf_r+0x9c>
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	1d19      	adds	r1, r3, #4
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	9103      	str	r1, [sp, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bfbb      	ittet	lt
 800a23e:	425b      	neglt	r3, r3
 800a240:	f042 0202 	orrlt.w	r2, r2, #2
 800a244:	9307      	strge	r3, [sp, #28]
 800a246:	9307      	strlt	r3, [sp, #28]
 800a248:	bfb8      	it	lt
 800a24a:	9204      	strlt	r2, [sp, #16]
 800a24c:	7823      	ldrb	r3, [r4, #0]
 800a24e:	2b2e      	cmp	r3, #46	; 0x2e
 800a250:	d10c      	bne.n	800a26c <_svfiprintf_r+0x130>
 800a252:	7863      	ldrb	r3, [r4, #1]
 800a254:	2b2a      	cmp	r3, #42	; 0x2a
 800a256:	d135      	bne.n	800a2c4 <_svfiprintf_r+0x188>
 800a258:	9b03      	ldr	r3, [sp, #12]
 800a25a:	3402      	adds	r4, #2
 800a25c:	1d1a      	adds	r2, r3, #4
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	9203      	str	r2, [sp, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	bfb8      	it	lt
 800a266:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a338 <_svfiprintf_r+0x1fc>
 800a270:	2203      	movs	r2, #3
 800a272:	4650      	mov	r0, sl
 800a274:	7821      	ldrb	r1, [r4, #0]
 800a276:	f000 f9f7 	bl	800a668 <memchr>
 800a27a:	b140      	cbz	r0, 800a28e <_svfiprintf_r+0x152>
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	eba0 000a 	sub.w	r0, r0, sl
 800a282:	fa03 f000 	lsl.w	r0, r3, r0
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	3401      	adds	r4, #1
 800a28a:	4303      	orrs	r3, r0
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a292:	2206      	movs	r2, #6
 800a294:	4825      	ldr	r0, [pc, #148]	; (800a32c <_svfiprintf_r+0x1f0>)
 800a296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a29a:	f000 f9e5 	bl	800a668 <memchr>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d038      	beq.n	800a314 <_svfiprintf_r+0x1d8>
 800a2a2:	4b23      	ldr	r3, [pc, #140]	; (800a330 <_svfiprintf_r+0x1f4>)
 800a2a4:	bb1b      	cbnz	r3, 800a2ee <_svfiprintf_r+0x1b2>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	3307      	adds	r3, #7
 800a2aa:	f023 0307 	bic.w	r3, r3, #7
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	9303      	str	r3, [sp, #12]
 800a2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b4:	4433      	add	r3, r6
 800a2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b8:	e767      	b.n	800a18a <_svfiprintf_r+0x4e>
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	2001      	movs	r0, #1
 800a2be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2c2:	e7a5      	b.n	800a210 <_svfiprintf_r+0xd4>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f04f 0c0a 	mov.w	ip, #10
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	3401      	adds	r4, #1
 800a2ce:	9305      	str	r3, [sp, #20]
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d6:	3a30      	subs	r2, #48	; 0x30
 800a2d8:	2a09      	cmp	r2, #9
 800a2da:	d903      	bls.n	800a2e4 <_svfiprintf_r+0x1a8>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0c5      	beq.n	800a26c <_svfiprintf_r+0x130>
 800a2e0:	9105      	str	r1, [sp, #20]
 800a2e2:	e7c3      	b.n	800a26c <_svfiprintf_r+0x130>
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ec:	e7f0      	b.n	800a2d0 <_svfiprintf_r+0x194>
 800a2ee:	ab03      	add	r3, sp, #12
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <_svfiprintf_r+0x1f8>)
 800a2f8:	a904      	add	r1, sp, #16
 800a2fa:	f3af 8000 	nop.w
 800a2fe:	1c42      	adds	r2, r0, #1
 800a300:	4606      	mov	r6, r0
 800a302:	d1d6      	bne.n	800a2b2 <_svfiprintf_r+0x176>
 800a304:	89ab      	ldrh	r3, [r5, #12]
 800a306:	065b      	lsls	r3, r3, #25
 800a308:	f53f af2c 	bmi.w	800a164 <_svfiprintf_r+0x28>
 800a30c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a30e:	b01d      	add	sp, #116	; 0x74
 800a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a314:	ab03      	add	r3, sp, #12
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	462a      	mov	r2, r5
 800a31a:	4638      	mov	r0, r7
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <_svfiprintf_r+0x1f8>)
 800a31e:	a904      	add	r1, sp, #16
 800a320:	f000 f87c 	bl	800a41c <_printf_i>
 800a324:	e7eb      	b.n	800a2fe <_svfiprintf_r+0x1c2>
 800a326:	bf00      	nop
 800a328:	0800aac9 	.word	0x0800aac9
 800a32c:	0800aad3 	.word	0x0800aad3
 800a330:	00000000 	.word	0x00000000
 800a334:	0800a085 	.word	0x0800a085
 800a338:	0800aacf 	.word	0x0800aacf

0800a33c <_printf_common>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	4616      	mov	r6, r2
 800a342:	4699      	mov	r9, r3
 800a344:	688a      	ldr	r2, [r1, #8]
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	4607      	mov	r7, r0
 800a34a:	4293      	cmp	r3, r2
 800a34c:	bfb8      	it	lt
 800a34e:	4613      	movlt	r3, r2
 800a350:	6033      	str	r3, [r6, #0]
 800a352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a356:	460c      	mov	r4, r1
 800a358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a35c:	b10a      	cbz	r2, 800a362 <_printf_common+0x26>
 800a35e:	3301      	adds	r3, #1
 800a360:	6033      	str	r3, [r6, #0]
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	0699      	lsls	r1, r3, #26
 800a366:	bf42      	ittt	mi
 800a368:	6833      	ldrmi	r3, [r6, #0]
 800a36a:	3302      	addmi	r3, #2
 800a36c:	6033      	strmi	r3, [r6, #0]
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	f015 0506 	ands.w	r5, r5, #6
 800a374:	d106      	bne.n	800a384 <_printf_common+0x48>
 800a376:	f104 0a19 	add.w	sl, r4, #25
 800a37a:	68e3      	ldr	r3, [r4, #12]
 800a37c:	6832      	ldr	r2, [r6, #0]
 800a37e:	1a9b      	subs	r3, r3, r2
 800a380:	42ab      	cmp	r3, r5
 800a382:	dc28      	bgt.n	800a3d6 <_printf_common+0x9a>
 800a384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a388:	1e13      	subs	r3, r2, #0
 800a38a:	6822      	ldr	r2, [r4, #0]
 800a38c:	bf18      	it	ne
 800a38e:	2301      	movne	r3, #1
 800a390:	0692      	lsls	r2, r2, #26
 800a392:	d42d      	bmi.n	800a3f0 <_printf_common+0xb4>
 800a394:	4649      	mov	r1, r9
 800a396:	4638      	mov	r0, r7
 800a398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a39c:	47c0      	blx	r8
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d020      	beq.n	800a3e4 <_printf_common+0xa8>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	68e5      	ldr	r5, [r4, #12]
 800a3a6:	f003 0306 	and.w	r3, r3, #6
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	bf18      	it	ne
 800a3ae:	2500      	movne	r5, #0
 800a3b0:	6832      	ldr	r2, [r6, #0]
 800a3b2:	f04f 0600 	mov.w	r6, #0
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	bf08      	it	eq
 800a3ba:	1aad      	subeq	r5, r5, r2
 800a3bc:	6922      	ldr	r2, [r4, #16]
 800a3be:	bf08      	it	eq
 800a3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bfc4      	itt	gt
 800a3c8:	1a9b      	subgt	r3, r3, r2
 800a3ca:	18ed      	addgt	r5, r5, r3
 800a3cc:	341a      	adds	r4, #26
 800a3ce:	42b5      	cmp	r5, r6
 800a3d0:	d11a      	bne.n	800a408 <_printf_common+0xcc>
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	e008      	b.n	800a3e8 <_printf_common+0xac>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4652      	mov	r2, sl
 800a3da:	4649      	mov	r1, r9
 800a3dc:	4638      	mov	r0, r7
 800a3de:	47c0      	blx	r8
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d103      	bne.n	800a3ec <_printf_common+0xb0>
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ec:	3501      	adds	r5, #1
 800a3ee:	e7c4      	b.n	800a37a <_printf_common+0x3e>
 800a3f0:	2030      	movs	r0, #48	; 0x30
 800a3f2:	18e1      	adds	r1, r4, r3
 800a3f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3fe:	4422      	add	r2, r4
 800a400:	3302      	adds	r3, #2
 800a402:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a406:	e7c5      	b.n	800a394 <_printf_common+0x58>
 800a408:	2301      	movs	r3, #1
 800a40a:	4622      	mov	r2, r4
 800a40c:	4649      	mov	r1, r9
 800a40e:	4638      	mov	r0, r7
 800a410:	47c0      	blx	r8
 800a412:	3001      	adds	r0, #1
 800a414:	d0e6      	beq.n	800a3e4 <_printf_common+0xa8>
 800a416:	3601      	adds	r6, #1
 800a418:	e7d9      	b.n	800a3ce <_printf_common+0x92>
	...

0800a41c <_printf_i>:
 800a41c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	460c      	mov	r4, r1
 800a422:	7e27      	ldrb	r7, [r4, #24]
 800a424:	4691      	mov	r9, r2
 800a426:	2f78      	cmp	r7, #120	; 0x78
 800a428:	4680      	mov	r8, r0
 800a42a:	469a      	mov	sl, r3
 800a42c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a42e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a432:	d807      	bhi.n	800a444 <_printf_i+0x28>
 800a434:	2f62      	cmp	r7, #98	; 0x62
 800a436:	d80a      	bhi.n	800a44e <_printf_i+0x32>
 800a438:	2f00      	cmp	r7, #0
 800a43a:	f000 80d9 	beq.w	800a5f0 <_printf_i+0x1d4>
 800a43e:	2f58      	cmp	r7, #88	; 0x58
 800a440:	f000 80a4 	beq.w	800a58c <_printf_i+0x170>
 800a444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a44c:	e03a      	b.n	800a4c4 <_printf_i+0xa8>
 800a44e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a452:	2b15      	cmp	r3, #21
 800a454:	d8f6      	bhi.n	800a444 <_printf_i+0x28>
 800a456:	a001      	add	r0, pc, #4	; (adr r0, 800a45c <_printf_i+0x40>)
 800a458:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a45c:	0800a4b5 	.word	0x0800a4b5
 800a460:	0800a4c9 	.word	0x0800a4c9
 800a464:	0800a445 	.word	0x0800a445
 800a468:	0800a445 	.word	0x0800a445
 800a46c:	0800a445 	.word	0x0800a445
 800a470:	0800a445 	.word	0x0800a445
 800a474:	0800a4c9 	.word	0x0800a4c9
 800a478:	0800a445 	.word	0x0800a445
 800a47c:	0800a445 	.word	0x0800a445
 800a480:	0800a445 	.word	0x0800a445
 800a484:	0800a445 	.word	0x0800a445
 800a488:	0800a5d7 	.word	0x0800a5d7
 800a48c:	0800a4f9 	.word	0x0800a4f9
 800a490:	0800a5b9 	.word	0x0800a5b9
 800a494:	0800a445 	.word	0x0800a445
 800a498:	0800a445 	.word	0x0800a445
 800a49c:	0800a5f9 	.word	0x0800a5f9
 800a4a0:	0800a445 	.word	0x0800a445
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a445 	.word	0x0800a445
 800a4ac:	0800a445 	.word	0x0800a445
 800a4b0:	0800a5c1 	.word	0x0800a5c1
 800a4b4:	680b      	ldr	r3, [r1, #0]
 800a4b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4ba:	1d1a      	adds	r2, r3, #4
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	600a      	str	r2, [r1, #0]
 800a4c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e0a4      	b.n	800a612 <_printf_i+0x1f6>
 800a4c8:	6825      	ldr	r5, [r4, #0]
 800a4ca:	6808      	ldr	r0, [r1, #0]
 800a4cc:	062e      	lsls	r6, r5, #24
 800a4ce:	f100 0304 	add.w	r3, r0, #4
 800a4d2:	d50a      	bpl.n	800a4ea <_printf_i+0xce>
 800a4d4:	6805      	ldr	r5, [r0, #0]
 800a4d6:	600b      	str	r3, [r1, #0]
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	da03      	bge.n	800a4e4 <_printf_i+0xc8>
 800a4dc:	232d      	movs	r3, #45	; 0x2d
 800a4de:	426d      	negs	r5, r5
 800a4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e4:	230a      	movs	r3, #10
 800a4e6:	485e      	ldr	r0, [pc, #376]	; (800a660 <_printf_i+0x244>)
 800a4e8:	e019      	b.n	800a51e <_printf_i+0x102>
 800a4ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4ee:	6805      	ldr	r5, [r0, #0]
 800a4f0:	600b      	str	r3, [r1, #0]
 800a4f2:	bf18      	it	ne
 800a4f4:	b22d      	sxthne	r5, r5
 800a4f6:	e7ef      	b.n	800a4d8 <_printf_i+0xbc>
 800a4f8:	680b      	ldr	r3, [r1, #0]
 800a4fa:	6825      	ldr	r5, [r4, #0]
 800a4fc:	1d18      	adds	r0, r3, #4
 800a4fe:	6008      	str	r0, [r1, #0]
 800a500:	0628      	lsls	r0, r5, #24
 800a502:	d501      	bpl.n	800a508 <_printf_i+0xec>
 800a504:	681d      	ldr	r5, [r3, #0]
 800a506:	e002      	b.n	800a50e <_printf_i+0xf2>
 800a508:	0669      	lsls	r1, r5, #25
 800a50a:	d5fb      	bpl.n	800a504 <_printf_i+0xe8>
 800a50c:	881d      	ldrh	r5, [r3, #0]
 800a50e:	2f6f      	cmp	r7, #111	; 0x6f
 800a510:	bf0c      	ite	eq
 800a512:	2308      	moveq	r3, #8
 800a514:	230a      	movne	r3, #10
 800a516:	4852      	ldr	r0, [pc, #328]	; (800a660 <_printf_i+0x244>)
 800a518:	2100      	movs	r1, #0
 800a51a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a51e:	6866      	ldr	r6, [r4, #4]
 800a520:	2e00      	cmp	r6, #0
 800a522:	bfa8      	it	ge
 800a524:	6821      	ldrge	r1, [r4, #0]
 800a526:	60a6      	str	r6, [r4, #8]
 800a528:	bfa4      	itt	ge
 800a52a:	f021 0104 	bicge.w	r1, r1, #4
 800a52e:	6021      	strge	r1, [r4, #0]
 800a530:	b90d      	cbnz	r5, 800a536 <_printf_i+0x11a>
 800a532:	2e00      	cmp	r6, #0
 800a534:	d04d      	beq.n	800a5d2 <_printf_i+0x1b6>
 800a536:	4616      	mov	r6, r2
 800a538:	fbb5 f1f3 	udiv	r1, r5, r3
 800a53c:	fb03 5711 	mls	r7, r3, r1, r5
 800a540:	5dc7      	ldrb	r7, [r0, r7]
 800a542:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a546:	462f      	mov	r7, r5
 800a548:	42bb      	cmp	r3, r7
 800a54a:	460d      	mov	r5, r1
 800a54c:	d9f4      	bls.n	800a538 <_printf_i+0x11c>
 800a54e:	2b08      	cmp	r3, #8
 800a550:	d10b      	bne.n	800a56a <_printf_i+0x14e>
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	07df      	lsls	r7, r3, #31
 800a556:	d508      	bpl.n	800a56a <_printf_i+0x14e>
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	6861      	ldr	r1, [r4, #4]
 800a55c:	4299      	cmp	r1, r3
 800a55e:	bfde      	ittt	le
 800a560:	2330      	movle	r3, #48	; 0x30
 800a562:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a566:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a56a:	1b92      	subs	r2, r2, r6
 800a56c:	6122      	str	r2, [r4, #16]
 800a56e:	464b      	mov	r3, r9
 800a570:	4621      	mov	r1, r4
 800a572:	4640      	mov	r0, r8
 800a574:	f8cd a000 	str.w	sl, [sp]
 800a578:	aa03      	add	r2, sp, #12
 800a57a:	f7ff fedf 	bl	800a33c <_printf_common>
 800a57e:	3001      	adds	r0, #1
 800a580:	d14c      	bne.n	800a61c <_printf_i+0x200>
 800a582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a586:	b004      	add	sp, #16
 800a588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58c:	4834      	ldr	r0, [pc, #208]	; (800a660 <_printf_i+0x244>)
 800a58e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a592:	680e      	ldr	r6, [r1, #0]
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	f856 5b04 	ldr.w	r5, [r6], #4
 800a59a:	061f      	lsls	r7, r3, #24
 800a59c:	600e      	str	r6, [r1, #0]
 800a59e:	d514      	bpl.n	800a5ca <_printf_i+0x1ae>
 800a5a0:	07d9      	lsls	r1, r3, #31
 800a5a2:	bf44      	itt	mi
 800a5a4:	f043 0320 	orrmi.w	r3, r3, #32
 800a5a8:	6023      	strmi	r3, [r4, #0]
 800a5aa:	b91d      	cbnz	r5, 800a5b4 <_printf_i+0x198>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	f023 0320 	bic.w	r3, r3, #32
 800a5b2:	6023      	str	r3, [r4, #0]
 800a5b4:	2310      	movs	r3, #16
 800a5b6:	e7af      	b.n	800a518 <_printf_i+0xfc>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	f043 0320 	orr.w	r3, r3, #32
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	2378      	movs	r3, #120	; 0x78
 800a5c2:	4828      	ldr	r0, [pc, #160]	; (800a664 <_printf_i+0x248>)
 800a5c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5c8:	e7e3      	b.n	800a592 <_printf_i+0x176>
 800a5ca:	065e      	lsls	r6, r3, #25
 800a5cc:	bf48      	it	mi
 800a5ce:	b2ad      	uxthmi	r5, r5
 800a5d0:	e7e6      	b.n	800a5a0 <_printf_i+0x184>
 800a5d2:	4616      	mov	r6, r2
 800a5d4:	e7bb      	b.n	800a54e <_printf_i+0x132>
 800a5d6:	680b      	ldr	r3, [r1, #0]
 800a5d8:	6826      	ldr	r6, [r4, #0]
 800a5da:	1d1d      	adds	r5, r3, #4
 800a5dc:	6960      	ldr	r0, [r4, #20]
 800a5de:	600d      	str	r5, [r1, #0]
 800a5e0:	0635      	lsls	r5, r6, #24
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	d501      	bpl.n	800a5ea <_printf_i+0x1ce>
 800a5e6:	6018      	str	r0, [r3, #0]
 800a5e8:	e002      	b.n	800a5f0 <_printf_i+0x1d4>
 800a5ea:	0671      	lsls	r1, r6, #25
 800a5ec:	d5fb      	bpl.n	800a5e6 <_printf_i+0x1ca>
 800a5ee:	8018      	strh	r0, [r3, #0]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4616      	mov	r6, r2
 800a5f4:	6123      	str	r3, [r4, #16]
 800a5f6:	e7ba      	b.n	800a56e <_printf_i+0x152>
 800a5f8:	680b      	ldr	r3, [r1, #0]
 800a5fa:	1d1a      	adds	r2, r3, #4
 800a5fc:	600a      	str	r2, [r1, #0]
 800a5fe:	681e      	ldr	r6, [r3, #0]
 800a600:	2100      	movs	r1, #0
 800a602:	4630      	mov	r0, r6
 800a604:	6862      	ldr	r2, [r4, #4]
 800a606:	f000 f82f 	bl	800a668 <memchr>
 800a60a:	b108      	cbz	r0, 800a610 <_printf_i+0x1f4>
 800a60c:	1b80      	subs	r0, r0, r6
 800a60e:	6060      	str	r0, [r4, #4]
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	2300      	movs	r3, #0
 800a616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61a:	e7a8      	b.n	800a56e <_printf_i+0x152>
 800a61c:	4632      	mov	r2, r6
 800a61e:	4649      	mov	r1, r9
 800a620:	4640      	mov	r0, r8
 800a622:	6923      	ldr	r3, [r4, #16]
 800a624:	47d0      	blx	sl
 800a626:	3001      	adds	r0, #1
 800a628:	d0ab      	beq.n	800a582 <_printf_i+0x166>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	079b      	lsls	r3, r3, #30
 800a62e:	d413      	bmi.n	800a658 <_printf_i+0x23c>
 800a630:	68e0      	ldr	r0, [r4, #12]
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	4298      	cmp	r0, r3
 800a636:	bfb8      	it	lt
 800a638:	4618      	movlt	r0, r3
 800a63a:	e7a4      	b.n	800a586 <_printf_i+0x16a>
 800a63c:	2301      	movs	r3, #1
 800a63e:	4632      	mov	r2, r6
 800a640:	4649      	mov	r1, r9
 800a642:	4640      	mov	r0, r8
 800a644:	47d0      	blx	sl
 800a646:	3001      	adds	r0, #1
 800a648:	d09b      	beq.n	800a582 <_printf_i+0x166>
 800a64a:	3501      	adds	r5, #1
 800a64c:	68e3      	ldr	r3, [r4, #12]
 800a64e:	9903      	ldr	r1, [sp, #12]
 800a650:	1a5b      	subs	r3, r3, r1
 800a652:	42ab      	cmp	r3, r5
 800a654:	dcf2      	bgt.n	800a63c <_printf_i+0x220>
 800a656:	e7eb      	b.n	800a630 <_printf_i+0x214>
 800a658:	2500      	movs	r5, #0
 800a65a:	f104 0619 	add.w	r6, r4, #25
 800a65e:	e7f5      	b.n	800a64c <_printf_i+0x230>
 800a660:	0800aada 	.word	0x0800aada
 800a664:	0800aaeb 	.word	0x0800aaeb

0800a668 <memchr>:
 800a668:	4603      	mov	r3, r0
 800a66a:	b510      	push	{r4, lr}
 800a66c:	b2c9      	uxtb	r1, r1
 800a66e:	4402      	add	r2, r0
 800a670:	4293      	cmp	r3, r2
 800a672:	4618      	mov	r0, r3
 800a674:	d101      	bne.n	800a67a <memchr+0x12>
 800a676:	2000      	movs	r0, #0
 800a678:	e003      	b.n	800a682 <memchr+0x1a>
 800a67a:	7804      	ldrb	r4, [r0, #0]
 800a67c:	3301      	adds	r3, #1
 800a67e:	428c      	cmp	r4, r1
 800a680:	d1f6      	bne.n	800a670 <memchr+0x8>
 800a682:	bd10      	pop	{r4, pc}

0800a684 <memmove>:
 800a684:	4288      	cmp	r0, r1
 800a686:	b510      	push	{r4, lr}
 800a688:	eb01 0402 	add.w	r4, r1, r2
 800a68c:	d902      	bls.n	800a694 <memmove+0x10>
 800a68e:	4284      	cmp	r4, r0
 800a690:	4623      	mov	r3, r4
 800a692:	d807      	bhi.n	800a6a4 <memmove+0x20>
 800a694:	1e43      	subs	r3, r0, #1
 800a696:	42a1      	cmp	r1, r4
 800a698:	d008      	beq.n	800a6ac <memmove+0x28>
 800a69a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a69e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6a2:	e7f8      	b.n	800a696 <memmove+0x12>
 800a6a4:	4601      	mov	r1, r0
 800a6a6:	4402      	add	r2, r0
 800a6a8:	428a      	cmp	r2, r1
 800a6aa:	d100      	bne.n	800a6ae <memmove+0x2a>
 800a6ac:	bd10      	pop	{r4, pc}
 800a6ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6b6:	e7f7      	b.n	800a6a8 <memmove+0x24>

0800a6b8 <_free_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	2900      	cmp	r1, #0
 800a6be:	d043      	beq.n	800a748 <_free_r+0x90>
 800a6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6c4:	1f0c      	subs	r4, r1, #4
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	bfb8      	it	lt
 800a6ca:	18e4      	addlt	r4, r4, r3
 800a6cc:	f000 f8d0 	bl	800a870 <__malloc_lock>
 800a6d0:	4a1e      	ldr	r2, [pc, #120]	; (800a74c <_free_r+0x94>)
 800a6d2:	6813      	ldr	r3, [r2, #0]
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	b933      	cbnz	r3, 800a6e6 <_free_r+0x2e>
 800a6d8:	6063      	str	r3, [r4, #4]
 800a6da:	6014      	str	r4, [r2, #0]
 800a6dc:	4628      	mov	r0, r5
 800a6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6e2:	f000 b8cb 	b.w	800a87c <__malloc_unlock>
 800a6e6:	42a3      	cmp	r3, r4
 800a6e8:	d90a      	bls.n	800a700 <_free_r+0x48>
 800a6ea:	6821      	ldr	r1, [r4, #0]
 800a6ec:	1862      	adds	r2, r4, r1
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	bf01      	itttt	eq
 800a6f2:	681a      	ldreq	r2, [r3, #0]
 800a6f4:	685b      	ldreq	r3, [r3, #4]
 800a6f6:	1852      	addeq	r2, r2, r1
 800a6f8:	6022      	streq	r2, [r4, #0]
 800a6fa:	6063      	str	r3, [r4, #4]
 800a6fc:	6004      	str	r4, [r0, #0]
 800a6fe:	e7ed      	b.n	800a6dc <_free_r+0x24>
 800a700:	461a      	mov	r2, r3
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	b10b      	cbz	r3, 800a70a <_free_r+0x52>
 800a706:	42a3      	cmp	r3, r4
 800a708:	d9fa      	bls.n	800a700 <_free_r+0x48>
 800a70a:	6811      	ldr	r1, [r2, #0]
 800a70c:	1850      	adds	r0, r2, r1
 800a70e:	42a0      	cmp	r0, r4
 800a710:	d10b      	bne.n	800a72a <_free_r+0x72>
 800a712:	6820      	ldr	r0, [r4, #0]
 800a714:	4401      	add	r1, r0
 800a716:	1850      	adds	r0, r2, r1
 800a718:	4283      	cmp	r3, r0
 800a71a:	6011      	str	r1, [r2, #0]
 800a71c:	d1de      	bne.n	800a6dc <_free_r+0x24>
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	4401      	add	r1, r0
 800a724:	6011      	str	r1, [r2, #0]
 800a726:	6053      	str	r3, [r2, #4]
 800a728:	e7d8      	b.n	800a6dc <_free_r+0x24>
 800a72a:	d902      	bls.n	800a732 <_free_r+0x7a>
 800a72c:	230c      	movs	r3, #12
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	e7d4      	b.n	800a6dc <_free_r+0x24>
 800a732:	6820      	ldr	r0, [r4, #0]
 800a734:	1821      	adds	r1, r4, r0
 800a736:	428b      	cmp	r3, r1
 800a738:	bf01      	itttt	eq
 800a73a:	6819      	ldreq	r1, [r3, #0]
 800a73c:	685b      	ldreq	r3, [r3, #4]
 800a73e:	1809      	addeq	r1, r1, r0
 800a740:	6021      	streq	r1, [r4, #0]
 800a742:	6063      	str	r3, [r4, #4]
 800a744:	6054      	str	r4, [r2, #4]
 800a746:	e7c9      	b.n	800a6dc <_free_r+0x24>
 800a748:	bd38      	pop	{r3, r4, r5, pc}
 800a74a:	bf00      	nop
 800a74c:	200016a8 	.word	0x200016a8

0800a750 <_malloc_r>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	1ccd      	adds	r5, r1, #3
 800a754:	f025 0503 	bic.w	r5, r5, #3
 800a758:	3508      	adds	r5, #8
 800a75a:	2d0c      	cmp	r5, #12
 800a75c:	bf38      	it	cc
 800a75e:	250c      	movcc	r5, #12
 800a760:	2d00      	cmp	r5, #0
 800a762:	4606      	mov	r6, r0
 800a764:	db01      	blt.n	800a76a <_malloc_r+0x1a>
 800a766:	42a9      	cmp	r1, r5
 800a768:	d903      	bls.n	800a772 <_malloc_r+0x22>
 800a76a:	230c      	movs	r3, #12
 800a76c:	6033      	str	r3, [r6, #0]
 800a76e:	2000      	movs	r0, #0
 800a770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a772:	f000 f87d 	bl	800a870 <__malloc_lock>
 800a776:	4921      	ldr	r1, [pc, #132]	; (800a7fc <_malloc_r+0xac>)
 800a778:	680a      	ldr	r2, [r1, #0]
 800a77a:	4614      	mov	r4, r2
 800a77c:	b99c      	cbnz	r4, 800a7a6 <_malloc_r+0x56>
 800a77e:	4f20      	ldr	r7, [pc, #128]	; (800a800 <_malloc_r+0xb0>)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	b923      	cbnz	r3, 800a78e <_malloc_r+0x3e>
 800a784:	4621      	mov	r1, r4
 800a786:	4630      	mov	r0, r6
 800a788:	f000 f862 	bl	800a850 <_sbrk_r>
 800a78c:	6038      	str	r0, [r7, #0]
 800a78e:	4629      	mov	r1, r5
 800a790:	4630      	mov	r0, r6
 800a792:	f000 f85d 	bl	800a850 <_sbrk_r>
 800a796:	1c43      	adds	r3, r0, #1
 800a798:	d123      	bne.n	800a7e2 <_malloc_r+0x92>
 800a79a:	230c      	movs	r3, #12
 800a79c:	4630      	mov	r0, r6
 800a79e:	6033      	str	r3, [r6, #0]
 800a7a0:	f000 f86c 	bl	800a87c <__malloc_unlock>
 800a7a4:	e7e3      	b.n	800a76e <_malloc_r+0x1e>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	1b5b      	subs	r3, r3, r5
 800a7aa:	d417      	bmi.n	800a7dc <_malloc_r+0x8c>
 800a7ac:	2b0b      	cmp	r3, #11
 800a7ae:	d903      	bls.n	800a7b8 <_malloc_r+0x68>
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	441c      	add	r4, r3
 800a7b4:	6025      	str	r5, [r4, #0]
 800a7b6:	e004      	b.n	800a7c2 <_malloc_r+0x72>
 800a7b8:	6863      	ldr	r3, [r4, #4]
 800a7ba:	42a2      	cmp	r2, r4
 800a7bc:	bf0c      	ite	eq
 800a7be:	600b      	streq	r3, [r1, #0]
 800a7c0:	6053      	strne	r3, [r2, #4]
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f000 f85a 	bl	800a87c <__malloc_unlock>
 800a7c8:	f104 000b 	add.w	r0, r4, #11
 800a7cc:	1d23      	adds	r3, r4, #4
 800a7ce:	f020 0007 	bic.w	r0, r0, #7
 800a7d2:	1ac2      	subs	r2, r0, r3
 800a7d4:	d0cc      	beq.n	800a770 <_malloc_r+0x20>
 800a7d6:	1a1b      	subs	r3, r3, r0
 800a7d8:	50a3      	str	r3, [r4, r2]
 800a7da:	e7c9      	b.n	800a770 <_malloc_r+0x20>
 800a7dc:	4622      	mov	r2, r4
 800a7de:	6864      	ldr	r4, [r4, #4]
 800a7e0:	e7cc      	b.n	800a77c <_malloc_r+0x2c>
 800a7e2:	1cc4      	adds	r4, r0, #3
 800a7e4:	f024 0403 	bic.w	r4, r4, #3
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d0e3      	beq.n	800a7b4 <_malloc_r+0x64>
 800a7ec:	1a21      	subs	r1, r4, r0
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f000 f82e 	bl	800a850 <_sbrk_r>
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d1dd      	bne.n	800a7b4 <_malloc_r+0x64>
 800a7f8:	e7cf      	b.n	800a79a <_malloc_r+0x4a>
 800a7fa:	bf00      	nop
 800a7fc:	200016a8 	.word	0x200016a8
 800a800:	200016ac 	.word	0x200016ac

0800a804 <_realloc_r>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	4607      	mov	r7, r0
 800a808:	4614      	mov	r4, r2
 800a80a:	460e      	mov	r6, r1
 800a80c:	b921      	cbnz	r1, 800a818 <_realloc_r+0x14>
 800a80e:	4611      	mov	r1, r2
 800a810:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a814:	f7ff bf9c 	b.w	800a750 <_malloc_r>
 800a818:	b922      	cbnz	r2, 800a824 <_realloc_r+0x20>
 800a81a:	f7ff ff4d 	bl	800a6b8 <_free_r>
 800a81e:	4625      	mov	r5, r4
 800a820:	4628      	mov	r0, r5
 800a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a824:	f000 f830 	bl	800a888 <_malloc_usable_size_r>
 800a828:	42a0      	cmp	r0, r4
 800a82a:	d20f      	bcs.n	800a84c <_realloc_r+0x48>
 800a82c:	4621      	mov	r1, r4
 800a82e:	4638      	mov	r0, r7
 800a830:	f7ff ff8e 	bl	800a750 <_malloc_r>
 800a834:	4605      	mov	r5, r0
 800a836:	2800      	cmp	r0, #0
 800a838:	d0f2      	beq.n	800a820 <_realloc_r+0x1c>
 800a83a:	4631      	mov	r1, r6
 800a83c:	4622      	mov	r2, r4
 800a83e:	f7ff fb5b 	bl	8009ef8 <memcpy>
 800a842:	4631      	mov	r1, r6
 800a844:	4638      	mov	r0, r7
 800a846:	f7ff ff37 	bl	800a6b8 <_free_r>
 800a84a:	e7e9      	b.n	800a820 <_realloc_r+0x1c>
 800a84c:	4635      	mov	r5, r6
 800a84e:	e7e7      	b.n	800a820 <_realloc_r+0x1c>

0800a850 <_sbrk_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	2300      	movs	r3, #0
 800a854:	4d05      	ldr	r5, [pc, #20]	; (800a86c <_sbrk_r+0x1c>)
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	602b      	str	r3, [r5, #0]
 800a85c:	f7f8 fc5e 	bl	800311c <_sbrk>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_sbrk_r+0x1a>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_sbrk_r+0x1a>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	20001c94 	.word	0x20001c94

0800a870 <__malloc_lock>:
 800a870:	4801      	ldr	r0, [pc, #4]	; (800a878 <__malloc_lock+0x8>)
 800a872:	f000 b811 	b.w	800a898 <__retarget_lock_acquire_recursive>
 800a876:	bf00      	nop
 800a878:	20001c9c 	.word	0x20001c9c

0800a87c <__malloc_unlock>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__malloc_unlock+0x8>)
 800a87e:	f000 b80c 	b.w	800a89a <__retarget_lock_release_recursive>
 800a882:	bf00      	nop
 800a884:	20001c9c 	.word	0x20001c9c

0800a888 <_malloc_usable_size_r>:
 800a888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a88c:	1f18      	subs	r0, r3, #4
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfbc      	itt	lt
 800a892:	580b      	ldrlt	r3, [r1, r0]
 800a894:	18c0      	addlt	r0, r0, r3
 800a896:	4770      	bx	lr

0800a898 <__retarget_lock_acquire_recursive>:
 800a898:	4770      	bx	lr

0800a89a <__retarget_lock_release_recursive>:
 800a89a:	4770      	bx	lr

0800a89c <_init>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	bf00      	nop
 800a8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a2:	bc08      	pop	{r3}
 800a8a4:	469e      	mov	lr, r3
 800a8a6:	4770      	bx	lr

0800a8a8 <_fini>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	bf00      	nop
 800a8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ae:	bc08      	pop	{r3}
 800a8b0:	469e      	mov	lr, r3
 800a8b2:	4770      	bx	lr
