
roll_finger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f8  0800a6f8  00020244  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6f8  0800a6f8  00020244  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6f8  0800a6f8  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800a700  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d30  20000248  0800a944  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f78  0800a944  00021f78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019235  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003740  00000000  00000000  000394a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  0003cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001388  00000000  00000000  0003e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a443  00000000  00000000  0003f478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010fc1  00000000  00000000  000598bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097eb3  00000000  00000000  0006a87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010272f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce0  00000000  00000000  001027ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000248 	.word	0x20000248
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a498 	.word	0x0800a498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000024c 	.word	0x2000024c
 800014c:	0800a498 	.word	0x0800a498

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <vApplicationGetIdleTaskMemory+0x28>)
 800095c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <vApplicationGetIdleTaskMemory+0x2c>)
 8000962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000264 	.word	0x20000264
 8000978:	200002b8 	.word	0x200002b8

0800097c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800098c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <vApplicationGetTimerTaskMemory+0x30>)
 8000992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200004b8 	.word	0x200004b8
 80009ac:	2000050c 	.word	0x2000050c

080009b0 <lightupLED>:
    }*/

}

void lightupLED(struct pixel *framebuffer)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e01a      	b.n	80009f4 <lightupLED+0x44>
	{
		framebuffer[i].r=0;
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	dde1      	ble.n	80009be <lightupLED+0xe>
	}
	for(int i=5;i<12;i++)
 80009fa:	2305      	movs	r3, #5
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	e01a      	b.n	8000a36 <lightupLED+0x86>
	{
		framebuffer[i].r=0;
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	3301      	adds	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	2b0b      	cmp	r3, #11
 8000a3a:	dde1      	ble.n	8000a00 <lightupLED+0x50>
	}
	for(int i=12;i<17;i++)
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e01a      	b.n	8000a78 <lightupLED+0xc8>
	{
		framebuffer[i].r=50;
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	2232      	movs	r2, #50	; 0x32
 8000a50:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=50;
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	2232      	movs	r2, #50	; 0x32
 8000a60:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=50;
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2232      	movs	r2, #50	; 0x32
 8000a70:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<17;i++)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	dde1      	ble.n	8000a42 <lightupLED+0x92>
	}
	for(int i=17;i<24;i++)
 8000a7e:	2311      	movs	r3, #17
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	e01a      	b.n	8000aba <lightupLED+0x10a>
	{
		framebuffer[i].r=255;
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	709a      	strb	r2, [r3, #2]
	for(int i=17;i<24;i++)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b17      	cmp	r3, #23
 8000abe:	dde1      	ble.n	8000a84 <lightupLED+0xd4>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <lightupLED2>:
void lightupLED2(struct pixel *framebuffer)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b087      	sub	sp, #28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e01a      	b.n	8000b0e <lightupLED2+0x44>
	{
		framebuffer[i].r=0;
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	dde1      	ble.n	8000ad8 <lightupLED2+0xe>
	}
	for(int i=5;i<12;i++)
 8000b14:	2305      	movs	r3, #5
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	e01a      	b.n	8000b50 <lightupLED2+0x86>
	{
		framebuffer[i].r=0;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	2200      	movs	r2, #0
 8000b28:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	2200      	movs	r2, #0
 8000b48:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b0b      	cmp	r3, #11
 8000b54:	dde1      	ble.n	8000b1a <lightupLED2+0x50>
	}
	for(int i=12;i<19;i++)
 8000b56:	230c      	movs	r3, #12
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e01a      	b.n	8000b92 <lightupLED2+0xc8>
	{
		framebuffer[i].r=255;
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	2200      	movs	r2, #0
 8000b8a:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<19;i++)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b12      	cmp	r3, #18
 8000b96:	dde1      	ble.n	8000b5c <lightupLED2+0x92>
	}
}
 8000b98:	bf00      	nop
 8000b9a:	371c      	adds	r7, #28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <HAL_UART_RxCpltCallback>:
//---------[ UART Data Reception Completion CallBackFunc. ]---------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
   // HAL_UART_Transmit(&huart1, UART1_rxBuffer, 5, 100);  //for debug
    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 5);
 8000bac:	2205      	movs	r2, #5
 8000bae:	4904      	ldr	r1, [pc, #16]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1c>)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <HAL_UART_RxCpltCallback+0x20>)
 8000bb2:	f005 fb15 	bl	80061e0 <HAL_UART_Receive_IT>

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000090c 	.word	0x2000090c
 8000bc4:	20001980 	.word	0x20001980

08000bc8 <open_gripper>:

void open_gripper(int pwmval)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	6078      	str	r0, [r7, #4]

	if((adc_value[3]>M1MinPos)||(adc_value[4]>M2MinPos))
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <open_gripper+0x78>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <open_gripper+0x7c>)
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d805      	bhi.n	8000be8 <open_gripper+0x20>
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <open_gripper+0x78>)
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <open_gripper+0x80>)
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d926      	bls.n	8000c36 <open_gripper+0x6e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <open_gripper+0x84>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f005 ff89 	bl	8006b08 <osSemaphoreWait>
		mgo=1;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <open_gripper+0x88>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000bfc:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	2264      	movs	r2, #100	; 0x64
 8000c06:	2100      	movs	r1, #0
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 fabf 	bl	800118c <scale_val>
 8000c0e:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwmval);
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <open_gripper+0x8c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	480e      	ldr	r0, [pc, #56]	; (8000c58 <open_gripper+0x90>)
 8000c1e:	f003 fcb5 	bl	800458c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2108      	movs	r1, #8
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <open_gripper+0x90>)
 8000c28:	f003 fcb0 	bl	800458c <HAL_GPIO_WritePin>
		osSemaphoreRelease(BinSemHandle);
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <open_gripper+0x84>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 ffb7 	bl	8006ba4 <osSemaphoreRelease>
	 		  		  }
		    	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
		    	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		*/
	}
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20001904 	.word	0x20001904
 8000c44:	20000010 	.word	0x20000010
 8000c48:	20000018 	.word	0x20000018
 8000c4c:	20001b50 	.word	0x20001b50
 8000c50:	20000924 	.word	0x20000924
 8000c54:	20001a28 	.word	0x20001a28
 8000c58:	40010c00 	.word	0x40010c00

08000c5c <close_gripper>:

void close_gripper(int pwmval)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]

	if((adc_value[3]<M1MaxPos)||(adc_value[4]<M2MaxPos))
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <close_gripper+0x78>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <close_gripper+0x7c>)
 8000c6a:	6812      	ldr	r2, [r2, #0]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d305      	bcc.n	8000c7c <close_gripper+0x20>
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <close_gripper+0x78>)
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <close_gripper+0x80>)
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d226      	bcs.n	8000cca <close_gripper+0x6e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <close_gripper+0x84>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c84:	4618      	mov	r0, r3
 8000c86:	f005 ff3f 	bl	8006b08 <osSemaphoreWait>
		mgc=1;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <close_gripper+0x88>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000c90:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2300      	movs	r3, #0
 8000c98:	2264      	movs	r2, #100	; 0x64
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 fa75 	bl	800118c <scale_val>
 8000ca2:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwmval);
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <close_gripper+0x8c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2108      	movs	r1, #8
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <close_gripper+0x90>)
 8000cb2:	f003 fc6b 	bl	800458c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2110      	movs	r1, #16
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <close_gripper+0x90>)
 8000cbc:	f003 fc66 	bl	800458c <HAL_GPIO_WritePin>
		osSemaphoreRelease(BinSemHandle);
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <close_gripper+0x84>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 ff6d 	bl	8006ba4 <osSemaphoreRelease>
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		    		  */
	}

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20001904 	.word	0x20001904
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	2000001c 	.word	0x2000001c
 8000ce0:	20001b50 	.word	0x20001b50
 8000ce4:	20000928 	.word	0x20000928
 8000ce8:	20001a28 	.word	0x20001a28
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <brake_lf>:
void brake_lf()
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 2800);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <brake_lf+0x20>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 2800);
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <brake_lf+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000d06:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	20001828 	.word	0x20001828

08000d14 <brake_rf>:
void brake_rf()
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 2800);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <brake_rf+0x20>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000d20:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 2800);
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <brake_rf+0x20>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000d2a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20001828 	.word	0x20001828

08000d38 <stop_lf>:
void stop_lf()
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <stop_lf+0x1c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <stop_lf+0x1c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	20001828 	.word	0x20001828

08000d58 <stop_rf>:

void stop_rf()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <stop_rf+0x1c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <stop_rf+0x1c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	20001828 	.word	0x20001828

08000d78 <brake_gripper>:
void brake_gripper()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <brake_gripper+0x28>)
 8000d82:	f003 fc03 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <brake_gripper+0x28>)
 8000d8c:	f003 fbfe 	bl	800458c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 2800);
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <brake_gripper+0x2c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40010c00 	.word	0x40010c00
 8000da4:	20001a28 	.word	0x20001a28

08000da8 <stop_gripper>:
void stop_gripper()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2110      	movs	r1, #16
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <stop_gripper+0x24>)
 8000db2:	f003 fbeb 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2108      	movs	r1, #8
 8000dba:	4804      	ldr	r0, [pc, #16]	; (8000dcc <stop_gripper+0x24>)
 8000dbc:	f003 fbe6 	bl	800458c <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <stop_gripper+0x28>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	20001a28 	.word	0x20001a28

08000dd4 <brake_all>:
void brake_all()
{/*Stops all motors -  shorts motor terminals -  cannot move by hand*/
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

	//set the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4811      	ldr	r0, [pc, #68]	; (8000e24 <brake_all+0x50>)
 8000dde:	f003 fbd5 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2108      	movs	r1, #8
 8000de6:	480f      	ldr	r0, [pc, #60]	; (8000e24 <brake_all+0x50>)
 8000de8:	f003 fbd0 	bl	800458c <HAL_GPIO_WritePin>

	//set all PWMs to 2800 - pin high - brake
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 2800);
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <brake_all+0x54>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000df4:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 2800);
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <brake_all+0x54>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000dfe:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 2800);
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <brake_all+0x54>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000e08:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 2800);
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <brake_all+0x54>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 2800);
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <brake_all+0x58>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	20001828 	.word	0x20001828
 8000e2c:	20001a28 	.word	0x20001a28

08000e30 <stop_all>:
void stop_all()
{/*Stops all motors -  disconnects motor terminals -  can move by hand*/
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2110      	movs	r1, #16
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <stop_all+0x44>)
 8000e3a:	f003 fba7 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2108      	movs	r1, #8
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <stop_all+0x44>)
 8000e44:	f003 fba2 	bl	800458c <HAL_GPIO_WritePin>

	//set all PWMs to 2800 - pin high - brake
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <stop_all+0x48>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <stop_all+0x48>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <stop_all+0x48>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <stop_all+0x48>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <stop_all+0x4c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	20001828 	.word	0x20001828
 8000e7c:	20001a28 	.word	0x20001a28

08000e80 <move_lf>:

void move_lf(int pwmval)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[6]<LFMaxPos)
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <move_lf+0x60>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <move_lf+0x64>)
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d220      	bcs.n	8000ed6 <move_lf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <move_lf+0x68>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f005 fe33 	bl	8006b08 <osSemaphoreWait>
		// set the moving flag
		lfw= 1;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <move_lf+0x6c>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000ea8:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	2264      	movs	r2, #100	; 0x64
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f969 	bl	800118c <scale_val>
 8000eba:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <move_lf+0x70>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwmval);
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <move_lf+0x70>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <move_lf+0x68>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 fe67 	bl	8006ba4 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20001904 	.word	0x20001904
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20001b50 	.word	0x20001b50
 8000eec:	20000918 	.word	0x20000918
 8000ef0:	20001828 	.word	0x20001828

08000ef4 <move_lb>:

void move_lb(int pwmval)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
	if(adc_value[6]>LFMinPos)
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <move_lb+0x60>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <move_lb+0x64>)
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d920      	bls.n	8000f4a <move_lb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <move_lb+0x68>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 fdf9 	bl	8006b08 <osSemaphoreWait>
		//isMoveB_LF = 1;
		lrw=1;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <move_lb+0x6c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000f1c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	2264      	movs	r2, #100	; 0x64
 8000f26:	2100      	movs	r1, #0
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 f92f 	bl	800118c <scale_val>
 8000f2e:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwmval);
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <move_lb+0x70>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <move_lb+0x70>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <move_lb+0x68>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 fe2d 	bl	8006ba4 <osSemaphoreRelease>

	}

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20001904 	.word	0x20001904
 8000f58:	20000004 	.word	0x20000004
 8000f5c:	20001b50 	.word	0x20001b50
 8000f60:	20000914 	.word	0x20000914
 8000f64:	20001828 	.word	0x20001828

08000f68 <move_rf>:

void move_rf(int pwmval)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[5]<RFMaxPos)
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <move_rf+0x60>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <move_rf+0x64>)
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d220      	bcs.n	8000fbe <move_rf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <move_rf+0x68>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f84:	4618      	mov	r0, r3
 8000f86:	f005 fdbf 	bl	8006b08 <osSemaphoreWait>
		// set the moving flag
		rfw= 1;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <move_rf+0x6c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000f90:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	2264      	movs	r2, #100	; 0x64
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f8f5 	bl	800118c <scale_val>
 8000fa2:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <move_rf+0x70>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwmval);
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <move_rf+0x70>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <move_rf+0x68>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f005 fdf3 	bl	8006ba4 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20001904 	.word	0x20001904
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20001b50 	.word	0x20001b50
 8000fd4:	2000091c 	.word	0x2000091c
 8000fd8:	20001828 	.word	0x20001828

08000fdc <move_rb>:

void move_rb(int pwmval)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
	if(adc_value[5]>RFMinPos)
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <move_rb+0x60>)
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <move_rb+0x64>)
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d920      	bls.n	8001032 <move_rb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <move_rb+0x68>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 fd85 	bl	8006b08 <osSemaphoreWait>
		//isMoveB_LF = 1;
		rrw=1;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <move_rb+0x6c>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8001004:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2300      	movs	r3, #0
 800100c:	2264      	movs	r2, #100	; 0x64
 800100e:	2100      	movs	r1, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f8bb 	bl	800118c <scale_val>
 8001016:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwmval);
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <move_rb+0x70>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <move_rb+0x70>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <move_rb+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f005 fdb9 	bl	8006ba4 <osSemaphoreRelease>

	}

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20001904 	.word	0x20001904
 8001040:	2000000c 	.word	0x2000000c
 8001044:	20001b50 	.word	0x20001b50
 8001048:	20000920 	.word	0x20000920
 800104c:	20001828 	.word	0x20001828

08001050 <ir_led_on>:

void ir_led_on()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2120      	movs	r1, #32
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <ir_led_on+0x14>)
 800105a:	f003 fa97 	bl	800458c <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010c00 	.word	0x40010c00

08001068 <ir_led_off>:

void ir_led_off()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2120      	movs	r1, #32
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <ir_led_off+0x14>)
 8001072:	f003 fa8b 	bl	800458c <HAL_GPIO_WritePin>

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40010c00 	.word	0x40010c00

08001080 <clear_rxBuffer>:

void clear_rxBuffer(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; ++i) // Using for loop we are initializing
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	e007      	b.n	800109c <clear_rxBuffer+0x1c>
	{
		UART1_rxBuffer[i] = 0;
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <clear_rxBuffer+0x2c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; ++i) // Using for loop we are initializing
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3301      	adds	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b04      	cmp	r3, #4
 80010a0:	ddf4      	ble.n	800108c <clear_rxBuffer+0xc>
	}
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	2000090c 	.word	0x2000090c

080010b0 <set_mux_fl>:

void set_mux_fl(value)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]


HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value & 0b0001);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <set_mux_fl+0x68>)
 80010ca:	f003 fa5f 	bl	800458c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value & 0b0010);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <set_mux_fl+0x68>)
 80010e0:	f003 fa54 	bl	800458c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value & 0b0100);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <set_mux_fl+0x68>)
 80010f6:	f003 fa49 	bl	800458c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, value & 0b1000);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <set_mux_fl+0x68>)
 800110c:	f003 fa3e 	bl	800458c <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010c00 	.word	0x40010c00

0800111c <set_mux_fr>:
void set_mux_fr(value)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value & 0b0001);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4813      	ldr	r0, [pc, #76]	; (8001184 <set_mux_fr+0x68>)
 8001136:	f003 fa29 	bl	800458c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value & 0b0010);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <set_mux_fr+0x68>)
 800114c:	f003 fa1e 	bl	800458c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value & 0b0100);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <set_mux_fr+0x6c>)
 8001162:	f003 fa13 	bl	800458c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value & 0b1000);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001176:	4804      	ldr	r0, [pc, #16]	; (8001188 <set_mux_fr+0x6c>)
 8001178:	f003 fa08 	bl	800458c <HAL_GPIO_WritePin>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010c00 	.word	0x40010c00
 8001188:	40010800 	.word	0x40010800

0800118c <scale_val>:

int scale_val(int inval, int inmin, int inmax, int outmin, int outmax)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
	if (inval>=inmax)
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	db02      	blt.n	80011a8 <scale_val+0x1c>
	{
		inval = inmax;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e005      	b.n	80011b4 <scale_val+0x28>
	}
	else if(inval<=inmin)
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dc01      	bgt.n	80011b4 <scale_val+0x28>
	{
		inval =inmin;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60fb      	str	r3, [r7, #12]
	}

	double slope = 1.0 * (outmax - outmin) / (inmax - inmin);
 80011b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f922 	bl	8000404 <__aeabi_i2d>
 80011c0:	4604      	mov	r4, r0
 80011c2:	460d      	mov	r5, r1
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f91a 	bl	8000404 <__aeabi_i2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4620      	mov	r0, r4
 80011d6:	4629      	mov	r1, r5
 80011d8:	f7ff faa8 	bl	800072c <__aeabi_ddiv>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return outmin + slope * (inval - inmin);
 80011e4:	6838      	ldr	r0, [r7, #0]
 80011e6:	f7ff f90d 	bl	8000404 <__aeabi_i2d>
 80011ea:	4604      	mov	r4, r0
 80011ec:	460d      	mov	r5, r1
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f905 	bl	8000404 <__aeabi_i2d>
 80011fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011fe:	f7ff f96b 	bl	80004d8 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7fe ffaf 	bl	800016c <__adddf3>
 800120e:	4603      	mov	r3, r0
 8001210:	460c      	mov	r4, r1
 8001212:	4618      	mov	r0, r3
 8001214:	4621      	mov	r1, r4
 8001216:	f7ff fb71 	bl	80008fc <__aeabi_d2iz>
 800121a:	4603      	mov	r3, r0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bdb0      	pop	{r4, r5, r7, pc}

08001224 <constrain>:

int constrain(int inval, int minval, int maxval)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	if(inval<minval)
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	429a      	cmp	r2, r3
 8001236:	da01      	bge.n	800123c <constrain+0x18>
	{
		return minval;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	e006      	b.n	800124a <constrain+0x26>
	}
	else if(inval>maxval)
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dd01      	ble.n	8001248 <constrain+0x24>
	{
		return maxval;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	e000      	b.n	800124a <constrain+0x26>
	}
	else
		return inval;
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b09a      	sub	sp, #104	; 0x68
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125a:	f002 f8a7 	bl	80033ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125e:	f000 f8f1 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001262:	f000 fbf9 	bl	8001a58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001266:	f000 fbc1 	bl	80019ec <MX_DMA_Init>
  MX_USART1_UART_Init();
 800126a:	f000 fb95 	bl	8001998 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800126e:	f000 f945 	bl	80014fc <MX_ADC1_Init>
  MX_TIM2_Init();
 8001272:	f000 fa7b 	bl	800176c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001276:	f000 faf7 	bl	8001868 <MX_TIM4_Init>
  MX_TIM1_Init();
 800127a:	f000 f9d7 	bl	800162c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //start ADC conversations
  HAL_ADC_Start_DMA(&hadc1, adc_value, 7);
 800127e:	2207      	movs	r2, #7
 8001280:	495d      	ldr	r1, [pc, #372]	; (80013f8 <main+0x1a4>)
 8001282:	485e      	ldr	r0, [pc, #376]	; (80013fc <main+0x1a8>)
 8001284:	f002 f9be 	bl	8003604 <HAL_ADC_Start_DMA>
  // Start UART interrupts
  /* When UART gets 5 bytes, it calls the function
   * HAL_UART_RxCpltCallback(
   *
   */
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 5);
 8001288:	2205      	movs	r2, #5
 800128a:	495d      	ldr	r1, [pc, #372]	; (8001400 <main+0x1ac>)
 800128c:	485d      	ldr	r0, [pc, #372]	; (8001404 <main+0x1b0>)
 800128e:	f004 ffa7 	bl	80061e0 <HAL_UART_Receive_IT>
   *		TIM4->CCR1 = pwm_value;
   *		or
   *		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_value);
   *
   */
  HAL_TIM_Base_Start(&htim4);
 8001292:	485d      	ldr	r0, [pc, #372]	; (8001408 <main+0x1b4>)
 8001294:	f003 fee4 	bl	8005060 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001298:	485c      	ldr	r0, [pc, #368]	; (800140c <main+0x1b8>)
 800129a:	f003 fee1 	bl	8005060 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800129e:	2100      	movs	r1, #0
 80012a0:	4859      	ldr	r0, [pc, #356]	; (8001408 <main+0x1b4>)
 80012a2:	f003 ffd1 	bl	8005248 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80012a6:	2104      	movs	r1, #4
 80012a8:	4857      	ldr	r0, [pc, #348]	; (8001408 <main+0x1b4>)
 80012aa:	f003 ffcd 	bl	8005248 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80012ae:	2108      	movs	r1, #8
 80012b0:	4855      	ldr	r0, [pc, #340]	; (8001408 <main+0x1b4>)
 80012b2:	f003 ffc9 	bl	8005248 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80012b6:	210c      	movs	r1, #12
 80012b8:	4853      	ldr	r0, [pc, #332]	; (8001408 <main+0x1b4>)
 80012ba:	f003 ffc5 	bl	8005248 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80012be:	2100      	movs	r1, #0
 80012c0:	4852      	ldr	r0, [pc, #328]	; (800140c <main+0x1b8>)
 80012c2:	f003 ffc1 	bl	8005248 <HAL_TIM_PWM_Start>


  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 80012c6:	4b50      	ldr	r3, [pc, #320]	; (8001408 <main+0x1b4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <main+0x1b4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80012d6:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <main+0x1b4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80012de:	4b4a      	ldr	r3, [pc, #296]	; (8001408 <main+0x1b4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2200      	movs	r2, #0
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 80012e6:	4b49      	ldr	r3, [pc, #292]	; (800140c <main+0x1b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2200      	movs	r2, #0
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
  // = {'\0'};
  long X = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	667b      	str	r3, [r7, #100]	; 0x64

  int temp;

  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

      int ch, animation_state = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	663b      	str	r3, [r7, #96]	; 0x60
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80012f6:	b662      	cpsie	i

      __enable_irq();
      HAL_Delay(200);
 80012f8:	20c8      	movs	r0, #200	; 0xc8
 80012fa:	f002 f889 	bl	8003410 <HAL_Delay>

      //INITIALIZE NEOPIXELS
      //channel 0
      led_channels[0].framebuffer = channel_framebuffers[0];
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <main+0x1bc>)
 8001300:	653b      	str	r3, [r7, #80]	; 0x50
      led_channels[0].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 8001302:	2348      	movs	r3, #72	; 0x48
 8001304:	657b      	str	r3, [r7, #84]	; 0x54

      //channel1
      led_channels[1].framebuffer = channel_framebuffers[1];
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <main+0x1c0>)
 8001308:	65bb      	str	r3, [r7, #88]	; 0x58
      led_channels[1].length = FRAMEBUFFER2_SIZE * sizeof(struct pixel);
 800130a:	2339      	movs	r3, #57	; 0x39
 800130c:	65fb      	str	r3, [r7, #92]	; 0x5c

      HAL_Delay(200);
 800130e:	20c8      	movs	r0, #200	; 0xc8
 8001310:	f002 f87e 	bl	8003410 <HAL_Delay>
      ws2812_init();
 8001314:	f001 fffe 	bl	8003314 <ws2812_init>
      HAL_Delay(200);
 8001318:	20c8      	movs	r0, #200	; 0xc8
 800131a:	f002 f879 	bl	8003410 <HAL_Delay>
      // SETUP LED COLORS
      lightupLED(channel_framebuffers[0]);
 800131e:	483c      	ldr	r0, [pc, #240]	; (8001410 <main+0x1bc>)
 8001320:	f7ff fb46 	bl	80009b0 <lightupLED>
      lightupLED2(channel_framebuffers[1]);
 8001324:	483b      	ldr	r0, [pc, #236]	; (8001414 <main+0x1c0>)
 8001326:	f7ff fbd0 	bl	8000aca <lightupLED2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132a:	b672      	cpsid	i

   	  __disable_irq();
   	  ws2812_refresh(led_channels, GPIOB);
 800132c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001330:	4939      	ldr	r1, [pc, #228]	; (8001418 <main+0x1c4>)
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fe94 	bl	8003060 <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 8001338:	b662      	cpsie	i
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 800133a:	2300      	movs	r3, #0
 800133c:	64bb      	str	r3, [r7, #72]	; 0x48
 800133e:	2300      	movs	r3, #0
 8001340:	64fb      	str	r3, [r7, #76]	; 0x4c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 8001342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f005 fba9 	bl	8006aa0 <osSemaphoreCreate>
 800134e:	4602      	mov	r2, r0
 8001350:	4b32      	ldr	r3, [pc, #200]	; (800141c <main+0x1c8>)
 8001352:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of pidTimer */
  osTimerDef(pidTimer, pid_timer);
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <main+0x1cc>)
 8001356:	643b      	str	r3, [r7, #64]	; 0x40
 8001358:	2300      	movs	r3, #0
 800135a:	647b      	str	r3, [r7, #68]	; 0x44
  pidTimerHandle = osTimerCreate(osTimer(pidTimer), osTimerPeriodic, NULL);
 800135c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001360:	2200      	movs	r2, #0
 8001362:	2101      	movs	r1, #1
 8001364:	4618      	mov	r0, r3
 8001366:	f005 fb21 	bl	80069ac <osTimerCreate>
 800136a:	4602      	mov	r2, r0
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <main+0x1d0>)
 800136e:	601a      	str	r2, [r3, #0]

  /* definition and creation of statusUpdate */
  osTimerDef(statusUpdate, status_update_timer);
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <main+0x1d4>)
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
 8001374:	2300      	movs	r3, #0
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  statusUpdateHandle = osTimerCreate(osTimer(statusUpdate), osTimerPeriodic, NULL);
 8001378:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fb13 	bl	80069ac <osTimerCreate>
 8001386:	4602      	mov	r2, r0
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <main+0x1d8>)
 800138a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  // PID timer runs at 100hz
  osTimerStart(pidTimerHandle, pid_time_period);
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <main+0x1d0>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <main+0x1dc>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f005 fb3c 	bl	8006a14 <osTimerStart>
  //status update timer runs at 100 hz
  osTimerStart(statusUpdateHandle, 10);
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <main+0x1d8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	210a      	movs	r1, #10
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fb36 	bl	8006a14 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adcreader */
  osThreadDef(adcreader, adc_reader_task, osPriorityNormal, 0, 128);
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <main+0x1e0>)
 80013aa:	f107 041c 	add.w	r4, r7, #28
 80013ae:	461d      	mov	r5, r3
 80013b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcreaderHandle = osThreadCreate(osThread(adcreader), NULL);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 fa91 	bl	80068ea <osThreadCreate>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <main+0x1e4>)
 80013cc:	601a      	str	r2, [r3, #0]

  /* definition and creation of serialreader */
  osThreadDef(serialreader, serial_reader_task, osPriorityHigh, 0, 128);
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <main+0x1e8>)
 80013d0:	463c      	mov	r4, r7
 80013d2:	461d      	mov	r5, r3
 80013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialreaderHandle = osThreadCreate(osThread(serialreader), NULL);
 80013e0:	463b      	mov	r3, r7
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 fa80 	bl	80068ea <osThreadCreate>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <main+0x1ec>)
 80013ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013f0:	f005 fa74 	bl	80068dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <main+0x1a0>
 80013f6:	bf00      	nop
 80013f8:	20001904 	.word	0x20001904
 80013fc:	20001948 	.word	0x20001948
 8001400:	2000090c 	.word	0x2000090c
 8001404:	20001980 	.word	0x20001980
 8001408:	20001828 	.word	0x20001828
 800140c:	20001a28 	.word	0x20001a28
 8001410:	20001ac0 	.word	0x20001ac0
 8001414:	20001b08 	.word	0x20001b08
 8001418:	40010c00 	.word	0x40010c00
 800141c:	20001b50 	.word	0x20001b50
 8001420:	08001f85 	.word	0x08001f85
 8001424:	20001978 	.word	0x20001978
 8001428:	0800250d 	.word	0x0800250d
 800142c:	2000197c 	.word	0x2000197c
 8001430:	20000028 	.word	0x20000028
 8001434:	0800a4bc 	.word	0x0800a4bc
 8001438:	20001900 	.word	0x20001900
 800143c:	0800a4e8 	.word	0x0800a4e8
 8001440:	200018b8 	.word	0x200018b8

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	; 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144e:	2228      	movs	r2, #40	; 0x28
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f008 fb5b 	bl	8009b0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001474:	2301      	movs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001482:	2301      	movs	r3, #1
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001490:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8001494:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149a:	4618      	mov	r0, r3
 800149c:	f003 f88e 	bl	80045bc <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014a6:	f001 f8ef 	bl	8002688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2102      	movs	r1, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 faf8 	bl	8004abc <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014d2:	f001 f8d9 	bl	8002688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014d6:	2302      	movs	r3, #2
 80014d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80014da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fcb6 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014ee:	f001 f8cb 	bl	8002688 <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	; 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800150c:	4b45      	ldr	r3, [pc, #276]	; (8001624 <MX_ADC1_Init+0x128>)
 800150e:	4a46      	ldr	r2, [pc, #280]	; (8001628 <MX_ADC1_Init+0x12c>)
 8001510:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001512:	4b44      	ldr	r3, [pc, #272]	; (8001624 <MX_ADC1_Init+0x128>)
 8001514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800151a:	4b42      	ldr	r3, [pc, #264]	; (8001624 <MX_ADC1_Init+0x128>)
 800151c:	2201      	movs	r2, #1
 800151e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <MX_ADC1_Init+0x128>)
 8001522:	2200      	movs	r2, #0
 8001524:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001526:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <MX_ADC1_Init+0x128>)
 8001528:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800152c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <MX_ADC1_Init+0x128>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <MX_ADC1_Init+0x128>)
 8001536:	2207      	movs	r2, #7
 8001538:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153a:	483a      	ldr	r0, [pc, #232]	; (8001624 <MX_ADC1_Init+0x128>)
 800153c:	f001 ff8a 	bl	8003454 <HAL_ADC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001546:	f001 f89f 	bl	8002688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154e:	2301      	movs	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001552:	2304      	movs	r3, #4
 8001554:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4832      	ldr	r0, [pc, #200]	; (8001624 <MX_ADC1_Init+0x128>)
 800155c:	f002 f94c 	bl	80037f8 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001566:	f001 f88f 	bl	8002688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800156a:	2301      	movs	r3, #1
 800156c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800156e:	2302      	movs	r3, #2
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	482b      	ldr	r0, [pc, #172]	; (8001624 <MX_ADC1_Init+0x128>)
 8001578:	f002 f93e 	bl	80037f8 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001582:	f001 f881 	bl	8002688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001586:	2302      	movs	r3, #2
 8001588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800158a:	2303      	movs	r3, #3
 800158c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800158e:	2305      	movs	r3, #5
 8001590:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_ADC1_Init+0x128>)
 8001598:	f002 f92e 	bl	80037f8 <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80015a2:	f001 f871 	bl	8002688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015a6:	2303      	movs	r3, #3
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015aa:	2304      	movs	r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80015ae:	2304      	movs	r3, #4
 80015b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	481b      	ldr	r0, [pc, #108]	; (8001624 <MX_ADC1_Init+0x128>)
 80015b8:	f002 f91e 	bl	80037f8 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80015c2:	f001 f861 	bl	8002688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015c6:	2304      	movs	r3, #4
 80015c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80015ca:	2305      	movs	r3, #5
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <MX_ADC1_Init+0x128>)
 80015d4:	f002 f910 	bl	80037f8 <HAL_ADC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80015de:	f001 f853 	bl	8002688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015e2:	2307      	movs	r3, #7
 80015e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80015e6:	2306      	movs	r3, #6
 80015e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_ADC1_Init+0x128>)
 80015f0:	f002 f902 	bl	80037f8 <HAL_ADC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80015fa:	f001 f845 	bl	8002688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015fe:	2306      	movs	r3, #6
 8001600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001602:	2307      	movs	r3, #7
 8001604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_ADC1_Init+0x128>)
 800160c:	f002 f8f4 	bl	80037f8 <HAL_ADC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001616:	f001 f837 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20001948 	.word	0x20001948
 8001628:	40012400 	.word	0x40012400

0800162c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b096      	sub	sp, #88	; 0x58
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2220      	movs	r2, #32
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f008 fa52 	bl	8009b0e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166a:	4b3e      	ldr	r3, [pc, #248]	; (8001764 <MX_TIM1_Init+0x138>)
 800166c:	4a3e      	ldr	r2, [pc, #248]	; (8001768 <MX_TIM1_Init+0x13c>)
 800166e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001670:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <MX_TIM1_Init+0x138>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <MX_TIM1_Init+0x138>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2799;
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <MX_TIM1_Init+0x138>)
 800167e:	f640 22ef 	movw	r2, #2799	; 0xaef
 8001682:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b37      	ldr	r3, [pc, #220]	; (8001764 <MX_TIM1_Init+0x138>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <MX_TIM1_Init+0x138>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b34      	ldr	r3, [pc, #208]	; (8001764 <MX_TIM1_Init+0x138>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001696:	4833      	ldr	r0, [pc, #204]	; (8001764 <MX_TIM1_Init+0x138>)
 8001698:	f003 fc92 	bl	8004fc0 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016a2:	f000 fff1 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b0:	4619      	mov	r1, r3
 80016b2:	482c      	ldr	r0, [pc, #176]	; (8001764 <MX_TIM1_Init+0x138>)
 80016b4:	f004 f830 	bl	8005718 <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016be:	f000 ffe3 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016c2:	4828      	ldr	r0, [pc, #160]	; (8001764 <MX_TIM1_Init+0x138>)
 80016c4:	f003 fd68 	bl	8005198 <HAL_TIM_PWM_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016ce:	f000 ffdb 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016de:	4619      	mov	r1, r3
 80016e0:	4820      	ldr	r0, [pc, #128]	; (8001764 <MX_TIM1_Init+0x138>)
 80016e2:	f004 fb99 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016ec:	f000 ffcc 	bl	8002688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2360      	movs	r3, #96	; 0x60
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	4813      	ldr	r0, [pc, #76]	; (8001764 <MX_TIM1_Init+0x138>)
 8001716:	f003 ff41 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001720:	f000 ffb2 	bl	8002688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <MX_TIM1_Init+0x138>)
 8001748:	f004 fbc4 	bl	8005ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001752:	f000 ff99 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001756:	4803      	ldr	r0, [pc, #12]	; (8001764 <MX_TIM1_Init+0x138>)
 8001758:	f001 f90e 	bl	8002978 <HAL_TIM_MspPostInit>

}
 800175c:	bf00      	nop
 800175e:	3758      	adds	r7, #88	; 0x58
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20001a28 	.word	0x20001a28
 8001768:	40012c00 	.word	0x40012c00

0800176c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	; 0x38
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800179c:	4b31      	ldr	r3, [pc, #196]	; (8001864 <MX_TIM2_Init+0xf8>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017a4:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <MX_TIM2_Init+0xf8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <MX_TIM2_Init+0xf8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017b0:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <MX_TIM2_Init+0xf8>)
 80017b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <MX_TIM2_Init+0xf8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <MX_TIM2_Init+0xf8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c4:	4827      	ldr	r0, [pc, #156]	; (8001864 <MX_TIM2_Init+0xf8>)
 80017c6:	f003 fbfb 	bl	8004fc0 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017d0:	f000 ff5a 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017de:	4619      	mov	r1, r3
 80017e0:	4820      	ldr	r0, [pc, #128]	; (8001864 <MX_TIM2_Init+0xf8>)
 80017e2:	f003 ff99 	bl	8005718 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017ec:	f000 ff4c 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017f0:	481c      	ldr	r0, [pc, #112]	; (8001864 <MX_TIM2_Init+0xf8>)
 80017f2:	f003 fcd1 	bl	8005198 <HAL_TIM_PWM_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017fc:	f000 ff44 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4619      	mov	r1, r3
 800180e:	4815      	ldr	r0, [pc, #84]	; (8001864 <MX_TIM2_Init+0xf8>)
 8001810:	f004 fb02 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800181a:	f000 ff35 	bl	8002688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181e:	2360      	movs	r3, #96	; 0x60
 8001820:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	4619      	mov	r1, r3
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <MX_TIM2_Init+0xf8>)
 8001836:	f003 feb1 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001840:	f000 ff22 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2204      	movs	r2, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_TIM2_Init+0xf8>)
 800184c:	f003 fea6 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001856:	f000 ff17 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3738      	adds	r7, #56	; 0x38
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20001a78 	.word	0x20001a78

08001868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	; 0x38
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <MX_TIM4_Init+0x128>)
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <MX_TIM4_Init+0x12c>)
 800189c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <MX_TIM4_Init+0x128>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <MX_TIM4_Init+0x128>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2799;
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <MX_TIM4_Init+0x128>)
 80018ac:	f640 22ef 	movw	r2, #2799	; 0xaef
 80018b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <MX_TIM4_Init+0x128>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <MX_TIM4_Init+0x128>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018be:	4834      	ldr	r0, [pc, #208]	; (8001990 <MX_TIM4_Init+0x128>)
 80018c0:	f003 fb7e 	bl	8004fc0 <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80018ca:	f000 fedd 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d8:	4619      	mov	r1, r3
 80018da:	482d      	ldr	r0, [pc, #180]	; (8001990 <MX_TIM4_Init+0x128>)
 80018dc:	f003 ff1c 	bl	8005718 <HAL_TIM_ConfigClockSource>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80018e6:	f000 fecf 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018ea:	4829      	ldr	r0, [pc, #164]	; (8001990 <MX_TIM4_Init+0x128>)
 80018ec:	f003 fc54 	bl	8005198 <HAL_TIM_PWM_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80018f6:	f000 fec7 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	4619      	mov	r1, r3
 8001908:	4821      	ldr	r0, [pc, #132]	; (8001990 <MX_TIM4_Init+0x128>)
 800190a:	f004 fa85 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001914:	f000 feb8 	bl	8002688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001918:	2360      	movs	r3, #96	; 0x60
 800191a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	4619      	mov	r1, r3
 800192e:	4818      	ldr	r0, [pc, #96]	; (8001990 <MX_TIM4_Init+0x128>)
 8001930:	f003 fe34 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800193a:	f000 fea5 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2204      	movs	r2, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4812      	ldr	r0, [pc, #72]	; (8001990 <MX_TIM4_Init+0x128>)
 8001946:	f003 fe29 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001950:	f000 fe9a 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2208      	movs	r2, #8
 8001958:	4619      	mov	r1, r3
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <MX_TIM4_Init+0x128>)
 800195c:	f003 fe1e 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001966:	f000 fe8f 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	220c      	movs	r2, #12
 800196e:	4619      	mov	r1, r3
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <MX_TIM4_Init+0x128>)
 8001972:	f003 fe13 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 800197c:	f000 fe84 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <MX_TIM4_Init+0x128>)
 8001982:	f000 fff9 	bl	8002978 <HAL_TIM_MspPostInit>

}
 8001986:	bf00      	nop
 8001988:	3738      	adds	r7, #56	; 0x38
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20001828 	.word	0x20001828
 8001994:	40000800 	.word	0x40000800

08001998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_USART1_UART_Init+0x50>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART1_UART_Init+0x4c>)
 80019d0:	f004 fae3 	bl	8005f9a <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019da:	f000 fe55 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20001980 	.word	0x20001980
 80019e8:	40013800 	.word	0x40013800

080019ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_DMA_Init+0x68>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <MX_DMA_Init+0x68>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6153      	str	r3, [r2, #20]
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_DMA_Init+0x68>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	200b      	movs	r0, #11
 8001a10:	f002 f991 	bl	8003d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a14:	200b      	movs	r0, #11
 8001a16:	f002 f9aa 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	200c      	movs	r0, #12
 8001a20:	f002 f989 	bl	8003d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a24:	200c      	movs	r0, #12
 8001a26:	f002 f9a2 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	200f      	movs	r0, #15
 8001a30:	f002 f981 	bl	8003d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a34:	200f      	movs	r0, #15
 8001a36:	f002 f99a 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	2011      	movs	r0, #17
 8001a40:	f002 f979 	bl	8003d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a44:	2011      	movs	r0, #17
 8001a46:	f002 f992 	bl	8003d6e <HAL_NVIC_EnableIRQ>

}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6c:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a38      	ldr	r2, [pc, #224]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a32      	ldr	r2, [pc, #200]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001a8a:	f043 0320 	orr.w	r3, r3, #32
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <MX_GPIO_Init+0xfc>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad2:	4821      	ldr	r0, [pc, #132]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001ad4:	f002 fd5a 	bl	800458c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f64f 413b 	movw	r1, #64571	; 0xfc3b
 8001ade:	481f      	ldr	r0, [pc, #124]	; (8001b5c <MX_GPIO_Init+0x104>)
 8001ae0:	f002 fd54 	bl	800458c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001aea:	481d      	ldr	r0, [pc, #116]	; (8001b60 <MX_GPIO_Init+0x108>)
 8001aec:	f002 fd4e 	bl	800458c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4619      	mov	r1, r3
 8001b08:	4813      	ldr	r0, [pc, #76]	; (8001b58 <MX_GPIO_Init+0x100>)
 8001b0a:	f002 fbe5 	bl	80042d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001b0e:	f64f 433b 	movw	r3, #64571	; 0xfc3b
 8001b12:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_GPIO_Init+0x104>)
 8001b28:	f002 fbd6 	bl	80042d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_GPIO_Init+0x108>)
 8001b46:	f002 fbc7 	bl	80042d8 <HAL_GPIO_Init>

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40011000 	.word	0x40011000
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	40010800 	.word	0x40010800

08001b64 <adc_reader_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_adc_reader_task */
void adc_reader_task(void const * argument)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  for(int i=0;i<num_irsensors;i++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e040      	b.n	8001bf4 <adc_reader_task+0x90>
	  	  {
	  		  // set IR off
	  		  ir_led_off();
 8001b72:	f7ff fa79 	bl	8001068 <ir_led_off>

	  		  // select mux channel
	  		  set_mux_fl(i);
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fa9a 	bl	80010b0 <set_mux_fl>
	  		  set_mux_fr(i);
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7ff facd 	bl	800111c <set_mux_fr>

	  		  //small delay
	  		  osDelay(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f004 fefd 	bl	8006982 <osDelay>

	  		  // get initial readings
	  		  data_fl_noise = adc_value[0];
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <adc_reader_task+0x9c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <adc_reader_task+0xa0>)
 8001b90:	601a      	str	r2, [r3, #0]
	  		  data_fr_noise = adc_value[1];
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <adc_reader_task+0x9c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <adc_reader_task+0xa4>)
 8001b9a:	601a      	str	r2, [r3, #0]

	  		  // set IR on
	  		  ir_led_on();
 8001b9c:	f7ff fa58 	bl	8001050 <ir_led_on>
	  		  //small delay
	  		  osDelay(1);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f004 feee 	bl	8006982 <osDelay>

	  		  // get second readings
	  		  data_fl = adc_value[0];
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <adc_reader_task+0x9c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <adc_reader_task+0xa8>)
 8001bae:	601a      	str	r2, [r3, #0]
	  		  data_fr = adc_value[1];
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <adc_reader_task+0x9c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <adc_reader_task+0xac>)
 8001bb8:	601a      	str	r2, [r3, #0]

	  		  //calculate the real value and set it in ir_data array
	  		  data_fl_real = -1*(data_fl - data_fl_noise);
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <adc_reader_task+0xa0>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <adc_reader_task+0xa8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <adc_reader_task+0xb0>)
 8001bc6:	6013      	str	r3, [r2, #0]
	  		  data_fr_real = -1*(data_fr - data_fr_noise);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <adc_reader_task+0xa4>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <adc_reader_task+0xac>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <adc_reader_task+0xb4>)
 8001bd4:	6013      	str	r3, [r2, #0]

	  		  irdata_fl[i] = data_fl_real;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <adc_reader_task+0xb0>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4910      	ldr	r1, [pc, #64]	; (8001c1c <adc_reader_task+0xb8>)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  irdata_fr[i] = data_fr_real;
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <adc_reader_task+0xb4>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <adc_reader_task+0xbc>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<num_irsensors;i++)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <adc_reader_task+0xc0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbb9      	blt.n	8001b72 <adc_reader_task+0xe>
 8001bfe:	e7b5      	b.n	8001b6c <adc_reader_task+0x8>
 8001c00:	20001904 	.word	0x20001904
 8001c04:	20001a74 	.word	0x20001a74
 8001c08:	20001a24 	.word	0x20001a24
 8001c0c:	200017dc 	.word	0x200017dc
 8001c10:	200018b4 	.word	0x200018b4
 8001c14:	20001a70 	.word	0x20001a70
 8001c18:	20001824 	.word	0x20001824
 8001c1c:	20001920 	.word	0x20001920
 8001c20:	20001b54 	.word	0x20001b54
 8001c24:	20000060 	.word	0x20000060

08001c28 <serial_reader_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_reader_task */
void serial_reader_task(void const * argument)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b090      	sub	sp, #64	; 0x40
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	6078      	str	r0, [r7, #4]
	   *	R	  - Reset serial command queue
	   *
	   */
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "Serial READ \n", 1), 10);
	  //close gripper
	  switch(UART1_rxBuffer[0])
 8001c30:	4ba8      	ldr	r3, [pc, #672]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3b62      	subs	r3, #98	; 0x62
 8001c36:	2b11      	cmp	r3, #17
 8001c38:	f200 8175 	bhi.w	8001f26 <serial_reader_task+0x2fe>
 8001c3c:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <serial_reader_task+0x1c>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001d85 	.word	0x08001d85
 8001c48:	08001c8d 	.word	0x08001c8d
 8001c4c:	08001f27 	.word	0x08001f27
 8001c50:	08001f27 	.word	0x08001f27
 8001c54:	08001f27 	.word	0x08001f27
 8001c58:	08001f27 	.word	0x08001f27
 8001c5c:	08001f27 	.word	0x08001f27
 8001c60:	08001f27 	.word	0x08001f27
 8001c64:	08001f27 	.word	0x08001f27
 8001c68:	08001f27 	.word	0x08001f27
 8001c6c:	08001e77 	.word	0x08001e77
 8001c70:	08001f27 	.word	0x08001f27
 8001c74:	08001f27 	.word	0x08001f27
 8001c78:	08001db9 	.word	0x08001db9
 8001c7c:	08001f27 	.word	0x08001f27
 8001c80:	08001f27 	.word	0x08001f27
 8001c84:	08001dff 	.word	0x08001dff
 8001c88:	08001d51 	.word	0x08001d51
	  {

	  case 'c':
	  	  {
			  //close in current control mode
			  if(UART1_rxBuffer[1]=='c')
 8001c8c:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001c8e:	785b      	ldrb	r3, [r3, #1]
 8001c90:	2b63      	cmp	r3, #99	; 0x63
 8001c92:	d118      	bne.n	8001cc6 <serial_reader_task+0x9e>
			  	  {
				  // create the NULL terminated character array with the values
				  char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001c94:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001c96:	789b      	ldrb	r3, [r3, #2]
 8001c98:	f887 3020 	strb.w	r3, [r7, #32]
 8001c9c:	4b8d      	ldr	r3, [pc, #564]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001c9e:	78db      	ldrb	r3, [r3, #3]
 8001ca0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001ca4:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001ca6:	791b      	ldrb	r3, [r3, #4]
 8001ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  int cmd_val = atoi(val_ar);
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f007 fef0 	bl	8009a9c <atoi>
 8001cbc:	6278      	str	r0, [r7, #36]	; 0x24
				  gPid = 1;
 8001cbe:	4b86      	ldr	r3, [pc, #536]	; (8001ed8 <serial_reader_task+0x2b0>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e041      	b.n	8001d4a <serial_reader_task+0x122>
				  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cc %d \n", cmd_val), 100);
			  	  }
			  //close in position hold mode
			  else if(UART1_rxBuffer[1]=='p')
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	2b70      	cmp	r3, #112	; 0x70
 8001ccc:	d125      	bne.n	8001d1a <serial_reader_task+0xf2>
		  	  	  {
				  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cp  \n", 1), 100);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4982      	ldr	r1, [pc, #520]	; (8001edc <serial_reader_task+0x2b4>)
 8001cd2:	4883      	ldr	r0, [pc, #524]	; (8001ee0 <serial_reader_task+0x2b8>)
 8001cd4:	f007 ff24 	bl	8009b20 <siprintf>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	2364      	movs	r3, #100	; 0x64
 8001cde:	4980      	ldr	r1, [pc, #512]	; (8001ee0 <serial_reader_task+0x2b8>)
 8001ce0:	4880      	ldr	r0, [pc, #512]	; (8001ee4 <serial_reader_task+0x2bc>)
 8001ce2:	f004 f9a7 	bl	8006034 <HAL_UART_Transmit>
				  char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001ce6:	4b7b      	ldr	r3, [pc, #492]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001ce8:	789b      	ldrb	r3, [r3, #2]
 8001cea:	773b      	strb	r3, [r7, #28]
 8001cec:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001cee:	78db      	ldrb	r3, [r3, #3]
 8001cf0:	777b      	strb	r3, [r7, #29]
 8001cf2:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001cf4:	791b      	ldrb	r3, [r3, #4]
 8001cf6:	77bb      	strb	r3, [r7, #30]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	77fb      	strb	r3, [r7, #31]
				  gForceThres = atoi(val_ar);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4618      	mov	r0, r3
 8001d02:	f007 fecb 	bl	8009a9c <atoi>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <serial_reader_task+0x2c0>)
 8001d0a:	601a      	str	r2, [r3, #0]
				  gPid = 2;
 8001d0c:	4b72      	ldr	r3, [pc, #456]	; (8001ed8 <serial_reader_task+0x2b0>)
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
				  close_gripper(100);
 8001d12:	2064      	movs	r0, #100	; 0x64
 8001d14:	f7fe ffa2 	bl	8000c5c <close_gripper>
 8001d18:	e017      	b.n	8001d4a <serial_reader_task+0x122>
		  	  	  }
			  //close in speed control mode
			  else if(UART1_rxBuffer[1]=='s')
 8001d1a:	4b6e      	ldr	r3, [pc, #440]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	2b73      	cmp	r3, #115	; 0x73
 8001d20:	d113      	bne.n	8001d4a <serial_reader_task+0x122>
			  {
				  char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001d22:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d24:	789b      	ldrb	r3, [r3, #2]
 8001d26:	763b      	strb	r3, [r7, #24]
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d2a:	78db      	ldrb	r3, [r3, #3]
 8001d2c:	767b      	strb	r3, [r7, #25]
 8001d2e:	4b69      	ldr	r3, [pc, #420]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d30:	791b      	ldrb	r3, [r3, #4]
 8001d32:	76bb      	strb	r3, [r7, #26]
 8001d34:	2300      	movs	r3, #0
 8001d36:	76fb      	strb	r3, [r7, #27]
				  int cmd_val = atoi(val_ar);
 8001d38:	f107 0318 	add.w	r3, r7, #24
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f007 fead 	bl	8009a9c <atoi>
 8001d42:	62b8      	str	r0, [r7, #40]	; 0x28
				  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cs %d \n", cmd_val), 100);
				  close_gripper(cmd_val);
 8001d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d46:	f7fe ff89 	bl	8000c5c <close_gripper>

			  }
		  clear_rxBuffer();
 8001d4a:	f7ff f999 	bl	8001080 <clear_rxBuffer>
	  	  }break;
 8001d4e:	e0ea      	b.n	8001f26 <serial_reader_task+0x2fe>
	  case 's':
	  	  {
	  		if(UART1_rxBuffer[1]=='g')
 8001d50:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	2b67      	cmp	r3, #103	; 0x67
 8001d56:	d102      	bne.n	8001d5e <serial_reader_task+0x136>
	  		{
	  			stop_gripper(); // motors inputs disconnected, can move by hand
 8001d58:	f7ff f826 	bl	8000da8 <stop_gripper>
 8001d5c:	e00f      	b.n	8001d7e <serial_reader_task+0x156>
	  		}
	  		else if(UART1_rxBuffer[1]=='l')
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	2b6c      	cmp	r3, #108	; 0x6c
 8001d64:	d102      	bne.n	8001d6c <serial_reader_task+0x144>
	  		{
	  			stop_lf();  // motors inputs disconnected, can move by hand
 8001d66:	f7fe ffe7 	bl	8000d38 <stop_lf>
 8001d6a:	e008      	b.n	8001d7e <serial_reader_task+0x156>
	  		}
	  		else if(UART1_rxBuffer[1]=='r')
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d6e:	785b      	ldrb	r3, [r3, #1]
 8001d70:	2b72      	cmp	r3, #114	; 0x72
 8001d72:	d102      	bne.n	8001d7a <serial_reader_task+0x152>
	  		{
	  			stop_rf(); //motors inputs disconnected, can move by hand
 8001d74:	f7fe fff0 	bl	8000d58 <stop_rf>
 8001d78:	e001      	b.n	8001d7e <serial_reader_task+0x156>
	  		}
	  		else
	  		{
	  			stop_all(); //motors inputs disconnected, can move by hand
 8001d7a:	f7ff f859 	bl	8000e30 <stop_all>
	  		}
	  	  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "STOP \n", 1), 100);
		  clear_rxBuffer();
 8001d7e:	f7ff f97f 	bl	8001080 <clear_rxBuffer>
	  	  }break;
 8001d82:	e0d0      	b.n	8001f26 <serial_reader_task+0x2fe>
	  case 'b':
	  	  {
	  		if(UART1_rxBuffer[1]=='g')
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b67      	cmp	r3, #103	; 0x67
 8001d8a:	d102      	bne.n	8001d92 <serial_reader_task+0x16a>
	  		{
	  			brake_gripper(); // motor inputs shorted, cannot move by hand
 8001d8c:	f7fe fff4 	bl	8000d78 <brake_gripper>
 8001d90:	e00f      	b.n	8001db2 <serial_reader_task+0x18a>
	  		}
	  		else if(UART1_rxBuffer[1]=='l')
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	2b6c      	cmp	r3, #108	; 0x6c
 8001d98:	d102      	bne.n	8001da0 <serial_reader_task+0x178>
	  		{
	  			brake_lf();  // motor inputs shorted, cannot move by hand
 8001d9a:	f7fe ffa9 	bl	8000cf0 <brake_lf>
 8001d9e:	e008      	b.n	8001db2 <serial_reader_task+0x18a>
	  		}
	  		else if(UART1_rxBuffer[1]=='r')
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001da2:	785b      	ldrb	r3, [r3, #1]
 8001da4:	2b72      	cmp	r3, #114	; 0x72
 8001da6:	d102      	bne.n	8001dae <serial_reader_task+0x186>
	  		{
	  			brake_rf(); //motor inputs shorted, cannot move by hand
 8001da8:	f7fe ffb4 	bl	8000d14 <brake_rf>
 8001dac:	e001      	b.n	8001db2 <serial_reader_task+0x18a>
	  		}
	  		else
	  		{
	  			brake_all(); //motor inputs shorted, cannot move by hand
 8001dae:	f7ff f811 	bl	8000dd4 <brake_all>
	  		}
	  	  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "STOP \n", 1), 100);
		  clear_rxBuffer();
 8001db2:	f7ff f965 	bl	8001080 <clear_rxBuffer>
	  	  }break;
 8001db6:	e0b6      	b.n	8001f26 <serial_reader_task+0x2fe>
	  case 'o':
	  	  {
	  		// open upto fully open position
	  		if(UART1_rxBuffer[1]=='p')
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	2b70      	cmp	r3, #112	; 0x70
 8001dbe:	d103      	bne.n	8001dc8 <serial_reader_task+0x1a0>
	  			{
	  			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "OPEN \n", 1), 100);
	  			open_gripper(100);
 8001dc0:	2064      	movs	r0, #100	; 0x64
 8001dc2:	f7fe ff01 	bl	8000bc8 <open_gripper>
 8001dc6:	e017      	b.n	8001df8 <serial_reader_task+0x1d0>
	  			}
	  		// open with speed control
	  		else if(UART1_rxBuffer[1]=='s')
 8001dc8:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b73      	cmp	r3, #115	; 0x73
 8001dce:	d113      	bne.n	8001df8 <serial_reader_task+0x1d0>
	  			{
	  			char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001dd0:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001dd2:	789b      	ldrb	r3, [r3, #2]
 8001dd4:	753b      	strb	r3, [r7, #20]
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001dd8:	78db      	ldrb	r3, [r3, #3]
 8001dda:	757b      	strb	r3, [r7, #21]
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	75bb      	strb	r3, [r7, #22]
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]
	  			int cmd_val = atoi(val_ar);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4618      	mov	r0, r3
 8001dec:	f007 fe56 	bl	8009a9c <atoi>
 8001df0:	6338      	str	r0, [r7, #48]	; 0x30
	  			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "OPEN SPEED %d \n", cmd_val), 100);
	  			open_gripper(cmd_val);
 8001df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001df4:	f7fe fee8 	bl	8000bc8 <open_gripper>
	  			}

	  	  clear_rxBuffer();
 8001df8:	f7ff f942 	bl	8001080 <clear_rxBuffer>
	  	  }break;
 8001dfc:	e093      	b.n	8001f26 <serial_reader_task+0x2fe>
	  case 'r':
	  	  {
	  		char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001dfe:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e00:	789b      	ldrb	r3, [r3, #2]
 8001e02:	743b      	strb	r3, [r7, #16]
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e06:	78db      	ldrb	r3, [r3, #3]
 8001e08:	747b      	strb	r3, [r7, #17]
 8001e0a:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e0c:	791b      	ldrb	r3, [r3, #4]
 8001e0e:	74bb      	strb	r3, [r7, #18]
 8001e10:	2300      	movs	r3, #0
 8001e12:	74fb      	strb	r3, [r7, #19]
	  		int cmd_val = atoi(val_ar);
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f007 fe3f 	bl	8009a9c <atoi>
 8001e1e:	6378      	str	r0, [r7, #52]	; 0x34
	  	  	//right finger position control
	  	  	if(UART1_rxBuffer[1]=='p')
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	2b70      	cmp	r3, #112	; 0x70
 8001e26:	d111      	bne.n	8001e4c <serial_reader_task+0x224>
	  	  		{
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RPOS %d \n", cmd_val), 100);
	  	  		//set the PID enable flag
	  	  		rPid= 1;
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <serial_reader_task+0x2c4>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
	  	  		rPosDesired =  scale_val(cmd_val,0,200,RFMinPos,RFMaxPos);
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <serial_reader_task+0x2c8>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <serial_reader_task+0x2cc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	22c8      	movs	r2, #200	; 0xc8
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e40:	f7ff f9a4 	bl	800118c <scale_val>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <serial_reader_task+0x2d0>)
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e011      	b.n	8001e70 <serial_reader_task+0x248>
	  	  		}
	  	  	//right finger move forward at velocity
	  	  	else if(UART1_rxBuffer[1]=='f')
 8001e4c:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	2b66      	cmp	r3, #102	; 0x66
 8001e52:	d103      	bne.n	8001e5c <serial_reader_task+0x234>
	  	  		{
	  	  		move_rf(cmd_val);
 8001e54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e56:	f7ff f887 	bl	8000f68 <move_rf>
 8001e5a:	e009      	b.n	8001e70 <serial_reader_task+0x248>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RF %d \n", cmd_val), 100);
	  	  		}
	  	  	//right finger move reverse at velocity
	  	  	else if(UART1_rxBuffer[1]=='r')
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	2b72      	cmp	r3, #114	; 0x72
 8001e62:	d105      	bne.n	8001e70 <serial_reader_task+0x248>
	  	  		{
	  	  		move_rb(cmd_val);
 8001e64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e66:	f7ff f8b9 	bl	8000fdc <move_rb>
	  	  		rPid=0;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <serial_reader_task+0x2c4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RR %d \n", cmd_val), 100);
	  	  		}
	  	  clear_rxBuffer();
 8001e70:	f7ff f906 	bl	8001080 <clear_rxBuffer>
	  	  }break;
 8001e74:	e057      	b.n	8001f26 <serial_reader_task+0x2fe>
	   case 'l':
	  	  {
	  	  	char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e78:	789b      	ldrb	r3, [r3, #2]
 8001e7a:	733b      	strb	r3, [r7, #12]
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e7e:	78db      	ldrb	r3, [r3, #3]
 8001e80:	737b      	strb	r3, [r7, #13]
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e84:	791b      	ldrb	r3, [r3, #4]
 8001e86:	73bb      	strb	r3, [r7, #14]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
	  	  	int cmd_val = atoi(val_ar);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4618      	mov	r0, r3
 8001e92:	f007 fe03 	bl	8009a9c <atoi>
 8001e96:	62f8      	str	r0, [r7, #44]	; 0x2c
	  	  	//left finger position control
	  	  	if(UART1_rxBuffer[1]=='p')
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001e9a:	785b      	ldrb	r3, [r3, #1]
 8001e9c:	2b70      	cmp	r3, #112	; 0x70
 8001e9e:	d111      	bne.n	8001ec4 <serial_reader_task+0x29c>
	  	  		{
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LPOS %d \n", cmd_val), 100);
	  	  		// set the PID enable flag true
	  	  		lPid = 1;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <serial_reader_task+0x2d4>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
	  	  		lPosDesired = scale_val(cmd_val,0,200,LFMinPos,LFMaxPos);
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <serial_reader_task+0x2d8>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <serial_reader_task+0x2dc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	22c8      	movs	r2, #200	; 0xc8
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001eb8:	f7ff f968 	bl	800118c <scale_val>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <serial_reader_task+0x2e0>)
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e02d      	b.n	8001f20 <serial_reader_task+0x2f8>
	  	  		}
	  	  	//left finger move forward at velocity
	  	  	else if(UART1_rxBuffer[1]=='f')
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <serial_reader_task+0x2ac>)
 8001ec6:	785b      	ldrb	r3, [r3, #1]
 8001ec8:	2b66      	cmp	r3, #102	; 0x66
 8001eca:	d11f      	bne.n	8001f0c <serial_reader_task+0x2e4>
	  	  		{
	  	  		move_lf(cmd_val);
 8001ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ece:	f7fe ffd7 	bl	8000e80 <move_lf>
 8001ed2:	e025      	b.n	8001f20 <serial_reader_task+0x2f8>
 8001ed4:	2000090c 	.word	0x2000090c
 8001ed8:	20000934 	.word	0x20000934
 8001edc:	0800a504 	.word	0x0800a504
 8001ee0:	200019c0 	.word	0x200019c0
 8001ee4:	20001980 	.word	0x20001980
 8001ee8:	20000960 	.word	0x20000960
 8001eec:	20000930 	.word	0x20000930
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	2000093c 	.word	0x2000093c
 8001efc:	2000092c 	.word	0x2000092c
 8001f00:	20000004 	.word	0x20000004
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000938 	.word	0x20000938
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LF %d \n", cmd_val), 100);
	  	  		}
	  	  	//left finger move reverse at velocity
	  	  	else if(UART1_rxBuffer[1]=='r')
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <serial_reader_task+0x350>)
 8001f0e:	785b      	ldrb	r3, [r3, #1]
 8001f10:	2b72      	cmp	r3, #114	; 0x72
 8001f12:	d105      	bne.n	8001f20 <serial_reader_task+0x2f8>
	  	  		{
	  	  		move_lb(cmd_val);
 8001f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f16:	f7fe ffed 	bl	8000ef4 <move_lb>
	  	  		lPid=0;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <serial_reader_task+0x354>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LR %d \n", cmd_val), 100);
	  	  		}

	  	  	clear_rxBuffer();
 8001f20:	f7ff f8ae 	bl	8001080 <clear_rxBuffer>
	  	  }break;
 8001f24:	bf00      	nop
		   clear_rxBuffer();
*/
	  }

	  //Reset the serial buffer
	  if((UART1_rxBuffer[0]=='R')||(UART1_rxBuffer[1]=='R')||(UART1_rxBuffer[2]=='R')||(UART1_rxBuffer[3]=='R')||(UART1_rxBuffer[4]=='R'))
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <serial_reader_task+0x350>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b52      	cmp	r3, #82	; 0x52
 8001f2c:	d00f      	beq.n	8001f4e <serial_reader_task+0x326>
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <serial_reader_task+0x350>)
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	2b52      	cmp	r3, #82	; 0x52
 8001f34:	d00b      	beq.n	8001f4e <serial_reader_task+0x326>
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <serial_reader_task+0x350>)
 8001f38:	789b      	ldrb	r3, [r3, #2]
 8001f3a:	2b52      	cmp	r3, #82	; 0x52
 8001f3c:	d007      	beq.n	8001f4e <serial_reader_task+0x326>
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <serial_reader_task+0x350>)
 8001f40:	78db      	ldrb	r3, [r3, #3]
 8001f42:	2b52      	cmp	r3, #82	; 0x52
 8001f44:	d003      	beq.n	8001f4e <serial_reader_task+0x326>
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <serial_reader_task+0x350>)
 8001f48:	791b      	ldrb	r3, [r3, #4]
 8001f4a:	2b52      	cmp	r3, #82	; 0x52
 8001f4c:	d10d      	bne.n	8001f6a <serial_reader_task+0x342>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4e:	b672      	cpsid	i
	  {
		  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RESET %d \n", 1), 100);
		  __disable_irq();
		  clear_rxBuffer();
 8001f50:	f7ff f896 	bl	8001080 <clear_rxBuffer>
		  huart1.RxState= HAL_UART_STATE_READY;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <serial_reader_task+0x358>)
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f5c:	b662      	cpsie	i
		  __enable_irq();
		  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 5);
 8001f5e:	2205      	movs	r2, #5
 8001f60:	4905      	ldr	r1, [pc, #20]	; (8001f78 <serial_reader_task+0x350>)
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <serial_reader_task+0x358>)
 8001f64:	f004 f93c 	bl	80061e0 <HAL_UART_Receive_IT>
 8001f68:	e001      	b.n	8001f6e <serial_reader_task+0x346>
	  }
	  else
	  {
		  clear_rxBuffer();
 8001f6a:	f7ff f889 	bl	8001080 <clear_rxBuffer>
	  }
    osDelay(5);
 8001f6e:	2005      	movs	r0, #5
 8001f70:	f004 fd07 	bl	8006982 <osDelay>
	  switch(UART1_rxBuffer[0])
 8001f74:	e65c      	b.n	8001c30 <serial_reader_task+0x8>
 8001f76:	bf00      	nop
 8001f78:	2000090c 	.word	0x2000090c
 8001f7c:	2000092c 	.word	0x2000092c
 8001f80:	20001980 	.word	0x20001980

08001f84 <pid_timer>:
  /* USER CODE END serial_reader_task */
}

/* pid_timer function */
void pid_timer(void const * argument)
{
 8001f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f88:	b089      	sub	sp, #36	; 0x24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pid_timer */
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "TIMER \n", 1), 10);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
	//HAL_GPIO_WritePin(GPIOB, , value & 0b0001);
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "CC %d %d  %d \n", adc_value[6],lfw, isMoveB_LF ), 100);
	if((adc_value[6]>LFMaxPos) && (lfw==1))
 8001f8e:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <pid_timer+0x174>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	4a5a      	ldr	r2, [pc, #360]	; (80020fc <pid_timer+0x178>)
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d91b      	bls.n	8001fd2 <pid_timer+0x4e>
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <pid_timer+0x17c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d117      	bne.n	8001fd2 <pid_timer+0x4e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001fa2:	4b58      	ldr	r3, [pc, #352]	; (8002104 <pid_timer+0x180>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 fdac 	bl	8006b08 <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001fb0:	4b55      	ldr	r3, [pc, #340]	; (8002108 <pid_timer+0x184>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <pid_timer+0x184>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	639a      	str	r2, [r3, #56]	; 0x38
		lfw=0;
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <pid_timer+0x17c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <pid_timer+0x180>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fdea 	bl	8006ba4 <osSemaphoreRelease>
 8001fd0:	e020      	b.n	8002014 <pid_timer+0x90>
	}
	else if((adc_value[6]<LFMinPos) && (lrw==1))
 8001fd2:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <pid_timer+0x174>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	4a4d      	ldr	r2, [pc, #308]	; (800210c <pid_timer+0x188>)
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d21a      	bcs.n	8002014 <pid_timer+0x90>
 8001fde:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <pid_timer+0x18c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d116      	bne.n	8002014 <pid_timer+0x90>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <pid_timer+0x180>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f004 fd8a 	bl	8006b08 <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001ff4:	4b44      	ldr	r3, [pc, #272]	; (8002108 <pid_timer+0x184>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <pid_timer+0x184>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2200      	movs	r2, #0
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
		lrw=0;
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <pid_timer+0x18c>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <pid_timer+0x180>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fdc8 	bl	8006ba4 <osSemaphoreRelease>
	}

	if((adc_value[5]>RFMaxPos) && (rfw==1))
 8002014:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <pid_timer+0x174>)
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <pid_timer+0x190>)
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	4293      	cmp	r3, r2
 800201e:	d91b      	bls.n	8002058 <pid_timer+0xd4>
 8002020:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <pid_timer+0x194>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d117      	bne.n	8002058 <pid_timer+0xd4>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <pid_timer+0x180>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fd69 	bl	8006b08 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <pid_timer+0x184>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 800203e:	4b32      	ldr	r3, [pc, #200]	; (8002108 <pid_timer+0x184>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
			rfw=0;
 8002046:	4b34      	ldr	r3, [pc, #208]	; (8002118 <pid_timer+0x194>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <pid_timer+0x180>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f004 fda7 	bl	8006ba4 <osSemaphoreRelease>
 8002056:	e020      	b.n	800209a <pid_timer+0x116>
		}
		else if((adc_value[5]<RFMinPos) && (rrw==1))
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <pid_timer+0x174>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	4a2f      	ldr	r2, [pc, #188]	; (800211c <pid_timer+0x198>)
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	4293      	cmp	r3, r2
 8002062:	d21a      	bcs.n	800209a <pid_timer+0x116>
 8002064:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <pid_timer+0x19c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d116      	bne.n	800209a <pid_timer+0x116>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <pid_timer+0x180>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002074:	4618      	mov	r0, r3
 8002076:	f004 fd47 	bl	8006b08 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <pid_timer+0x184>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <pid_timer+0x184>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
			rrw=0;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <pid_timer+0x19c>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <pid_timer+0x180>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fd85 	bl	8006ba4 <osSemaphoreRelease>
		}

	if((adc_value[3]<M1MinPos) && (mgo==1) &&(adc_value[4]<M2MinPos))
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <pid_timer+0x174>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4a21      	ldr	r2, [pc, #132]	; (8002124 <pid_timer+0x1a0>)
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d248      	bcs.n	8002138 <pid_timer+0x1b4>
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <pid_timer+0x1a4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d144      	bne.n	8002138 <pid_timer+0x1b4>
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <pid_timer+0x174>)
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	4a1e      	ldr	r2, [pc, #120]	; (800212c <pid_timer+0x1a8>)
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d23e      	bcs.n	8002138 <pid_timer+0x1b4>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <pid_timer+0x180>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 fd20 	bl	8006b08 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <pid_timer+0x1ac>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2108      	movs	r1, #8
 80020d4:	4817      	ldr	r0, [pc, #92]	; (8002134 <pid_timer+0x1b0>)
 80020d6:	f002 fa59 	bl	800458c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	2110      	movs	r1, #16
 80020de:	4815      	ldr	r0, [pc, #84]	; (8002134 <pid_timer+0x1b0>)
 80020e0:	f002 fa54 	bl	800458c <HAL_GPIO_WritePin>
			mgo=0;
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <pid_timer+0x1a4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <pid_timer+0x180>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 fd58 	bl	8006ba4 <osSemaphoreRelease>
 80020f4:	e04d      	b.n	8002192 <pid_timer+0x20e>
 80020f6:	bf00      	nop
 80020f8:	20001904 	.word	0x20001904
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000918 	.word	0x20000918
 8002104:	20001b50 	.word	0x20001b50
 8002108:	20001828 	.word	0x20001828
 800210c:	20000004 	.word	0x20000004
 8002110:	20000914 	.word	0x20000914
 8002114:	20000008 	.word	0x20000008
 8002118:	2000091c 	.word	0x2000091c
 800211c:	2000000c 	.word	0x2000000c
 8002120:	20000920 	.word	0x20000920
 8002124:	20000010 	.word	0x20000010
 8002128:	20000924 	.word	0x20000924
 800212c:	20000018 	.word	0x20000018
 8002130:	20001a28 	.word	0x20001a28
 8002134:	40010c00 	.word	0x40010c00
		}
		else if((adc_value[3]>M1MaxPos) && (mgc==1) &&(adc_value[4]>M2MaxPos))
 8002138:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <pid_timer+0x35c>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a69      	ldr	r2, [pc, #420]	; (80022e4 <pid_timer+0x360>)
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	4293      	cmp	r3, r2
 8002142:	d926      	bls.n	8002192 <pid_timer+0x20e>
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <pid_timer+0x364>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d122      	bne.n	8002192 <pid_timer+0x20e>
 800214c:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <pid_timer+0x35c>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4a66      	ldr	r2, [pc, #408]	; (80022ec <pid_timer+0x368>)
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	4293      	cmp	r3, r2
 8002156:	d91c      	bls.n	8002192 <pid_timer+0x20e>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8002158:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <pid_timer+0x36c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002160:	4618      	mov	r0, r3
 8002162:	f004 fcd1 	bl	8006b08 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <pid_timer+0x370>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2108      	movs	r1, #8
 8002172:	4861      	ldr	r0, [pc, #388]	; (80022f8 <pid_timer+0x374>)
 8002174:	f002 fa0a 	bl	800458c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	2110      	movs	r1, #16
 800217c:	485e      	ldr	r0, [pc, #376]	; (80022f8 <pid_timer+0x374>)
 800217e:	f002 fa05 	bl	800458c <HAL_GPIO_WritePin>
			mgc=0;
 8002182:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <pid_timer+0x364>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <pid_timer+0x36c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f004 fd09 	bl	8006ba4 <osSemaphoreRelease>
		}
	//PID position control for LFinger
	if(lPid==1)
 8002192:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <pid_timer+0x378>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	f040 80cc 	bne.w	8002334 <pid_timer+0x3b0>
	{
		// get the commanded position
		// get current position
		// calculate error
		int error = lPosDesired - adc_value[6];
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <pid_timer+0x37c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <pid_timer+0x35c>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	61fb      	str	r3, [r7, #28]
		l_error_integral = l_error_integral + error;
 80021aa:	69f8      	ldr	r0, [r7, #28]
 80021ac:	f7fe f92a 	bl	8000404 <__aeabi_i2d>
 80021b0:	4b54      	ldr	r3, [pc, #336]	; (8002304 <pid_timer+0x380>)
 80021b2:	cb18      	ldmia	r3, {r3, r4}
 80021b4:	461a      	mov	r2, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	f7fd ffd8 	bl	800016c <__adddf3>
 80021bc:	4603      	mov	r3, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	4a50      	ldr	r2, [pc, #320]	; (8002304 <pid_timer+0x380>)
 80021c2:	e9c2 3400 	strd	r3, r4, [r2]
		int l_error_derivative = error  - l_error_prev;
 80021c6:	69f8      	ldr	r0, [r7, #28]
 80021c8:	f7fe f91c 	bl	8000404 <__aeabi_i2d>
 80021cc:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <pid_timer+0x384>)
 80021ce:	cb18      	ldmia	r3, {r3, r4}
 80021d0:	461a      	mov	r2, r3
 80021d2:	4623      	mov	r3, r4
 80021d4:	f7fd ffc8 	bl	8000168 <__aeabi_dsub>
 80021d8:	4603      	mov	r3, r0
 80021da:	460c      	mov	r4, r1
 80021dc:	4618      	mov	r0, r3
 80021de:	4621      	mov	r1, r4
 80021e0:	f7fe fb8c 	bl	80008fc <__aeabi_d2iz>
 80021e4:	4603      	mov	r3, r0
 80021e6:	61bb      	str	r3, [r7, #24]
		// calculate control value
		int l_ctrl   = (l_Kp * error) + ((l_Kd/pid_time_period)* l_error_derivative) + (l_Ki*l_error_integral*pid_time_period);
 80021e8:	69f8      	ldr	r0, [r7, #28]
 80021ea:	f7fe f90b 	bl	8000404 <__aeabi_i2d>
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <pid_timer+0x388>)
 80021f0:	cb18      	ldmia	r3, {r3, r4}
 80021f2:	461a      	mov	r2, r3
 80021f4:	4623      	mov	r3, r4
 80021f6:	f7fe f96f 	bl	80004d8 <__aeabi_dmul>
 80021fa:	4603      	mov	r3, r0
 80021fc:	460c      	mov	r4, r1
 80021fe:	4698      	mov	r8, r3
 8002200:	46a1      	mov	r9, r4
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <pid_timer+0x38c>)
 8002204:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002208:	4b42      	ldr	r3, [pc, #264]	; (8002314 <pid_timer+0x390>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f8f9 	bl	8000404 <__aeabi_i2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe fa87 	bl	800072c <__aeabi_ddiv>
 800221e:	4603      	mov	r3, r0
 8002220:	460c      	mov	r4, r1
 8002222:	4625      	mov	r5, r4
 8002224:	461c      	mov	r4, r3
 8002226:	69b8      	ldr	r0, [r7, #24]
 8002228:	f7fe f8ec 	bl	8000404 <__aeabi_i2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4620      	mov	r0, r4
 8002232:	4629      	mov	r1, r5
 8002234:	f7fe f950 	bl	80004d8 <__aeabi_dmul>
 8002238:	4603      	mov	r3, r0
 800223a:	460c      	mov	r4, r1
 800223c:	461a      	mov	r2, r3
 800223e:	4623      	mov	r3, r4
 8002240:	4640      	mov	r0, r8
 8002242:	4649      	mov	r1, r9
 8002244:	f7fd ff92 	bl	800016c <__adddf3>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	461d      	mov	r5, r3
 800224e:	4626      	mov	r6, r4
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <pid_timer+0x394>)
 8002252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <pid_timer+0x380>)
 8002258:	cb18      	ldmia	r3, {r3, r4}
 800225a:	461a      	mov	r2, r3
 800225c:	4623      	mov	r3, r4
 800225e:	f7fe f93b 	bl	80004d8 <__aeabi_dmul>
 8002262:	4603      	mov	r3, r0
 8002264:	460c      	mov	r4, r1
 8002266:	4698      	mov	r8, r3
 8002268:	46a1      	mov	r9, r4
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <pid_timer+0x390>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f8c8 	bl	8000404 <__aeabi_i2d>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	461a      	mov	r2, r3
 800227a:	4623      	mov	r3, r4
 800227c:	4640      	mov	r0, r8
 800227e:	4649      	mov	r1, r9
 8002280:	f7fe f92a 	bl	80004d8 <__aeabi_dmul>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	461a      	mov	r2, r3
 800228a:	4623      	mov	r3, r4
 800228c:	4628      	mov	r0, r5
 800228e:	4631      	mov	r1, r6
 8002290:	f7fd ff6c 	bl	800016c <__adddf3>
 8002294:	4603      	mov	r3, r0
 8002296:	460c      	mov	r4, r1
 8002298:	4618      	mov	r0, r3
 800229a:	4621      	mov	r1, r4
 800229c:	f7fe fb2e 	bl	80008fc <__aeabi_d2iz>
 80022a0:	4603      	mov	r3, r0
 80022a2:	617b      	str	r3, [r7, #20]
		// ensure control value is within limits
		l_ctrl = constrain(abs(l_ctrl), 20, 80);// constrain to max 80 % PWM since its a 6V motor at 12V
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bfb8      	it	lt
 80022aa:	425b      	neglt	r3, r3
 80022ac:	2250      	movs	r2, #80	; 0x50
 80022ae:	2114      	movs	r1, #20
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe ffb7 	bl	8001224 <constrain>
 80022b6:	6178      	str	r0, [r7, #20]
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "PID L %d \t %d \t %d \t %d\n", lPosDesired, adc_value[6],error, l_ctrl), 100);
		// move motors
		if(error>lPosDelta)
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <pid_timer+0x398>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	429a      	cmp	r2, r3
 80022c0:	dd03      	ble.n	80022ca <pid_timer+0x346>
		{
			//forward
			move_lf(l_ctrl);
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7fe fddc 	bl	8000e80 <move_lf>
 80022c8:	e034      	b.n	8002334 <pid_timer+0x3b0>
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE FWD %d\n", 1), 100);
		}
		else if(error<(-1*lPosDelta))
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <pid_timer+0x398>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	425b      	negs	r3, r3
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	da24      	bge.n	8002320 <pid_timer+0x39c>
		{
			move_lb(l_ctrl);
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7fe fe0c 	bl	8000ef4 <move_lb>
 80022dc:	e02a      	b.n	8002334 <pid_timer+0x3b0>
 80022de:	bf00      	nop
 80022e0:	20001904 	.word	0x20001904
 80022e4:	20000014 	.word	0x20000014
 80022e8:	20000928 	.word	0x20000928
 80022ec:	2000001c 	.word	0x2000001c
 80022f0:	20001b50 	.word	0x20001b50
 80022f4:	20001a28 	.word	0x20001a28
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	2000092c 	.word	0x2000092c
 8002300:	20000938 	.word	0x20000938
 8002304:	20000948 	.word	0x20000948
 8002308:	20000940 	.word	0x20000940
 800230c:	20000030 	.word	0x20000030
 8002310:	20000038 	.word	0x20000038
 8002314:	20000028 	.word	0x20000028
 8002318:	20000040 	.word	0x20000040
 800231c:	20000020 	.word	0x20000020
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE BACK %d\n", 1), 100);
		}
		else
		{
			brake_lf();
 8002320:	f7fe fce6 	bl	8000cf0 <brake_lf>
			l_error_integral = l_error_prev;
 8002324:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <pid_timer+0x54c>)
 8002326:	cb18      	ldmia	r3, {r3, r4}
 8002328:	4a6a      	ldr	r2, [pc, #424]	; (80024d4 <pid_timer+0x550>)
 800232a:	e9c2 3400 	strd	r3, r4, [r2]
			lPid=0;
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <pid_timer+0x554>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
		//	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "REACHED L %d \t %d \t %d\n", lPosDesired, l_ctrl, error), 100);

		}
	}
	//PID position control for RFinger
	if(rPid==1)
 8002334:	4b69      	ldr	r3, [pc, #420]	; (80024dc <pid_timer+0x558>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	f040 80ab 	bne.w	8002494 <pid_timer+0x510>
	{
		// get the commanded position
		// get current position
		// calculate error
		int error = rPosDesired - adc_value[5];
 800233e:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <pid_timer+0x55c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <pid_timer+0x560>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	613b      	str	r3, [r7, #16]
		r_error_integral = r_error_integral + error;
 800234c:	6938      	ldr	r0, [r7, #16]
 800234e:	f7fe f859 	bl	8000404 <__aeabi_i2d>
 8002352:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <pid_timer+0x564>)
 8002354:	cb18      	ldmia	r3, {r3, r4}
 8002356:	461a      	mov	r2, r3
 8002358:	4623      	mov	r3, r4
 800235a:	f7fd ff07 	bl	800016c <__adddf3>
 800235e:	4603      	mov	r3, r0
 8002360:	460c      	mov	r4, r1
 8002362:	4a61      	ldr	r2, [pc, #388]	; (80024e8 <pid_timer+0x564>)
 8002364:	e9c2 3400 	strd	r3, r4, [r2]
		int r_error_derivative = error  - r_error_prev;
 8002368:	6938      	ldr	r0, [r7, #16]
 800236a:	f7fe f84b 	bl	8000404 <__aeabi_i2d>
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <pid_timer+0x568>)
 8002370:	cb18      	ldmia	r3, {r3, r4}
 8002372:	461a      	mov	r2, r3
 8002374:	4623      	mov	r3, r4
 8002376:	f7fd fef7 	bl	8000168 <__aeabi_dsub>
 800237a:	4603      	mov	r3, r0
 800237c:	460c      	mov	r4, r1
 800237e:	4618      	mov	r0, r3
 8002380:	4621      	mov	r1, r4
 8002382:	f7fe fabb 	bl	80008fc <__aeabi_d2iz>
 8002386:	4603      	mov	r3, r0
 8002388:	60fb      	str	r3, [r7, #12]
		// calculate control value
		int r_ctrl   = (r_Kp * error) + ((r_Kd/pid_time_period)* r_error_derivative) + (r_Ki*r_error_integral*pid_time_period);
 800238a:	6938      	ldr	r0, [r7, #16]
 800238c:	f7fe f83a 	bl	8000404 <__aeabi_i2d>
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <pid_timer+0x56c>)
 8002392:	cb18      	ldmia	r3, {r3, r4}
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	f7fe f89e 	bl	80004d8 <__aeabi_dmul>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	4698      	mov	r8, r3
 80023a2:	46a1      	mov	r9, r4
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <pid_timer+0x570>)
 80023a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <pid_timer+0x574>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f828 	bl	8000404 <__aeabi_i2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fe f9b6 	bl	800072c <__aeabi_ddiv>
 80023c0:	4603      	mov	r3, r0
 80023c2:	460c      	mov	r4, r1
 80023c4:	4625      	mov	r5, r4
 80023c6:	461c      	mov	r4, r3
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7fe f81b 	bl	8000404 <__aeabi_i2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	f7fe f87f 	bl	80004d8 <__aeabi_dmul>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	461a      	mov	r2, r3
 80023e0:	4623      	mov	r3, r4
 80023e2:	4640      	mov	r0, r8
 80023e4:	4649      	mov	r1, r9
 80023e6:	f7fd fec1 	bl	800016c <__adddf3>
 80023ea:	4603      	mov	r3, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	461d      	mov	r5, r3
 80023f0:	4626      	mov	r6, r4
 80023f2:	4b42      	ldr	r3, [pc, #264]	; (80024fc <pid_timer+0x578>)
 80023f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f8:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <pid_timer+0x564>)
 80023fa:	cb18      	ldmia	r3, {r3, r4}
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	f7fe f86a 	bl	80004d8 <__aeabi_dmul>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	4698      	mov	r8, r3
 800240a:	46a1      	mov	r9, r4
 800240c:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <pid_timer+0x574>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fd fff7 	bl	8000404 <__aeabi_i2d>
 8002416:	4603      	mov	r3, r0
 8002418:	460c      	mov	r4, r1
 800241a:	461a      	mov	r2, r3
 800241c:	4623      	mov	r3, r4
 800241e:	4640      	mov	r0, r8
 8002420:	4649      	mov	r1, r9
 8002422:	f7fe f859 	bl	80004d8 <__aeabi_dmul>
 8002426:	4603      	mov	r3, r0
 8002428:	460c      	mov	r4, r1
 800242a:	461a      	mov	r2, r3
 800242c:	4623      	mov	r3, r4
 800242e:	4628      	mov	r0, r5
 8002430:	4631      	mov	r1, r6
 8002432:	f7fd fe9b 	bl	800016c <__adddf3>
 8002436:	4603      	mov	r3, r0
 8002438:	460c      	mov	r4, r1
 800243a:	4618      	mov	r0, r3
 800243c:	4621      	mov	r1, r4
 800243e:	f7fe fa5d 	bl	80008fc <__aeabi_d2iz>
 8002442:	4603      	mov	r3, r0
 8002444:	60bb      	str	r3, [r7, #8]
		// ensure control value is within limits
		r_ctrl = constrain(abs(r_ctrl), 20, 80);// constrain to max 80 % PWM since its a 6V motor at 12V
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	bfb8      	it	lt
 800244c:	425b      	neglt	r3, r3
 800244e:	2250      	movs	r2, #80	; 0x50
 8002450:	2114      	movs	r1, #20
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fee6 	bl	8001224 <constrain>
 8002458:	60b8      	str	r0, [r7, #8]
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "PID L %d \t %d \t %d \t %d\n", lPosDesired, adc_value[6],error, l_ctrl), 100);
		// move motors
		if(error>rPosDelta)
 800245a:	4b29      	ldr	r3, [pc, #164]	; (8002500 <pid_timer+0x57c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	429a      	cmp	r2, r3
 8002462:	dd03      	ble.n	800246c <pid_timer+0x4e8>
		{
			//forward
			move_rf(r_ctrl);
 8002464:	68b8      	ldr	r0, [r7, #8]
 8002466:	f7fe fd7f 	bl	8000f68 <move_rf>
 800246a:	e013      	b.n	8002494 <pid_timer+0x510>
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE FWD %d\n", 1), 100);
		}
		else if(error<(-1*rPosDelta))
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <pid_timer+0x57c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	425b      	negs	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	da03      	bge.n	8002480 <pid_timer+0x4fc>
		{
			move_rb(r_ctrl);
 8002478:	68b8      	ldr	r0, [r7, #8]
 800247a:	f7fe fdaf 	bl	8000fdc <move_rb>
 800247e:	e009      	b.n	8002494 <pid_timer+0x510>
			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "MOVE BACK %d\n", 1), 100);
		}
		else
		{
			brake_rf();
 8002480:	f7fe fc48 	bl	8000d14 <brake_rf>
			r_error_integral = r_error_prev;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <pid_timer+0x568>)
 8002486:	cb18      	ldmia	r3, {r3, r4}
 8002488:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <pid_timer+0x564>)
 800248a:	e9c2 3400 	strd	r3, r4, [r2]
			rPid=0;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <pid_timer+0x558>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

		}
	}

	// control of gripper motors
	if(gPid==2)
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <pid_timer+0x580>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d113      	bne.n	80024c4 <pid_timer+0x540>
	{
		if(adc_value[2]>gForceThres)
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <pid_timer+0x560>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <pid_timer+0x584>)
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d90d      	bls.n	80024c4 <pid_timer+0x540>
		{
			osDelay(5);
 80024a8:	2005      	movs	r0, #5
 80024aa:	f004 fa6a 	bl	8006982 <osDelay>
			if(adc_value[2]>gForceThres)
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <pid_timer+0x560>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a15      	ldr	r2, [pc, #84]	; (8002508 <pid_timer+0x584>)
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d904      	bls.n	80024c4 <pid_timer+0x540>
			{
				// brake
				brake_gripper();
 80024ba:	f7fe fc5d 	bl	8000d78 <brake_gripper>
				gPid = 0;
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <pid_timer+0x580>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
			}

		}
	}
  /* USER CODE END pid_timer */
}
 80024c4:	bf00      	nop
 80024c6:	3724      	adds	r7, #36	; 0x24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024ce:	bf00      	nop
 80024d0:	20000940 	.word	0x20000940
 80024d4:	20000948 	.word	0x20000948
 80024d8:	2000092c 	.word	0x2000092c
 80024dc:	20000930 	.word	0x20000930
 80024e0:	2000093c 	.word	0x2000093c
 80024e4:	20001904 	.word	0x20001904
 80024e8:	20000958 	.word	0x20000958
 80024ec:	20000950 	.word	0x20000950
 80024f0:	20000048 	.word	0x20000048
 80024f4:	20000050 	.word	0x20000050
 80024f8:	20000028 	.word	0x20000028
 80024fc:	20000058 	.word	0x20000058
 8002500:	20000024 	.word	0x20000024
 8002504:	20000934 	.word	0x20000934
 8002508:	20000960 	.word	0x20000960

0800250c <status_update_timer>:

/* status_update_timer function */
void status_update_timer(void const * argument)
{
 800250c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250e:	b0ad      	sub	sp, #180	; 0xb4
 8002510:	af18      	add	r7, sp, #96	; 0x60
 8002512:	64f8      	str	r0, [r7, #76]	; 0x4c
	 */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	//sprintf(MSG, "Data = %d \t %d  \t %d \t %d  \t%d  \t%d \t%d \t \r\n ",
	//		irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6]);

	sprintf(MSG, "%d \t%d \t%d \t%d \t%d \t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t \r\n",
 8002514:	4b49      	ldr	r3, [pc, #292]	; (800263c <status_update_timer+0x130>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	64bb      	str	r3, [r7, #72]	; 0x48
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <status_update_timer+0x130>)
 800251c:	68d9      	ldr	r1, [r3, #12]
 800251e:	6479      	str	r1, [r7, #68]	; 0x44
 8002520:	4b46      	ldr	r3, [pc, #280]	; (800263c <status_update_timer+0x130>)
 8002522:	6918      	ldr	r0, [r3, #16]
 8002524:	6438      	str	r0, [r7, #64]	; 0x40
			adc_value[2], adc_value[3], adc_value[4], scale_val(adc_value[5],RFMinPos,RFMaxPos,0,200), scale_val(adc_value[6],LFMinPos,LFMaxPos,0,200),
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <status_update_timer+0x130>)
 8002528:	695b      	ldr	r3, [r3, #20]
	sprintf(MSG, "%d \t%d \t%d \t%d \t%d \t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t \r\n",
 800252a:	4618      	mov	r0, r3
 800252c:	4b44      	ldr	r3, [pc, #272]	; (8002640 <status_update_timer+0x134>)
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	4b44      	ldr	r3, [pc, #272]	; (8002644 <status_update_timer+0x138>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	23c8      	movs	r3, #200	; 0xc8
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	f7fe fe27 	bl	800118c <scale_val>
 800253e:	63f8      	str	r0, [r7, #60]	; 0x3c
			adc_value[2], adc_value[3], adc_value[4], scale_val(adc_value[5],RFMinPos,RFMaxPos,0,200), scale_val(adc_value[6],LFMinPos,LFMaxPos,0,200),
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <status_update_timer+0x130>)
 8002542:	699b      	ldr	r3, [r3, #24]
	sprintf(MSG, "%d \t%d \t%d \t%d \t%d \t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t \r\n",
 8002544:	4618      	mov	r0, r3
 8002546:	4b40      	ldr	r3, [pc, #256]	; (8002648 <status_update_timer+0x13c>)
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <status_update_timer+0x140>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	23c8      	movs	r3, #200	; 0xc8
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2300      	movs	r3, #0
 8002554:	f7fe fe1a 	bl	800118c <scale_val>
 8002558:	63b8      	str	r0, [r7, #56]	; 0x38
 800255a:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <status_update_timer+0x144>)
 800255c:	681c      	ldr	r4, [r3, #0]
 800255e:	637c      	str	r4, [r7, #52]	; 0x34
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <status_update_timer+0x144>)
 8002562:	685d      	ldr	r5, [r3, #4]
 8002564:	633d      	str	r5, [r7, #48]	; 0x30
 8002566:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <status_update_timer+0x144>)
 8002568:	689e      	ldr	r6, [r3, #8]
 800256a:	62fe      	str	r6, [r7, #44]	; 0x2c
 800256c:	4b38      	ldr	r3, [pc, #224]	; (8002650 <status_update_timer+0x144>)
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	62ba      	str	r2, [r7, #40]	; 0x28
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <status_update_timer+0x144>)
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	6279      	str	r1, [r7, #36]	; 0x24
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <status_update_timer+0x144>)
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	623b      	str	r3, [r7, #32]
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <status_update_timer+0x144>)
 8002580:	699c      	ldr	r4, [r3, #24]
 8002582:	61fc      	str	r4, [r7, #28]
 8002584:	4b32      	ldr	r3, [pc, #200]	; (8002650 <status_update_timer+0x144>)
 8002586:	69dd      	ldr	r5, [r3, #28]
 8002588:	61bd      	str	r5, [r7, #24]
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <status_update_timer+0x144>)
 800258c:	6a1e      	ldr	r6, [r3, #32]
 800258e:	617e      	str	r6, [r7, #20]
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <status_update_timer+0x144>)
 8002592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002594:	613a      	str	r2, [r7, #16]
 8002596:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <status_update_timer+0x148>)
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	60f9      	str	r1, [r7, #12]
 800259c:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <status_update_timer+0x148>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <status_update_timer+0x148>)
 80025a4:	6898      	ldr	r0, [r3, #8]
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <status_update_timer+0x148>)
 80025aa:	68de      	ldr	r6, [r3, #12]
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <status_update_timer+0x148>)
 80025ae:	691d      	ldr	r5, [r3, #16]
 80025b0:	4b28      	ldr	r3, [pc, #160]	; (8002654 <status_update_timer+0x148>)
 80025b2:	695c      	ldr	r4, [r3, #20]
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <status_update_timer+0x148>)
 80025b6:	6998      	ldr	r0, [r3, #24]
 80025b8:	4b26      	ldr	r3, [pc, #152]	; (8002654 <status_update_timer+0x148>)
 80025ba:	69d9      	ldr	r1, [r3, #28]
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <status_update_timer+0x148>)
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <status_update_timer+0x148>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	9316      	str	r3, [sp, #88]	; 0x58
 80025c6:	9215      	str	r2, [sp, #84]	; 0x54
 80025c8:	9114      	str	r1, [sp, #80]	; 0x50
 80025ca:	9013      	str	r0, [sp, #76]	; 0x4c
 80025cc:	9412      	str	r4, [sp, #72]	; 0x48
 80025ce:	9511      	str	r5, [sp, #68]	; 0x44
 80025d0:	9610      	str	r6, [sp, #64]	; 0x40
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	930e      	str	r3, [sp, #56]	; 0x38
 80025da:	68f9      	ldr	r1, [r7, #12]
 80025dc:	910d      	str	r1, [sp, #52]	; 0x34
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	920c      	str	r2, [sp, #48]	; 0x30
 80025e2:	697e      	ldr	r6, [r7, #20]
 80025e4:	960b      	str	r6, [sp, #44]	; 0x2c
 80025e6:	69bd      	ldr	r5, [r7, #24]
 80025e8:	950a      	str	r5, [sp, #40]	; 0x28
 80025ea:	69fc      	ldr	r4, [r7, #28]
 80025ec:	9409      	str	r4, [sp, #36]	; 0x24
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	9308      	str	r3, [sp, #32]
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	9107      	str	r1, [sp, #28]
 80025f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025f8:	9206      	str	r2, [sp, #24]
 80025fa:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 80025fc:	9605      	str	r6, [sp, #20]
 80025fe:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8002600:	9504      	str	r5, [sp, #16]
 8002602:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002604:	9403      	str	r4, [sp, #12]
 8002606:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002608:	9402      	str	r4, [sp, #8]
 800260a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800260c:	9401      	str	r4, [sp, #4]
 800260e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002610:	9000      	str	r0, [sp, #0]
 8002612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002616:	4910      	ldr	r1, [pc, #64]	; (8002658 <status_update_timer+0x14c>)
 8002618:	4810      	ldr	r0, [pc, #64]	; (800265c <status_update_timer+0x150>)
 800261a:	f007 fa81 	bl	8009b20 <siprintf>
				irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6],irdata_fr[7],irdata_fr[8],irdata_fr[9],
				irdata_fl[0],irdata_fl[1], irdata_fl[2], irdata_fl[3], irdata_fl[4], irdata_fl[5], irdata_fl[6],irdata_fl[7],irdata_fl[8],irdata_fl[9]);



	HAL_UART_Transmit_IT(&huart1, MSG, strlen(MSG));
 800261e:	480f      	ldr	r0, [pc, #60]	; (800265c <status_update_timer+0x150>)
 8002620:	f7fd fd96 	bl	8000150 <strlen>
 8002624:	4603      	mov	r3, r0
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	490c      	ldr	r1, [pc, #48]	; (800265c <status_update_timer+0x150>)
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <status_update_timer+0x154>)
 800262e:	f003 fd93 	bl	8006158 <HAL_UART_Transmit_IT>

  /* USER CODE END status_update_timer */
}
 8002632:	bf00      	nop
 8002634:	3754      	adds	r7, #84	; 0x54
 8002636:	46bd      	mov	sp, r7
 8002638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800263a:	bf00      	nop
 800263c:	20001904 	.word	0x20001904
 8002640:	2000000c 	.word	0x2000000c
 8002644:	20000008 	.word	0x20000008
 8002648:	20000004 	.word	0x20000004
 800264c:	20000000 	.word	0x20000000
 8002650:	20001b54 	.word	0x20001b54
 8002654:	20001920 	.word	0x20001920
 8002658:	0800a50c 	.word	0x0800a50c
 800265c:	20001b7c 	.word	0x20001b7c
 8002660:	20001980 	.word	0x20001980

08002664 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002676:	f000 feaf 	bl	80033d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40000400 	.word	0x40000400

08002688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_MspInit+0x68>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_MspInit+0x68>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6193      	str	r3, [r2, #24]
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_MspInit+0x68>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_MspInit+0x68>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_MspInit+0x68>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_MspInit+0x68>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	210f      	movs	r1, #15
 80026ce:	f06f 0001 	mvn.w	r0, #1
 80026d2:	f001 fb30 	bl	8003d36 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_MspInit+0x6c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_MspInit+0x6c>)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40010000 	.word	0x40010000

08002704 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_ADC_MspInit+0xbc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d149      	bne.n	80027b8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4a26      	ldr	r2, [pc, #152]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6193      	str	r3, [r2, #24]
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6193      	str	r3, [r2, #24]
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002754:	23ff      	movs	r3, #255	; 0xff
 8002756:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002758:	2303      	movs	r3, #3
 800275a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	4819      	ldr	r0, [pc, #100]	; (80027c8 <HAL_ADC_MspInit+0xc4>)
 8002764:	f001 fdb8 	bl	80042d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 800276a:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_ADC_MspInit+0xcc>)
 800276c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 8002770:	2200      	movs	r2, #0
 8002772:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 800278a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800278e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 8002792:	2220      	movs	r2, #32
 8002794:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 8002798:	2200      	movs	r2, #0
 800279a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 800279e:	f001 faf5 	bl	8003d8c <HAL_DMA_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80027a8:	f7ff ff6e 	bl	8002688 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 80027b0:	621a      	str	r2, [r3, #32]
 80027b2:	4a06      	ldr	r2, [pc, #24]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40012400 	.word	0x40012400
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010800 	.word	0x40010800
 80027cc:	200019e0 	.word	0x200019e0
 80027d0:	40020008 	.word	0x40020008

080027d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5c      	ldr	r2, [pc, #368]	; (8002954 <HAL_TIM_Base_MspInit+0x180>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10c      	bne.n	8002800 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027e6:	4b5c      	ldr	r3, [pc, #368]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	4a5b      	ldr	r2, [pc, #364]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 80027ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f0:	6193      	str	r3, [r2, #24]
 80027f2:	4b59      	ldr	r3, [pc, #356]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027fe:	e0a4      	b.n	800294a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	f040 808e 	bne.w	8002928 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280c:	4b52      	ldr	r3, [pc, #328]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4a51      	ldr	r2, [pc, #324]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	61d3      	str	r3, [r2, #28]
 8002818:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002824:	4b4d      	ldr	r3, [pc, #308]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 8002826:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_TIM_Base_MspInit+0x18c>)
 8002828:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800282a:	4b4c      	ldr	r3, [pc, #304]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 800282c:	2210      	movs	r2, #16
 800282e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002830:	4b4a      	ldr	r3, [pc, #296]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8002836:	4b49      	ldr	r3, [pc, #292]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 8002838:	2200      	movs	r2, #0
 800283a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800283c:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 800283e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002842:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002844:	4b45      	ldr	r3, [pc, #276]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 8002846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800284a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 800284e:	2220      	movs	r2, #32
 8002850:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002852:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 8002854:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002858:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800285a:	4840      	ldr	r0, [pc, #256]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 800285c:	f001 fa96 	bl	8003d8c <HAL_DMA_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_TIM_Base_MspInit+0x96>
      Error_Handler();
 8002866:	f7ff ff0f 	bl	8002688 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a3b      	ldr	r2, [pc, #236]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
 8002870:	4a3a      	ldr	r2, [pc, #232]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a38      	ldr	r2, [pc, #224]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
 800287c:	4a37      	ldr	r2, [pc, #220]	; (800295c <HAL_TIM_Base_MspInit+0x188>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002882:	4b38      	ldr	r3, [pc, #224]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 8002884:	4a38      	ldr	r2, [pc, #224]	; (8002968 <HAL_TIM_Base_MspInit+0x194>)
 8002886:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 800288a:	2210      	movs	r2, #16
 800288c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800288e:	4b35      	ldr	r3, [pc, #212]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002894:	4b33      	ldr	r3, [pc, #204]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 800289c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 80028a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80028aa:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 80028ac:	2220      	movs	r2, #32
 80028ae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028b0:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 80028b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80028b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80028b8:	482a      	ldr	r0, [pc, #168]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 80028ba:	f001 fa67 	bl	8003d8c <HAL_DMA_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_TIM_Base_MspInit+0xf4>
      Error_Handler();
 80028c4:	f7ff fee0 	bl	8002688 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a26      	ldr	r2, [pc, #152]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
 80028ce:	4a25      	ldr	r2, [pc, #148]	; (8002964 <HAL_TIM_Base_MspInit+0x190>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_up.Instance = DMA1_Channel2;
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 80028d6:	4a26      	ldr	r2, [pc, #152]	; (8002970 <HAL_TIM_Base_MspInit+0x19c>)
 80028d8:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 80028dc:	2210      	movs	r2, #16
 80028de:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028ec:	4b1f      	ldr	r3, [pc, #124]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 80028ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f2:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 80028f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028fa:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 80028fe:	2220      	movs	r2, #32
 8002900:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 8002904:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002908:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 800290a:	4818      	ldr	r0, [pc, #96]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 800290c:	f001 fa3e 	bl	8003d8c <HAL_DMA_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_TIM_Base_MspInit+0x146>
      Error_Handler();
 8002916:	f7ff feb7 	bl	8002688 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a13      	ldr	r2, [pc, #76]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 800291e:	621a      	str	r2, [r3, #32]
 8002920:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_TIM_Base_MspInit+0x198>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002926:	e010      	b.n	800294a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10b      	bne.n	800294a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4a08      	ldr	r2, [pc, #32]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	61d3      	str	r3, [r2, #28]
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_TIM_Base_MspInit+0x184>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40021000 	.word	0x40021000
 800295c:	200018bc 	.word	0x200018bc
 8002960:	40020080 	.word	0x40020080
 8002964:	200017e0 	.word	0x200017e0
 8002968:	40020058 	.word	0x40020058
 800296c:	20001870 	.word	0x20001870
 8002970:	4002001c 	.word	0x4002001c
 8002974:	40000800 	.word	0x40000800

08002978 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_TIM_MspPostInit+0x98>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d119      	bne.n	80029cc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_TIM_MspPostInit+0x9c>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_TIM_MspPostInit+0x9c>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6193      	str	r3, [r2, #24]
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_TIM_MspPostInit+0x9c>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2302      	movs	r3, #2
 80029bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4619      	mov	r1, r3
 80029c4:	4814      	ldr	r0, [pc, #80]	; (8002a18 <HAL_TIM_MspPostInit+0xa0>)
 80029c6:	f001 fc87 	bl	80042d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029ca:	e01d      	b.n	8002a08 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_TIM_MspPostInit+0xa4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d118      	bne.n	8002a08 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_TIM_MspPostInit+0x9c>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <HAL_TIM_MspPostInit+0x9c>)
 80029dc:	f043 0308 	orr.w	r3, r3, #8
 80029e0:	6193      	str	r3, [r2, #24]
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_TIM_MspPostInit+0x9c>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029ee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4619      	mov	r1, r3
 8002a02:	4807      	ldr	r0, [pc, #28]	; (8002a20 <HAL_TIM_MspPostInit+0xa8>)
 8002a04:	f001 fc68 	bl	80042d8 <HAL_GPIO_Init>
}
 8002a08:	bf00      	nop
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010800 	.word	0x40010800
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40010c00 	.word	0x40010c00

08002a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0310 	add.w	r3, r7, #16
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <HAL_UART_MspInit+0x9c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d139      	bne.n	8002ab8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a44:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <HAL_UART_MspInit+0xa0>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_UART_MspInit+0xa0>)
 8002a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_UART_MspInit+0xa0>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_UART_MspInit+0xa0>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_UART_MspInit+0xa0>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <HAL_UART_MspInit+0xa0>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	4619      	mov	r1, r3
 8002a88:	480f      	ldr	r0, [pc, #60]	; (8002ac8 <HAL_UART_MspInit+0xa4>)
 8002a8a:	f001 fc25 	bl	80042d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <HAL_UART_MspInit+0xa4>)
 8002aa4:	f001 fc18 	bl	80042d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2105      	movs	r1, #5
 8002aac:	2025      	movs	r0, #37	; 0x25
 8002aae:	f001 f942 	bl	8003d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ab2:	2025      	movs	r0, #37	; 0x25
 8002ab4:	f001 f95b 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ab8:	bf00      	nop
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40010800 	.word	0x40010800

08002acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	201d      	movs	r0, #29
 8002ae2:	f001 f928 	bl	8003d36 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ae6:	201d      	movs	r0, #29
 8002ae8:	f001 f941 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002aec:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <HAL_InitTick+0xa0>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_InitTick+0xa0>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	61d3      	str	r3, [r2, #28]
 8002af8:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_InitTick+0xa0>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b04:	f107 0210 	add.w	r2, r7, #16
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 f952 	bl	8004db8 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b14:	f002 f928 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_InitTick+0xa4>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9b      	lsrs	r3, r3, #18
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_InitTick+0xac>)
 8002b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b38:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b4e:	f002 fa37 	bl	8004fc0 <HAL_TIM_Base_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b5a:	f002 facb 	bl	80050f4 <HAL_TIM_Base_Start_IT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	e000      	b.n	8002b64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3730      	adds	r7, #48	; 0x30
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	20001dd4 	.word	0x20001dd4
 8002b78:	40000400 	.word	0x40000400

08002b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <HardFault_Handler+0x4>

08002b8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <MemManage_Handler+0x4>

08002b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <BusFault_Handler+0x4>

08002b9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <UsageFault_Handler+0x4>

08002ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <DMA1_Channel1_IRQHandler+0x10>)
 8002bb2:	f001 fa5d 	bl	8004070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200019e0 	.word	0x200019e0

08002bc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <DMA1_Channel2_IRQHandler+0x10>)
 8002bc6:	f001 fa53 	bl	8004070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20001870 	.word	0x20001870

08002bd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA1_Channel5_IRQHandler+0x10>)
 8002bda:	f001 fa49 	bl	8004070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200017e0 	.word	0x200017e0

08002be8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <DMA1_Channel7_IRQHandler+0x10>)
 8002bee:	f001 fa3f 	bl	8004070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200018bc 	.word	0x200018bc

08002bfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <TIM3_IRQHandler+0x10>)
 8002c02:	f002 fbc3 	bl	800538c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20001dd4 	.word	0x20001dd4

08002c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <USART1_IRQHandler+0x10>)
 8002c16:	f003 fb37 	bl	8006288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20001980 	.word	0x20001980

08002c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <_sbrk+0x5c>)
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <_sbrk+0x60>)
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <_sbrk+0x64>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <_sbrk+0x68>)
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <_sbrk+0x64>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d207      	bcs.n	8002c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c54:	f006 ff26 	bl	8009aa4 <__errno>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c62:	e009      	b.n	8002c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <_sbrk+0x64>)
 8002c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20005000 	.word	0x20005000
 8002c84:	00000400 	.word	0x00000400
 8002c88:	20000964 	.word	0x20000964
 8002c8c:	20001f78 	.word	0x20001f78

08002c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <ws2812_timer2_init>:
    WS2812_CH14_GPIO,
    WS2812_CH15_GPIO
};

static void ws2812_timer2_init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08e      	sub	sp, #56	; 0x38
 8002ca0:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb0:	f107 0320 	add.w	r3, r7, #32
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
 8002cc8:	615a      	str	r2, [r3, #20]
 8002cca:	619a      	str	r2, [r3, #24]

    htimer2.Instance = TIM2;
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002cce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cd2:	601a      	str	r2, [r3, #0]
    htimer2.Init.Prescaler = 0;
 8002cd4:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	605a      	str	r2, [r3, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002ce2:	2246      	movs	r2, #70	; 0x46
 8002ce4:	60da      	str	r2, [r3, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer2);
 8002cf2:	481c      	ldr	r0, [pc, #112]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002cf4:	f002 f964 	bl	8004fc0 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 8002cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d02:	4619      	mov	r1, r3
 8002d04:	4817      	ldr	r0, [pc, #92]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002d06:	f002 fd07 	bl	8005718 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8002d0a:	4816      	ldr	r0, [pc, #88]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002d0c:	f002 fa44 	bl	8005198 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8002d18:	f107 0320 	add.w	r3, r7, #32
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4811      	ldr	r0, [pc, #68]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002d20:	f003 f87a 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d24:	2360      	movs	r3, #96	; 0x60
 8002d26:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8002d28:	2316      	movs	r3, #22
 8002d2a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	2200      	movs	r2, #0
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480a      	ldr	r0, [pc, #40]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002d3c:	f002 fc2e 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d40:	2360      	movs	r3, #96	; 0x60
 8002d42:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8002d44:	232c      	movs	r3, #44	; 0x2c
 8002d46:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	2204      	movs	r2, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4803      	ldr	r0, [pc, #12]	; (8002d64 <ws2812_timer2_init+0xc8>)
 8002d58:	f002 fc20 	bl	800559c <HAL_TIM_PWM_ConfigChannel>
}
 8002d5c:	bf00      	nop
 8002d5e:	3738      	adds	r7, #56	; 0x38
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20001ee8 	.word	0x20001ee8

08002d68 <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d70:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <ws2812_dma_start+0x13c>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <ws2812_dma_start+0x13c>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	61d3      	str	r3, [r2, #28]
 8002d7c:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <ws2812_dma_start+0x13c>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_update.Instance = DMA1_Channel2;
 8002d88:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002d8a:	4a48      	ldr	r2, [pc, #288]	; (8002eac <ws2812_dma_start+0x144>)
 8002d8c:	601a      	str	r2, [r3, #0]
    hdma_tim2_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d8e:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002d90:	2210      	movs	r2, #16
 8002d92:	605a      	str	r2, [r3, #4]
    hdma_tim2_update.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d94:	4b44      	ldr	r3, [pc, #272]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
    hdma_tim2_update.Init.MemInc = DMA_MINC_DISABLE;
 8002d9a:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
    hdma_tim2_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da6:	611a      	str	r2, [r3, #16]
    hdma_tim2_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002da8:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dae:	615a      	str	r2, [r3, #20]
    hdma_tim2_update.Init.Mode = DMA_CIRCULAR;
 8002db0:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002db2:	2220      	movs	r2, #32
 8002db4:	619a      	str	r2, [r3, #24]
    hdma_tim2_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002db6:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002db8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002dbc:	61da      	str	r2, [r3, #28]

    /* TIM2_CH1 Init */
    hdma_tim2_pwm_ch1.Instance = DMA1_Channel5;
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002dc0:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <ws2812_dma_start+0x14c>)
 8002dc2:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002dd0:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ddc:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dde:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de4:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch1.Init.Mode = DMA_CIRCULAR;
 8002de6:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002de8:	2220      	movs	r2, #32
 8002dea:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002dee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002df2:	61da      	str	r2, [r3, #28]

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_pwm_ch2.Instance = DMA1_Channel7;
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002df6:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <ws2812_dma_start+0x154>)
 8002df8:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch2.Init.MemInc = DMA_MINC_DISABLE;
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e12:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e14:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e1a:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch2.Init.Mode = DMA_CIRCULAR;
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002e1e:	2220      	movs	r2, #32
 8002e20:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002e24:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002e28:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim2_update);
 8002e2a:	481f      	ldr	r0, [pc, #124]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002e2c:	f000 ffae 	bl	8003d8c <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch1);
 8002e30:	481f      	ldr	r0, [pc, #124]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002e32:	f000 ffab 	bl	8003d8c <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch2);
 8002e36:	4820      	ldr	r0, [pc, #128]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002e38:	f000 ffa8 	bl	8003d8c <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim2_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 8002e3c:	4920      	ldr	r1, [pc, #128]	; (8002ec0 <ws2812_dma_start+0x158>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3310      	adds	r3, #16
 8002e42:	461a      	mov	r2, r3
 8002e44:	2310      	movs	r3, #16
 8002e46:	4818      	ldr	r0, [pc, #96]	; (8002ea8 <ws2812_dma_start+0x140>)
 8002e48:	f000 fffa 	bl	8003e40 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_pwm_ch1, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 8002e4c:	491d      	ldr	r1, [pc, #116]	; (8002ec4 <ws2812_dma_start+0x15c>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3314      	adds	r3, #20
 8002e52:	461a      	mov	r2, r3
 8002e54:	2310      	movs	r3, #16
 8002e56:	4816      	ldr	r0, [pc, #88]	; (8002eb0 <ws2812_dma_start+0x148>)
 8002e58:	f000 fff2 	bl	8003e40 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim2_pwm_ch2, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 8002e5c:	4918      	ldr	r1, [pc, #96]	; (8002ec0 <ws2812_dma_start+0x158>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3314      	adds	r3, #20
 8002e62:	461a      	mov	r2, r3
 8002e64:	2310      	movs	r3, #16
 8002e66:	4814      	ldr	r0, [pc, #80]	; (8002eb8 <ws2812_dma_start+0x150>)
 8002e68:	f000 ffea 	bl	8003e40 <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <ws2812_dma_start+0x160>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <ws2812_dma_start+0x160>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC1);
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <ws2812_dma_start+0x160>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <ws2812_dma_start+0x160>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC2);
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <ws2812_dma_start+0x160>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <ws2812_dma_start+0x160>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e9a:	60da      	str	r2, [r3, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	20001ea4 	.word	0x20001ea4
 8002eac:	4002001c 	.word	0x4002001c
 8002eb0:	20001e60 	.word	0x20001e60
 8002eb4:	40020058 	.word	0x40020058
 8002eb8:	20001e1c 	.word	0x20001e1c
 8002ebc:	40020080 	.word	0x40020080
 8002ec0:	20000968 	.word	0x20000968
 8002ec4:	2000096c 	.word	0x2000096c
 8002ec8:	20001ee8 	.word	0x20001ee8

08002ecc <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
    /* If all channels are the same length, we can skip the 'pos' range check, and speed up our
     * inner loop *substantially*
     */

    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	da07      	bge.n	8002ef0 <get_channel_byte+0x24>
        return channel->framebuffer[pos] ^ 0xff;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e000      	b.n	8002ef2 <get_channel_byte+0x26>

    return 0xff;
 8002ef0:	23ff      	movs	r3, #255	; 0xff
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 8002efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f00:	b087      	sub	sp, #28
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	f04f 0b00 	mov.w	fp, #0
 8002f12:	2600      	movs	r6, #0
 8002f14:	2500      	movs	r5, #0
 8002f16:	2400      	movs	r4, #0
 8002f18:	f04f 0a00 	mov.w	sl, #0
 8002f1c:	f04f 0900 	mov.w	r9, #0
 8002f20:	f04f 0800 	mov.w	r8, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ffd0 	bl	8002ecc <get_channel_byte>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	75fb      	strb	r3, [r7, #23]
 8002f30:	7df8      	ldrb	r0, [r7, #23]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	469e      	mov	lr, r3
 8002f36:	46dc      	mov	ip, fp
 8002f38:	4651      	mov	r1, sl
 8002f3a:	464a      	mov	r2, r9
 8002f3c:	4643      	mov	r3, r8
 8002f3e:	4680      	mov	r8, r0
 8002f40:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 8002f44:	f360 0e00 	bfi	lr, r0, #0, #1
 8002f48:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8002f4c:	f360 0c00 	bfi	ip, r0, #0, #1
 8002f50:	f3c8 1040 	ubfx	r0, r8, #5, #1
 8002f54:	f360 0600 	bfi	r6, r0, #0, #1
 8002f58:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8002f5c:	f360 0500 	bfi	r5, r0, #0, #1
 8002f60:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 8002f64:	f360 0400 	bfi	r4, r0, #0, #1
 8002f68:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8002f6c:	f360 0100 	bfi	r1, r0, #0, #1
 8002f70:	f3c8 0040 	ubfx	r0, r8, #1, #1
 8002f74:	f360 0200 	bfi	r2, r0, #0, #1
 8002f78:	f3c8 0000 	ubfx	r0, r8, #0, #1
 8002f7c:	f360 0300 	bfi	r3, r0, #0, #1
 8002f80:	fa1f f08e 	uxth.w	r0, lr
 8002f84:	6038      	str	r0, [r7, #0]
 8002f86:	fa1f fb8c 	uxth.w	fp, ip
 8002f8a:	b2b6      	uxth	r6, r6
 8002f8c:	b2ad      	uxth	r5, r5
 8002f8e:	b2a4      	uxth	r4, r4
 8002f90:	fa1f fa81 	uxth.w	sl, r1
 8002f94:	fa1f f982 	uxth.w	r9, r2
 8002f98:	fa1f f883 	uxth.w	r8, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff92 	bl	8002ecc <get_channel_byte>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	75fb      	strb	r3, [r7, #23]
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	469e      	mov	lr, r3
 8002fb4:	46dc      	mov	ip, fp
 8002fb6:	4651      	mov	r1, sl
 8002fb8:	464a      	mov	r2, r9
 8002fba:	4643      	mov	r3, r8
 8002fbc:	4680      	mov	r8, r0
 8002fbe:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 8002fc2:	f360 0e41 	bfi	lr, r0, #1, #1
 8002fc6:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8002fca:	f360 0c41 	bfi	ip, r0, #1, #1
 8002fce:	f3c8 1040 	ubfx	r0, r8, #5, #1
 8002fd2:	f360 0641 	bfi	r6, r0, #1, #1
 8002fd6:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8002fda:	f360 0541 	bfi	r5, r0, #1, #1
 8002fde:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 8002fe2:	f360 0441 	bfi	r4, r0, #1, #1
 8002fe6:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8002fea:	f360 0141 	bfi	r1, r0, #1, #1
 8002fee:	f3c8 0040 	ubfx	r0, r8, #1, #1
 8002ff2:	f360 0241 	bfi	r2, r0, #1, #1
 8002ff6:	f3c8 0000 	ubfx	r0, r8, #0, #1
 8002ffa:	f360 0341 	bfi	r3, r0, #1, #1
 8002ffe:	fa1f f08e 	uxth.w	r0, lr
 8003002:	fa1f fb8c 	uxth.w	fp, ip
 8003006:	b2b6      	uxth	r6, r6
 8003008:	b2ad      	uxth	r5, r5
 800300a:	b2a4      	uxth	r4, r4
 800300c:	fa1f fa81 	uxth.w	sl, r1
 8003010:	fa1f f982 	uxth.w	r9, r2
 8003014:	fa1f f883 	uxth.w	r8, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4602      	mov	r2, r0
 800301c:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3302      	adds	r3, #2
 8003022:	465a      	mov	r2, fp
 8003024:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3304      	adds	r3, #4
 800302a:	4632      	mov	r2, r6
 800302c:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3306      	adds	r3, #6
 8003032:	462a      	mov	r2, r5
 8003034:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3308      	adds	r3, #8
 800303a:	4622      	mov	r2, r4
 800303c:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	330a      	adds	r3, #10
 8003042:	4652      	mov	r2, sl
 8003044:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	330c      	adds	r3, #12
 800304a:	464a      	mov	r2, r9
 800304c:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	330e      	adds	r3, #14
 8003052:	4642      	mov	r2, r8
 8003054:	801a      	strh	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003060 <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 8003076:	4b80      	ldr	r3, [pc, #512]	; (8003278 <ws2812_refresh+0x218>)
 8003078:	2200      	movs	r2, #0
 800307a:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e00e      	b.n	80030a0 <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4a7d      	ldr	r2, [pc, #500]	; (800327c <ws2812_refresh+0x21c>)
 8003088:	4413      	add	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ff34 	bl	8002efc <fill_dma_buffer>
        pos++;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3301      	adds	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	3308      	adds	r3, #8
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	dded      	ble.n	8003082 <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	e027      	b.n	80030fc <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	da05      	bge.n	80030c8 <ws2812_refresh+0x68>
            max_length = channels[i].length;
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00f      	beq.n	80030f6 <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 80030d6:	4a6a      	ldr	r2, [pc, #424]	; (8003280 <ws2812_refresh+0x220>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	4413      	add	r3, r2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	2301      	movs	r3, #1
 80030e2:	4093      	lsls	r3, r2
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	4b64      	ldr	r3, [pc, #400]	; (8003278 <ws2812_refresh+0x218>)
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b21b      	sxth	r3, r3
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	4b61      	ldr	r3, [pc, #388]	; (8003278 <ws2812_refresh+0x218>)
 80030f4:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	ddd4      	ble.n	80030ac <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3302      	adds	r3, #2
 8003106:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	3303      	adds	r3, #3
 800310c:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 800310e:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <ws2812_refresh+0x224>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <ws2812_refresh+0x224>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC1);
 800311e:	4b59      	ldr	r3, [pc, #356]	; (8003284 <ws2812_refresh+0x224>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	4b57      	ldr	r3, [pc, #348]	; (8003284 <ws2812_refresh+0x224>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800312c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC2);
 800312e:	4b55      	ldr	r3, [pc, #340]	; (8003284 <ws2812_refresh+0x224>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <ws2812_refresh+0x224>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313c:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer2);
 800313e:	4b51      	ldr	r3, [pc, #324]	; (8003284 <ws2812_refresh+0x224>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	f241 1311 	movw	r3, #4369	; 0x1111
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <ws2812_refresh+0x10e>
 800314e:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <ws2812_refresh+0x224>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	f240 4344 	movw	r3, #1092	; 0x444
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d107      	bne.n	800316e <ws2812_refresh+0x10e>
 800315e:	4b49      	ldr	r3, [pc, #292]	; (8003284 <ws2812_refresh+0x224>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b47      	ldr	r3, [pc, #284]	; (8003284 <ws2812_refresh+0x224>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0201 	bic.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 800316e:	4b42      	ldr	r3, [pc, #264]	; (8003278 <ws2812_refresh+0x218>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer2);
 8003178:	4b42      	ldr	r3, [pc, #264]	; (8003284 <ws2812_refresh+0x224>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <ws2812_refresh+0x224>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e00f      	b.n	80031ae <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer2, TIM_FLAG_UPDATE));
 800318e:	bf00      	nop
 8003190:	4b3c      	ldr	r3, [pc, #240]	; (8003284 <ws2812_refresh+0x224>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d1f8      	bne.n	8003190 <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer2, TIM_FLAG_UPDATE);
 800319e:	4b39      	ldr	r3, [pc, #228]	; (8003284 <ws2812_refresh+0x224>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f06f 0201 	mvn.w	r2, #1
 80031a6:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	3301      	adds	r3, #1
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2be0      	cmp	r3, #224	; 0xe0
 80031b2:	ddec      	ble.n	800318e <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer2);
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <ws2812_refresh+0x224>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10f      	bne.n	80031e4 <ws2812_refresh+0x184>
 80031c4:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <ws2812_refresh+0x224>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6a1a      	ldr	r2, [r3, #32]
 80031ca:	f240 4344 	movw	r3, #1092	; 0x444
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <ws2812_refresh+0x184>
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <ws2812_refresh+0x224>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <ws2812_refresh+0x224>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 80031e4:	6838      	ldr	r0, [r7, #0]
 80031e6:	f7ff fdbf 	bl	8002d68 <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer2, __HAL_TIM_GET_AUTORELOAD(&htimer2) - 10);
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <ws2812_refresh+0x224>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <ws2812_refresh+0x224>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3a0a      	subs	r2, #10
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <ws2812_refresh+0x228>)
 80031fa:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80031fe:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer2);
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <ws2812_refresh+0x224>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <ws2812_refresh+0x224>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_ISR_TCIF5 | DMA_ISR_HTIF5))) {
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <ws2812_refresh+0x228>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <ws2812_refresh+0x1c4>
            cycles++;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	3301      	adds	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]
            continue;
 8003222:	e027      	b.n	8003274 <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <ws2812_refresh+0x21c>)
 8003226:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_ISR_TCIF5)
 8003228:	4b17      	ldr	r3, [pc, #92]	; (8003288 <ws2812_refresh+0x228>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3310      	adds	r3, #16
 8003238:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <ws2812_refresh+0x228>)
 800323c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8003240:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e00e      	b.n	8003266 <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6979      	ldr	r1, [r7, #20]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fe51 	bl	8002efc <fill_dma_buffer>
            pos++;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	3301      	adds	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	3308      	adds	r3, #8
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b07      	cmp	r3, #7
 800326a:	dded      	ble.n	8003248 <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	dc0b      	bgt.n	800328c <ws2812_refresh+0x22c>
    while(1) {
 8003274:	e7cc      	b.n	8003210 <ws2812_refresh+0x1b0>
 8003276:	bf00      	nop
 8003278:	20000968 	.word	0x20000968
 800327c:	2000096c 	.word	0x2000096c
 8003280:	0800a5a8 	.word	0x0800a5a8
 8003284:	20001ee8 	.word	0x20001ee8
 8003288:	40020000 	.word	0x40020000
            break;
 800328c:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer2);
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <ws2812_refresh+0x2a0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	f241 1311 	movw	r3, #4369	; 0x1111
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <ws2812_refresh+0x25e>
 800329e:	4b18      	ldr	r3, [pc, #96]	; (8003300 <ws2812_refresh+0x2a0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a1a      	ldr	r2, [r3, #32]
 80032a4:	f240 4344 	movw	r3, #1092	; 0x444
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <ws2812_refresh+0x25e>
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <ws2812_refresh+0x2a0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <ws2812_refresh+0x2a0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <ws2812_refresh+0x2a4>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim2_update);
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <ws2812_refresh+0x2a8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <ws2812_refresh+0x2a8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <ws2812_refresh+0x2ac>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <ws2812_refresh+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <ws2812_refresh+0x2b0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <ws2812_refresh+0x2b0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
}
 80032f8:	bf00      	nop
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20001ee8 	.word	0x20001ee8
 8003304:	20000968 	.word	0x20000968
 8003308:	20001ea4 	.word	0x20001ea4
 800330c:	20001e60 	.word	0x20001e60
 8003310:	20001e1c 	.word	0x20001e1c

08003314 <ws2812_init>:

void ws2812_init()
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <ws2812_init+0x48>)
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4a0f      	ldr	r2, [pc, #60]	; (800335c <ws2812_init+0x48>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6153      	str	r3, [r2, #20]
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <ws2812_init+0x48>)
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	200c      	movs	r0, #12
 8003338:	f000 fcfd 	bl	8003d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2100      	movs	r1, #0
 8003340:	200f      	movs	r0, #15
 8003342:	f000 fcf8 	bl	8003d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	2011      	movs	r0, #17
 800334c:	f000 fcf3 	bl	8003d36 <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8003350:	f7ff fca4 	bl	8002c9c <ws2812_timer2_init>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000

08003360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003360:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003362:	e003      	b.n	800336c <LoopCopyDataInit>

08003364 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003366:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003368:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800336a:	3104      	adds	r1, #4

0800336c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800336c:	480a      	ldr	r0, [pc, #40]	; (8003398 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003370:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003372:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003374:	d3f6      	bcc.n	8003364 <CopyDataInit>
  ldr r2, =_sbss
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003378:	e002      	b.n	8003380 <LoopFillZerobss>

0800337a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800337a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800337c:	f842 3b04 	str.w	r3, [r2], #4

08003380 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003382:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003384:	d3f9      	bcc.n	800337a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003386:	f7ff fc83 	bl	8002c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800338a:	f006 fb91 	bl	8009ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800338e:	f7fd ff61 	bl	8001254 <main>
  bx lr
 8003392:	4770      	bx	lr
  ldr r3, =_sidata
 8003394:	0800a700 	.word	0x0800a700
  ldr r0, =_sdata
 8003398:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800339c:	20000244 	.word	0x20000244
  ldr r2, =_sbss
 80033a0:	20000248 	.word	0x20000248
  ldr r3, = _ebss
 80033a4:	20001f78 	.word	0x20001f78

080033a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033a8:	e7fe      	b.n	80033a8 <ADC1_2_IRQHandler>
	...

080033ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_Init+0x28>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <HAL_Init+0x28>)
 80033b6:	f043 0310 	orr.w	r3, r3, #16
 80033ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033bc:	2003      	movs	r0, #3
 80033be:	f000 fcaf 	bl	8003d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7ff fb82 	bl	8002acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c8:	f7ff f964 	bl	8002694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40022000 	.word	0x40022000

080033d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_IncTick+0x1c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_IncTick+0x20>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <HAL_IncTick+0x20>)
 80033ea:	6013      	str	r3, [r2, #0]
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	2000006c 	.word	0x2000006c
 80033f8:	20001f30 	.word	0x20001f30

080033fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003400:	4b02      	ldr	r3, [pc, #8]	; (800340c <HAL_GetTick+0x10>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	20001f30 	.word	0x20001f30

08003410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff fff0 	bl	80033fc <HAL_GetTick>
 800341c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003428:	d005      	beq.n	8003436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_Delay+0x40>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003436:	bf00      	nop
 8003438:	f7ff ffe0 	bl	80033fc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	429a      	cmp	r2, r3
 8003446:	d8f7      	bhi.n	8003438 <HAL_Delay+0x28>
  {
  }
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	2000006c 	.word	0x2000006c

08003454 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0be      	b.n	80035f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff f936 	bl	8002704 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 faf7 	bl	8003a8c <ADC_ConversionStop_Disable>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 8099 	bne.w	80035e2 <HAL_ADC_Init+0x18e>
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 8095 	bne.w	80035e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034c0:	f023 0302 	bic.w	r3, r3, #2
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7b1b      	ldrb	r3, [r3, #12]
 80034da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ec:	d003      	beq.n	80034f6 <HAL_ADC_Init+0xa2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_ADC_Init+0xa8>
 80034f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034fa:	e000      	b.n	80034fe <HAL_ADC_Init+0xaa>
 80034fc:	2300      	movs	r3, #0
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7d1b      	ldrb	r3, [r3, #20]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d119      	bne.n	8003540 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7b1b      	ldrb	r3, [r3, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	3b01      	subs	r3, #1
 800351a:	035a      	lsls	r2, r3, #13
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e00b      	b.n	8003540 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_ADC_Init+0x1a8>)
 800355c:	4013      	ands	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	430b      	orrs	r3, r1
 8003566:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003570:	d003      	beq.n	800357a <HAL_ADC_Init+0x126>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d104      	bne.n	8003584 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	3b01      	subs	r3, #1
 8003580:	051b      	lsls	r3, r3, #20
 8003582:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	430a      	orrs	r2, r1
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_ADC_Init+0x1ac>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d10b      	bne.n	80035c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035be:	e018      	b.n	80035f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f023 0312 	bic.w	r3, r3, #18
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035e0:	e007      	b.n	80035f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	ffe1f7fd 	.word	0xffe1f7fd
 8003600:	ff1f0efe 	.word	0xff1f0efe

08003604 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a64      	ldr	r2, [pc, #400]	; (80037ac <HAL_ADC_Start_DMA+0x1a8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_ADC_Start_DMA+0x24>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a63      	ldr	r2, [pc, #396]	; (80037b0 <HAL_ADC_Start_DMA+0x1ac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d106      	bne.n	8003636 <HAL_ADC_Start_DMA+0x32>
 8003628:	4b60      	ldr	r3, [pc, #384]	; (80037ac <HAL_ADC_Start_DMA+0x1a8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 80b3 	bne.w	800379c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_ADC_Start_DMA+0x40>
 8003640:	2302      	movs	r3, #2
 8003642:	e0ae      	b.n	80037a2 <HAL_ADC_Start_DMA+0x19e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f9cb 	bl	80039e8 <ADC_Enable>
 8003652:	4603      	mov	r3, r0
 8003654:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f040 809a 	bne.w	8003792 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a4e      	ldr	r2, [pc, #312]	; (80037b0 <HAL_ADC_Start_DMA+0x1ac>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d105      	bne.n	8003688 <HAL_ADC_Start_DMA+0x84>
 800367c:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <HAL_ADC_Start_DMA+0x1a8>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d115      	bne.n	80036b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d026      	beq.n	80036f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036b2:	e01d      	b.n	80036f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a39      	ldr	r2, [pc, #228]	; (80037ac <HAL_ADC_Start_DMA+0x1a8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <HAL_ADC_Start_DMA+0xd0>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <HAL_ADC_Start_DMA+0x1ac>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d10d      	bne.n	80036f0 <HAL_ADC_Start_DMA+0xec>
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <HAL_ADC_Start_DMA+0x1a8>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d006      	beq.n	800370a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	f023 0206 	bic.w	r2, r3, #6
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c
 8003708:	e002      	b.n	8003710 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <HAL_ADC_Start_DMA+0x1b0>)
 800371e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4a24      	ldr	r2, [pc, #144]	; (80037b8 <HAL_ADC_Start_DMA+0x1b4>)
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_ADC_Start_DMA+0x1b8>)
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0202 	mvn.w	r2, #2
 8003738:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003748:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a18      	ldr	r0, [r3, #32]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	334c      	adds	r3, #76	; 0x4c
 8003754:	4619      	mov	r1, r3
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f000 fbb3 	bl	8003ec4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003768:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800376c:	d108      	bne.n	8003780 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800377c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800377e:	e00f      	b.n	80037a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800378e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003790:	e006      	b.n	80037a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800379a:	e001      	b.n	80037a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40012400 	.word	0x40012400
 80037b0:	40012800 	.word	0x40012800
 80037b4:	08003b01 	.word	0x08003b01
 80037b8:	08003b7d 	.word	0x08003b7d
 80037bc:	08003b99 	.word	0x08003b99

080037c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x20>
 8003814:	2302      	movs	r3, #2
 8003816:	e0dc      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x1da>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d81c      	bhi.n	8003862 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	3b05      	subs	r3, #5
 800383a:	221f      	movs	r2, #31
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	4019      	ands	r1, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	3b05      	subs	r3, #5
 8003854:	fa00 f203 	lsl.w	r2, r0, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	635a      	str	r2, [r3, #52]	; 0x34
 8003860:	e03c      	b.n	80038dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d81c      	bhi.n	80038a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	3b23      	subs	r3, #35	; 0x23
 800387c:	221f      	movs	r2, #31
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	4019      	ands	r1, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3b23      	subs	r3, #35	; 0x23
 8003896:	fa00 f203 	lsl.w	r2, r0, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
 80038a2:	e01b      	b.n	80038dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	3b41      	subs	r3, #65	; 0x41
 80038b6:	221f      	movs	r2, #31
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	4019      	ands	r1, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	3b41      	subs	r3, #65	; 0x41
 80038d0:	fa00 f203 	lsl.w	r2, r0, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b09      	cmp	r3, #9
 80038e2:	d91c      	bls.n	800391e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68d9      	ldr	r1, [r3, #12]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	3b1e      	subs	r3, #30
 80038f6:	2207      	movs	r2, #7
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	4019      	ands	r1, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6898      	ldr	r0, [r3, #8]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	3b1e      	subs	r3, #30
 8003910:	fa00 f203 	lsl.w	r2, r0, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	e019      	b.n	8003952 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6919      	ldr	r1, [r3, #16]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	2207      	movs	r2, #7
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	4019      	ands	r1, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6898      	ldr	r0, [r3, #8]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	fa00 f203 	lsl.w	r2, r0, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b10      	cmp	r3, #16
 8003958:	d003      	beq.n	8003962 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800395e:	2b11      	cmp	r3, #17
 8003960:	d132      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <HAL_ADC_ConfigChannel+0x1e4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d125      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d126      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003988:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b10      	cmp	r3, #16
 8003990:	d11a      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	0c9a      	lsrs	r2, r3, #18
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039a8:	e002      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f9      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x1b2>
 80039b6:	e007      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	40012400 	.word	0x40012400
 80039e0:	20000064 	.word	0x20000064
 80039e4:	431bde83 	.word	0x431bde83

080039e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d039      	beq.n	8003a7a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <ADC_Enable+0x9c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <ADC_Enable+0xa0>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	0c9b      	lsrs	r3, r3, #18
 8003a22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a24:	e002      	b.n	8003a2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f9      	bne.n	8003a26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a32:	f7ff fce3 	bl	80033fc <HAL_GetTick>
 8003a36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a38:	e018      	b.n	8003a6c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a3a:	f7ff fcdf 	bl	80033fc <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d911      	bls.n	8003a6c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f043 0210 	orr.w	r2, r3, #16
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e007      	b.n	8003a7c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d1df      	bne.n	8003a3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000064 	.word	0x20000064
 8003a88:	431bde83 	.word	0x431bde83

08003a8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d127      	bne.n	8003af6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ab6:	f7ff fca1 	bl	80033fc <HAL_GetTick>
 8003aba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003abc:	e014      	b.n	8003ae8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003abe:	f7ff fc9d 	bl	80033fc <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d90d      	bls.n	8003ae8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	f043 0210 	orr.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e007      	b.n	8003af8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d0e3      	beq.n	8003abe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d127      	bne.n	8003b6a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b30:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b34:	d115      	bne.n	8003b62 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d111      	bne.n	8003b62 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d105      	bne.n	8003b62 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff fe2c 	bl	80037c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003b68:	e004      	b.n	8003b74 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff fe21 	bl	80037d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	f043 0204 	orr.w	r2, r3, #4
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff fe10 	bl	80037e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <__NVIC_SetPriorityGrouping+0x44>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003be8:	4013      	ands	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bfe:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <__NVIC_SetPriorityGrouping+0x44>)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	60d3      	str	r3, [r2, #12]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <__NVIC_GetPriorityGrouping+0x18>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	f003 0307 	and.w	r3, r3, #7
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	db0b      	blt.n	8003c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	4906      	ldr	r1, [pc, #24]	; (8003c64 <__NVIC_EnableIRQ+0x34>)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2001      	movs	r0, #1
 8003c52:	fa00 f202 	lsl.w	r2, r0, r2
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	e000e100 	.word	0xe000e100

08003c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db0a      	blt.n	8003c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	490c      	ldr	r1, [pc, #48]	; (8003cb4 <__NVIC_SetPriority+0x4c>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c90:	e00a      	b.n	8003ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4908      	ldr	r1, [pc, #32]	; (8003cb8 <__NVIC_SetPriority+0x50>)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	0112      	lsls	r2, r2, #4
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	761a      	strb	r2, [r3, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f1c3 0307 	rsb	r3, r3, #7
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	bf28      	it	cs
 8003cda:	2304      	movcs	r3, #4
 8003cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d902      	bls.n	8003cec <NVIC_EncodePriority+0x30>
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3b03      	subs	r3, #3
 8003cea:	e000      	b.n	8003cee <NVIC_EncodePriority+0x32>
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	401a      	ands	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43d9      	mvns	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	4313      	orrs	r3, r2
         );
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff4f 	bl	8003bcc <__NVIC_SetPriorityGrouping>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d48:	f7ff ff64 	bl	8003c14 <__NVIC_GetPriorityGrouping>
 8003d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff ffb2 	bl	8003cbc <NVIC_EncodePriority>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff81 	bl	8003c68 <__NVIC_SetPriority>
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff57 	bl	8003c30 <__NVIC_EnableIRQ>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e043      	b.n	8003e2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_DMA_Init+0xa8>)
 8003daa:	4413      	add	r3, r2
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMA_Init+0xac>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	009a      	lsls	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_DMA_Init+0xb0>)
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr
 8003e34:	bffdfff8 	.word	0xbffdfff8
 8003e38:	cccccccd 	.word	0xcccccccd
 8003e3c:	40020000 	.word	0x40020000

08003e40 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_DMA_Start+0x20>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e02d      	b.n	8003ebc <HAL_DMA_Start+0x7c>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d11d      	bne.n	8003eae <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f9f0 	bl	800427c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e005      	b.n	8003eba <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_DMA_Start_IT+0x20>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e04a      	b.n	8003f7a <HAL_DMA_Start_IT+0xb6>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d13a      	bne.n	8003f6c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f9ae 	bl	800427c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 020e 	orr.w	r2, r2, #14
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e00f      	b.n	8003f5a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0204 	bic.w	r2, r2, #4
 8003f48:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 020a 	orr.w	r2, r2, #10
 8003f58:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e005      	b.n	8003f78 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
 8003f76:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d005      	beq.n	8003fa6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	e051      	b.n	800404a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 020e 	bic.w	r2, r2, #14
 8003fb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_DMA_Abort_IT+0xd0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d029      	beq.n	8004024 <HAL_DMA_Abort_IT+0xa0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <HAL_DMA_Abort_IT+0xd4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d022      	beq.n	8004020 <HAL_DMA_Abort_IT+0x9c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1f      	ldr	r2, [pc, #124]	; (800405c <HAL_DMA_Abort_IT+0xd8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01a      	beq.n	800401a <HAL_DMA_Abort_IT+0x96>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <HAL_DMA_Abort_IT+0xdc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d012      	beq.n	8004014 <HAL_DMA_Abort_IT+0x90>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <HAL_DMA_Abort_IT+0xe0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00a      	beq.n	800400e <HAL_DMA_Abort_IT+0x8a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <HAL_DMA_Abort_IT+0xe4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d102      	bne.n	8004008 <HAL_DMA_Abort_IT+0x84>
 8004002:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004006:	e00e      	b.n	8004026 <HAL_DMA_Abort_IT+0xa2>
 8004008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800400c:	e00b      	b.n	8004026 <HAL_DMA_Abort_IT+0xa2>
 800400e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004012:	e008      	b.n	8004026 <HAL_DMA_Abort_IT+0xa2>
 8004014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004018:	e005      	b.n	8004026 <HAL_DMA_Abort_IT+0xa2>
 800401a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800401e:	e002      	b.n	8004026 <HAL_DMA_Abort_IT+0xa2>
 8004020:	2310      	movs	r3, #16
 8004022:	e000      	b.n	8004026 <HAL_DMA_Abort_IT+0xa2>
 8004024:	2301      	movs	r3, #1
 8004026:	4a11      	ldr	r2, [pc, #68]	; (800406c <HAL_DMA_Abort_IT+0xe8>)
 8004028:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
    } 
  }
  return status;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40020008 	.word	0x40020008
 8004058:	4002001c 	.word	0x4002001c
 800405c:	40020030 	.word	0x40020030
 8004060:	40020044 	.word	0x40020044
 8004064:	40020058 	.word	0x40020058
 8004068:	4002006c 	.word	0x4002006c
 800406c:	40020000 	.word	0x40020000

08004070 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2204      	movs	r2, #4
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04f      	beq.n	8004138 <HAL_DMA_IRQHandler+0xc8>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04a      	beq.n	8004138 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0204 	bic.w	r2, r2, #4
 80040be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a66      	ldr	r2, [pc, #408]	; (8004260 <HAL_DMA_IRQHandler+0x1f0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d029      	beq.n	800411e <HAL_DMA_IRQHandler+0xae>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a65      	ldr	r2, [pc, #404]	; (8004264 <HAL_DMA_IRQHandler+0x1f4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_IRQHandler+0xaa>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a63      	ldr	r2, [pc, #396]	; (8004268 <HAL_DMA_IRQHandler+0x1f8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01a      	beq.n	8004114 <HAL_DMA_IRQHandler+0xa4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a62      	ldr	r2, [pc, #392]	; (800426c <HAL_DMA_IRQHandler+0x1fc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d012      	beq.n	800410e <HAL_DMA_IRQHandler+0x9e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a60      	ldr	r2, [pc, #384]	; (8004270 <HAL_DMA_IRQHandler+0x200>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00a      	beq.n	8004108 <HAL_DMA_IRQHandler+0x98>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a5f      	ldr	r2, [pc, #380]	; (8004274 <HAL_DMA_IRQHandler+0x204>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d102      	bne.n	8004102 <HAL_DMA_IRQHandler+0x92>
 80040fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004100:	e00e      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 8004102:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004106:	e00b      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 8004108:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800410c:	e008      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 800410e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004112:	e005      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 8004114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004118:	e002      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 800411a:	2340      	movs	r3, #64	; 0x40
 800411c:	e000      	b.n	8004120 <HAL_DMA_IRQHandler+0xb0>
 800411e:	2304      	movs	r3, #4
 8004120:	4a55      	ldr	r2, [pc, #340]	; (8004278 <HAL_DMA_IRQHandler+0x208>)
 8004122:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8094 	beq.w	8004256 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004136:	e08e      	b.n	8004256 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2202      	movs	r2, #2
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d056      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x186>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d051      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 020a 	bic.w	r2, r2, #10
 800416e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a38      	ldr	r2, [pc, #224]	; (8004260 <HAL_DMA_IRQHandler+0x1f0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d029      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x166>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a37      	ldr	r2, [pc, #220]	; (8004264 <HAL_DMA_IRQHandler+0x1f4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x162>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a35      	ldr	r2, [pc, #212]	; (8004268 <HAL_DMA_IRQHandler+0x1f8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01a      	beq.n	80041cc <HAL_DMA_IRQHandler+0x15c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a34      	ldr	r2, [pc, #208]	; (800426c <HAL_DMA_IRQHandler+0x1fc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d012      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x156>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a32      	ldr	r2, [pc, #200]	; (8004270 <HAL_DMA_IRQHandler+0x200>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00a      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x150>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a31      	ldr	r2, [pc, #196]	; (8004274 <HAL_DMA_IRQHandler+0x204>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d102      	bne.n	80041ba <HAL_DMA_IRQHandler+0x14a>
 80041b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041b8:	e00e      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041be:	e00b      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c4:	e008      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ca:	e005      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d0:	e002      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041d2:	2320      	movs	r3, #32
 80041d4:	e000      	b.n	80041d8 <HAL_DMA_IRQHandler+0x168>
 80041d6:	2302      	movs	r3, #2
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <HAL_DMA_IRQHandler+0x208>)
 80041da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d034      	beq.n	8004256 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041f4:	e02f      	b.n	8004256 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2208      	movs	r2, #8
 80041fc:	409a      	lsls	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d028      	beq.n	8004258 <HAL_DMA_IRQHandler+0x1e8>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 020e 	bic.w	r2, r2, #14
 800421e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f202 	lsl.w	r2, r1, r2
 800422e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
    }
  }
  return;
 8004256:	bf00      	nop
 8004258:	bf00      	nop
}
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40020008 	.word	0x40020008
 8004264:	4002001c 	.word	0x4002001c
 8004268:	40020030 	.word	0x40020030
 800426c:	40020044 	.word	0x40020044
 8004270:	40020058 	.word	0x40020058
 8004274:	4002006c 	.word	0x4002006c
 8004278:	40020000 	.word	0x40020000

0800427c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	2101      	movs	r1, #1
 8004294:	fa01 f202 	lsl.w	r2, r1, r2
 8004298:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d108      	bne.n	80042bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042ba:	e007      	b.n	80042cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d8:	b480      	push	{r7}
 80042da:	b08b      	sub	sp, #44	; 0x2c
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042e6:	2300      	movs	r3, #0
 80042e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ea:	e127      	b.n	800453c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042ec:	2201      	movs	r2, #1
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	429a      	cmp	r2, r3
 8004306:	f040 8116 	bne.w	8004536 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b12      	cmp	r3, #18
 8004310:	d034      	beq.n	800437c <HAL_GPIO_Init+0xa4>
 8004312:	2b12      	cmp	r3, #18
 8004314:	d80d      	bhi.n	8004332 <HAL_GPIO_Init+0x5a>
 8004316:	2b02      	cmp	r3, #2
 8004318:	d02b      	beq.n	8004372 <HAL_GPIO_Init+0x9a>
 800431a:	2b02      	cmp	r3, #2
 800431c:	d804      	bhi.n	8004328 <HAL_GPIO_Init+0x50>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d031      	beq.n	8004386 <HAL_GPIO_Init+0xae>
 8004322:	2b01      	cmp	r3, #1
 8004324:	d01c      	beq.n	8004360 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004326:	e048      	b.n	80043ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004328:	2b03      	cmp	r3, #3
 800432a:	d043      	beq.n	80043b4 <HAL_GPIO_Init+0xdc>
 800432c:	2b11      	cmp	r3, #17
 800432e:	d01b      	beq.n	8004368 <HAL_GPIO_Init+0x90>
          break;
 8004330:	e043      	b.n	80043ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004332:	4a89      	ldr	r2, [pc, #548]	; (8004558 <HAL_GPIO_Init+0x280>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d026      	beq.n	8004386 <HAL_GPIO_Init+0xae>
 8004338:	4a87      	ldr	r2, [pc, #540]	; (8004558 <HAL_GPIO_Init+0x280>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d806      	bhi.n	800434c <HAL_GPIO_Init+0x74>
 800433e:	4a87      	ldr	r2, [pc, #540]	; (800455c <HAL_GPIO_Init+0x284>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d020      	beq.n	8004386 <HAL_GPIO_Init+0xae>
 8004344:	4a86      	ldr	r2, [pc, #536]	; (8004560 <HAL_GPIO_Init+0x288>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01d      	beq.n	8004386 <HAL_GPIO_Init+0xae>
          break;
 800434a:	e036      	b.n	80043ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800434c:	4a85      	ldr	r2, [pc, #532]	; (8004564 <HAL_GPIO_Init+0x28c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d019      	beq.n	8004386 <HAL_GPIO_Init+0xae>
 8004352:	4a85      	ldr	r2, [pc, #532]	; (8004568 <HAL_GPIO_Init+0x290>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d016      	beq.n	8004386 <HAL_GPIO_Init+0xae>
 8004358:	4a84      	ldr	r2, [pc, #528]	; (800456c <HAL_GPIO_Init+0x294>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_GPIO_Init+0xae>
          break;
 800435e:	e02c      	b.n	80043ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	623b      	str	r3, [r7, #32]
          break;
 8004366:	e028      	b.n	80043ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	3304      	adds	r3, #4
 800436e:	623b      	str	r3, [r7, #32]
          break;
 8004370:	e023      	b.n	80043ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	3308      	adds	r3, #8
 8004378:	623b      	str	r3, [r7, #32]
          break;
 800437a:	e01e      	b.n	80043ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	330c      	adds	r3, #12
 8004382:	623b      	str	r3, [r7, #32]
          break;
 8004384:	e019      	b.n	80043ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800438e:	2304      	movs	r3, #4
 8004390:	623b      	str	r3, [r7, #32]
          break;
 8004392:	e012      	b.n	80043ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800439c:	2308      	movs	r3, #8
 800439e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	611a      	str	r2, [r3, #16]
          break;
 80043a6:	e008      	b.n	80043ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043a8:	2308      	movs	r3, #8
 80043aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	615a      	str	r2, [r3, #20]
          break;
 80043b2:	e002      	b.n	80043ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043b4:	2300      	movs	r3, #0
 80043b6:	623b      	str	r3, [r7, #32]
          break;
 80043b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2bff      	cmp	r3, #255	; 0xff
 80043be:	d801      	bhi.n	80043c4 <HAL_GPIO_Init+0xec>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	e001      	b.n	80043c8 <HAL_GPIO_Init+0xf0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2bff      	cmp	r3, #255	; 0xff
 80043ce:	d802      	bhi.n	80043d6 <HAL_GPIO_Init+0xfe>
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	e002      	b.n	80043dc <HAL_GPIO_Init+0x104>
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	3b08      	subs	r3, #8
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	210f      	movs	r1, #15
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	401a      	ands	r2, r3
 80043ee:	6a39      	ldr	r1, [r7, #32]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	431a      	orrs	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8096 	beq.w	8004536 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800440a:	4b59      	ldr	r3, [pc, #356]	; (8004570 <HAL_GPIO_Init+0x298>)
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	4a58      	ldr	r2, [pc, #352]	; (8004570 <HAL_GPIO_Init+0x298>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6193      	str	r3, [r2, #24]
 8004416:	4b56      	ldr	r3, [pc, #344]	; (8004570 <HAL_GPIO_Init+0x298>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004422:	4a54      	ldr	r2, [pc, #336]	; (8004574 <HAL_GPIO_Init+0x29c>)
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	3302      	adds	r3, #2
 800442a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	220f      	movs	r2, #15
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4013      	ands	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a4b      	ldr	r2, [pc, #300]	; (8004578 <HAL_GPIO_Init+0x2a0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_GPIO_Init+0x19e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4a      	ldr	r2, [pc, #296]	; (800457c <HAL_GPIO_Init+0x2a4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00d      	beq.n	8004472 <HAL_GPIO_Init+0x19a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a49      	ldr	r2, [pc, #292]	; (8004580 <HAL_GPIO_Init+0x2a8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d007      	beq.n	800446e <HAL_GPIO_Init+0x196>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a48      	ldr	r2, [pc, #288]	; (8004584 <HAL_GPIO_Init+0x2ac>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <HAL_GPIO_Init+0x192>
 8004466:	2303      	movs	r3, #3
 8004468:	e006      	b.n	8004478 <HAL_GPIO_Init+0x1a0>
 800446a:	2304      	movs	r3, #4
 800446c:	e004      	b.n	8004478 <HAL_GPIO_Init+0x1a0>
 800446e:	2302      	movs	r3, #2
 8004470:	e002      	b.n	8004478 <HAL_GPIO_Init+0x1a0>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_GPIO_Init+0x1a0>
 8004476:	2300      	movs	r3, #0
 8004478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447a:	f002 0203 	and.w	r2, r2, #3
 800447e:	0092      	lsls	r2, r2, #2
 8004480:	4093      	lsls	r3, r2
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004488:	493a      	ldr	r1, [pc, #232]	; (8004574 <HAL_GPIO_Init+0x29c>)
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	3302      	adds	r3, #2
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80044a2:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4938      	ldr	r1, [pc, #224]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
 80044ae:	e006      	b.n	80044be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80044b0:	4b35      	ldr	r3, [pc, #212]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	4933      	ldr	r1, [pc, #204]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044ca:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	492e      	ldr	r1, [pc, #184]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
 80044d6:	e006      	b.n	80044e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044d8:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	43db      	mvns	r3, r3
 80044e0:	4929      	ldr	r1, [pc, #164]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d006      	beq.n	8004500 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044f2:	4b25      	ldr	r3, [pc, #148]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	4924      	ldr	r1, [pc, #144]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
 80044fe:	e006      	b.n	800450e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	43db      	mvns	r3, r3
 8004508:	491f      	ldr	r1, [pc, #124]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 800450a:	4013      	ands	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d006      	beq.n	8004528 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	491a      	ldr	r1, [pc, #104]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	60cb      	str	r3, [r1, #12]
 8004526:	e006      	b.n	8004536 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004528:	4b17      	ldr	r3, [pc, #92]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	43db      	mvns	r3, r3
 8004530:	4915      	ldr	r1, [pc, #84]	; (8004588 <HAL_GPIO_Init+0x2b0>)
 8004532:	4013      	ands	r3, r2
 8004534:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	3301      	adds	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	f47f aed0 	bne.w	80042ec <HAL_GPIO_Init+0x14>
  }
}
 800454c:	bf00      	nop
 800454e:	372c      	adds	r7, #44	; 0x2c
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	10210000 	.word	0x10210000
 800455c:	10110000 	.word	0x10110000
 8004560:	10120000 	.word	0x10120000
 8004564:	10310000 	.word	0x10310000
 8004568:	10320000 	.word	0x10320000
 800456c:	10220000 	.word	0x10220000
 8004570:	40021000 	.word	0x40021000
 8004574:	40010000 	.word	0x40010000
 8004578:	40010800 	.word	0x40010800
 800457c:	40010c00 	.word	0x40010c00
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	40010400 	.word	0x40010400

0800458c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	807b      	strh	r3, [r7, #2]
 8004598:	4613      	mov	r3, r2
 800459a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800459c:	787b      	ldrb	r3, [r7, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045a8:	e003      	b.n	80045b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045aa:	887b      	ldrh	r3, [r7, #2]
 80045ac:	041a      	lsls	r2, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e26c      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8087 	beq.w	80046ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045dc:	4b92      	ldr	r3, [pc, #584]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d00c      	beq.n	8004602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045e8:	4b8f      	ldr	r3, [pc, #572]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d112      	bne.n	800461a <HAL_RCC_OscConfig+0x5e>
 80045f4:	4b8c      	ldr	r3, [pc, #560]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004600:	d10b      	bne.n	800461a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004602:	4b89      	ldr	r3, [pc, #548]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d06c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x12c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d168      	bne.n	80046e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e246      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x76>
 8004624:	4b80      	ldr	r3, [pc, #512]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7f      	ldr	r2, [pc, #508]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e02e      	b.n	8004690 <HAL_RCC_OscConfig+0xd4>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10c      	bne.n	8004654 <HAL_RCC_OscConfig+0x98>
 800463a:	4b7b      	ldr	r3, [pc, #492]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7a      	ldr	r2, [pc, #488]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4b78      	ldr	r3, [pc, #480]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a77      	ldr	r2, [pc, #476]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800464c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e01d      	b.n	8004690 <HAL_RCC_OscConfig+0xd4>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800465c:	d10c      	bne.n	8004678 <HAL_RCC_OscConfig+0xbc>
 800465e:	4b72      	ldr	r3, [pc, #456]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a71      	ldr	r2, [pc, #452]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b6f      	ldr	r3, [pc, #444]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6e      	ldr	r2, [pc, #440]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0xd4>
 8004678:	4b6b      	ldr	r3, [pc, #428]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6a      	ldr	r2, [pc, #424]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800467e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b68      	ldr	r3, [pc, #416]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a67      	ldr	r2, [pc, #412]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800468a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800468e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fe feb0 	bl	80033fc <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a0:	f7fe feac 	bl	80033fc <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e1fa      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	4b5d      	ldr	r3, [pc, #372]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0xe4>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fe fe9c 	bl	80033fc <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c8:	f7fe fe98 	bl	80033fc <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e1e6      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046da:	4b53      	ldr	r3, [pc, #332]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x10c>
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d063      	beq.n	80047be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046f6:	4b4c      	ldr	r3, [pc, #304]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00b      	beq.n	800471a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004702:	4b49      	ldr	r3, [pc, #292]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b08      	cmp	r3, #8
 800470c:	d11c      	bne.n	8004748 <HAL_RCC_OscConfig+0x18c>
 800470e:	4b46      	ldr	r3, [pc, #280]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d116      	bne.n	8004748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471a:	4b43      	ldr	r3, [pc, #268]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_RCC_OscConfig+0x176>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e1ba      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004732:	4b3d      	ldr	r3, [pc, #244]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4939      	ldr	r1, [pc, #228]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004746:	e03a      	b.n	80047be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d020      	beq.n	8004792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <HAL_RCC_OscConfig+0x270>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fe fe51 	bl	80033fc <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475e:	f7fe fe4d 	bl	80033fc <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e19b      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004770:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477c:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4927      	ldr	r1, [pc, #156]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 800478c:	4313      	orrs	r3, r2
 800478e:	600b      	str	r3, [r1, #0]
 8004790:	e015      	b.n	80047be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <HAL_RCC_OscConfig+0x270>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fe fe30 	bl	80033fc <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a0:	f7fe fe2c 	bl	80033fc <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e17a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03a      	beq.n	8004840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d019      	beq.n	8004806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <HAL_RCC_OscConfig+0x274>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d8:	f7fe fe10 	bl	80033fc <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e0:	f7fe fe0c 	bl	80033fc <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e15a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047fe:	2001      	movs	r0, #1
 8004800:	f000 fb0a 	bl	8004e18 <RCC_Delay>
 8004804:	e01c      	b.n	8004840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_RCC_OscConfig+0x274>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fe fdf6 	bl	80033fc <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004812:	e00f      	b.n	8004834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004814:	f7fe fdf2 	bl	80033fc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d908      	bls.n	8004834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e140      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
 800482c:	42420000 	.word	0x42420000
 8004830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004834:	4b9e      	ldr	r3, [pc, #632]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e9      	bne.n	8004814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a6 	beq.w	800499a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004852:	4b97      	ldr	r3, [pc, #604]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10d      	bne.n	800487a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485e:	4b94      	ldr	r3, [pc, #592]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4a93      	ldr	r2, [pc, #588]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	61d3      	str	r3, [r2, #28]
 800486a:	4b91      	ldr	r3, [pc, #580]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b8e      	ldr	r3, [pc, #568]	; (8004ab4 <HAL_RCC_OscConfig+0x4f8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d118      	bne.n	80048b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004886:	4b8b      	ldr	r3, [pc, #556]	; (8004ab4 <HAL_RCC_OscConfig+0x4f8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a8a      	ldr	r2, [pc, #552]	; (8004ab4 <HAL_RCC_OscConfig+0x4f8>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fe fdb3 	bl	80033fc <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489a:	f7fe fdaf 	bl	80033fc <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b64      	cmp	r3, #100	; 0x64
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e0fd      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	4b81      	ldr	r3, [pc, #516]	; (8004ab4 <HAL_RCC_OscConfig+0x4f8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x312>
 80048c0:	4b7b      	ldr	r3, [pc, #492]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	4a7a      	ldr	r2, [pc, #488]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6213      	str	r3, [r2, #32]
 80048cc:	e02d      	b.n	800492a <HAL_RCC_OscConfig+0x36e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x334>
 80048d6:	4b76      	ldr	r3, [pc, #472]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	4a75      	ldr	r2, [pc, #468]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	6213      	str	r3, [r2, #32]
 80048e2:	4b73      	ldr	r3, [pc, #460]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4a72      	ldr	r2, [pc, #456]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80048e8:	f023 0304 	bic.w	r3, r3, #4
 80048ec:	6213      	str	r3, [r2, #32]
 80048ee:	e01c      	b.n	800492a <HAL_RCC_OscConfig+0x36e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d10c      	bne.n	8004912 <HAL_RCC_OscConfig+0x356>
 80048f8:	4b6d      	ldr	r3, [pc, #436]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4a6c      	ldr	r2, [pc, #432]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	6213      	str	r3, [r2, #32]
 8004904:	4b6a      	ldr	r3, [pc, #424]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	4a69      	ldr	r2, [pc, #420]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6213      	str	r3, [r2, #32]
 8004910:	e00b      	b.n	800492a <HAL_RCC_OscConfig+0x36e>
 8004912:	4b67      	ldr	r3, [pc, #412]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4a66      	ldr	r2, [pc, #408]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	6213      	str	r3, [r2, #32]
 800491e:	4b64      	ldr	r3, [pc, #400]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d015      	beq.n	800495e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004932:	f7fe fd63 	bl	80033fc <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004938:	e00a      	b.n	8004950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493a:	f7fe fd5f 	bl	80033fc <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	f241 3288 	movw	r2, #5000	; 0x1388
 8004948:	4293      	cmp	r3, r2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e0ab      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004950:	4b57      	ldr	r3, [pc, #348]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ee      	beq.n	800493a <HAL_RCC_OscConfig+0x37e>
 800495c:	e014      	b.n	8004988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495e:	f7fe fd4d 	bl	80033fc <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004964:	e00a      	b.n	800497c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fe fd49 	bl	80033fc <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e095      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497c:	4b4c      	ldr	r3, [pc, #304]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ee      	bne.n	8004966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d105      	bne.n	800499a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498e:	4b48      	ldr	r3, [pc, #288]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	4a47      	ldr	r2, [pc, #284]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8081 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d061      	beq.n	8004a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d146      	bne.n	8004a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b8:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <HAL_RCC_OscConfig+0x4fc>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049be:	f7fe fd1d 	bl	80033fc <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c6:	f7fe fd19 	bl	80033fc <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e067      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049d8:	4b35      	ldr	r3, [pc, #212]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f0      	bne.n	80049c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ec:	d108      	bne.n	8004a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049ee:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	492d      	ldr	r1, [pc, #180]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a00:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a19      	ldr	r1, [r3, #32]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	430b      	orrs	r3, r1
 8004a12:	4927      	ldr	r1, [pc, #156]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a18:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <HAL_RCC_OscConfig+0x4fc>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fced 	bl	80033fc <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fe fce9 	bl	80033fc <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e037      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a38:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x46a>
 8004a44:	e02f      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <HAL_RCC_OscConfig+0x4fc>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fe fcd6 	bl	80033fc <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fe fcd2 	bl	80033fc <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e020      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x498>
 8004a72:	e018      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e013      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_OscConfig+0x4f4>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d001      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42420060 	.word	0x42420060

08004abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0d0      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d910      	bls.n	8004b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b67      	ldr	r3, [pc, #412]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 0207 	bic.w	r2, r3, #7
 8004ae6:	4965      	ldr	r1, [pc, #404]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aee:	4b63      	ldr	r3, [pc, #396]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0b8      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b18:	4b59      	ldr	r3, [pc, #356]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4a58      	ldr	r2, [pc, #352]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b30:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a52      	ldr	r2, [pc, #328]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b3c:	4b50      	ldr	r3, [pc, #320]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	494d      	ldr	r1, [pc, #308]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d040      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	4b47      	ldr	r3, [pc, #284]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d115      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e07f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d107      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7a:	4b41      	ldr	r3, [pc, #260]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e073      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e06b      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9a:	4b39      	ldr	r3, [pc, #228]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f023 0203 	bic.w	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	4936      	ldr	r1, [pc, #216]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bac:	f7fe fc26 	bl	80033fc <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb4:	f7fe fc22 	bl	80033fc <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e053      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bca:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 020c 	and.w	r2, r3, #12
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d1eb      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d210      	bcs.n	8004c0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 0207 	bic.w	r2, r3, #7
 8004bf2:	4922      	ldr	r1, [pc, #136]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e032      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4916      	ldr	r1, [pc, #88]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c36:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	490e      	ldr	r1, [pc, #56]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c4a:	f000 f821 	bl	8004c90 <HAL_RCC_GetSysClockFreq>
 8004c4e:	4601      	mov	r1, r0
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5c:	5cd3      	ldrb	r3, [r2, r3]
 8004c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c62:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <HAL_RCC_ClockConfig+0x1cc>)
 8004c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <HAL_RCC_ClockConfig+0x1d0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fd ff2e 	bl	8002acc <HAL_InitTick>

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40021000 	.word	0x40021000
 8004c84:	0800a590 	.word	0x0800a590
 8004c88:	20000064 	.word	0x20000064
 8004c8c:	20000068 	.word	0x20000068

08004c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c90:	b490      	push	{r4, r7}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c96:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c98:	1d3c      	adds	r4, r7, #4
 8004c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ca0:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cba:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d002      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x46>
 8004cce:	e02d      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cd0:	4b1e      	ldr	r3, [pc, #120]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cd2:	623b      	str	r3, [r7, #32]
      break;
 8004cd4:	e02d      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	0c9b      	lsrs	r3, r3, #18
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ce8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cf4:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	0c5b      	lsrs	r3, r3, #17
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d02:	4413      	add	r3, r2
 8004d04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d0e:	fb02 f203 	mul.w	r2, r2, r3
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e004      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	623b      	str	r3, [r7, #32]
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d2e:	623b      	str	r3, [r7, #32]
      break;
 8004d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d32:	6a3b      	ldr	r3, [r7, #32]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3728      	adds	r7, #40	; 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc90      	pop	{r4, r7}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	0800a560 	.word	0x0800a560
 8004d44:	0800a570 	.word	0x0800a570
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	007a1200 	.word	0x007a1200
 8004d50:	003d0900 	.word	0x003d0900

08004d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d58:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	20000064 	.word	0x20000064

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d6c:	f7ff fff2 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004d70:	4601      	mov	r1, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4a03      	ldr	r2, [pc, #12]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7e:	5cd3      	ldrb	r3, [r2, r3]
 8004d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	0800a5a0 	.word	0x0800a5a0

08004d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d94:	f7ff ffde 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004d98:	4601      	mov	r1, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	0adb      	lsrs	r3, r3, #11
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4a03      	ldr	r2, [pc, #12]	; (8004db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da6:	5cd3      	ldrb	r3, [r2, r3]
 8004da8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40021000 	.word	0x40021000
 8004db4:	0800a5a0 	.word	0x0800a5a0

08004db8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dc8:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <HAL_RCC_GetClockConfig+0x58>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <HAL_RCC_GetClockConfig+0x58>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_RCC_GetClockConfig+0x58>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004dec:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <HAL_RCC_GetClockConfig+0x58>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0207 	and.w	r2, r3, #7
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	40021000 	.word	0x40021000
 8004e14:	40022000 	.word	0x40022000

08004e18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <RCC_Delay+0x34>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <RCC_Delay+0x38>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0a5b      	lsrs	r3, r3, #9
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e34:	bf00      	nop
  }
  while (Delay --);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1e5a      	subs	r2, r3, #1
 8004e3a:	60fa      	str	r2, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f9      	bne.n	8004e34 <RCC_Delay+0x1c>
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000064 	.word	0x20000064
 8004e50:	10624dd3 	.word	0x10624dd3

08004e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d07d      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e74:	4b4f      	ldr	r3, [pc, #316]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4a4b      	ldr	r2, [pc, #300]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	61d3      	str	r3, [r2, #28]
 8004e8c:	4b49      	ldr	r3, [pc, #292]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9c:	4b46      	ldr	r3, [pc, #280]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d118      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea8:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a42      	ldr	r2, [pc, #264]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb4:	f7fe faa2 	bl	80033fc <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eba:	e008      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebc:	f7fe fa9e 	bl	80033fc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e06d      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ece:	4b3a      	ldr	r3, [pc, #232]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eda:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d02e      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d027      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef8:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f02:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f08:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f0e:	4a29      	ldr	r2, [pc, #164]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d014      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7fe fa6d 	bl	80033fc <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f24:	e00a      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fe fa69 	bl	80033fc <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e036      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0ee      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f48:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4917      	ldr	r1, [pc, #92]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	490b      	ldr	r1, [pc, #44]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4904      	ldr	r1, [pc, #16]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	42420440 	.word	0x42420440

08004fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e041      	b.n	8005056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd fbf4 	bl	80027d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f000 fc66 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e032      	b.n	80050de <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <HAL_TIM_Base_Start+0x88>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00e      	beq.n	80050a8 <HAL_TIM_Base_Start+0x48>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005092:	d009      	beq.n	80050a8 <HAL_TIM_Base_Start+0x48>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a14      	ldr	r2, [pc, #80]	; (80050ec <HAL_TIM_Base_Start+0x8c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_TIM_Base_Start+0x48>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <HAL_TIM_Base_Start+0x90>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d111      	bne.n	80050cc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d010      	beq.n	80050dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	e007      	b.n	80050dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800

080050f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e03a      	b.n	8005182 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_TIM_Base_Start_IT+0x98>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x58>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005136:	d009      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x58>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a14      	ldr	r2, [pc, #80]	; (8005190 <HAL_TIM_Base_Start_IT+0x9c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x58>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a13      	ldr	r2, [pc, #76]	; (8005194 <HAL_TIM_Base_Start_IT+0xa0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b06      	cmp	r3, #6
 800515c:	d010      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e007      	b.n	8005180 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800

08005198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e041      	b.n	800522e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f839 	bl	8005236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f000 fb7a 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <HAL_TIM_PWM_Start+0x24>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e022      	b.n	80052b2 <HAL_TIM_PWM_Start+0x6a>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b04      	cmp	r3, #4
 8005270:	d109      	bne.n	8005286 <HAL_TIM_PWM_Start+0x3e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	bf14      	ite	ne
 800527e:	2301      	movne	r3, #1
 8005280:	2300      	moveq	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	e015      	b.n	80052b2 <HAL_TIM_PWM_Start+0x6a>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d109      	bne.n	80052a0 <HAL_TIM_PWM_Start+0x58>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	bf14      	ite	ne
 8005298:	2301      	movne	r3, #1
 800529a:	2300      	moveq	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e008      	b.n	80052b2 <HAL_TIM_PWM_Start+0x6a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e05e      	b.n	8005378 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start+0x82>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c8:	e013      	b.n	80052f2 <HAL_TIM_PWM_Start+0xaa>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0x92>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d8:	e00b      	b.n	80052f2 <HAL_TIM_PWM_Start+0xaa>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0xa2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e8:	e003      	b.n	80052f2 <HAL_TIM_PWM_Start+0xaa>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2201      	movs	r2, #1
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fd68 	bl	8005dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <HAL_TIM_PWM_Start+0x138>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d107      	bne.n	800531a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a18      	ldr	r2, [pc, #96]	; (8005380 <HAL_TIM_PWM_Start+0x138>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_TIM_PWM_Start+0xfa>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532c:	d009      	beq.n	8005342 <HAL_TIM_PWM_Start+0xfa>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a14      	ldr	r2, [pc, #80]	; (8005384 <HAL_TIM_PWM_Start+0x13c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_TIM_PWM_Start+0xfa>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a12      	ldr	r2, [pc, #72]	; (8005388 <HAL_TIM_PWM_Start+0x140>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d111      	bne.n	8005366 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b06      	cmp	r3, #6
 8005352:	d010      	beq.n	8005376 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	e007      	b.n	8005376 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800

0800538c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d122      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d11b      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0202 	mvn.w	r2, #2
 80053b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa62 	bl	8005898 <HAL_TIM_IC_CaptureCallback>
 80053d4:	e005      	b.n	80053e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa55 	bl	8005886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fa64 	bl	80058aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d122      	bne.n	800543c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d11b      	bne.n	800543c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0204 	mvn.w	r2, #4
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fa38 	bl	8005898 <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa2b 	bl	8005886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fa3a 	bl	80058aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b08      	cmp	r3, #8
 8005448:	d122      	bne.n	8005490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d11b      	bne.n	8005490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0208 	mvn.w	r2, #8
 8005460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2204      	movs	r2, #4
 8005466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fa0e 	bl	8005898 <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa01 	bl	8005886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fa10 	bl	80058aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b10      	cmp	r3, #16
 800549c:	d122      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d11b      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0210 	mvn.w	r2, #16
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2208      	movs	r2, #8
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9e4 	bl	8005898 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f9d7 	bl	8005886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f9e6 	bl	80058aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0201 	mvn.w	r2, #1
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fd f8aa 	bl	8002664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d10e      	bne.n	800553c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005528:	2b80      	cmp	r3, #128	; 0x80
 800552a:	d107      	bne.n	800553c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fd26 	bl	8005f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	d10e      	bne.n	8005568 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	d107      	bne.n	8005568 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9aa 	bl	80058bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b20      	cmp	r3, #32
 8005574:	d10e      	bne.n	8005594 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b20      	cmp	r3, #32
 8005582:	d107      	bne.n	8005594 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0220 	mvn.w	r2, #32
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fcf1 	bl	8005f76 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e0ac      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x174>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	f200 809f 	bhi.w	8005704 <HAL_TIM_PWM_ConfigChannel+0x168>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	08005601 	.word	0x08005601
 80055d0:	08005705 	.word	0x08005705
 80055d4:	08005705 	.word	0x08005705
 80055d8:	08005705 	.word	0x08005705
 80055dc:	08005641 	.word	0x08005641
 80055e0:	08005705 	.word	0x08005705
 80055e4:	08005705 	.word	0x08005705
 80055e8:	08005705 	.word	0x08005705
 80055ec:	08005683 	.word	0x08005683
 80055f0:	08005705 	.word	0x08005705
 80055f4:	08005705 	.word	0x08005705
 80055f8:	08005705 	.word	0x08005705
 80055fc:	080056c3 	.word	0x080056c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f9c4 	bl	8005994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0208 	orr.w	r2, r2, #8
 800561a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0204 	bic.w	r2, r2, #4
 800562a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6999      	ldr	r1, [r3, #24]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	619a      	str	r2, [r3, #24]
      break;
 800563e:	e062      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fa0a 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800565a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6999      	ldr	r1, [r3, #24]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	021a      	lsls	r2, r3, #8
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	619a      	str	r2, [r3, #24]
      break;
 8005680:	e041      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fa53 	bl	8005b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0208 	orr.w	r2, r2, #8
 800569c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0204 	bic.w	r2, r2, #4
 80056ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69d9      	ldr	r1, [r3, #28]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	61da      	str	r2, [r3, #28]
      break;
 80056c0:	e021      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fa9d 	bl	8005c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	021a      	lsls	r2, r3, #8
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	61da      	str	r2, [r3, #28]
      break;
 8005702:	e000      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_TIM_ConfigClockSource+0x18>
 800572c:	2302      	movs	r3, #2
 800572e:	e0a6      	b.n	800587e <HAL_TIM_ConfigClockSource+0x166>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800574e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005756:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d067      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x120>
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	d80b      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x6c>
 800576c:	2b10      	cmp	r3, #16
 800576e:	d073      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x140>
 8005770:	2b10      	cmp	r3, #16
 8005772:	d802      	bhi.n	800577a <HAL_TIM_ConfigClockSource+0x62>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d06f      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005778:	e078      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800577a:	2b20      	cmp	r3, #32
 800577c:	d06c      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x140>
 800577e:	2b30      	cmp	r3, #48	; 0x30
 8005780:	d06a      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005782:	e073      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005784:	2b70      	cmp	r3, #112	; 0x70
 8005786:	d00d      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x8c>
 8005788:	2b70      	cmp	r3, #112	; 0x70
 800578a:	d804      	bhi.n	8005796 <HAL_TIM_ConfigClockSource+0x7e>
 800578c:	2b50      	cmp	r3, #80	; 0x50
 800578e:	d033      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0xe0>
 8005790:	2b60      	cmp	r3, #96	; 0x60
 8005792:	d041      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005794:	e06a      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	d066      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x152>
 800579c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a0:	d017      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80057a2:	e063      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	6899      	ldr	r1, [r3, #8]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f000 faed 	bl	8005d92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]
      break;
 80057d0:	e04c      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6899      	ldr	r1, [r3, #8]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f000 fad6 	bl	8005d92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057f4:	609a      	str	r2, [r3, #8]
      break;
 80057f6:	e039      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6859      	ldr	r1, [r3, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	461a      	mov	r2, r3
 8005806:	f000 fa4d 	bl	8005ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2150      	movs	r1, #80	; 0x50
 8005810:	4618      	mov	r0, r3
 8005812:	f000 faa4 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005816:	e029      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	461a      	mov	r2, r3
 8005826:	f000 fa6b 	bl	8005d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2160      	movs	r1, #96	; 0x60
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fa94 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005836:	e019      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	6859      	ldr	r1, [r3, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	461a      	mov	r2, r3
 8005846:	f000 fa2d 	bl	8005ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2140      	movs	r1, #64	; 0x40
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fa84 	bl	8005d5e <TIM_ITRx_SetConfig>
      break;
 8005856:	e009      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fa7b 	bl	8005d5e <TIM_ITRx_SetConfig>
        break;
 8005868:	e000      	b.n	800586c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800586a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
	...

080058d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a29      	ldr	r2, [pc, #164]	; (8005988 <TIM_Base_SetConfig+0xb8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_Base_SetConfig+0x30>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d007      	beq.n	8005900 <TIM_Base_SetConfig+0x30>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a26      	ldr	r2, [pc, #152]	; (800598c <TIM_Base_SetConfig+0xbc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0x30>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a25      	ldr	r2, [pc, #148]	; (8005990 <TIM_Base_SetConfig+0xc0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d108      	bne.n	8005912 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <TIM_Base_SetConfig+0xb8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00b      	beq.n	8005932 <TIM_Base_SetConfig+0x62>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005920:	d007      	beq.n	8005932 <TIM_Base_SetConfig+0x62>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <TIM_Base_SetConfig+0xbc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d003      	beq.n	8005932 <TIM_Base_SetConfig+0x62>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a18      	ldr	r2, [pc, #96]	; (8005990 <TIM_Base_SetConfig+0xc0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d108      	bne.n	8005944 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a07      	ldr	r2, [pc, #28]	; (8005988 <TIM_Base_SetConfig+0xb8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d103      	bne.n	8005978 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	615a      	str	r2, [r3, #20]
}
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800

08005994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 0302 	bic.w	r3, r3, #2
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <TIM_OC1_SetConfig+0xc8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10c      	bne.n	8005a0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0308 	bic.w	r3, r3, #8
 80059f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 0304 	bic.w	r3, r3, #4
 8005a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <TIM_OC1_SetConfig+0xc8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d111      	bne.n	8005a36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40012c00 	.word	0x40012c00

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0210 	bic.w	r2, r3, #16
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0320 	bic.w	r3, r3, #32
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <TIM_OC2_SetConfig+0xd0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10d      	bne.n	8005adc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a14      	ldr	r2, [pc, #80]	; (8005b30 <TIM_OC2_SetConfig+0xd0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d113      	bne.n	8005b0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr
 8005b30:	40012c00 	.word	0x40012c00

08005b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0303 	bic.w	r3, r3, #3
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <TIM_OC3_SetConfig+0xd0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d10d      	bne.n	8005bae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <TIM_OC3_SetConfig+0xd0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d113      	bne.n	8005bde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00

08005c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	031b      	lsls	r3, r3, #12
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <TIM_OC4_SetConfig+0x98>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d109      	bne.n	8005c7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	019b      	lsls	r3, r3, #6
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr
 8005ca0:	40012c00 	.word	0x40012c00

08005ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f023 030a 	bic.w	r3, r3, #10
 8005ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f023 0210 	bic.w	r2, r3, #16
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	031b      	lsls	r3, r3, #12
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b085      	sub	sp, #20
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f043 0307 	orr.w	r3, r3, #7
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr

08005d92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b087      	sub	sp, #28
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	021a      	lsls	r2, r3, #8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	609a      	str	r2, [r3, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr

08005dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2201      	movs	r2, #1
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1a      	ldr	r2, [r3, #32]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	43db      	mvns	r3, r3
 8005df2:	401a      	ands	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a1a      	ldr	r2, [r3, #32]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	fa01 f303 	lsl.w	r3, r1, r3
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	621a      	str	r2, [r3, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e046      	b.n	8005ebe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7c:	d009      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a12      	ldr	r2, [pc, #72]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a10      	ldr	r2, [pc, #64]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d10c      	bne.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800

08005ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e03d      	b.n	8005f6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr

08005f9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e03f      	b.n	800602c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fc fd2f 	bl	8002a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2224      	movs	r2, #36	; 0x24
 8005fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fdc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fbc6 	bl	8006770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ff2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006002:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006012:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b20      	cmp	r3, #32
 8006052:	d17c      	bne.n	800614e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_UART_Transmit+0x2c>
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e075      	b.n	8006150 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit+0x3e>
 800606e:	2302      	movs	r3, #2
 8006070:	e06e      	b.n	8006150 <HAL_UART_Transmit+0x11c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2221      	movs	r2, #33	; 0x21
 8006084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006088:	f7fd f9b8 	bl	80033fc <HAL_GetTick>
 800608c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a2:	d108      	bne.n	80060b6 <HAL_UART_Transmit+0x82>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	e003      	b.n	80060be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80060c6:	e02a      	b.n	800611e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f9ea 	bl	80064ac <UART_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e036      	b.n	8006150 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	3302      	adds	r3, #2
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e007      	b.n	8006110 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	3301      	adds	r3, #1
 800610e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1cf      	bne.n	80060c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	2140      	movs	r1, #64	; 0x40
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f9ba 	bl	80064ac <UART_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e006      	b.n	8006150 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	e000      	b.n	8006150 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
  }
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b20      	cmp	r3, #32
 8006170:	d130      	bne.n	80061d4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_UART_Transmit_IT+0x26>
 8006178:	88fb      	ldrh	r3, [r7, #6]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e029      	b.n	80061d6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_UART_Transmit_IT+0x38>
 800618c:	2302      	movs	r3, #2
 800618e:	e022      	b.n	80061d6 <HAL_UART_Transmit_IT+0x7e>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	88fa      	ldrh	r2, [r7, #6]
 80061a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2221      	movs	r2, #33	; 0x21
 80061b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e000      	b.n	80061d6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d140      	bne.n	800627c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_Receive_IT+0x26>
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e039      	b.n	800627e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_UART_Receive_IT+0x38>
 8006214:	2302      	movs	r3, #2
 8006216:	e032      	b.n	800627e <HAL_UART_Receive_IT+0x9e>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	88fa      	ldrh	r2, [r7, #6]
 8006230:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2222      	movs	r2, #34	; 0x22
 800623c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006256:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0220 	orr.w	r2, r2, #32
 8006276:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e000      	b.n	800627e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_UART_IRQHandler+0x52>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f9cc 	bl	8006670 <UART_Receive_IT>
      return;
 80062d8:	e0d1      	b.n	800647e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80b0 	beq.w	8006442 <HAL_UART_IRQHandler+0x1ba>
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d105      	bne.n	80062f8 <HAL_UART_IRQHandler+0x70>
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80a5 	beq.w	8006442 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <HAL_UART_IRQHandler+0x90>
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	f043 0201 	orr.w	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_UART_IRQHandler+0xb0>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	f043 0202 	orr.w	r2, r3, #2
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_UART_IRQHandler+0xd0>
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006350:	f043 0204 	orr.w	r2, r3, #4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00f      	beq.n	8006382 <HAL_UART_IRQHandler+0xfa>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <HAL_UART_IRQHandler+0xee>
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	f043 0208 	orr.w	r2, r3, #8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d078      	beq.n	800647c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <HAL_UART_IRQHandler+0x11c>
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f966 	bl	8006670 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bf14      	ite	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	2300      	moveq	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <HAL_UART_IRQHandler+0x144>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d031      	beq.n	8006430 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f8b7 	bl	8006540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d023      	beq.n	8006428 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d013      	beq.n	8006420 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fc:	4a21      	ldr	r2, [pc, #132]	; (8006484 <HAL_UART_IRQHandler+0x1fc>)
 80063fe:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	4618      	mov	r0, r3
 8006406:	f7fd fdbd 	bl	8003f84 <HAL_DMA_Abort_IT>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d016      	beq.n	800643e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800641a:	4610      	mov	r0, r2
 800641c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641e:	e00e      	b.n	800643e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f83a 	bl	800649a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006426:	e00a      	b.n	800643e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f836 	bl	800649a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642e:	e006      	b.n	800643e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f832 	bl	800649a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800643c:	e01e      	b.n	800647c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643e:	bf00      	nop
    return;
 8006440:	e01c      	b.n	800647c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_UART_IRQHandler+0x1d6>
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f8a3 	bl	80065a2 <UART_Transmit_IT>
    return;
 800645c:	e00f      	b.n	800647e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_UART_IRQHandler+0x1f6>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f8e4 	bl	8006640 <UART_EndTransmit_IT>
    return;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <HAL_UART_IRQHandler+0x1f6>
    return;
 800647c:	bf00      	nop
  }
}
 800647e:	3720      	adds	r7, #32
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	0800657b 	.word	0x0800657b

08006488 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr

0800649a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064bc:	e02c      	b.n	8006518 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c4:	d028      	beq.n	8006518 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <UART_WaitOnFlagUntilTimeout+0x30>
 80064cc:	f7fc ff96 	bl	80033fc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d21d      	bcs.n	8006518 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e00f      	b.n	8006538 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4013      	ands	r3, r2
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	429a      	cmp	r2, r3
 8006526:	bf0c      	ite	eq
 8006528:	2301      	moveq	r3, #1
 800652a:	2300      	movne	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	429a      	cmp	r2, r3
 8006534:	d0c3      	beq.n	80064be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006556:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff ff80 	bl	800649a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b21      	cmp	r3, #33	; 0x21
 80065b4:	d13e      	bne.n	8006634 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065be:	d114      	bne.n	80065ea <UART_Transmit_IT+0x48>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d110      	bne.n	80065ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	1c9a      	adds	r2, r3, #2
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	621a      	str	r2, [r3, #32]
 80065e8:	e008      	b.n	80065fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	1c59      	adds	r1, r3, #1
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6211      	str	r1, [r2, #32]
 80065f4:	781a      	ldrb	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4619      	mov	r1, r3
 800660a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10f      	bne.n	8006630 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800661e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800662e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	e000      	b.n	8006636 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006634:	2302      	movs	r3, #2
  }
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr

08006640 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006656:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ff11 	bl	8006488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b22      	cmp	r3, #34	; 0x22
 8006682:	d170      	bne.n	8006766 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d117      	bne.n	80066be <UART_Receive_IT+0x4e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d113      	bne.n	80066be <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	1c9a      	adds	r2, r3, #2
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
 80066bc:	e026      	b.n	800670c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d0:	d007      	beq.n	80066e2 <UART_Receive_IT+0x72>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <UART_Receive_IT+0x80>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e008      	b.n	8006702 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	4619      	mov	r1, r3
 800671a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800671c:	2b00      	cmp	r3, #0
 800671e:	d120      	bne.n	8006762 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0220 	bic.w	r2, r2, #32
 800672e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800673e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fa fa23 	bl	8000ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e002      	b.n	8006768 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8006766:	2302      	movs	r3, #2
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80067aa:	f023 030c 	bic.w	r3, r3, #12
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	430b      	orrs	r3, r1
 80067b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a2c      	ldr	r2, [pc, #176]	; (8006884 <UART_SetConfig+0x114>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d103      	bne.n	80067e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067d8:	f7fe fada 	bl	8004d90 <HAL_RCC_GetPCLK2Freq>
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	e002      	b.n	80067e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067e0:	f7fe fac2 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 80067e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009a      	lsls	r2, r3, #2
 80067f0:	441a      	add	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	4a22      	ldr	r2, [pc, #136]	; (8006888 <UART_SetConfig+0x118>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	0119      	lsls	r1, r3, #4
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009a      	lsls	r2, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	fbb2 f2f3 	udiv	r2, r2, r3
 800681c:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <UART_SetConfig+0x118>)
 800681e:	fba3 0302 	umull	r0, r3, r3, r2
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	2064      	movs	r0, #100	; 0x64
 8006826:	fb00 f303 	mul.w	r3, r0, r3
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	3332      	adds	r3, #50	; 0x32
 8006830:	4a15      	ldr	r2, [pc, #84]	; (8006888 <UART_SetConfig+0x118>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800683c:	4419      	add	r1, r3
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009a      	lsls	r2, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	fbb2 f2f3 	udiv	r2, r2, r3
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <UART_SetConfig+0x118>)
 8006856:	fba3 0302 	umull	r0, r3, r3, r2
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2064      	movs	r0, #100	; 0x64
 800685e:	fb00 f303 	mul.w	r3, r0, r3
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	3332      	adds	r3, #50	; 0x32
 8006868:	4a07      	ldr	r2, [pc, #28]	; (8006888 <UART_SetConfig+0x118>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	f003 020f 	and.w	r2, r3, #15
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	440a      	add	r2, r1
 800687a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40013800 	.word	0x40013800
 8006888:	51eb851f 	.word	0x51eb851f

0800688c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800689a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800689e:	2b84      	cmp	r3, #132	; 0x84
 80068a0:	d005      	beq.n	80068ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80068a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	3303      	adds	r3, #3
 80068ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80068ae:	68fb      	ldr	r3, [r7, #12]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr

080068ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c0:	f3ef 8305 	mrs	r3, IPSR
 80068c4:	607b      	str	r3, [r7, #4]
  return(result);
 80068c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80068e0:	f001 fb32 	bl	8007f48 <vTaskStartScheduler>
  
  return osOK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	bd80      	pop	{r7, pc}

080068ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ec:	b089      	sub	sp, #36	; 0x24
 80068ee:	af04      	add	r7, sp, #16
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d020      	beq.n	800693e <osThreadCreate+0x54>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01c      	beq.n	800693e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685c      	ldr	r4, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681d      	ldr	r5, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691e      	ldr	r6, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff ffb8 	bl	800688c <makeFreeRtosPriority>
 800691c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006926:	9202      	str	r2, [sp, #8]
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	9100      	str	r1, [sp, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	4632      	mov	r2, r6
 8006930:	4629      	mov	r1, r5
 8006932:	4620      	mov	r0, r4
 8006934:	f001 f94e 	bl	8007bd4 <xTaskCreateStatic>
 8006938:	4603      	mov	r3, r0
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	e01c      	b.n	8006978 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685c      	ldr	r4, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800694a:	b29e      	uxth	r6, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff ff9a 	bl	800688c <makeFreeRtosPriority>
 8006958:	4602      	mov	r2, r0
 800695a:	f107 030c 	add.w	r3, r7, #12
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	9200      	str	r2, [sp, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	4632      	mov	r2, r6
 8006966:	4629      	mov	r1, r5
 8006968:	4620      	mov	r0, r4
 800696a:	f001 f98c 	bl	8007c86 <xTaskCreate>
 800696e:	4603      	mov	r3, r0
 8006970:	2b01      	cmp	r3, #1
 8006972:	d001      	beq.n	8006978 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	e000      	b.n	800697a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006978:	68fb      	ldr	r3, [r7, #12]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006982 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <osDelay+0x16>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	e000      	b.n	800699a <osDelay+0x18>
 8006998:	2301      	movs	r3, #1
 800699a:	4618      	mov	r0, r3
 800699c:	f001 faa0 	bl	8007ee0 <vTaskDelay>
  
  return osOK;
 80069a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	460b      	mov	r3, r1
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d013      	beq.n	80069ea <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <osTimerCreate+0x20>
 80069c8:	2101      	movs	r1, #1
 80069ca:	e000      	b.n	80069ce <osTimerCreate+0x22>
 80069cc:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80069d6:	9201      	str	r2, [sp, #4]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	460a      	mov	r2, r1
 80069de:	2101      	movs	r1, #1
 80069e0:	480b      	ldr	r0, [pc, #44]	; (8006a10 <osTimerCreate+0x64>)
 80069e2:	f002 f994 	bl	8008d0e <xTimerCreateStatic>
 80069e6:	4603      	mov	r3, r0
 80069e8:	e00e      	b.n	8006a08 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80069ea:	7afb      	ldrb	r3, [r7, #11]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <osTimerCreate+0x48>
 80069f0:	2201      	movs	r2, #1
 80069f2:	e000      	b.n	80069f6 <osTimerCreate+0x4a>
 80069f4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2101      	movs	r1, #1
 8006a00:	4803      	ldr	r0, [pc, #12]	; (8006a10 <osTimerCreate+0x64>)
 8006a02:	f002 f963 	bl	8008ccc <xTimerCreate>
 8006a06:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	0800a574 	.word	0x0800a574

08006a14 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <osTimerStart+0x20>
    ticks = 1;
 8006a30:	2301      	movs	r3, #1
 8006a32:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006a34:	f7ff ff41 	bl	80068ba <inHandlerMode>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01b      	beq.n	8006a76 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006a3e:	f107 020c 	add.w	r2, r7, #12
 8006a42:	2300      	movs	r3, #0
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4613      	mov	r3, r2
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	2109      	movs	r1, #9
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f002 f9cb 	bl	8008de8 <xTimerGenericCommand>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d002      	beq.n	8006a5e <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8006a58:	23ff      	movs	r3, #255	; 0xff
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e018      	b.n	8006a90 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d015      	beq.n	8006a90 <osTimerStart+0x7c>
 8006a64:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <osTimerStart+0x88>)
 8006a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	e00c      	b.n	8006a90 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8006a76:	2300      	movs	r3, #0
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	2104      	movs	r1, #4
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f002 f9b1 	bl	8008de8 <xTimerGenericCommand>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d001      	beq.n	8006a90 <osTimerStart+0x7c>
      result = osErrorOS;
 8006a8c:	23ff      	movs	r3, #255	; 0xff
 8006a8e:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8006a90:	697b      	ldr	r3, [r7, #20]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d010      	beq.n	8006ad4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d10b      	bne.n	8006ad0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	2303      	movs	r3, #3
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	f000 f9ba 	bl	8006e40 <xQueueGenericCreateStatic>
 8006acc:	4603      	mov	r3, r0
 8006ace:	e016      	b.n	8006afe <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e014      	b.n	8006afe <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d110      	bne.n	8006afc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8006ada:	2203      	movs	r2, #3
 8006adc:	2100      	movs	r1, #0
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f000 fa20 	bl	8006f24 <xQueueGenericCreate>
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <osSemaphoreCreate+0x58>
 8006aec:	2300      	movs	r3, #0
 8006aee:	2200      	movs	r2, #0
 8006af0:	2100      	movs	r1, #0
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fa72 	bl	8006fdc <xQueueGenericSend>
      return sema;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	e000      	b.n	8006afe <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006afc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	e03a      	b.n	8006b96 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b2a:	d103      	bne.n	8006b34 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	e009      	b.n	8006b48 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <osSemaphoreWait+0x40>
      ticks = 1;
 8006b44:	2301      	movs	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006b48:	f7ff feb7 	bl	80068ba <inHandlerMode>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d017      	beq.n	8006b82 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006b52:	f107 0308 	add.w	r3, r7, #8
 8006b56:	461a      	mov	r2, r3
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fe3a 	bl	80077d4 <xQueueReceiveFromISR>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d001      	beq.n	8006b6a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006b66:	23ff      	movs	r3, #255	; 0xff
 8006b68:	e015      	b.n	8006b96 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d011      	beq.n	8006b94 <osSemaphoreWait+0x8c>
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <osSemaphoreWait+0x98>)
 8006b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	e008      	b.n	8006b94 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fd1d 	bl	80075c4 <xQueueSemaphoreTake>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d001      	beq.n	8006b94 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006b90:	23ff      	movs	r3, #255	; 0xff
 8006b92:	e000      	b.n	8006b96 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006bb4:	f7ff fe81 	bl	80068ba <inHandlerMode>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d016      	beq.n	8006bec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006bbe:	f107 0308 	add.w	r3, r7, #8
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fb97 	bl	80072f8 <xQueueGiveFromISR>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d001      	beq.n	8006bd4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006bd0:	23ff      	movs	r3, #255	; 0xff
 8006bd2:	e017      	b.n	8006c04 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d013      	beq.n	8006c02 <osSemaphoreRelease+0x5e>
 8006bda:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <osSemaphoreRelease+0x68>)
 8006bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	e00a      	b.n	8006c02 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006bec:	2300      	movs	r3, #0
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9f2 	bl	8006fdc <xQueueGenericSend>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d001      	beq.n	8006c02 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006bfe:	23ff      	movs	r3, #255	; 0xff
 8006c00:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006c02:	68fb      	ldr	r3, [r7, #12]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f103 0208 	add.w	r2, r3, #8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f103 0208 	add.w	r2, r3, #8
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f103 0208 	add.w	r2, r3, #8
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr

08006c4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr

08006c66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	601a      	str	r2, [r3, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc2:	d103      	bne.n	8006ccc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e00c      	b.n	8006ce6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e002      	b.n	8006cda <vListInsert+0x2e>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d2f6      	bcs.n	8006cd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6892      	ldr	r2, [r2, #8]
 8006d32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6852      	ldr	r2, [r2, #4]
 8006d3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d103      	bne.n	8006d50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr
	...

08006d70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d109      	bne.n	8006d98 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	e7fe      	b.n	8006d96 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006d98:	f002 fbb6 	bl	8009508 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	441a      	add	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	441a      	add	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	22ff      	movs	r2, #255	; 0xff
 8006ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	22ff      	movs	r2, #255	; 0xff
 8006de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d114      	bne.n	8006e18 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01a      	beq.n	8006e2c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3310      	adds	r3, #16
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 fb24 	bl	8008448 <xTaskRemoveFromEventList>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d012      	beq.n	8006e2c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <xQueueGenericReset+0xcc>)
 8006e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	e009      	b.n	8006e2c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3310      	adds	r3, #16
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff fef7 	bl	8006c10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3324      	adds	r3, #36	; 0x24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff fef2 	bl	8006c10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e2c:	f002 fb9a 	bl	8009564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e30:	2301      	movs	r3, #1
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08e      	sub	sp, #56	; 0x38
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <xQueueGenericCreateStatic+0x28>
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e66:	e7fe      	b.n	8006e66 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <xQueueGenericCreateStatic+0x42>
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e80:	e7fe      	b.n	8006e80 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <xQueueGenericCreateStatic+0x4e>
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <xQueueGenericCreateStatic+0x52>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <xQueueGenericCreateStatic+0x54>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <xQueueGenericCreateStatic+0x6c>
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	e7fe      	b.n	8006eaa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <xQueueGenericCreateStatic+0x78>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <xQueueGenericCreateStatic+0x7c>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <xQueueGenericCreateStatic+0x7e>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <xQueueGenericCreateStatic+0x96>
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ed6:	2348      	movs	r3, #72	; 0x48
 8006ed8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b48      	cmp	r3, #72	; 0x48
 8006ede:	d009      	beq.n	8006ef4 <xQueueGenericCreateStatic+0xb4>
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	e7fe      	b.n	8006ef2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f842 	bl	8006f9e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3730      	adds	r7, #48	; 0x30
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08a      	sub	sp, #40	; 0x28
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <xQueueGenericCreate+0x28>
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	e7fe      	b.n	8006f4a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	e004      	b.n	8006f62 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	3348      	adds	r3, #72	; 0x48
 8006f66:	4618      	mov	r0, r3
 8006f68:	f002 fbc4 	bl	80096f4 <pvPortMalloc>
 8006f6c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00f      	beq.n	8006f94 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	3348      	adds	r3, #72	; 0x48
 8006f78:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f82:	79fa      	ldrb	r2, [r7, #7]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 f805 	bl	8006f9e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f94:	69bb      	ldr	r3, [r7, #24]
	}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3720      	adds	r7, #32
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e002      	b.n	8006fc0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fcc:	2101      	movs	r1, #1
 8006fce:	69b8      	ldr	r0, [r7, #24]
 8006fd0:	f7ff fece 	bl	8006d70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08e      	sub	sp, #56	; 0x38
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006fea:	2300      	movs	r3, #0
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d109      	bne.n	800700c <xQueueGenericSend+0x30>
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28
 800700a:	e7fe      	b.n	800700a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d103      	bne.n	800701a <xQueueGenericSend+0x3e>
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <xQueueGenericSend+0x42>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <xQueueGenericSend+0x44>
 800701e:	2300      	movs	r3, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <xQueueGenericSend+0x5c>
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
 8007036:	e7fe      	b.n	8007036 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d103      	bne.n	8007046 <xQueueGenericSend+0x6a>
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <xQueueGenericSend+0x6e>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <xQueueGenericSend+0x70>
 800704a:	2300      	movs	r3, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d109      	bne.n	8007064 <xQueueGenericSend+0x88>
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	623b      	str	r3, [r7, #32]
 8007062:	e7fe      	b.n	8007062 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007064:	f001 fbaa 	bl	80087bc <xTaskGetSchedulerState>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <xQueueGenericSend+0x98>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <xQueueGenericSend+0x9c>
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <xQueueGenericSend+0x9e>
 8007078:	2300      	movs	r3, #0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <xQueueGenericSend+0xb6>
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	e7fe      	b.n	8007090 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007092:	f002 fa39 	bl	8009508 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	429a      	cmp	r2, r3
 80070a0:	d302      	bcc.n	80070a8 <xQueueGenericSend+0xcc>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d129      	bne.n	80070fc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ae:	f000 fc25 	bl	80078fc <prvCopyDataToQueue>
 80070b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 f9c1 	bl	8008448 <xTaskRemoveFromEventList>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d013      	beq.n	80070f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070cc:	4b3f      	ldr	r3, [pc, #252]	; (80071cc <xQueueGenericSend+0x1f0>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	e00a      	b.n	80070f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070e4:	4b39      	ldr	r3, [pc, #228]	; (80071cc <xQueueGenericSend+0x1f0>)
 80070e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070f4:	f002 fa36 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e063      	b.n	80071c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d103      	bne.n	800710a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007102:	f002 fa2f 	bl	8009564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007106:	2300      	movs	r3, #0
 8007108:	e05c      	b.n	80071c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	2b00      	cmp	r3, #0
 800710e:	d106      	bne.n	800711e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007110:	f107 0314 	add.w	r3, r7, #20
 8007114:	4618      	mov	r0, r3
 8007116:	f001 f9f9 	bl	800850c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800711a:	2301      	movs	r3, #1
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800711e:	f002 fa21 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007122:	f000 ff75 	bl	8008010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007126:	f002 f9ef 	bl	8009508 <vPortEnterCritical>
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007130:	b25b      	sxtb	r3, r3
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007136:	d103      	bne.n	8007140 <xQueueGenericSend+0x164>
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007146:	b25b      	sxtb	r3, r3
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800714c:	d103      	bne.n	8007156 <xQueueGenericSend+0x17a>
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007156:	f002 fa05 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800715a:	1d3a      	adds	r2, r7, #4
 800715c:	f107 0314 	add.w	r3, r7, #20
 8007160:	4611      	mov	r1, r2
 8007162:	4618      	mov	r0, r3
 8007164:	f001 f9e8 	bl	8008538 <xTaskCheckForTimeOut>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d124      	bne.n	80071b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800716e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007170:	f000 fcbc 	bl	8007aec <prvIsQueueFull>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d018      	beq.n	80071ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	3310      	adds	r3, #16
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f912 	bl	80083ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800718a:	f000 fc47 	bl	8007a1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800718e:	f000 ff4d 	bl	800802c <xTaskResumeAll>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	f47f af7c 	bne.w	8007092 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800719a:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <xQueueGenericSend+0x1f0>)
 800719c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	e772      	b.n	8007092 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ae:	f000 fc35 	bl	8007a1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071b2:	f000 ff3b 	bl	800802c <xTaskResumeAll>
 80071b6:	e76c      	b.n	8007092 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ba:	f000 fc2f 	bl	8007a1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071be:	f000 ff35 	bl	800802c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071c2:	2300      	movs	r3, #0
		}
	}
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3738      	adds	r7, #56	; 0x38
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08e      	sub	sp, #56	; 0x38
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <xQueueGenericSendFromISR+0x2c>
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
 80071fa:	e7fe      	b.n	80071fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <xQueueGenericSendFromISR+0x3a>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <xQueueGenericSendFromISR+0x3e>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <xQueueGenericSendFromISR+0x40>
 800720e:	2300      	movs	r3, #0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d109      	bne.n	8007228 <xQueueGenericSendFromISR+0x58>
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	623b      	str	r3, [r7, #32]
 8007226:	e7fe      	b.n	8007226 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d103      	bne.n	8007236 <xQueueGenericSendFromISR+0x66>
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <xQueueGenericSendFromISR+0x6a>
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <xQueueGenericSendFromISR+0x6c>
 800723a:	2300      	movs	r3, #0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d109      	bne.n	8007254 <xQueueGenericSendFromISR+0x84>
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	e7fe      	b.n	8007252 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007254:	f002 fa12 	bl	800967c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007258:	f3ef 8211 	mrs	r2, BASEPRI
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	61ba      	str	r2, [r7, #24]
 800726e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007270:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727c:	429a      	cmp	r2, r3
 800727e:	d302      	bcc.n	8007286 <xQueueGenericSendFromISR+0xb6>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d12c      	bne.n	80072e0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800728c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007296:	f000 fb31 	bl	80078fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800729a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072a2:	d112      	bne.n	80072ca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d016      	beq.n	80072da <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	3324      	adds	r3, #36	; 0x24
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 f8c9 	bl	8008448 <xTaskRemoveFromEventList>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	e007      	b.n	80072da <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072ce:	3301      	adds	r3, #1
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	b25a      	sxtb	r2, r3
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072da:	2301      	movs	r3, #1
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80072de:	e001      	b.n	80072e4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3738      	adds	r7, #56	; 0x38
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08e      	sub	sp, #56	; 0x38
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	2b00      	cmp	r3, #0
 800730a:	d109      	bne.n	8007320 <xQueueGiveFromISR+0x28>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	e7fe      	b.n	800731e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <xQueueGiveFromISR+0x44>
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	e7fe      	b.n	800733a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d103      	bne.n	800734c <xQueueGiveFromISR+0x54>
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <xQueueGiveFromISR+0x58>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <xQueueGiveFromISR+0x5a>
 8007350:	2300      	movs	r3, #0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <xQueueGiveFromISR+0x72>
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	e7fe      	b.n	8007368 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800736a:	f002 f987 	bl	800967c <vPortValidateInterruptPriority>
	__asm volatile
 800736e:	f3ef 8211 	mrs	r2, BASEPRI
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	617a      	str	r2, [r7, #20]
 8007384:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007386:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007396:	429a      	cmp	r2, r3
 8007398:	d22b      	bcs.n	80073f2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b4:	d112      	bne.n	80073dc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d016      	beq.n	80073ec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	3324      	adds	r3, #36	; 0x24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 f840 	bl	8008448 <xTaskRemoveFromEventList>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00e      	beq.n	80073ec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2201      	movs	r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e007      	b.n	80073ec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e0:	3301      	adds	r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	b25a      	sxtb	r2, r3
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073ec:	2301      	movs	r3, #1
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
 80073f0:	e001      	b.n	80073f6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007402:	4618      	mov	r0, r3
 8007404:	3738      	adds	r7, #56	; 0x38
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08c      	sub	sp, #48	; 0x30
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007418:	2300      	movs	r3, #0
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <xQueueReceive+0x2e>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	623b      	str	r3, [r7, #32]
 8007438:	e7fe      	b.n	8007438 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d103      	bne.n	8007448 <xQueueReceive+0x3c>
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <xQueueReceive+0x40>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <xQueueReceive+0x42>
 800744c:	2300      	movs	r3, #0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <xQueueReceive+0x5a>
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	e7fe      	b.n	8007464 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007466:	f001 f9a9 	bl	80087bc <xTaskGetSchedulerState>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <xQueueReceive+0x6a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <xQueueReceive+0x6e>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <xQueueReceive+0x70>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d109      	bne.n	8007494 <xQueueReceive+0x88>
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	61bb      	str	r3, [r7, #24]
 8007492:	e7fe      	b.n	8007492 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007494:	f002 f838 	bl	8009508 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01f      	beq.n	80074e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a8:	f000 fa92 	bl	80079d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	1e5a      	subs	r2, r3, #1
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00f      	beq.n	80074dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	3310      	adds	r3, #16
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 ffc1 	bl	8008448 <xTaskRemoveFromEventList>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d007      	beq.n	80074dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074cc:	4b3c      	ldr	r3, [pc, #240]	; (80075c0 <xQueueReceive+0x1b4>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074dc:	f002 f842 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e069      	b.n	80075b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074ea:	f002 f83b 	bl	8009564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e062      	b.n	80075b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074f8:	f107 0310 	add.w	r3, r7, #16
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 f805 	bl	800850c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007502:	2301      	movs	r3, #1
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007506:	f002 f82d 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800750a:	f000 fd81 	bl	8008010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800750e:	f001 fffb 	bl	8009508 <vPortEnterCritical>
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007518:	b25b      	sxtb	r3, r3
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800751e:	d103      	bne.n	8007528 <xQueueReceive+0x11c>
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800752e:	b25b      	sxtb	r3, r3
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007534:	d103      	bne.n	800753e <xQueueReceive+0x132>
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800753e:	f002 f811 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007542:	1d3a      	adds	r2, r7, #4
 8007544:	f107 0310 	add.w	r3, r7, #16
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fff4 	bl	8008538 <xTaskCheckForTimeOut>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d123      	bne.n	800759e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007558:	f000 fab2 	bl	8007ac0 <prvIsQueueEmpty>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d017      	beq.n	8007592 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	3324      	adds	r3, #36	; 0x24
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f000 ff1e 	bl	80083ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007572:	f000 fa53 	bl	8007a1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007576:	f000 fd59 	bl	800802c <xTaskResumeAll>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d189      	bne.n	8007494 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007580:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <xQueueReceive+0x1b4>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	e780      	b.n	8007494 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007594:	f000 fa42 	bl	8007a1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007598:	f000 fd48 	bl	800802c <xTaskResumeAll>
 800759c:	e77a      	b.n	8007494 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800759e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a0:	f000 fa3c 	bl	8007a1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075a4:	f000 fd42 	bl	800802c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075aa:	f000 fa89 	bl	8007ac0 <prvIsQueueEmpty>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f43f af6f 	beq.w	8007494 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3730      	adds	r7, #48	; 0x30
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08e      	sub	sp, #56	; 0x38
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80075d6:	2300      	movs	r3, #0
 80075d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d109      	bne.n	80075f4 <xQueueSemaphoreTake+0x30>
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	623b      	str	r3, [r7, #32]
 80075f2:	e7fe      	b.n	80075f2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d009      	beq.n	8007610 <xQueueSemaphoreTake+0x4c>
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	61fb      	str	r3, [r7, #28]
 800760e:	e7fe      	b.n	800760e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007610:	f001 f8d4 	bl	80087bc <xTaskGetSchedulerState>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d102      	bne.n	8007620 <xQueueSemaphoreTake+0x5c>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <xQueueSemaphoreTake+0x60>
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <xQueueSemaphoreTake+0x62>
 8007624:	2300      	movs	r3, #0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <xQueueSemaphoreTake+0x7a>
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	e7fe      	b.n	800763c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800763e:	f001 ff63 	bl	8009508 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	2b00      	cmp	r3, #0
 800764c:	d024      	beq.n	8007698 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	1e5a      	subs	r2, r3, #1
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800765e:	f001 fa73 	bl	8008b48 <pvTaskIncrementMutexHeldCount>
 8007662:	4602      	mov	r2, r0
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00f      	beq.n	8007690 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	3310      	adds	r3, #16
 8007674:	4618      	mov	r0, r3
 8007676:	f000 fee7 	bl	8008448 <xTaskRemoveFromEventList>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d007      	beq.n	8007690 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007680:	4b53      	ldr	r3, [pc, #332]	; (80077d0 <xQueueSemaphoreTake+0x20c>)
 8007682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007690:	f001 ff68 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 8007694:	2301      	movs	r3, #1
 8007696:	e096      	b.n	80077c6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d110      	bne.n	80076c0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <xQueueSemaphoreTake+0xf4>
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	e7fe      	b.n	80076b6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80076b8:	f001 ff54 	bl	8009564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076bc:	2300      	movs	r3, #0
 80076be:	e082      	b.n	80077c6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076c6:	f107 030c 	add.w	r3, r7, #12
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 ff1e 	bl	800850c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076d0:	2301      	movs	r3, #1
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076d4:	f001 ff46 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076d8:	f000 fc9a 	bl	8008010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076dc:	f001 ff14 	bl	8009508 <vPortEnterCritical>
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076e6:	b25b      	sxtb	r3, r3
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ec:	d103      	bne.n	80076f6 <xQueueSemaphoreTake+0x132>
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076fc:	b25b      	sxtb	r3, r3
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007702:	d103      	bne.n	800770c <xQueueSemaphoreTake+0x148>
 8007704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800770c:	f001 ff2a 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007710:	463a      	mov	r2, r7
 8007712:	f107 030c 	add.w	r3, r7, #12
 8007716:	4611      	mov	r1, r2
 8007718:	4618      	mov	r0, r3
 800771a:	f000 ff0d 	bl	8008538 <xTaskCheckForTimeOut>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d132      	bne.n	800778a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007726:	f000 f9cb 	bl	8007ac0 <prvIsQueueEmpty>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d026      	beq.n	800777e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d109      	bne.n	800774c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007738:	f001 fee6 	bl	8009508 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	4618      	mov	r0, r3
 8007742:	f001 f859 	bl	80087f8 <xTaskPriorityInherit>
 8007746:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007748:	f001 ff0c 	bl	8009564 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	3324      	adds	r3, #36	; 0x24
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	4611      	mov	r1, r2
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fe29 	bl	80083ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800775a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800775c:	f000 f95e 	bl	8007a1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007760:	f000 fc64 	bl	800802c <xTaskResumeAll>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	f47f af69 	bne.w	800763e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800776c:	4b18      	ldr	r3, [pc, #96]	; (80077d0 <xQueueSemaphoreTake+0x20c>)
 800776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	e75f      	b.n	800763e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800777e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007780:	f000 f94c 	bl	8007a1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007784:	f000 fc52 	bl	800802c <xTaskResumeAll>
 8007788:	e759      	b.n	800763e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800778a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800778c:	f000 f946 	bl	8007a1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007790:	f000 fc4c 	bl	800802c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007796:	f000 f993 	bl	8007ac0 <prvIsQueueEmpty>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	f43f af4e 	beq.w	800763e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80077a8:	f001 feae 	bl	8009508 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80077ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077ae:	f000 f88e 	bl	80078ce <prvGetDisinheritPriorityAfterTimeout>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 f926 	bl	8008a0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80077c0:	f001 fed0 	bl	8009564 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3738      	adds	r7, #56	; 0x38
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08e      	sub	sp, #56	; 0x38
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <xQueueReceiveFromISR+0x2a>
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	623b      	str	r3, [r7, #32]
 80077fc:	e7fe      	b.n	80077fc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <xQueueReceiveFromISR+0x38>
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <xQueueReceiveFromISR+0x3c>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <xQueueReceiveFromISR+0x3e>
 8007810:	2300      	movs	r3, #0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <xQueueReceiveFromISR+0x56>
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e7fe      	b.n	8007828 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800782a:	f001 ff27 	bl	800967c <vPortValidateInterruptPriority>
	__asm volatile
 800782e:	f3ef 8211 	mrs	r2, BASEPRI
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	61ba      	str	r2, [r7, #24]
 8007844:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007846:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	2b00      	cmp	r3, #0
 8007854:	d02f      	beq.n	80078b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800785c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007864:	f000 f8b4 	bl	80079d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	1e5a      	subs	r2, r3, #1
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007870:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007878:	d112      	bne.n	80078a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d016      	beq.n	80078b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	3310      	adds	r3, #16
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fdde 	bl	8008448 <xTaskRemoveFromEventList>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00e      	beq.n	80078b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e007      	b.n	80078b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80078a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078a4:	3301      	adds	r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	b25a      	sxtb	r2, r3
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80078b0:	2301      	movs	r3, #1
 80078b2:	637b      	str	r3, [r7, #52]	; 0x34
 80078b4:	e001      	b.n	80078ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3738      	adds	r7, #56	; 0x38
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d006      	beq.n	80078ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f1c3 0307 	rsb	r3, r3, #7
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e001      	b.n	80078f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80078f0:	68fb      	ldr	r3, [r7, #12]
	}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr

080078fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10d      	bne.n	8007936 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d14d      	bne.n	80079be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 ffec 	bl	8008904 <xTaskPriorityDisinherit>
 800792c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	605a      	str	r2, [r3, #4]
 8007934:	e043      	b.n	80079be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d119      	bne.n	8007970 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6898      	ldr	r0, [r3, #8]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	461a      	mov	r2, r3
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	f002 f8d6 	bl	8009af8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	441a      	add	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	429a      	cmp	r2, r3
 8007964:	d32b      	bcc.n	80079be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	609a      	str	r2, [r3, #8]
 800796e:	e026      	b.n	80079be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68d8      	ldr	r0, [r3, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	461a      	mov	r2, r3
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	f002 f8bc 	bl	8009af8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	425b      	negs	r3, r3
 800798a:	441a      	add	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d207      	bcs.n	80079ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	425b      	negs	r3, r3
 80079a6:	441a      	add	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d105      	bne.n	80079be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079c6:	697b      	ldr	r3, [r7, #20]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d018      	beq.n	8007a14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	441a      	add	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d303      	bcc.n	8007a04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68d9      	ldr	r1, [r3, #12]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6838      	ldr	r0, [r7, #0]
 8007a10:	f002 f872 	bl	8009af8 <memcpy>
	}
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a24:	f001 fd70 	bl	8009508 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a30:	e011      	b.n	8007a56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d012      	beq.n	8007a60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3324      	adds	r3, #36	; 0x24
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fd02 	bl	8008448 <xTaskRemoveFromEventList>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a4a:	f000 fdd5 	bl	80085f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	dce9      	bgt.n	8007a32 <prvUnlockQueue+0x16>
 8007a5e:	e000      	b.n	8007a62 <prvUnlockQueue+0x46>
					break;
 8007a60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	22ff      	movs	r2, #255	; 0xff
 8007a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a6a:	f001 fd7b 	bl	8009564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a6e:	f001 fd4b 	bl	8009508 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a7a:	e011      	b.n	8007aa0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d012      	beq.n	8007aaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3310      	adds	r3, #16
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fcdd 	bl	8008448 <xTaskRemoveFromEventList>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a94:	f000 fdb0 	bl	80085f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dce9      	bgt.n	8007a7c <prvUnlockQueue+0x60>
 8007aa8:	e000      	b.n	8007aac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007aaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	22ff      	movs	r2, #255	; 0xff
 8007ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ab4:	f001 fd56 	bl	8009564 <vPortExitCritical>
}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ac8:	f001 fd1e 	bl	8009508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d102      	bne.n	8007ada <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	e001      	b.n	8007ade <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ade:	f001 fd41 	bl	8009564 <vPortExitCritical>

	return xReturn;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007af4:	f001 fd08 	bl	8009508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d102      	bne.n	8007b0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e001      	b.n	8007b0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b0e:	f001 fd29 	bl	8009564 <vPortExitCritical>

	return xReturn;
 8007b12:	68fb      	ldr	r3, [r7, #12]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	e014      	b.n	8007b56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b2c:	4a0e      	ldr	r2, [pc, #56]	; (8007b68 <vQueueAddToRegistry+0x4c>)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10b      	bne.n	8007b50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b38:	490b      	ldr	r1, [pc, #44]	; (8007b68 <vQueueAddToRegistry+0x4c>)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b42:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <vQueueAddToRegistry+0x4c>)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	4413      	add	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b4e:	e005      	b.n	8007b5c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b07      	cmp	r3, #7
 8007b5a:	d9e7      	bls.n	8007b2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20001f34 	.word	0x20001f34

08007b6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b7c:	f001 fcc4 	bl	8009508 <vPortEnterCritical>
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b86:	b25b      	sxtb	r3, r3
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b8c:	d103      	bne.n	8007b96 <vQueueWaitForMessageRestricted+0x2a>
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba2:	d103      	bne.n	8007bac <vQueueWaitForMessageRestricted+0x40>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bac:	f001 fcda 	bl	8009564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	3324      	adds	r3, #36	; 0x24
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68b9      	ldr	r1, [r7, #8]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fc17 	bl	80083f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007bc6:	6978      	ldr	r0, [r7, #20]
 8007bc8:	f7ff ff28 	bl	8007a1c <prvUnlockQueue>
	}
 8007bcc:	bf00      	nop
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08e      	sub	sp, #56	; 0x38
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <xTaskCreateStatic+0x28>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	623b      	str	r3, [r7, #32]
 8007bfa:	e7fe      	b.n	8007bfa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <xTaskCreateStatic+0x42>
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	e7fe      	b.n	8007c14 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c16:	2354      	movs	r3, #84	; 0x54
 8007c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b54      	cmp	r3, #84	; 0x54
 8007c1e:	d009      	beq.n	8007c34 <xTaskCreateStatic+0x60>
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	e7fe      	b.n	8007c32 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01e      	beq.n	8007c78 <xTaskCreateStatic+0xa4>
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01b      	beq.n	8007c78 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c52:	2300      	movs	r3, #0
 8007c54:	9303      	str	r3, [sp, #12]
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	9302      	str	r3, [sp, #8]
 8007c5a:	f107 0314 	add.w	r3, r7, #20
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f850 	bl	8007d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c72:	f000 f8cb 	bl	8007e0c <prvAddNewTaskToReadyList>
 8007c76:	e001      	b.n	8007c7c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c7c:	697b      	ldr	r3, [r7, #20]
	}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3728      	adds	r7, #40	; 0x28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b08c      	sub	sp, #48	; 0x30
 8007c8a:	af04      	add	r7, sp, #16
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c96:	88fb      	ldrh	r3, [r7, #6]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 fd2a 	bl	80096f4 <pvPortMalloc>
 8007ca0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00e      	beq.n	8007cc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007ca8:	2054      	movs	r0, #84	; 0x54
 8007caa:	f001 fd23 	bl	80096f4 <pvPortMalloc>
 8007cae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	631a      	str	r2, [r3, #48]	; 0x30
 8007cbc:	e005      	b.n	8007cca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cbe:	6978      	ldr	r0, [r7, #20]
 8007cc0:	f001 fdda 	bl	8009878 <vPortFree>
 8007cc4:	e001      	b.n	8007cca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d017      	beq.n	8007d00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cd8:	88fa      	ldrh	r2, [r7, #6]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9303      	str	r3, [sp, #12]
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	9302      	str	r3, [sp, #8]
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f80e 	bl	8007d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf4:	69f8      	ldr	r0, [r7, #28]
 8007cf6:	f000 f889 	bl	8007e0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	e002      	b.n	8007d06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d06:	69bb      	ldr	r3, [r7, #24]
	}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f023 0307 	bic.w	r3, r3, #7
 8007d36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d009      	beq.n	8007d56 <prvInitialiseNewTask+0x46>
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e7fe      	b.n	8007d54 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d56:	2300      	movs	r3, #0
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	e012      	b.n	8007d82 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	4413      	add	r3, r2
 8007d62:	7819      	ldrb	r1, [r3, #0]
 8007d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	3334      	adds	r3, #52	; 0x34
 8007d6c:	460a      	mov	r2, r1
 8007d6e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2b0f      	cmp	r3, #15
 8007d86:	d9e9      	bls.n	8007d5c <prvInitialiseNewTask+0x4c>
 8007d88:	e000      	b.n	8007d8c <prvInitialiseNewTask+0x7c>
		{
			break;
 8007d8a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	2b06      	cmp	r3, #6
 8007d98:	d901      	bls.n	8007d9e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d9a:	2306      	movs	r3, #6
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	2200      	movs	r2, #0
 8007dae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	3304      	adds	r3, #4
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe ff4a 	bl	8006c4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	3318      	adds	r3, #24
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe ff45 	bl	8006c4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	f1c3 0207 	rsb	r2, r3, #7
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	2200      	movs	r2, #0
 8007dde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	68f9      	ldr	r1, [r7, #12]
 8007dec:	69b8      	ldr	r0, [r7, #24]
 8007dee:	f001 faa3 	bl	8009338 <pxPortInitialiseStack>
 8007df2:	4602      	mov	r2, r0
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e04:	bf00      	nop
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e14:	f001 fb78 	bl	8009508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e18:	4b2a      	ldr	r3, [pc, #168]	; (8007ec4 <prvAddNewTaskToReadyList+0xb8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <prvAddNewTaskToReadyList+0xb8>)
 8007e20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e22:	4b29      	ldr	r3, [pc, #164]	; (8007ec8 <prvAddNewTaskToReadyList+0xbc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e2a:	4a27      	ldr	r2, [pc, #156]	; (8007ec8 <prvAddNewTaskToReadyList+0xbc>)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e30:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <prvAddNewTaskToReadyList+0xb8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d110      	bne.n	8007e5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e38:	f000 fc02 	bl	8008640 <prvInitialiseTaskLists>
 8007e3c:	e00d      	b.n	8007e5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e3e:	4b23      	ldr	r3, [pc, #140]	; (8007ecc <prvAddNewTaskToReadyList+0xc0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e46:	4b20      	ldr	r3, [pc, #128]	; (8007ec8 <prvAddNewTaskToReadyList+0xbc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d802      	bhi.n	8007e5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e54:	4a1c      	ldr	r2, [pc, #112]	; (8007ec8 <prvAddNewTaskToReadyList+0xbc>)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <prvAddNewTaskToReadyList+0xc4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	4a1b      	ldr	r2, [pc, #108]	; (8007ed0 <prvAddNewTaskToReadyList+0xc4>)
 8007e62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	2201      	movs	r2, #1
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	4b19      	ldr	r3, [pc, #100]	; (8007ed4 <prvAddNewTaskToReadyList+0xc8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	4a18      	ldr	r2, [pc, #96]	; (8007ed4 <prvAddNewTaskToReadyList+0xc8>)
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4a15      	ldr	r2, [pc, #84]	; (8007ed8 <prvAddNewTaskToReadyList+0xcc>)
 8007e84:	441a      	add	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fe feea 	bl	8006c66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e92:	f001 fb67 	bl	8009564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e96:	4b0d      	ldr	r3, [pc, #52]	; (8007ecc <prvAddNewTaskToReadyList+0xc0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00e      	beq.n	8007ebc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e9e:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <prvAddNewTaskToReadyList+0xbc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d207      	bcs.n	8007ebc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007eac:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <prvAddNewTaskToReadyList+0xd0>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000a8c 	.word	0x20000a8c
 8007ec8:	2000098c 	.word	0x2000098c
 8007ecc:	20000a98 	.word	0x20000a98
 8007ed0:	20000aa8 	.word	0x20000aa8
 8007ed4:	20000a94 	.word	0x20000a94
 8007ed8:	20000990 	.word	0x20000990
 8007edc:	e000ed04 	.word	0xe000ed04

08007ee0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d016      	beq.n	8007f20 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ef2:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <vTaskDelay+0x60>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d009      	beq.n	8007f0e <vTaskDelay+0x2e>
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	60bb      	str	r3, [r7, #8]
 8007f0c:	e7fe      	b.n	8007f0c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007f0e:	f000 f87f 	bl	8008010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f12:	2100      	movs	r1, #0
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fe2b 	bl	8008b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f1a:	f000 f887 	bl	800802c <xTaskResumeAll>
 8007f1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007f26:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <vTaskDelay+0x64>)
 8007f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000ab4 	.word	0x20000ab4
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f56:	463a      	mov	r2, r7
 8007f58:	1d39      	adds	r1, r7, #4
 8007f5a:	f107 0308 	add.w	r3, r7, #8
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7f8 fcf4 	bl	800094c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	9202      	str	r2, [sp, #8]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	460a      	mov	r2, r1
 8007f76:	4920      	ldr	r1, [pc, #128]	; (8007ff8 <vTaskStartScheduler+0xb0>)
 8007f78:	4820      	ldr	r0, [pc, #128]	; (8007ffc <vTaskStartScheduler+0xb4>)
 8007f7a:	f7ff fe2b 	bl	8007bd4 <xTaskCreateStatic>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	4b1f      	ldr	r3, [pc, #124]	; (8008000 <vTaskStartScheduler+0xb8>)
 8007f82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f84:	4b1e      	ldr	r3, [pc, #120]	; (8008000 <vTaskStartScheduler+0xb8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	e001      	b.n	8007f96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d102      	bne.n	8007fa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f9c:	f000 fe4e 	bl	8008c3c <xTimerCreateTimerTask>
 8007fa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d115      	bne.n	8007fd4 <vTaskStartScheduler+0x8c>
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fba:	4b12      	ldr	r3, [pc, #72]	; (8008004 <vTaskStartScheduler+0xbc>)
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fc2:	4b11      	ldr	r3, [pc, #68]	; (8008008 <vTaskStartScheduler+0xc0>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <vTaskStartScheduler+0xc4>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fce:	f001 fa2b 	bl	8009428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fd2:	e00d      	b.n	8007ff0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fda:	d109      	bne.n	8007ff0 <vTaskStartScheduler+0xa8>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e7fe      	b.n	8007fee <vTaskStartScheduler+0xa6>
}
 8007ff0:	bf00      	nop
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	0800a578 	.word	0x0800a578
 8007ffc:	08008611 	.word	0x08008611
 8008000:	20000ab0 	.word	0x20000ab0
 8008004:	20000aac 	.word	0x20000aac
 8008008:	20000a98 	.word	0x20000a98
 800800c:	20000a90 	.word	0x20000a90

08008010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008014:	4b04      	ldr	r3, [pc, #16]	; (8008028 <vTaskSuspendAll+0x18>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3301      	adds	r3, #1
 800801a:	4a03      	ldr	r2, [pc, #12]	; (8008028 <vTaskSuspendAll+0x18>)
 800801c:	6013      	str	r3, [r2, #0]
}
 800801e:	bf00      	nop
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	20000ab4 	.word	0x20000ab4

0800802c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008036:	2300      	movs	r3, #0
 8008038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800803a:	4b41      	ldr	r3, [pc, #260]	; (8008140 <xTaskResumeAll+0x114>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d109      	bne.n	8008056 <xTaskResumeAll+0x2a>
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	e7fe      	b.n	8008054 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008056:	f001 fa57 	bl	8009508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800805a:	4b39      	ldr	r3, [pc, #228]	; (8008140 <xTaskResumeAll+0x114>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3b01      	subs	r3, #1
 8008060:	4a37      	ldr	r2, [pc, #220]	; (8008140 <xTaskResumeAll+0x114>)
 8008062:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008064:	4b36      	ldr	r3, [pc, #216]	; (8008140 <xTaskResumeAll+0x114>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d161      	bne.n	8008130 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800806c:	4b35      	ldr	r3, [pc, #212]	; (8008144 <xTaskResumeAll+0x118>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d05d      	beq.n	8008130 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008074:	e02e      	b.n	80080d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008076:	4b34      	ldr	r3, [pc, #208]	; (8008148 <xTaskResumeAll+0x11c>)
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3318      	adds	r3, #24
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fe4a 	bl	8006d1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3304      	adds	r3, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fe45 	bl	8006d1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008096:	2201      	movs	r2, #1
 8008098:	409a      	lsls	r2, r3
 800809a:	4b2c      	ldr	r3, [pc, #176]	; (800814c <xTaskResumeAll+0x120>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4313      	orrs	r3, r2
 80080a0:	4a2a      	ldr	r2, [pc, #168]	; (800814c <xTaskResumeAll+0x120>)
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4a27      	ldr	r2, [pc, #156]	; (8008150 <xTaskResumeAll+0x124>)
 80080b2:	441a      	add	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3304      	adds	r3, #4
 80080b8:	4619      	mov	r1, r3
 80080ba:	4610      	mov	r0, r2
 80080bc:	f7fe fdd3 	bl	8006c66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	4b23      	ldr	r3, [pc, #140]	; (8008154 <xTaskResumeAll+0x128>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d302      	bcc.n	80080d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80080ce:	4b22      	ldr	r3, [pc, #136]	; (8008158 <xTaskResumeAll+0x12c>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080d4:	4b1c      	ldr	r3, [pc, #112]	; (8008148 <xTaskResumeAll+0x11c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1cc      	bne.n	8008076 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080e2:	f000 fb47 	bl	8008774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080e6:	4b1d      	ldr	r3, [pc, #116]	; (800815c <xTaskResumeAll+0x130>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d010      	beq.n	8008114 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080f2:	f000 f845 	bl	8008180 <xTaskIncrementTick>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80080fc:	4b16      	ldr	r3, [pc, #88]	; (8008158 <xTaskResumeAll+0x12c>)
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3b01      	subs	r3, #1
 8008106:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f1      	bne.n	80080f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800810e:	4b13      	ldr	r3, [pc, #76]	; (800815c <xTaskResumeAll+0x130>)
 8008110:	2200      	movs	r2, #0
 8008112:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008114:	4b10      	ldr	r3, [pc, #64]	; (8008158 <xTaskResumeAll+0x12c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008120:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <xTaskResumeAll+0x134>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008130:	f001 fa18 	bl	8009564 <vPortExitCritical>

	return xAlreadyYielded;
 8008134:	68bb      	ldr	r3, [r7, #8]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000ab4 	.word	0x20000ab4
 8008144:	20000a8c 	.word	0x20000a8c
 8008148:	20000a4c 	.word	0x20000a4c
 800814c:	20000a94 	.word	0x20000a94
 8008150:	20000990 	.word	0x20000990
 8008154:	2000098c 	.word	0x2000098c
 8008158:	20000aa0 	.word	0x20000aa0
 800815c:	20000a9c 	.word	0x20000a9c
 8008160:	e000ed04 	.word	0xe000ed04

08008164 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800816a:	4b04      	ldr	r3, [pc, #16]	; (800817c <xTaskGetTickCount+0x18>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008170:	687b      	ldr	r3, [r7, #4]
}
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	bc80      	pop	{r7}
 800817a:	4770      	bx	lr
 800817c:	20000a90 	.word	0x20000a90

08008180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800818a:	4b50      	ldr	r3, [pc, #320]	; (80082cc <xTaskIncrementTick+0x14c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 808c 	bne.w	80082ac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008194:	4b4e      	ldr	r3, [pc, #312]	; (80082d0 <xTaskIncrementTick+0x150>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3301      	adds	r3, #1
 800819a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800819c:	4a4c      	ldr	r2, [pc, #304]	; (80082d0 <xTaskIncrementTick+0x150>)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d11f      	bne.n	80081e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80081a8:	4b4a      	ldr	r3, [pc, #296]	; (80082d4 <xTaskIncrementTick+0x154>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <xTaskIncrementTick+0x46>
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	e7fe      	b.n	80081c4 <xTaskIncrementTick+0x44>
 80081c6:	4b43      	ldr	r3, [pc, #268]	; (80082d4 <xTaskIncrementTick+0x154>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	4b42      	ldr	r3, [pc, #264]	; (80082d8 <xTaskIncrementTick+0x158>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a40      	ldr	r2, [pc, #256]	; (80082d4 <xTaskIncrementTick+0x154>)
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	4a40      	ldr	r2, [pc, #256]	; (80082d8 <xTaskIncrementTick+0x158>)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	4b40      	ldr	r3, [pc, #256]	; (80082dc <xTaskIncrementTick+0x15c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3301      	adds	r3, #1
 80081e0:	4a3e      	ldr	r2, [pc, #248]	; (80082dc <xTaskIncrementTick+0x15c>)
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	f000 fac6 	bl	8008774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081e8:	4b3d      	ldr	r3, [pc, #244]	; (80082e0 <xTaskIncrementTick+0x160>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d34d      	bcc.n	800828e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f2:	4b38      	ldr	r3, [pc, #224]	; (80082d4 <xTaskIncrementTick+0x154>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <xTaskIncrementTick+0x80>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e000      	b.n	8008202 <xTaskIncrementTick+0x82>
 8008200:	2300      	movs	r3, #0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d004      	beq.n	8008210 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008206:	4b36      	ldr	r3, [pc, #216]	; (80082e0 <xTaskIncrementTick+0x160>)
 8008208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800820c:	601a      	str	r2, [r3, #0]
					break;
 800820e:	e03e      	b.n	800828e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008210:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <xTaskIncrementTick+0x154>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d203      	bcs.n	8008230 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008228:	4a2d      	ldr	r2, [pc, #180]	; (80082e0 <xTaskIncrementTick+0x160>)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6013      	str	r3, [r2, #0]
						break;
 800822e:	e02e      	b.n	800828e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	3304      	adds	r3, #4
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe fd71 	bl	8006d1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823e:	2b00      	cmp	r3, #0
 8008240:	d004      	beq.n	800824c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	3318      	adds	r3, #24
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fd68 	bl	8006d1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	2201      	movs	r2, #1
 8008252:	409a      	lsls	r2, r3
 8008254:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <xTaskIncrementTick+0x164>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4313      	orrs	r3, r2
 800825a:	4a22      	ldr	r2, [pc, #136]	; (80082e4 <xTaskIncrementTick+0x164>)
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4a1f      	ldr	r2, [pc, #124]	; (80082e8 <xTaskIncrementTick+0x168>)
 800826c:	441a      	add	r2, r3
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	3304      	adds	r3, #4
 8008272:	4619      	mov	r1, r3
 8008274:	4610      	mov	r0, r2
 8008276:	f7fe fcf6 	bl	8006c66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827e:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <xTaskIncrementTick+0x16c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	429a      	cmp	r2, r3
 8008286:	d3b4      	bcc.n	80081f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008288:	2301      	movs	r3, #1
 800828a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800828c:	e7b1      	b.n	80081f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800828e:	4b17      	ldr	r3, [pc, #92]	; (80082ec <xTaskIncrementTick+0x16c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4914      	ldr	r1, [pc, #80]	; (80082e8 <xTaskIncrementTick+0x168>)
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d907      	bls.n	80082b6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80082a6:	2301      	movs	r3, #1
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e004      	b.n	80082b6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80082ac:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <xTaskIncrementTick+0x170>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3301      	adds	r3, #1
 80082b2:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <xTaskIncrementTick+0x170>)
 80082b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80082b6:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <xTaskIncrementTick+0x174>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80082be:	2301      	movs	r3, #1
 80082c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80082c2:	697b      	ldr	r3, [r7, #20]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20000ab4 	.word	0x20000ab4
 80082d0:	20000a90 	.word	0x20000a90
 80082d4:	20000a44 	.word	0x20000a44
 80082d8:	20000a48 	.word	0x20000a48
 80082dc:	20000aa4 	.word	0x20000aa4
 80082e0:	20000aac 	.word	0x20000aac
 80082e4:	20000a94 	.word	0x20000a94
 80082e8:	20000990 	.word	0x20000990
 80082ec:	2000098c 	.word	0x2000098c
 80082f0:	20000a9c 	.word	0x20000a9c
 80082f4:	20000aa0 	.word	0x20000aa0

080082f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082fe:	4b26      	ldr	r3, [pc, #152]	; (8008398 <vTaskSwitchContext+0xa0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008306:	4b25      	ldr	r3, [pc, #148]	; (800839c <vTaskSwitchContext+0xa4>)
 8008308:	2201      	movs	r2, #1
 800830a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800830c:	e03e      	b.n	800838c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800830e:	4b23      	ldr	r3, [pc, #140]	; (800839c <vTaskSwitchContext+0xa4>)
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008314:	4b22      	ldr	r3, [pc, #136]	; (80083a0 <vTaskSwitchContext+0xa8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	fab3 f383 	clz	r3, r3
 8008320:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	f1c3 031f 	rsb	r3, r3, #31
 8008328:	617b      	str	r3, [r7, #20]
 800832a:	491e      	ldr	r1, [pc, #120]	; (80083a4 <vTaskSwitchContext+0xac>)
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <vTaskSwitchContext+0x5a>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	e7fe      	b.n	8008350 <vTaskSwitchContext+0x58>
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4a11      	ldr	r2, [pc, #68]	; (80083a4 <vTaskSwitchContext+0xac>)
 800835e:	4413      	add	r3, r2
 8008360:	613b      	str	r3, [r7, #16]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	3308      	adds	r3, #8
 8008374:	429a      	cmp	r2, r3
 8008376:	d104      	bne.n	8008382 <vTaskSwitchContext+0x8a>
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	605a      	str	r2, [r3, #4]
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	4a07      	ldr	r2, [pc, #28]	; (80083a8 <vTaskSwitchContext+0xb0>)
 800838a:	6013      	str	r3, [r2, #0]
}
 800838c:	bf00      	nop
 800838e:	371c      	adds	r7, #28
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000ab4 	.word	0x20000ab4
 800839c:	20000aa0 	.word	0x20000aa0
 80083a0:	20000a94 	.word	0x20000a94
 80083a4:	20000990 	.word	0x20000990
 80083a8:	2000098c 	.word	0x2000098c

080083ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <vTaskPlaceOnEventList+0x24>
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	e7fe      	b.n	80083ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <vTaskPlaceOnEventList+0x44>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3318      	adds	r3, #24
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7fe fc67 	bl	8006cac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083de:	2101      	movs	r1, #1
 80083e0:	6838      	ldr	r0, [r7, #0]
 80083e2:	f000 fbc5 	bl	8008b70 <prvAddCurrentTaskToDelayedList>
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	2000098c 	.word	0x2000098c

080083f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d109      	bne.n	800841a <vTaskPlaceOnEventListRestricted+0x26>
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	e7fe      	b.n	8008418 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800841a:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <vTaskPlaceOnEventListRestricted+0x50>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3318      	adds	r3, #24
 8008420:	4619      	mov	r1, r3
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7fe fc1f 	bl	8006c66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800842e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008432:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	68b8      	ldr	r0, [r7, #8]
 8008438:	f000 fb9a 	bl	8008b70 <prvAddCurrentTaskToDelayedList>
	}
 800843c:	bf00      	nop
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	2000098c 	.word	0x2000098c

08008448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <xTaskRemoveFromEventList+0x2a>
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	e7fe      	b.n	8008470 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	3318      	adds	r3, #24
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fc50 	bl	8006d1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800847c:	4b1d      	ldr	r3, [pc, #116]	; (80084f4 <xTaskRemoveFromEventList+0xac>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d11c      	bne.n	80084be <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fc47 	bl	8006d1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	2201      	movs	r2, #1
 8008494:	409a      	lsls	r2, r3
 8008496:	4b18      	ldr	r3, [pc, #96]	; (80084f8 <xTaskRemoveFromEventList+0xb0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4313      	orrs	r3, r2
 800849c:	4a16      	ldr	r2, [pc, #88]	; (80084f8 <xTaskRemoveFromEventList+0xb0>)
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4a13      	ldr	r2, [pc, #76]	; (80084fc <xTaskRemoveFromEventList+0xb4>)
 80084ae:	441a      	add	r2, r3
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f7fe fbd5 	bl	8006c66 <vListInsertEnd>
 80084bc:	e005      	b.n	80084ca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	3318      	adds	r3, #24
 80084c2:	4619      	mov	r1, r3
 80084c4:	480e      	ldr	r0, [pc, #56]	; (8008500 <xTaskRemoveFromEventList+0xb8>)
 80084c6:	f7fe fbce 	bl	8006c66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ce:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <xTaskRemoveFromEventList+0xbc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d905      	bls.n	80084e4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <xTaskRemoveFromEventList+0xc0>)
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e001      	b.n	80084e8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80084e8:	697b      	ldr	r3, [r7, #20]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000ab4 	.word	0x20000ab4
 80084f8:	20000a94 	.word	0x20000a94
 80084fc:	20000990 	.word	0x20000990
 8008500:	20000a4c 	.word	0x20000a4c
 8008504:	2000098c 	.word	0x2000098c
 8008508:	20000aa0 	.word	0x20000aa0

0800850c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <vTaskInternalSetTimeOutState+0x24>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800851c:	4b05      	ldr	r3, [pc, #20]	; (8008534 <vTaskInternalSetTimeOutState+0x28>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	605a      	str	r2, [r3, #4]
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	bc80      	pop	{r7}
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000aa4 	.word	0x20000aa4
 8008534:	20000a90 	.word	0x20000a90

08008538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d109      	bne.n	800855c <xTaskCheckForTimeOut+0x24>
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	e7fe      	b.n	800855a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d109      	bne.n	8008576 <xTaskCheckForTimeOut+0x3e>
 8008562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	e7fe      	b.n	8008574 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008576:	f000 ffc7 	bl	8009508 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800857a:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <xTaskCheckForTimeOut+0xb8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008592:	d102      	bne.n	800859a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008594:	2300      	movs	r3, #0
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	e023      	b.n	80085e2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4b15      	ldr	r3, [pc, #84]	; (80085f4 <xTaskCheckForTimeOut+0xbc>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d007      	beq.n	80085b6 <xTaskCheckForTimeOut+0x7e>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d302      	bcc.n	80085b6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	e015      	b.n	80085e2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d20b      	bcs.n	80085d8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff ff9d 	bl	800850c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	e004      	b.n	80085e2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085de:	2301      	movs	r3, #1
 80085e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085e2:	f000 ffbf 	bl	8009564 <vPortExitCritical>

	return xReturn;
 80085e6:	69fb      	ldr	r3, [r7, #28]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20000a90 	.word	0x20000a90
 80085f4:	20000aa4 	.word	0x20000aa4

080085f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085fc:	4b03      	ldr	r3, [pc, #12]	; (800860c <vTaskMissedYield+0x14>)
 80085fe:	2201      	movs	r2, #1
 8008600:	601a      	str	r2, [r3, #0]
}
 8008602:	bf00      	nop
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000aa0 	.word	0x20000aa0

08008610 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008618:	f000 f852 	bl	80086c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <prvIdleTask+0x28>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d9f9      	bls.n	8008618 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008624:	4b05      	ldr	r3, [pc, #20]	; (800863c <prvIdleTask+0x2c>)
 8008626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008634:	e7f0      	b.n	8008618 <prvIdleTask+0x8>
 8008636:	bf00      	nop
 8008638:	20000990 	.word	0x20000990
 800863c:	e000ed04 	.word	0xe000ed04

08008640 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008646:	2300      	movs	r3, #0
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	e00c      	b.n	8008666 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4a12      	ldr	r2, [pc, #72]	; (80086a0 <prvInitialiseTaskLists+0x60>)
 8008658:	4413      	add	r3, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fad8 	bl	8006c10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3301      	adds	r3, #1
 8008664:	607b      	str	r3, [r7, #4]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b06      	cmp	r3, #6
 800866a:	d9ef      	bls.n	800864c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800866c:	480d      	ldr	r0, [pc, #52]	; (80086a4 <prvInitialiseTaskLists+0x64>)
 800866e:	f7fe facf 	bl	8006c10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008672:	480d      	ldr	r0, [pc, #52]	; (80086a8 <prvInitialiseTaskLists+0x68>)
 8008674:	f7fe facc 	bl	8006c10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008678:	480c      	ldr	r0, [pc, #48]	; (80086ac <prvInitialiseTaskLists+0x6c>)
 800867a:	f7fe fac9 	bl	8006c10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800867e:	480c      	ldr	r0, [pc, #48]	; (80086b0 <prvInitialiseTaskLists+0x70>)
 8008680:	f7fe fac6 	bl	8006c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008684:	480b      	ldr	r0, [pc, #44]	; (80086b4 <prvInitialiseTaskLists+0x74>)
 8008686:	f7fe fac3 	bl	8006c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800868a:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <prvInitialiseTaskLists+0x78>)
 800868c:	4a05      	ldr	r2, [pc, #20]	; (80086a4 <prvInitialiseTaskLists+0x64>)
 800868e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <prvInitialiseTaskLists+0x7c>)
 8008692:	4a05      	ldr	r2, [pc, #20]	; (80086a8 <prvInitialiseTaskLists+0x68>)
 8008694:	601a      	str	r2, [r3, #0]
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000990 	.word	0x20000990
 80086a4:	20000a1c 	.word	0x20000a1c
 80086a8:	20000a30 	.word	0x20000a30
 80086ac:	20000a4c 	.word	0x20000a4c
 80086b0:	20000a60 	.word	0x20000a60
 80086b4:	20000a78 	.word	0x20000a78
 80086b8:	20000a44 	.word	0x20000a44
 80086bc:	20000a48 	.word	0x20000a48

080086c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086c6:	e019      	b.n	80086fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086c8:	f000 ff1e 	bl	8009508 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80086cc:	4b0f      	ldr	r3, [pc, #60]	; (800870c <prvCheckTasksWaitingTermination+0x4c>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fb1f 	bl	8006d1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086de:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <prvCheckTasksWaitingTermination+0x50>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	4a0a      	ldr	r2, [pc, #40]	; (8008710 <prvCheckTasksWaitingTermination+0x50>)
 80086e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <prvCheckTasksWaitingTermination+0x54>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	4a09      	ldr	r2, [pc, #36]	; (8008714 <prvCheckTasksWaitingTermination+0x54>)
 80086f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086f2:	f000 ff37 	bl	8009564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f80e 	bl	8008718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <prvCheckTasksWaitingTermination+0x54>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e1      	bne.n	80086c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000a60 	.word	0x20000a60
 8008710:	20000a8c 	.word	0x20000a8c
 8008714:	20000a74 	.word	0x20000a74

08008718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008726:	2b00      	cmp	r3, #0
 8008728:	d108      	bne.n	800873c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	4618      	mov	r0, r3
 8008730:	f001 f8a2 	bl	8009878 <vPortFree>
				vPortFree( pxTCB );
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f89f 	bl	8009878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800873a:	e017      	b.n	800876c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008742:	2b01      	cmp	r3, #1
 8008744:	d103      	bne.n	800874e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 f896 	bl	8009878 <vPortFree>
	}
 800874c:	e00e      	b.n	800876c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008754:	2b02      	cmp	r3, #2
 8008756:	d009      	beq.n	800876c <prvDeleteTCB+0x54>
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	e7fe      	b.n	800876a <prvDeleteTCB+0x52>
	}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800877a:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <prvResetNextTaskUnblockTime+0x40>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <prvResetNextTaskUnblockTime+0x14>
 8008784:	2301      	movs	r3, #1
 8008786:	e000      	b.n	800878a <prvResetNextTaskUnblockTime+0x16>
 8008788:	2300      	movs	r3, #0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d004      	beq.n	8008798 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800878e:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <prvResetNextTaskUnblockTime+0x44>)
 8008790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008794:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008796:	e008      	b.n	80087aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008798:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <prvResetNextTaskUnblockTime+0x40>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <prvResetNextTaskUnblockTime+0x44>)
 80087a8:	6013      	str	r3, [r2, #0]
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bc80      	pop	{r7}
 80087b2:	4770      	bx	lr
 80087b4:	20000a44 	.word	0x20000a44
 80087b8:	20000aac 	.word	0x20000aac

080087bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087c2:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <xTaskGetSchedulerState+0x34>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d102      	bne.n	80087d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087ca:	2301      	movs	r3, #1
 80087cc:	607b      	str	r3, [r7, #4]
 80087ce:	e008      	b.n	80087e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d0:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <xTaskGetSchedulerState+0x38>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087d8:	2302      	movs	r3, #2
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	e001      	b.n	80087e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087e2:	687b      	ldr	r3, [r7, #4]
	}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	20000a98 	.word	0x20000a98
 80087f4:	20000ab4 	.word	0x20000ab4

080087f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008804:	2300      	movs	r3, #0
 8008806:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d06e      	beq.n	80088ec <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008812:	4b39      	ldr	r3, [pc, #228]	; (80088f8 <xTaskPriorityInherit+0x100>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	429a      	cmp	r2, r3
 800881a:	d25e      	bcs.n	80088da <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	2b00      	cmp	r3, #0
 8008822:	db06      	blt.n	8008832 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008824:	4b34      	ldr	r3, [pc, #208]	; (80088f8 <xTaskPriorityInherit+0x100>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	f1c3 0207 	rsb	r2, r3, #7
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	6959      	ldr	r1, [r3, #20]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4a2e      	ldr	r2, [pc, #184]	; (80088fc <xTaskPriorityInherit+0x104>)
 8008844:	4413      	add	r3, r2
 8008846:	4299      	cmp	r1, r3
 8008848:	d101      	bne.n	800884e <xTaskPriorityInherit+0x56>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <xTaskPriorityInherit+0x58>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d03a      	beq.n	80088ca <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	3304      	adds	r3, #4
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe fa5f 	bl	8006d1c <uxListRemove>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d115      	bne.n	8008890 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008868:	4924      	ldr	r1, [pc, #144]	; (80088fc <xTaskPriorityInherit+0x104>)
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <xTaskPriorityInherit+0x98>
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	2201      	movs	r2, #1
 8008880:	fa02 f303 	lsl.w	r3, r2, r3
 8008884:	43da      	mvns	r2, r3
 8008886:	4b1e      	ldr	r3, [pc, #120]	; (8008900 <xTaskPriorityInherit+0x108>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4013      	ands	r3, r2
 800888c:	4a1c      	ldr	r2, [pc, #112]	; (8008900 <xTaskPriorityInherit+0x108>)
 800888e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008890:	4b19      	ldr	r3, [pc, #100]	; (80088f8 <xTaskPriorityInherit+0x100>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889e:	2201      	movs	r2, #1
 80088a0:	409a      	lsls	r2, r3
 80088a2:	4b17      	ldr	r3, [pc, #92]	; (8008900 <xTaskPriorityInherit+0x108>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	4a15      	ldr	r2, [pc, #84]	; (8008900 <xTaskPriorityInherit+0x108>)
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4a10      	ldr	r2, [pc, #64]	; (80088fc <xTaskPriorityInherit+0x104>)
 80088ba:	441a      	add	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f7fe f9cf 	bl	8006c66 <vListInsertEnd>
 80088c8:	e004      	b.n	80088d4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088ca:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <xTaskPriorityInherit+0x100>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80088d4:	2301      	movs	r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e008      	b.n	80088ec <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088de:	4b06      	ldr	r3, [pc, #24]	; (80088f8 <xTaskPriorityInherit+0x100>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d201      	bcs.n	80088ec <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80088e8:	2301      	movs	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088ec:	68fb      	ldr	r3, [r7, #12]
	}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	2000098c 	.word	0x2000098c
 80088fc:	20000990 	.word	0x20000990
 8008900:	20000a94 	.word	0x20000a94

08008904 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008910:	2300      	movs	r3, #0
 8008912:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d06c      	beq.n	80089f4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800891a:	4b39      	ldr	r3, [pc, #228]	; (8008a00 <xTaskPriorityDisinherit+0xfc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	429a      	cmp	r2, r3
 8008922:	d009      	beq.n	8008938 <xTaskPriorityDisinherit+0x34>
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	e7fe      	b.n	8008936 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893c:	2b00      	cmp	r3, #0
 800893e:	d109      	bne.n	8008954 <xTaskPriorityDisinherit+0x50>
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60bb      	str	r3, [r7, #8]
 8008952:	e7fe      	b.n	8008952 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008958:	1e5a      	subs	r2, r3, #1
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008966:	429a      	cmp	r2, r3
 8008968:	d044      	beq.n	80089f4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800896e:	2b00      	cmp	r3, #0
 8008970:	d140      	bne.n	80089f4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	3304      	adds	r3, #4
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe f9d0 	bl	8006d1c <uxListRemove>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d115      	bne.n	80089ae <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008986:	491f      	ldr	r1, [pc, #124]	; (8008a04 <xTaskPriorityDisinherit+0x100>)
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	440b      	add	r3, r1
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <xTaskPriorityDisinherit+0xaa>
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	2201      	movs	r2, #1
 800899e:	fa02 f303 	lsl.w	r3, r2, r3
 80089a2:	43da      	mvns	r2, r3
 80089a4:	4b18      	ldr	r3, [pc, #96]	; (8008a08 <xTaskPriorityDisinherit+0x104>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4013      	ands	r3, r2
 80089aa:	4a17      	ldr	r2, [pc, #92]	; (8008a08 <xTaskPriorityDisinherit+0x104>)
 80089ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	f1c3 0207 	rsb	r2, r3, #7
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	2201      	movs	r2, #1
 80089c8:	409a      	lsls	r2, r3
 80089ca:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <xTaskPriorityDisinherit+0x104>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	4a0d      	ldr	r2, [pc, #52]	; (8008a08 <xTaskPriorityDisinherit+0x104>)
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <xTaskPriorityDisinherit+0x100>)
 80089e2:	441a      	add	r2, r3
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f7fe f93b 	bl	8006c66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089f4:	697b      	ldr	r3, [r7, #20]
	}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	2000098c 	.word	0x2000098c
 8008a04:	20000990 	.word	0x20000990
 8008a08:	20000a94 	.word	0x20000a94

08008a0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 8086 	beq.w	8008b32 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e7fe      	b.n	8008a40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d902      	bls.n	8008a52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	61fb      	str	r3, [r7, #28]
 8008a50:	e002      	b.n	8008a58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	69fa      	ldr	r2, [r7, #28]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d067      	beq.n	8008b32 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d162      	bne.n	8008b32 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a6c:	4b33      	ldr	r3, [pc, #204]	; (8008b3c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d109      	bne.n	8008a8a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	60bb      	str	r3, [r7, #8]
 8008a88:	e7fe      	b.n	8008a88 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	db04      	blt.n	8008aa8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	f1c3 0207 	rsb	r2, r3, #7
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	6959      	ldr	r1, [r3, #20]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4a22      	ldr	r2, [pc, #136]	; (8008b40 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008ab8:	4413      	add	r3, r2
 8008aba:	4299      	cmp	r1, r3
 8008abc:	d101      	bne.n	8008ac2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d034      	beq.n	8008b32 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe f925 	bl	8006d1c <uxListRemove>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d115      	bne.n	8008b04 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	4918      	ldr	r1, [pc, #96]	; (8008b40 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10a      	bne.n	8008b04 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	2201      	movs	r2, #1
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	43da      	mvns	r2, r3
 8008afa:	4b12      	ldr	r3, [pc, #72]	; (8008b44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4013      	ands	r3, r2
 8008b00:	4a10      	ldr	r2, [pc, #64]	; (8008b44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b02:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	2201      	movs	r2, #1
 8008b0a:	409a      	lsls	r2, r3
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	4a0c      	ldr	r2, [pc, #48]	; (8008b44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a07      	ldr	r2, [pc, #28]	; (8008b40 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008b24:	441a      	add	r2, r3
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7fe f89a 	bl	8006c66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b32:	bf00      	nop
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	2000098c 	.word	0x2000098c
 8008b40:	20000990 	.word	0x20000990
 8008b44:	20000a94 	.word	0x20000a94

08008b48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b4c:	4b07      	ldr	r3, [pc, #28]	; (8008b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b5a:	3201      	adds	r2, #1
 8008b5c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008b5e:	4b03      	ldr	r3, [pc, #12]	; (8008b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b60:	681b      	ldr	r3, [r3, #0]
	}
 8008b62:	4618      	mov	r0, r3
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bc80      	pop	{r7}
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	2000098c 	.word	0x2000098c

08008b70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b7a:	4b29      	ldr	r3, [pc, #164]	; (8008c20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b80:	4b28      	ldr	r3, [pc, #160]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe f8c8 	bl	8006d1c <uxListRemove>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008b92:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	2201      	movs	r2, #1
 8008b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9e:	43da      	mvns	r2, r3
 8008ba0:	4b21      	ldr	r3, [pc, #132]	; (8008c28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	4a20      	ldr	r2, [pc, #128]	; (8008c28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ba8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bb0:	d10a      	bne.n	8008bc8 <prvAddCurrentTaskToDelayedList+0x58>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d007      	beq.n	8008bc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	481a      	ldr	r0, [pc, #104]	; (8008c2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008bc2:	f7fe f850 	bl	8006c66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bc6:	e026      	b.n	8008c16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bd0:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d209      	bcs.n	8008bf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3304      	adds	r3, #4
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f7fe f85d 	bl	8006cac <vListInsert>
}
 8008bf2:	e010      	b.n	8008c16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7fe f853 	bl	8006cac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c06:	4b0c      	ldr	r3, [pc, #48]	; (8008c38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d202      	bcs.n	8008c16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c10:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	6013      	str	r3, [r2, #0]
}
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000a90 	.word	0x20000a90
 8008c24:	2000098c 	.word	0x2000098c
 8008c28:	20000a94 	.word	0x20000a94
 8008c2c:	20000a78 	.word	0x20000a78
 8008c30:	20000a48 	.word	0x20000a48
 8008c34:	20000a44 	.word	0x20000a44
 8008c38:	20000aac 	.word	0x20000aac

08008c3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c46:	f000 fb37 	bl	80092b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c4a:	4b1c      	ldr	r3, [pc, #112]	; (8008cbc <xTimerCreateTimerTask+0x80>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d021      	beq.n	8008c96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c5a:	1d3a      	adds	r2, r7, #4
 8008c5c:	f107 0108 	add.w	r1, r7, #8
 8008c60:	f107 030c 	add.w	r3, r7, #12
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7f7 fe89 	bl	800097c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	9202      	str	r2, [sp, #8]
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	2305      	movs	r3, #5
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	460a      	mov	r2, r1
 8008c7c:	4910      	ldr	r1, [pc, #64]	; (8008cc0 <xTimerCreateTimerTask+0x84>)
 8008c7e:	4811      	ldr	r0, [pc, #68]	; (8008cc4 <xTimerCreateTimerTask+0x88>)
 8008c80:	f7fe ffa8 	bl	8007bd4 <xTaskCreateStatic>
 8008c84:	4602      	mov	r2, r0
 8008c86:	4b10      	ldr	r3, [pc, #64]	; (8008cc8 <xTimerCreateTimerTask+0x8c>)
 8008c88:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c8a:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <xTimerCreateTimerTask+0x8c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c92:	2301      	movs	r3, #1
 8008c94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d109      	bne.n	8008cb0 <xTimerCreateTimerTask+0x74>
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	e7fe      	b.n	8008cae <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008cb0:	697b      	ldr	r3, [r7, #20]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000ae8 	.word	0x20000ae8
 8008cc0:	0800a580 	.word	0x0800a580
 8008cc4:	08008f01 	.word	0x08008f01
 8008cc8:	20000aec 	.word	0x20000aec

08008ccc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008cda:	202c      	movs	r0, #44	; 0x2c
 8008cdc:	f000 fd0a 	bl	80096f4 <pvPortMalloc>
 8008ce0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00d      	beq.n	8008d04 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	9301      	str	r3, [sp, #4]
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f844 	bl	8008d84 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008d04:	697b      	ldr	r3, [r7, #20]
	}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b08a      	sub	sp, #40	; 0x28
 8008d12:	af02      	add	r7, sp, #8
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008d1c:	232c      	movs	r3, #44	; 0x2c
 8008d1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b2c      	cmp	r3, #44	; 0x2c
 8008d24:	d009      	beq.n	8008d3a <xTimerCreateStatic+0x2c>
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	61bb      	str	r3, [r7, #24]
 8008d38:	e7fe      	b.n	8008d38 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <xTimerCreateStatic+0x46>
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	e7fe      	b.n	8008d52 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00d      	beq.n	8008d7a <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f809 	bl	8008d84 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
	}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d109      	bne.n	8008dac <prvInitialiseNewTimer+0x28>
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	e7fe      	b.n	8008daa <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d015      	beq.n	8008dde <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008db2:	f000 fa81 	bl	80092b8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	6a3a      	ldr	r2, [r7, #32]
 8008dd2:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fd ff38 	bl	8006c4e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008dde:	bf00      	nop
 8008de0:	3718      	adds	r7, #24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08a      	sub	sp, #40	; 0x28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d109      	bne.n	8008e14 <xTimerGenericCommand+0x2c>
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	623b      	str	r3, [r7, #32]
 8008e12:	e7fe      	b.n	8008e12 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e14:	4b19      	ldr	r3, [pc, #100]	; (8008e7c <xTimerGenericCommand+0x94>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d02a      	beq.n	8008e72 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	dc18      	bgt.n	8008e60 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e2e:	f7ff fcc5 	bl	80087bc <xTaskGetSchedulerState>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d109      	bne.n	8008e4c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e38:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <xTimerGenericCommand+0x94>)
 8008e3a:	6818      	ldr	r0, [r3, #0]
 8008e3c:	f107 0114 	add.w	r1, r7, #20
 8008e40:	2300      	movs	r3, #0
 8008e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e44:	f7fe f8ca 	bl	8006fdc <xQueueGenericSend>
 8008e48:	6278      	str	r0, [r7, #36]	; 0x24
 8008e4a:	e012      	b.n	8008e72 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <xTimerGenericCommand+0x94>)
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	f107 0114 	add.w	r1, r7, #20
 8008e54:	2300      	movs	r3, #0
 8008e56:	2200      	movs	r2, #0
 8008e58:	f7fe f8c0 	bl	8006fdc <xQueueGenericSend>
 8008e5c:	6278      	str	r0, [r7, #36]	; 0x24
 8008e5e:	e008      	b.n	8008e72 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <xTimerGenericCommand+0x94>)
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	f107 0114 	add.w	r1, r7, #20
 8008e68:	2300      	movs	r3, #0
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	f7fe f9b0 	bl	80071d0 <xQueueGenericSendFromISR>
 8008e70:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3728      	adds	r7, #40	; 0x28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20000ae8 	.word	0x20000ae8

08008e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e8a:	4b1c      	ldr	r3, [pc, #112]	; (8008efc <prvProcessExpiredTimer+0x7c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	3304      	adds	r3, #4
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fd ff3f 	bl	8006d1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d121      	bne.n	8008eea <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	18d1      	adds	r1, r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	6978      	ldr	r0, [r7, #20]
 8008eb4:	f000 f8c8 	bl	8009048 <prvInsertTimerInActiveList>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d015      	beq.n	8008eea <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6978      	ldr	r0, [r7, #20]
 8008eca:	f7ff ff8d 	bl	8008de8 <xTimerGenericCommand>
 8008ece:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d109      	bne.n	8008eea <prvProcessExpiredTimer+0x6a>
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	e7fe      	b.n	8008ee8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	6978      	ldr	r0, [r7, #20]
 8008ef0:	4798      	blx	r3
}
 8008ef2:	bf00      	nop
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000ae0 	.word	0x20000ae0

08008f00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f08:	f107 0308 	add.w	r3, r7, #8
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 f857 	bl	8008fc0 <prvGetNextExpireTime>
 8008f12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4619      	mov	r1, r3
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 f803 	bl	8008f24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f1e:	f000 f8d5 	bl	80090cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f22:	e7f1      	b.n	8008f08 <prvTimerTask+0x8>

08008f24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f2e:	f7ff f86f 	bl	8008010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 f866 	bl	8009008 <prvSampleTimeNow>
 8008f3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d130      	bne.n	8008fa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <prvProcessTimerOrBlockTask+0x3c>
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d806      	bhi.n	8008f60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f52:	f7ff f86b 	bl	800802c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f56:	68f9      	ldr	r1, [r7, #12]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff ff91 	bl	8008e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f5e:	e024      	b.n	8008faa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d008      	beq.n	8008f78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f66:	4b13      	ldr	r3, [pc, #76]	; (8008fb4 <prvProcessTimerOrBlockTask+0x90>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	bf0c      	ite	eq
 8008f70:	2301      	moveq	r3, #1
 8008f72:	2300      	movne	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <prvProcessTimerOrBlockTask+0x94>)
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4619      	mov	r1, r3
 8008f86:	f7fe fdf1 	bl	8007b6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f8a:	f7ff f84f 	bl	800802c <xTaskResumeAll>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10a      	bne.n	8008faa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f94:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <prvProcessTimerOrBlockTask+0x98>)
 8008f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
}
 8008fa4:	e001      	b.n	8008faa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fa6:	f7ff f841 	bl	800802c <xTaskResumeAll>
}
 8008faa:	bf00      	nop
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000ae4 	.word	0x20000ae4
 8008fb8:	20000ae8 	.word	0x20000ae8
 8008fbc:	e000ed04 	.word	0xe000ed04

08008fc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fc8:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <prvGetNextExpireTime+0x44>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bf0c      	ite	eq
 8008fd2:	2301      	moveq	r3, #1
 8008fd4:	2300      	movne	r3, #0
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fe6:	4b07      	ldr	r3, [pc, #28]	; (8009004 <prvGetNextExpireTime+0x44>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e001      	b.n	8008ff6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000ae0 	.word	0x20000ae0

08009008 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009010:	f7ff f8a8 	bl	8008164 <xTaskGetTickCount>
 8009014:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009016:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <prvSampleTimeNow+0x3c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	429a      	cmp	r2, r3
 800901e:	d205      	bcs.n	800902c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009020:	f000 f8ea 	bl	80091f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	e002      	b.n	8009032 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <prvSampleTimeNow+0x3c>)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009038:	68fb      	ldr	r3, [r7, #12]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000af0 	.word	0x20000af0

08009048 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	429a      	cmp	r2, r3
 800906c:	d812      	bhi.n	8009094 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	1ad2      	subs	r2, r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	429a      	cmp	r2, r3
 800907a:	d302      	bcc.n	8009082 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800907c:	2301      	movs	r3, #1
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	e01b      	b.n	80090ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009082:	4b10      	ldr	r3, [pc, #64]	; (80090c4 <prvInsertTimerInActiveList+0x7c>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3304      	adds	r3, #4
 800908a:	4619      	mov	r1, r3
 800908c:	4610      	mov	r0, r2
 800908e:	f7fd fe0d 	bl	8006cac <vListInsert>
 8009092:	e012      	b.n	80090ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d206      	bcs.n	80090aa <prvInsertTimerInActiveList+0x62>
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d302      	bcc.n	80090aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090a4:	2301      	movs	r3, #1
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	e007      	b.n	80090ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <prvInsertTimerInActiveList+0x80>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4619      	mov	r1, r3
 80090b4:	4610      	mov	r0, r2
 80090b6:	f7fd fdf9 	bl	8006cac <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090ba:	697b      	ldr	r3, [r7, #20]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	20000ae4 	.word	0x20000ae4
 80090c8:	20000ae0 	.word	0x20000ae0

080090cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08c      	sub	sp, #48	; 0x30
 80090d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090d2:	e07f      	b.n	80091d4 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	db7b      	blt.n	80091d2 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80090de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	3304      	adds	r3, #4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fd fe16 	bl	8006d1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090f0:	1d3b      	adds	r3, r7, #4
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff ff88 	bl	8009008 <prvSampleTimeNow>
 80090f8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2b09      	cmp	r3, #9
 80090fe:	d869      	bhi.n	80091d4 <prvProcessReceivedCommands+0x108>
 8009100:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <prvProcessReceivedCommands+0x3c>)
 8009102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009106:	bf00      	nop
 8009108:	08009131 	.word	0x08009131
 800910c:	08009131 	.word	0x08009131
 8009110:	08009131 	.word	0x08009131
 8009114:	080091d5 	.word	0x080091d5
 8009118:	0800918b 	.word	0x0800918b
 800911c:	080091c1 	.word	0x080091c1
 8009120:	08009131 	.word	0x08009131
 8009124:	08009131 	.word	0x08009131
 8009128:	080091d5 	.word	0x080091d5
 800912c:	0800918b 	.word	0x0800918b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	18d1      	adds	r1, r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6a3a      	ldr	r2, [r7, #32]
 800913c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800913e:	f7ff ff83 	bl	8009048 <prvInsertTimerInActiveList>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d045      	beq.n	80091d4 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800914e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d13d      	bne.n	80091d4 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	441a      	add	r2, r3
 8009160:	2300      	movs	r3, #0
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	2100      	movs	r1, #0
 8009168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800916a:	f7ff fe3d 	bl	8008de8 <xTimerGenericCommand>
 800916e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d12e      	bne.n	80091d4 <prvProcessReceivedCommands+0x108>
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	61bb      	str	r3, [r7, #24]
 8009188:	e7fe      	b.n	8009188 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d109      	bne.n	80091ac <prvProcessReceivedCommands+0xe0>
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	617b      	str	r3, [r7, #20]
 80091aa:	e7fe      	b.n	80091aa <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	699a      	ldr	r2, [r3, #24]
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	18d1      	adds	r1, r2, r3
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	6a3a      	ldr	r2, [r7, #32]
 80091b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091ba:	f7ff ff45 	bl	8009048 <prvInsertTimerInActiveList>
					break;
 80091be:	e009      	b.n	80091d4 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d104      	bne.n	80091d4 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80091ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091cc:	f000 fb54 	bl	8009878 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80091d0:	e000      	b.n	80091d4 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80091d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091d4:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <prvProcessReceivedCommands+0x128>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f107 0108 	add.w	r1, r7, #8
 80091dc:	2200      	movs	r2, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe f914 	bl	800740c <xQueueReceive>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f47f af74 	bne.w	80090d4 <prvProcessReceivedCommands+0x8>
	}
}
 80091ec:	bf00      	nop
 80091ee:	3728      	adds	r7, #40	; 0x28
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000ae8 	.word	0x20000ae8

080091f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091fe:	e044      	b.n	800928a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009200:	4b2b      	ldr	r3, [pc, #172]	; (80092b0 <prvSwitchTimerLists+0xb8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800920a:	4b29      	ldr	r3, [pc, #164]	; (80092b0 <prvSwitchTimerLists+0xb8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3304      	adds	r3, #4
 8009218:	4618      	mov	r0, r3
 800921a:	f7fd fd7f 	bl	8006d1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d12d      	bne.n	800928a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4413      	add	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	429a      	cmp	r2, r3
 800923e:	d90e      	bls.n	800925e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800924c:	4b18      	ldr	r3, [pc, #96]	; (80092b0 <prvSwitchTimerLists+0xb8>)
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3304      	adds	r3, #4
 8009254:	4619      	mov	r1, r3
 8009256:	4610      	mov	r0, r2
 8009258:	f7fd fd28 	bl	8006cac <vListInsert>
 800925c:	e015      	b.n	800928a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800925e:	2300      	movs	r3, #0
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	2300      	movs	r3, #0
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fdbd 	bl	8008de8 <xTimerGenericCommand>
 800926e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d109      	bne.n	800928a <prvSwitchTimerLists+0x92>
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	e7fe      	b.n	8009288 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800928a:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <prvSwitchTimerLists+0xb8>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1b5      	bne.n	8009200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009294:	4b06      	ldr	r3, [pc, #24]	; (80092b0 <prvSwitchTimerLists+0xb8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800929a:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <prvSwitchTimerLists+0xbc>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a04      	ldr	r2, [pc, #16]	; (80092b0 <prvSwitchTimerLists+0xb8>)
 80092a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80092a2:	4a04      	ldr	r2, [pc, #16]	; (80092b4 <prvSwitchTimerLists+0xbc>)
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	6013      	str	r3, [r2, #0]
}
 80092a8:	bf00      	nop
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20000ae0 	.word	0x20000ae0
 80092b4:	20000ae4 	.word	0x20000ae4

080092b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80092be:	f000 f923 	bl	8009508 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80092c2:	4b15      	ldr	r3, [pc, #84]	; (8009318 <prvCheckForValidListAndQueue+0x60>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d120      	bne.n	800930c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80092ca:	4814      	ldr	r0, [pc, #80]	; (800931c <prvCheckForValidListAndQueue+0x64>)
 80092cc:	f7fd fca0 	bl	8006c10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80092d0:	4813      	ldr	r0, [pc, #76]	; (8009320 <prvCheckForValidListAndQueue+0x68>)
 80092d2:	f7fd fc9d 	bl	8006c10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <prvCheckForValidListAndQueue+0x6c>)
 80092d8:	4a10      	ldr	r2, [pc, #64]	; (800931c <prvCheckForValidListAndQueue+0x64>)
 80092da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80092dc:	4b12      	ldr	r3, [pc, #72]	; (8009328 <prvCheckForValidListAndQueue+0x70>)
 80092de:	4a10      	ldr	r2, [pc, #64]	; (8009320 <prvCheckForValidListAndQueue+0x68>)
 80092e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092e2:	2300      	movs	r3, #0
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	4b11      	ldr	r3, [pc, #68]	; (800932c <prvCheckForValidListAndQueue+0x74>)
 80092e8:	4a11      	ldr	r2, [pc, #68]	; (8009330 <prvCheckForValidListAndQueue+0x78>)
 80092ea:	210c      	movs	r1, #12
 80092ec:	200a      	movs	r0, #10
 80092ee:	f7fd fda7 	bl	8006e40 <xQueueGenericCreateStatic>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b08      	ldr	r3, [pc, #32]	; (8009318 <prvCheckForValidListAndQueue+0x60>)
 80092f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092f8:	4b07      	ldr	r3, [pc, #28]	; (8009318 <prvCheckForValidListAndQueue+0x60>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009300:	4b05      	ldr	r3, [pc, #20]	; (8009318 <prvCheckForValidListAndQueue+0x60>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	490b      	ldr	r1, [pc, #44]	; (8009334 <prvCheckForValidListAndQueue+0x7c>)
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fc08 	bl	8007b1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800930c:	f000 f92a 	bl	8009564 <vPortExitCritical>
}
 8009310:	bf00      	nop
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000ae8 	.word	0x20000ae8
 800931c:	20000ab8 	.word	0x20000ab8
 8009320:	20000acc 	.word	0x20000acc
 8009324:	20000ae0 	.word	0x20000ae0
 8009328:	20000ae4 	.word	0x20000ae4
 800932c:	20000b6c 	.word	0x20000b6c
 8009330:	20000af4 	.word	0x20000af4
 8009334:	0800a588 	.word	0x0800a588

08009338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3b04      	subs	r3, #4
 8009348:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3b04      	subs	r3, #4
 8009356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f023 0201 	bic.w	r2, r3, #1
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	3b04      	subs	r3, #4
 8009366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009368:	4a08      	ldr	r2, [pc, #32]	; (800938c <pxPortInitialiseStack+0x54>)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3b14      	subs	r3, #20
 8009372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3b20      	subs	r3, #32
 800937e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009380:	68fb      	ldr	r3, [r7, #12]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	bc80      	pop	{r7}
 800938a:	4770      	bx	lr
 800938c:	08009391 	.word	0x08009391

08009390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009396:	2300      	movs	r3, #0
 8009398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800939a:	4b10      	ldr	r3, [pc, #64]	; (80093dc <prvTaskExitError+0x4c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a2:	d009      	beq.n	80093b8 <prvTaskExitError+0x28>
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	e7fe      	b.n	80093b6 <prvTaskExitError+0x26>
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093ca:	bf00      	nop
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0fc      	beq.n	80093cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bc80      	pop	{r7}
 80093da:	4770      	bx	lr
 80093dc:	20000070 	.word	0x20000070

080093e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093e0:	4b07      	ldr	r3, [pc, #28]	; (8009400 <pxCurrentTCBConst2>)
 80093e2:	6819      	ldr	r1, [r3, #0]
 80093e4:	6808      	ldr	r0, [r1, #0]
 80093e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093ea:	f380 8809 	msr	PSP, r0
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8811 	msr	BASEPRI, r0
 80093fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80093fe:	4770      	bx	lr

08009400 <pxCurrentTCBConst2>:
 8009400:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop

08009408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009408:	4806      	ldr	r0, [pc, #24]	; (8009424 <prvPortStartFirstTask+0x1c>)
 800940a:	6800      	ldr	r0, [r0, #0]
 800940c:	6800      	ldr	r0, [r0, #0]
 800940e:	f380 8808 	msr	MSP, r0
 8009412:	b662      	cpsie	i
 8009414:	b661      	cpsie	f
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	df00      	svc	0
 8009420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009422:	bf00      	nop
 8009424:	e000ed08 	.word	0xe000ed08

08009428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800942e:	4b31      	ldr	r3, [pc, #196]	; (80094f4 <xPortStartScheduler+0xcc>)
 8009430:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	22ff      	movs	r2, #255	; 0xff
 800943e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	b2db      	uxtb	r3, r3
 800944c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009450:	b2da      	uxtb	r2, r3
 8009452:	4b29      	ldr	r3, [pc, #164]	; (80094f8 <xPortStartScheduler+0xd0>)
 8009454:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009456:	4b29      	ldr	r3, [pc, #164]	; (80094fc <xPortStartScheduler+0xd4>)
 8009458:	2207      	movs	r2, #7
 800945a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800945c:	e009      	b.n	8009472 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800945e:	4b27      	ldr	r3, [pc, #156]	; (80094fc <xPortStartScheduler+0xd4>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3b01      	subs	r3, #1
 8009464:	4a25      	ldr	r2, [pc, #148]	; (80094fc <xPortStartScheduler+0xd4>)
 8009466:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	b2db      	uxtb	r3, r3
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	b2db      	uxtb	r3, r3
 8009470:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947a:	2b80      	cmp	r3, #128	; 0x80
 800947c:	d0ef      	beq.n	800945e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800947e:	4b1f      	ldr	r3, [pc, #124]	; (80094fc <xPortStartScheduler+0xd4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f1c3 0307 	rsb	r3, r3, #7
 8009486:	2b04      	cmp	r3, #4
 8009488:	d009      	beq.n	800949e <xPortStartScheduler+0x76>
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	60bb      	str	r3, [r7, #8]
 800949c:	e7fe      	b.n	800949c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800949e:	4b17      	ldr	r3, [pc, #92]	; (80094fc <xPortStartScheduler+0xd4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	021b      	lsls	r3, r3, #8
 80094a4:	4a15      	ldr	r2, [pc, #84]	; (80094fc <xPortStartScheduler+0xd4>)
 80094a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094a8:	4b14      	ldr	r3, [pc, #80]	; (80094fc <xPortStartScheduler+0xd4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094b0:	4a12      	ldr	r2, [pc, #72]	; (80094fc <xPortStartScheduler+0xd4>)
 80094b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094bc:	4b10      	ldr	r3, [pc, #64]	; (8009500 <xPortStartScheduler+0xd8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a0f      	ldr	r2, [pc, #60]	; (8009500 <xPortStartScheduler+0xd8>)
 80094c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094c8:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <xPortStartScheduler+0xd8>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a0c      	ldr	r2, [pc, #48]	; (8009500 <xPortStartScheduler+0xd8>)
 80094ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094d4:	f000 f8b0 	bl	8009638 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094d8:	4b0a      	ldr	r3, [pc, #40]	; (8009504 <xPortStartScheduler+0xdc>)
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094de:	f7ff ff93 	bl	8009408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094e2:	f7fe ff09 	bl	80082f8 <vTaskSwitchContext>
	prvTaskExitError();
 80094e6:	f7ff ff53 	bl	8009390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	e000e400 	.word	0xe000e400
 80094f8:	20000bb4 	.word	0x20000bb4
 80094fc:	20000bb8 	.word	0x20000bb8
 8009500:	e000ed20 	.word	0xe000ed20
 8009504:	20000070 	.word	0x20000070

08009508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009520:	4b0e      	ldr	r3, [pc, #56]	; (800955c <vPortEnterCritical+0x54>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3301      	adds	r3, #1
 8009526:	4a0d      	ldr	r2, [pc, #52]	; (800955c <vPortEnterCritical+0x54>)
 8009528:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <vPortEnterCritical+0x54>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d10e      	bne.n	8009550 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009532:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <vPortEnterCritical+0x58>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <vPortEnterCritical+0x48>
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	603b      	str	r3, [r7, #0]
 800954e:	e7fe      	b.n	800954e <vPortEnterCritical+0x46>
	}
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	bc80      	pop	{r7}
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	20000070 	.word	0x20000070
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800956a:	4b10      	ldr	r3, [pc, #64]	; (80095ac <vPortExitCritical+0x48>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d109      	bne.n	8009586 <vPortExitCritical+0x22>
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	607b      	str	r3, [r7, #4]
 8009584:	e7fe      	b.n	8009584 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009586:	4b09      	ldr	r3, [pc, #36]	; (80095ac <vPortExitCritical+0x48>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3b01      	subs	r3, #1
 800958c:	4a07      	ldr	r2, [pc, #28]	; (80095ac <vPortExitCritical+0x48>)
 800958e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009590:	4b06      	ldr	r3, [pc, #24]	; (80095ac <vPortExitCritical+0x48>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <vPortExitCritical+0x3e>
 8009598:	2300      	movs	r3, #0
 800959a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr
 80095ac:	20000070 	.word	0x20000070

080095b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095b0:	f3ef 8009 	mrs	r0, PSP
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <pxCurrentTCBConst>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095c0:	6010      	str	r0, [r2, #0]
 80095c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80095c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095ca:	f380 8811 	msr	BASEPRI, r0
 80095ce:	f7fe fe93 	bl	80082f8 <vTaskSwitchContext>
 80095d2:	f04f 0000 	mov.w	r0, #0
 80095d6:	f380 8811 	msr	BASEPRI, r0
 80095da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80095de:	6819      	ldr	r1, [r3, #0]
 80095e0:	6808      	ldr	r0, [r1, #0]
 80095e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095e6:	f380 8809 	msr	PSP, r0
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	4770      	bx	lr

080095f0 <pxCurrentTCBConst>:
 80095f0:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop

080095f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009610:	f7fe fdb6 	bl	8008180 <xTaskIncrementTick>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800961a:	4b06      	ldr	r3, [pc, #24]	; (8009634 <SysTick_Handler+0x3c>)
 800961c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	2300      	movs	r3, #0
 8009624:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	e000ed04 	.word	0xe000ed04

08009638 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <vPortSetupTimerInterrupt+0x30>)
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009642:	4b0a      	ldr	r3, [pc, #40]	; (800966c <vPortSetupTimerInterrupt+0x34>)
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009648:	4b09      	ldr	r3, [pc, #36]	; (8009670 <vPortSetupTimerInterrupt+0x38>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a09      	ldr	r2, [pc, #36]	; (8009674 <vPortSetupTimerInterrupt+0x3c>)
 800964e:	fba2 2303 	umull	r2, r3, r2, r3
 8009652:	099b      	lsrs	r3, r3, #6
 8009654:	4a08      	ldr	r2, [pc, #32]	; (8009678 <vPortSetupTimerInterrupt+0x40>)
 8009656:	3b01      	subs	r3, #1
 8009658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800965a:	4b03      	ldr	r3, [pc, #12]	; (8009668 <vPortSetupTimerInterrupt+0x30>)
 800965c:	2207      	movs	r2, #7
 800965e:	601a      	str	r2, [r3, #0]
}
 8009660:	bf00      	nop
 8009662:	46bd      	mov	sp, r7
 8009664:	bc80      	pop	{r7}
 8009666:	4770      	bx	lr
 8009668:	e000e010 	.word	0xe000e010
 800966c:	e000e018 	.word	0xe000e018
 8009670:	20000064 	.word	0x20000064
 8009674:	10624dd3 	.word	0x10624dd3
 8009678:	e000e014 	.word	0xe000e014

0800967c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009682:	f3ef 8305 	mrs	r3, IPSR
 8009686:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b0f      	cmp	r3, #15
 800968c:	d913      	bls.n	80096b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800968e:	4a15      	ldr	r2, [pc, #84]	; (80096e4 <vPortValidateInterruptPriority+0x68>)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009698:	4b13      	ldr	r3, [pc, #76]	; (80096e8 <vPortValidateInterruptPriority+0x6c>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	7afa      	ldrb	r2, [r7, #11]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d209      	bcs.n	80096b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	e7fe      	b.n	80096b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096b6:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <vPortValidateInterruptPriority+0x70>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096be:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <vPortValidateInterruptPriority+0x74>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d909      	bls.n	80096da <vPortValidateInterruptPriority+0x5e>
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	e7fe      	b.n	80096d8 <vPortValidateInterruptPriority+0x5c>
	}
 80096da:	bf00      	nop
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr
 80096e4:	e000e3f0 	.word	0xe000e3f0
 80096e8:	20000bb4 	.word	0x20000bb4
 80096ec:	e000ed0c 	.word	0xe000ed0c
 80096f0:	20000bb8 	.word	0x20000bb8

080096f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	; 0x28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009700:	f7fe fc86 	bl	8008010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009704:	4b57      	ldr	r3, [pc, #348]	; (8009864 <pvPortMalloc+0x170>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800970c:	f000 f90c 	bl	8009928 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009710:	4b55      	ldr	r3, [pc, #340]	; (8009868 <pvPortMalloc+0x174>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4013      	ands	r3, r2
 8009718:	2b00      	cmp	r3, #0
 800971a:	f040 808c 	bne.w	8009836 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d01c      	beq.n	800975e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009724:	2208      	movs	r2, #8
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4413      	add	r3, r2
 800972a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	2b00      	cmp	r3, #0
 8009734:	d013      	beq.n	800975e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f023 0307 	bic.w	r3, r3, #7
 800973c:	3308      	adds	r3, #8
 800973e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <pvPortMalloc+0x6a>
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e7fe      	b.n	800975c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d068      	beq.n	8009836 <pvPortMalloc+0x142>
 8009764:	4b41      	ldr	r3, [pc, #260]	; (800986c <pvPortMalloc+0x178>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	429a      	cmp	r2, r3
 800976c:	d863      	bhi.n	8009836 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800976e:	4b40      	ldr	r3, [pc, #256]	; (8009870 <pvPortMalloc+0x17c>)
 8009770:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009772:	4b3f      	ldr	r3, [pc, #252]	; (8009870 <pvPortMalloc+0x17c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009778:	e004      	b.n	8009784 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	429a      	cmp	r2, r3
 800978c:	d903      	bls.n	8009796 <pvPortMalloc+0xa2>
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1f1      	bne.n	800977a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009796:	4b33      	ldr	r3, [pc, #204]	; (8009864 <pvPortMalloc+0x170>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800979c:	429a      	cmp	r2, r3
 800979e:	d04a      	beq.n	8009836 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2208      	movs	r2, #8
 80097a6:	4413      	add	r3, r2
 80097a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	1ad2      	subs	r2, r2, r3
 80097ba:	2308      	movs	r3, #8
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	429a      	cmp	r2, r3
 80097c0:	d91e      	bls.n	8009800 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	f003 0307 	and.w	r3, r3, #7
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d009      	beq.n	80097e8 <pvPortMalloc+0xf4>
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	e7fe      	b.n	80097e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097fa:	69b8      	ldr	r0, [r7, #24]
 80097fc:	f000 f8f6 	bl	80099ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009800:	4b1a      	ldr	r3, [pc, #104]	; (800986c <pvPortMalloc+0x178>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	4a18      	ldr	r2, [pc, #96]	; (800986c <pvPortMalloc+0x178>)
 800980c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800980e:	4b17      	ldr	r3, [pc, #92]	; (800986c <pvPortMalloc+0x178>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4b18      	ldr	r3, [pc, #96]	; (8009874 <pvPortMalloc+0x180>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d203      	bcs.n	8009822 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800981a:	4b14      	ldr	r3, [pc, #80]	; (800986c <pvPortMalloc+0x178>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a15      	ldr	r2, [pc, #84]	; (8009874 <pvPortMalloc+0x180>)
 8009820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <pvPortMalloc+0x174>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	431a      	orrs	r2, r3
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009836:	f7fe fbf9 	bl	800802c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	f003 0307 	and.w	r3, r3, #7
 8009840:	2b00      	cmp	r3, #0
 8009842:	d009      	beq.n	8009858 <pvPortMalloc+0x164>
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	60fb      	str	r3, [r7, #12]
 8009856:	e7fe      	b.n	8009856 <pvPortMalloc+0x162>
	return pvReturn;
 8009858:	69fb      	ldr	r3, [r7, #28]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3728      	adds	r7, #40	; 0x28
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	200017c4 	.word	0x200017c4
 8009868:	200017d0 	.word	0x200017d0
 800986c:	200017c8 	.word	0x200017c8
 8009870:	200017bc 	.word	0x200017bc
 8009874:	200017cc 	.word	0x200017cc

08009878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d046      	beq.n	8009918 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800988a:	2308      	movs	r3, #8
 800988c:	425b      	negs	r3, r3
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4b20      	ldr	r3, [pc, #128]	; (8009920 <vPortFree+0xa8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4013      	ands	r3, r2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <vPortFree+0x42>
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	e7fe      	b.n	80098b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d009      	beq.n	80098d6 <vPortFree+0x5e>
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	60bb      	str	r3, [r7, #8]
 80098d4:	e7fe      	b.n	80098d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	4b11      	ldr	r3, [pc, #68]	; (8009920 <vPortFree+0xa8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4013      	ands	r3, r2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d019      	beq.n	8009918 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d115      	bne.n	8009918 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <vPortFree+0xa8>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	43db      	mvns	r3, r3
 80098f6:	401a      	ands	r2, r3
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098fc:	f7fe fb88 	bl	8008010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <vPortFree+0xac>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4413      	add	r3, r2
 800990a:	4a06      	ldr	r2, [pc, #24]	; (8009924 <vPortFree+0xac>)
 800990c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800990e:	6938      	ldr	r0, [r7, #16]
 8009910:	f000 f86c 	bl	80099ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009914:	f7fe fb8a 	bl	800802c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009918:	bf00      	nop
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	200017d0 	.word	0x200017d0
 8009924:	200017c8 	.word	0x200017c8

08009928 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800992e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009932:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009934:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <prvHeapInit+0xac>)
 8009936:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00c      	beq.n	800995c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3307      	adds	r3, #7
 8009946:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 0307 	bic.w	r3, r3, #7
 800994e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	4a1f      	ldr	r2, [pc, #124]	; (80099d4 <prvHeapInit+0xac>)
 8009958:	4413      	add	r3, r2
 800995a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009960:	4a1d      	ldr	r2, [pc, #116]	; (80099d8 <prvHeapInit+0xb0>)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009966:	4b1c      	ldr	r3, [pc, #112]	; (80099d8 <prvHeapInit+0xb0>)
 8009968:	2200      	movs	r2, #0
 800996a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009974:	2208      	movs	r2, #8
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0307 	bic.w	r3, r3, #7
 8009982:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4a15      	ldr	r2, [pc, #84]	; (80099dc <prvHeapInit+0xb4>)
 8009988:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800998a:	4b14      	ldr	r3, [pc, #80]	; (80099dc <prvHeapInit+0xb4>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2200      	movs	r2, #0
 8009990:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009992:	4b12      	ldr	r3, [pc, #72]	; (80099dc <prvHeapInit+0xb4>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	1ad2      	subs	r2, r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099a8:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <prvHeapInit+0xb4>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	4a0a      	ldr	r2, [pc, #40]	; (80099e0 <prvHeapInit+0xb8>)
 80099b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	4a09      	ldr	r2, [pc, #36]	; (80099e4 <prvHeapInit+0xbc>)
 80099be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <prvHeapInit+0xc0>)
 80099c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099c6:	601a      	str	r2, [r3, #0]
}
 80099c8:	bf00      	nop
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bc80      	pop	{r7}
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000bbc 	.word	0x20000bbc
 80099d8:	200017bc 	.word	0x200017bc
 80099dc:	200017c4 	.word	0x200017c4
 80099e0:	200017cc 	.word	0x200017cc
 80099e4:	200017c8 	.word	0x200017c8
 80099e8:	200017d0 	.word	0x200017d0

080099ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099f4:	4b27      	ldr	r3, [pc, #156]	; (8009a94 <prvInsertBlockIntoFreeList+0xa8>)
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	e002      	b.n	8009a00 <prvInsertBlockIntoFreeList+0x14>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60fb      	str	r3, [r7, #12]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d8f7      	bhi.n	80099fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	4413      	add	r3, r2
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d108      	bne.n	8009a2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	441a      	add	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	441a      	add	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d118      	bne.n	8009a74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <prvInsertBlockIntoFreeList+0xac>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d00d      	beq.n	8009a6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	441a      	add	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	e008      	b.n	8009a7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a6a:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <prvInsertBlockIntoFreeList+0xac>)
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	e003      	b.n	8009a7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d002      	beq.n	8009a8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a8a:	bf00      	nop
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bc80      	pop	{r7}
 8009a92:	4770      	bx	lr
 8009a94:	200017bc 	.word	0x200017bc
 8009a98:	200017c4 	.word	0x200017c4

08009a9c <atoi>:
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	f000 b8da 	b.w	8009c58 <strtol>

08009aa4 <__errno>:
 8009aa4:	4b01      	ldr	r3, [pc, #4]	; (8009aac <__errno+0x8>)
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	20000074 	.word	0x20000074

08009ab0 <__libc_init_array>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	2500      	movs	r5, #0
 8009ab4:	4e0c      	ldr	r6, [pc, #48]	; (8009ae8 <__libc_init_array+0x38>)
 8009ab6:	4c0d      	ldr	r4, [pc, #52]	; (8009aec <__libc_init_array+0x3c>)
 8009ab8:	1ba4      	subs	r4, r4, r6
 8009aba:	10a4      	asrs	r4, r4, #2
 8009abc:	42a5      	cmp	r5, r4
 8009abe:	d109      	bne.n	8009ad4 <__libc_init_array+0x24>
 8009ac0:	f000 fcea 	bl	800a498 <_init>
 8009ac4:	2500      	movs	r5, #0
 8009ac6:	4e0a      	ldr	r6, [pc, #40]	; (8009af0 <__libc_init_array+0x40>)
 8009ac8:	4c0a      	ldr	r4, [pc, #40]	; (8009af4 <__libc_init_array+0x44>)
 8009aca:	1ba4      	subs	r4, r4, r6
 8009acc:	10a4      	asrs	r4, r4, #2
 8009ace:	42a5      	cmp	r5, r4
 8009ad0:	d105      	bne.n	8009ade <__libc_init_array+0x2e>
 8009ad2:	bd70      	pop	{r4, r5, r6, pc}
 8009ad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ad8:	4798      	blx	r3
 8009ada:	3501      	adds	r5, #1
 8009adc:	e7ee      	b.n	8009abc <__libc_init_array+0xc>
 8009ade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ae2:	4798      	blx	r3
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	e7f2      	b.n	8009ace <__libc_init_array+0x1e>
 8009ae8:	0800a6f8 	.word	0x0800a6f8
 8009aec:	0800a6f8 	.word	0x0800a6f8
 8009af0:	0800a6f8 	.word	0x0800a6f8
 8009af4:	0800a6fc 	.word	0x0800a6fc

08009af8 <memcpy>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	1e43      	subs	r3, r0, #1
 8009afc:	440a      	add	r2, r1
 8009afe:	4291      	cmp	r1, r2
 8009b00:	d100      	bne.n	8009b04 <memcpy+0xc>
 8009b02:	bd10      	pop	{r4, pc}
 8009b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b0c:	e7f7      	b.n	8009afe <memcpy+0x6>

08009b0e <memset>:
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4402      	add	r2, r0
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d100      	bne.n	8009b18 <memset+0xa>
 8009b16:	4770      	bx	lr
 8009b18:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1c:	e7f9      	b.n	8009b12 <memset+0x4>
	...

08009b20 <siprintf>:
 8009b20:	b40e      	push	{r1, r2, r3}
 8009b22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b26:	b500      	push	{lr}
 8009b28:	b09c      	sub	sp, #112	; 0x70
 8009b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b2c:	9002      	str	r0, [sp, #8]
 8009b2e:	9006      	str	r0, [sp, #24]
 8009b30:	9107      	str	r1, [sp, #28]
 8009b32:	9104      	str	r1, [sp, #16]
 8009b34:	4808      	ldr	r0, [pc, #32]	; (8009b58 <siprintf+0x38>)
 8009b36:	4909      	ldr	r1, [pc, #36]	; (8009b5c <siprintf+0x3c>)
 8009b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b3c:	9105      	str	r1, [sp, #20]
 8009b3e:	6800      	ldr	r0, [r0, #0]
 8009b40:	a902      	add	r1, sp, #8
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	f000 f90e 	bl	8009d64 <_svfiprintf_r>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	9b02      	ldr	r3, [sp, #8]
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	b01c      	add	sp, #112	; 0x70
 8009b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b54:	b003      	add	sp, #12
 8009b56:	4770      	bx	lr
 8009b58:	20000074 	.word	0x20000074
 8009b5c:	ffff0208 	.word	0xffff0208

08009b60 <_strtol_l.isra.0>:
 8009b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	4680      	mov	r8, r0
 8009b66:	4689      	mov	r9, r1
 8009b68:	4692      	mov	sl, r2
 8009b6a:	461e      	mov	r6, r3
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	463d      	mov	r5, r7
 8009b70:	9808      	ldr	r0, [sp, #32]
 8009b72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b76:	f000 f885 	bl	8009c84 <__locale_ctype_ptr_l>
 8009b7a:	4420      	add	r0, r4
 8009b7c:	7843      	ldrb	r3, [r0, #1]
 8009b7e:	f013 0308 	ands.w	r3, r3, #8
 8009b82:	d132      	bne.n	8009bea <_strtol_l.isra.0+0x8a>
 8009b84:	2c2d      	cmp	r4, #45	; 0x2d
 8009b86:	d132      	bne.n	8009bee <_strtol_l.isra.0+0x8e>
 8009b88:	2201      	movs	r2, #1
 8009b8a:	787c      	ldrb	r4, [r7, #1]
 8009b8c:	1cbd      	adds	r5, r7, #2
 8009b8e:	2e00      	cmp	r6, #0
 8009b90:	d05d      	beq.n	8009c4e <_strtol_l.isra.0+0xee>
 8009b92:	2e10      	cmp	r6, #16
 8009b94:	d109      	bne.n	8009baa <_strtol_l.isra.0+0x4a>
 8009b96:	2c30      	cmp	r4, #48	; 0x30
 8009b98:	d107      	bne.n	8009baa <_strtol_l.isra.0+0x4a>
 8009b9a:	782b      	ldrb	r3, [r5, #0]
 8009b9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ba0:	2b58      	cmp	r3, #88	; 0x58
 8009ba2:	d14f      	bne.n	8009c44 <_strtol_l.isra.0+0xe4>
 8009ba4:	2610      	movs	r6, #16
 8009ba6:	786c      	ldrb	r4, [r5, #1]
 8009ba8:	3502      	adds	r5, #2
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	bf14      	ite	ne
 8009bae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009bb2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009bb6:	2700      	movs	r7, #0
 8009bb8:	fbb1 fcf6 	udiv	ip, r1, r6
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009bc2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009bc6:	2b09      	cmp	r3, #9
 8009bc8:	d817      	bhi.n	8009bfa <_strtol_l.isra.0+0x9a>
 8009bca:	461c      	mov	r4, r3
 8009bcc:	42a6      	cmp	r6, r4
 8009bce:	dd23      	ble.n	8009c18 <_strtol_l.isra.0+0xb8>
 8009bd0:	1c7b      	adds	r3, r7, #1
 8009bd2:	d007      	beq.n	8009be4 <_strtol_l.isra.0+0x84>
 8009bd4:	4584      	cmp	ip, r0
 8009bd6:	d31c      	bcc.n	8009c12 <_strtol_l.isra.0+0xb2>
 8009bd8:	d101      	bne.n	8009bde <_strtol_l.isra.0+0x7e>
 8009bda:	45a6      	cmp	lr, r4
 8009bdc:	db19      	blt.n	8009c12 <_strtol_l.isra.0+0xb2>
 8009bde:	2701      	movs	r7, #1
 8009be0:	fb00 4006 	mla	r0, r0, r6, r4
 8009be4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009be8:	e7eb      	b.n	8009bc2 <_strtol_l.isra.0+0x62>
 8009bea:	462f      	mov	r7, r5
 8009bec:	e7bf      	b.n	8009b6e <_strtol_l.isra.0+0xe>
 8009bee:	2c2b      	cmp	r4, #43	; 0x2b
 8009bf0:	bf04      	itt	eq
 8009bf2:	1cbd      	addeq	r5, r7, #2
 8009bf4:	787c      	ldrbeq	r4, [r7, #1]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	e7c9      	b.n	8009b8e <_strtol_l.isra.0+0x2e>
 8009bfa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009bfe:	2b19      	cmp	r3, #25
 8009c00:	d801      	bhi.n	8009c06 <_strtol_l.isra.0+0xa6>
 8009c02:	3c37      	subs	r4, #55	; 0x37
 8009c04:	e7e2      	b.n	8009bcc <_strtol_l.isra.0+0x6c>
 8009c06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009c0a:	2b19      	cmp	r3, #25
 8009c0c:	d804      	bhi.n	8009c18 <_strtol_l.isra.0+0xb8>
 8009c0e:	3c57      	subs	r4, #87	; 0x57
 8009c10:	e7dc      	b.n	8009bcc <_strtol_l.isra.0+0x6c>
 8009c12:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c16:	e7e5      	b.n	8009be4 <_strtol_l.isra.0+0x84>
 8009c18:	1c7b      	adds	r3, r7, #1
 8009c1a:	d108      	bne.n	8009c2e <_strtol_l.isra.0+0xce>
 8009c1c:	2322      	movs	r3, #34	; 0x22
 8009c1e:	4608      	mov	r0, r1
 8009c20:	f8c8 3000 	str.w	r3, [r8]
 8009c24:	f1ba 0f00 	cmp.w	sl, #0
 8009c28:	d107      	bne.n	8009c3a <_strtol_l.isra.0+0xda>
 8009c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2e:	b102      	cbz	r2, 8009c32 <_strtol_l.isra.0+0xd2>
 8009c30:	4240      	negs	r0, r0
 8009c32:	f1ba 0f00 	cmp.w	sl, #0
 8009c36:	d0f8      	beq.n	8009c2a <_strtol_l.isra.0+0xca>
 8009c38:	b10f      	cbz	r7, 8009c3e <_strtol_l.isra.0+0xde>
 8009c3a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009c3e:	f8ca 9000 	str.w	r9, [sl]
 8009c42:	e7f2      	b.n	8009c2a <_strtol_l.isra.0+0xca>
 8009c44:	2430      	movs	r4, #48	; 0x30
 8009c46:	2e00      	cmp	r6, #0
 8009c48:	d1af      	bne.n	8009baa <_strtol_l.isra.0+0x4a>
 8009c4a:	2608      	movs	r6, #8
 8009c4c:	e7ad      	b.n	8009baa <_strtol_l.isra.0+0x4a>
 8009c4e:	2c30      	cmp	r4, #48	; 0x30
 8009c50:	d0a3      	beq.n	8009b9a <_strtol_l.isra.0+0x3a>
 8009c52:	260a      	movs	r6, #10
 8009c54:	e7a9      	b.n	8009baa <_strtol_l.isra.0+0x4a>
	...

08009c58 <strtol>:
 8009c58:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <strtol+0x24>)
 8009c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c5c:	681c      	ldr	r4, [r3, #0]
 8009c5e:	4d08      	ldr	r5, [pc, #32]	; (8009c80 <strtol+0x28>)
 8009c60:	6a23      	ldr	r3, [r4, #32]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bf08      	it	eq
 8009c66:	462b      	moveq	r3, r5
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	460a      	mov	r2, r1
 8009c6e:	4601      	mov	r1, r0
 8009c70:	4620      	mov	r0, r4
 8009c72:	f7ff ff75 	bl	8009b60 <_strtol_l.isra.0>
 8009c76:	b003      	add	sp, #12
 8009c78:	bd30      	pop	{r4, r5, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000074 	.word	0x20000074
 8009c80:	200000d8 	.word	0x200000d8

08009c84 <__locale_ctype_ptr_l>:
 8009c84:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009c88:	4770      	bx	lr

08009c8a <__ascii_mbtowc>:
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	b901      	cbnz	r1, 8009c90 <__ascii_mbtowc+0x6>
 8009c8e:	a901      	add	r1, sp, #4
 8009c90:	b142      	cbz	r2, 8009ca4 <__ascii_mbtowc+0x1a>
 8009c92:	b14b      	cbz	r3, 8009ca8 <__ascii_mbtowc+0x1e>
 8009c94:	7813      	ldrb	r3, [r2, #0]
 8009c96:	600b      	str	r3, [r1, #0]
 8009c98:	7812      	ldrb	r2, [r2, #0]
 8009c9a:	1c10      	adds	r0, r2, #0
 8009c9c:	bf18      	it	ne
 8009c9e:	2001      	movne	r0, #1
 8009ca0:	b002      	add	sp, #8
 8009ca2:	4770      	bx	lr
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	e7fb      	b.n	8009ca0 <__ascii_mbtowc+0x16>
 8009ca8:	f06f 0001 	mvn.w	r0, #1
 8009cac:	e7f8      	b.n	8009ca0 <__ascii_mbtowc+0x16>

08009cae <__ssputs_r>:
 8009cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb2:	688e      	ldr	r6, [r1, #8]
 8009cb4:	4682      	mov	sl, r0
 8009cb6:	429e      	cmp	r6, r3
 8009cb8:	460c      	mov	r4, r1
 8009cba:	4690      	mov	r8, r2
 8009cbc:	4699      	mov	r9, r3
 8009cbe:	d837      	bhi.n	8009d30 <__ssputs_r+0x82>
 8009cc0:	898a      	ldrh	r2, [r1, #12]
 8009cc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cc6:	d031      	beq.n	8009d2c <__ssputs_r+0x7e>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	6825      	ldr	r5, [r4, #0]
 8009ccc:	6909      	ldr	r1, [r1, #16]
 8009cce:	1a6f      	subs	r7, r5, r1
 8009cd0:	6965      	ldr	r5, [r4, #20]
 8009cd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cd6:	fb95 f5f3 	sdiv	r5, r5, r3
 8009cda:	f109 0301 	add.w	r3, r9, #1
 8009cde:	443b      	add	r3, r7
 8009ce0:	429d      	cmp	r5, r3
 8009ce2:	bf38      	it	cc
 8009ce4:	461d      	movcc	r5, r3
 8009ce6:	0553      	lsls	r3, r2, #21
 8009ce8:	d530      	bpl.n	8009d4c <__ssputs_r+0x9e>
 8009cea:	4629      	mov	r1, r5
 8009cec:	f000 fb3a 	bl	800a364 <_malloc_r>
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	b950      	cbnz	r0, 8009d0a <__ssputs_r+0x5c>
 8009cf4:	230c      	movs	r3, #12
 8009cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cfa:	f8ca 3000 	str.w	r3, [sl]
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d04:	81a3      	strh	r3, [r4, #12]
 8009d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0a:	463a      	mov	r2, r7
 8009d0c:	6921      	ldr	r1, [r4, #16]
 8009d0e:	f7ff fef3 	bl	8009af8 <memcpy>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	6126      	str	r6, [r4, #16]
 8009d20:	443e      	add	r6, r7
 8009d22:	6026      	str	r6, [r4, #0]
 8009d24:	464e      	mov	r6, r9
 8009d26:	6165      	str	r5, [r4, #20]
 8009d28:	1bed      	subs	r5, r5, r7
 8009d2a:	60a5      	str	r5, [r4, #8]
 8009d2c:	454e      	cmp	r6, r9
 8009d2e:	d900      	bls.n	8009d32 <__ssputs_r+0x84>
 8009d30:	464e      	mov	r6, r9
 8009d32:	4632      	mov	r2, r6
 8009d34:	4641      	mov	r1, r8
 8009d36:	6820      	ldr	r0, [r4, #0]
 8009d38:	f000 faaf 	bl	800a29a <memmove>
 8009d3c:	68a3      	ldr	r3, [r4, #8]
 8009d3e:	2000      	movs	r0, #0
 8009d40:	1b9b      	subs	r3, r3, r6
 8009d42:	60a3      	str	r3, [r4, #8]
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	441e      	add	r6, r3
 8009d48:	6026      	str	r6, [r4, #0]
 8009d4a:	e7dc      	b.n	8009d06 <__ssputs_r+0x58>
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	f000 fb63 	bl	800a418 <_realloc_r>
 8009d52:	4606      	mov	r6, r0
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1e2      	bne.n	8009d1e <__ssputs_r+0x70>
 8009d58:	6921      	ldr	r1, [r4, #16]
 8009d5a:	4650      	mov	r0, sl
 8009d5c:	f000 fab6 	bl	800a2cc <_free_r>
 8009d60:	e7c8      	b.n	8009cf4 <__ssputs_r+0x46>
	...

08009d64 <_svfiprintf_r>:
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	461d      	mov	r5, r3
 8009d6a:	898b      	ldrh	r3, [r1, #12]
 8009d6c:	b09d      	sub	sp, #116	; 0x74
 8009d6e:	061f      	lsls	r7, r3, #24
 8009d70:	4680      	mov	r8, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	4616      	mov	r6, r2
 8009d76:	d50f      	bpl.n	8009d98 <_svfiprintf_r+0x34>
 8009d78:	690b      	ldr	r3, [r1, #16]
 8009d7a:	b96b      	cbnz	r3, 8009d98 <_svfiprintf_r+0x34>
 8009d7c:	2140      	movs	r1, #64	; 0x40
 8009d7e:	f000 faf1 	bl	800a364 <_malloc_r>
 8009d82:	6020      	str	r0, [r4, #0]
 8009d84:	6120      	str	r0, [r4, #16]
 8009d86:	b928      	cbnz	r0, 8009d94 <_svfiprintf_r+0x30>
 8009d88:	230c      	movs	r3, #12
 8009d8a:	f8c8 3000 	str.w	r3, [r8]
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d92:	e0c8      	b.n	8009f26 <_svfiprintf_r+0x1c2>
 8009d94:	2340      	movs	r3, #64	; 0x40
 8009d96:	6163      	str	r3, [r4, #20]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9c:	2320      	movs	r3, #32
 8009d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009da2:	2330      	movs	r3, #48	; 0x30
 8009da4:	f04f 0b01 	mov.w	fp, #1
 8009da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dac:	9503      	str	r5, [sp, #12]
 8009dae:	4637      	mov	r7, r6
 8009db0:	463d      	mov	r5, r7
 8009db2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009db6:	b10b      	cbz	r3, 8009dbc <_svfiprintf_r+0x58>
 8009db8:	2b25      	cmp	r3, #37	; 0x25
 8009dba:	d13e      	bne.n	8009e3a <_svfiprintf_r+0xd6>
 8009dbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009dc0:	d00b      	beq.n	8009dda <_svfiprintf_r+0x76>
 8009dc2:	4653      	mov	r3, sl
 8009dc4:	4632      	mov	r2, r6
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4640      	mov	r0, r8
 8009dca:	f7ff ff70 	bl	8009cae <__ssputs_r>
 8009dce:	3001      	adds	r0, #1
 8009dd0:	f000 80a4 	beq.w	8009f1c <_svfiprintf_r+0x1b8>
 8009dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd6:	4453      	add	r3, sl
 8009dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dda:	783b      	ldrb	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 809d 	beq.w	8009f1c <_svfiprintf_r+0x1b8>
 8009de2:	2300      	movs	r3, #0
 8009de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009df4:	931a      	str	r3, [sp, #104]	; 0x68
 8009df6:	462f      	mov	r7, r5
 8009df8:	2205      	movs	r2, #5
 8009dfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009dfe:	4850      	ldr	r0, [pc, #320]	; (8009f40 <_svfiprintf_r+0x1dc>)
 8009e00:	f000 fa3d 	bl	800a27e <memchr>
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	b9d0      	cbnz	r0, 8009e3e <_svfiprintf_r+0xda>
 8009e08:	06d9      	lsls	r1, r3, #27
 8009e0a:	bf44      	itt	mi
 8009e0c:	2220      	movmi	r2, #32
 8009e0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e12:	071a      	lsls	r2, r3, #28
 8009e14:	bf44      	itt	mi
 8009e16:	222b      	movmi	r2, #43	; 0x2b
 8009e18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e1c:	782a      	ldrb	r2, [r5, #0]
 8009e1e:	2a2a      	cmp	r2, #42	; 0x2a
 8009e20:	d015      	beq.n	8009e4e <_svfiprintf_r+0xea>
 8009e22:	462f      	mov	r7, r5
 8009e24:	2000      	movs	r0, #0
 8009e26:	250a      	movs	r5, #10
 8009e28:	9a07      	ldr	r2, [sp, #28]
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e30:	3b30      	subs	r3, #48	; 0x30
 8009e32:	2b09      	cmp	r3, #9
 8009e34:	d94d      	bls.n	8009ed2 <_svfiprintf_r+0x16e>
 8009e36:	b1b8      	cbz	r0, 8009e68 <_svfiprintf_r+0x104>
 8009e38:	e00f      	b.n	8009e5a <_svfiprintf_r+0xf6>
 8009e3a:	462f      	mov	r7, r5
 8009e3c:	e7b8      	b.n	8009db0 <_svfiprintf_r+0x4c>
 8009e3e:	4a40      	ldr	r2, [pc, #256]	; (8009f40 <_svfiprintf_r+0x1dc>)
 8009e40:	463d      	mov	r5, r7
 8009e42:	1a80      	subs	r0, r0, r2
 8009e44:	fa0b f000 	lsl.w	r0, fp, r0
 8009e48:	4318      	orrs	r0, r3
 8009e4a:	9004      	str	r0, [sp, #16]
 8009e4c:	e7d3      	b.n	8009df6 <_svfiprintf_r+0x92>
 8009e4e:	9a03      	ldr	r2, [sp, #12]
 8009e50:	1d11      	adds	r1, r2, #4
 8009e52:	6812      	ldr	r2, [r2, #0]
 8009e54:	9103      	str	r1, [sp, #12]
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	db01      	blt.n	8009e5e <_svfiprintf_r+0xfa>
 8009e5a:	9207      	str	r2, [sp, #28]
 8009e5c:	e004      	b.n	8009e68 <_svfiprintf_r+0x104>
 8009e5e:	4252      	negs	r2, r2
 8009e60:	f043 0302 	orr.w	r3, r3, #2
 8009e64:	9207      	str	r2, [sp, #28]
 8009e66:	9304      	str	r3, [sp, #16]
 8009e68:	783b      	ldrb	r3, [r7, #0]
 8009e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e6c:	d10c      	bne.n	8009e88 <_svfiprintf_r+0x124>
 8009e6e:	787b      	ldrb	r3, [r7, #1]
 8009e70:	2b2a      	cmp	r3, #42	; 0x2a
 8009e72:	d133      	bne.n	8009edc <_svfiprintf_r+0x178>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	3702      	adds	r7, #2
 8009e78:	1d1a      	adds	r2, r3, #4
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	9203      	str	r2, [sp, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bfb8      	it	lt
 8009e82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e86:	9305      	str	r3, [sp, #20]
 8009e88:	4d2e      	ldr	r5, [pc, #184]	; (8009f44 <_svfiprintf_r+0x1e0>)
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	7839      	ldrb	r1, [r7, #0]
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f000 f9f5 	bl	800a27e <memchr>
 8009e94:	b138      	cbz	r0, 8009ea6 <_svfiprintf_r+0x142>
 8009e96:	2340      	movs	r3, #64	; 0x40
 8009e98:	1b40      	subs	r0, r0, r5
 8009e9a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e9e:	9b04      	ldr	r3, [sp, #16]
 8009ea0:	3701      	adds	r7, #1
 8009ea2:	4303      	orrs	r3, r0
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	7839      	ldrb	r1, [r7, #0]
 8009ea8:	2206      	movs	r2, #6
 8009eaa:	4827      	ldr	r0, [pc, #156]	; (8009f48 <_svfiprintf_r+0x1e4>)
 8009eac:	1c7e      	adds	r6, r7, #1
 8009eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eb2:	f000 f9e4 	bl	800a27e <memchr>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d038      	beq.n	8009f2c <_svfiprintf_r+0x1c8>
 8009eba:	4b24      	ldr	r3, [pc, #144]	; (8009f4c <_svfiprintf_r+0x1e8>)
 8009ebc:	bb13      	cbnz	r3, 8009f04 <_svfiprintf_r+0x1a0>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	3307      	adds	r3, #7
 8009ec2:	f023 0307 	bic.w	r3, r3, #7
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	9303      	str	r3, [sp, #12]
 8009eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ecc:	444b      	add	r3, r9
 8009ece:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed0:	e76d      	b.n	8009dae <_svfiprintf_r+0x4a>
 8009ed2:	fb05 3202 	mla	r2, r5, r2, r3
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	460f      	mov	r7, r1
 8009eda:	e7a6      	b.n	8009e2a <_svfiprintf_r+0xc6>
 8009edc:	2300      	movs	r3, #0
 8009ede:	250a      	movs	r5, #10
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	3701      	adds	r7, #1
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eec:	3a30      	subs	r2, #48	; 0x30
 8009eee:	2a09      	cmp	r2, #9
 8009ef0:	d903      	bls.n	8009efa <_svfiprintf_r+0x196>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0c8      	beq.n	8009e88 <_svfiprintf_r+0x124>
 8009ef6:	9105      	str	r1, [sp, #20]
 8009ef8:	e7c6      	b.n	8009e88 <_svfiprintf_r+0x124>
 8009efa:	fb05 2101 	mla	r1, r5, r1, r2
 8009efe:	2301      	movs	r3, #1
 8009f00:	4607      	mov	r7, r0
 8009f02:	e7f0      	b.n	8009ee6 <_svfiprintf_r+0x182>
 8009f04:	ab03      	add	r3, sp, #12
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	4622      	mov	r2, r4
 8009f0a:	4b11      	ldr	r3, [pc, #68]	; (8009f50 <_svfiprintf_r+0x1ec>)
 8009f0c:	a904      	add	r1, sp, #16
 8009f0e:	4640      	mov	r0, r8
 8009f10:	f3af 8000 	nop.w
 8009f14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009f18:	4681      	mov	r9, r0
 8009f1a:	d1d6      	bne.n	8009eca <_svfiprintf_r+0x166>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	065b      	lsls	r3, r3, #25
 8009f20:	f53f af35 	bmi.w	8009d8e <_svfiprintf_r+0x2a>
 8009f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f26:	b01d      	add	sp, #116	; 0x74
 8009f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4622      	mov	r2, r4
 8009f32:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <_svfiprintf_r+0x1ec>)
 8009f34:	a904      	add	r1, sp, #16
 8009f36:	4640      	mov	r0, r8
 8009f38:	f000 f882 	bl	800a040 <_printf_i>
 8009f3c:	e7ea      	b.n	8009f14 <_svfiprintf_r+0x1b0>
 8009f3e:	bf00      	nop
 8009f40:	0800a5c2 	.word	0x0800a5c2
 8009f44:	0800a5c8 	.word	0x0800a5c8
 8009f48:	0800a5cc 	.word	0x0800a5cc
 8009f4c:	00000000 	.word	0x00000000
 8009f50:	08009caf 	.word	0x08009caf

08009f54 <_printf_common>:
 8009f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f58:	4691      	mov	r9, r2
 8009f5a:	461f      	mov	r7, r3
 8009f5c:	688a      	ldr	r2, [r1, #8]
 8009f5e:	690b      	ldr	r3, [r1, #16]
 8009f60:	4606      	mov	r6, r0
 8009f62:	4293      	cmp	r3, r2
 8009f64:	bfb8      	it	lt
 8009f66:	4613      	movlt	r3, r2
 8009f68:	f8c9 3000 	str.w	r3, [r9]
 8009f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f70:	460c      	mov	r4, r1
 8009f72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f76:	b112      	cbz	r2, 8009f7e <_printf_common+0x2a>
 8009f78:	3301      	adds	r3, #1
 8009f7a:	f8c9 3000 	str.w	r3, [r9]
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	0699      	lsls	r1, r3, #26
 8009f82:	bf42      	ittt	mi
 8009f84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f88:	3302      	addmi	r3, #2
 8009f8a:	f8c9 3000 	strmi.w	r3, [r9]
 8009f8e:	6825      	ldr	r5, [r4, #0]
 8009f90:	f015 0506 	ands.w	r5, r5, #6
 8009f94:	d107      	bne.n	8009fa6 <_printf_common+0x52>
 8009f96:	f104 0a19 	add.w	sl, r4, #25
 8009f9a:	68e3      	ldr	r3, [r4, #12]
 8009f9c:	f8d9 2000 	ldr.w	r2, [r9]
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	42ab      	cmp	r3, r5
 8009fa4:	dc29      	bgt.n	8009ffa <_printf_common+0xa6>
 8009fa6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	3300      	adds	r3, #0
 8009fae:	bf18      	it	ne
 8009fb0:	2301      	movne	r3, #1
 8009fb2:	0692      	lsls	r2, r2, #26
 8009fb4:	d42e      	bmi.n	800a014 <_printf_common+0xc0>
 8009fb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fba:	4639      	mov	r1, r7
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	47c0      	blx	r8
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d021      	beq.n	800a008 <_printf_common+0xb4>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	68e5      	ldr	r5, [r4, #12]
 8009fc8:	f003 0306 	and.w	r3, r3, #6
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	bf18      	it	ne
 8009fd0:	2500      	movne	r5, #0
 8009fd2:	f8d9 2000 	ldr.w	r2, [r9]
 8009fd6:	f04f 0900 	mov.w	r9, #0
 8009fda:	bf08      	it	eq
 8009fdc:	1aad      	subeq	r5, r5, r2
 8009fde:	68a3      	ldr	r3, [r4, #8]
 8009fe0:	6922      	ldr	r2, [r4, #16]
 8009fe2:	bf08      	it	eq
 8009fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	bfc4      	itt	gt
 8009fec:	1a9b      	subgt	r3, r3, r2
 8009fee:	18ed      	addgt	r5, r5, r3
 8009ff0:	341a      	adds	r4, #26
 8009ff2:	454d      	cmp	r5, r9
 8009ff4:	d11a      	bne.n	800a02c <_printf_common+0xd8>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e008      	b.n	800a00c <_printf_common+0xb8>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4639      	mov	r1, r7
 800a000:	4630      	mov	r0, r6
 800a002:	47c0      	blx	r8
 800a004:	3001      	adds	r0, #1
 800a006:	d103      	bne.n	800a010 <_printf_common+0xbc>
 800a008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a010:	3501      	adds	r5, #1
 800a012:	e7c2      	b.n	8009f9a <_printf_common+0x46>
 800a014:	2030      	movs	r0, #48	; 0x30
 800a016:	18e1      	adds	r1, r4, r3
 800a018:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a01c:	1c5a      	adds	r2, r3, #1
 800a01e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a022:	4422      	add	r2, r4
 800a024:	3302      	adds	r3, #2
 800a026:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a02a:	e7c4      	b.n	8009fb6 <_printf_common+0x62>
 800a02c:	2301      	movs	r3, #1
 800a02e:	4622      	mov	r2, r4
 800a030:	4639      	mov	r1, r7
 800a032:	4630      	mov	r0, r6
 800a034:	47c0      	blx	r8
 800a036:	3001      	adds	r0, #1
 800a038:	d0e6      	beq.n	800a008 <_printf_common+0xb4>
 800a03a:	f109 0901 	add.w	r9, r9, #1
 800a03e:	e7d8      	b.n	8009ff2 <_printf_common+0x9e>

0800a040 <_printf_i>:
 800a040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a044:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a048:	460c      	mov	r4, r1
 800a04a:	7e09      	ldrb	r1, [r1, #24]
 800a04c:	b085      	sub	sp, #20
 800a04e:	296e      	cmp	r1, #110	; 0x6e
 800a050:	4617      	mov	r7, r2
 800a052:	4606      	mov	r6, r0
 800a054:	4698      	mov	r8, r3
 800a056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a058:	f000 80b3 	beq.w	800a1c2 <_printf_i+0x182>
 800a05c:	d822      	bhi.n	800a0a4 <_printf_i+0x64>
 800a05e:	2963      	cmp	r1, #99	; 0x63
 800a060:	d036      	beq.n	800a0d0 <_printf_i+0x90>
 800a062:	d80a      	bhi.n	800a07a <_printf_i+0x3a>
 800a064:	2900      	cmp	r1, #0
 800a066:	f000 80b9 	beq.w	800a1dc <_printf_i+0x19c>
 800a06a:	2958      	cmp	r1, #88	; 0x58
 800a06c:	f000 8083 	beq.w	800a176 <_printf_i+0x136>
 800a070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a074:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a078:	e032      	b.n	800a0e0 <_printf_i+0xa0>
 800a07a:	2964      	cmp	r1, #100	; 0x64
 800a07c:	d001      	beq.n	800a082 <_printf_i+0x42>
 800a07e:	2969      	cmp	r1, #105	; 0x69
 800a080:	d1f6      	bne.n	800a070 <_printf_i+0x30>
 800a082:	6820      	ldr	r0, [r4, #0]
 800a084:	6813      	ldr	r3, [r2, #0]
 800a086:	0605      	lsls	r5, r0, #24
 800a088:	f103 0104 	add.w	r1, r3, #4
 800a08c:	d52a      	bpl.n	800a0e4 <_printf_i+0xa4>
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6011      	str	r1, [r2, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	da03      	bge.n	800a09e <_printf_i+0x5e>
 800a096:	222d      	movs	r2, #45	; 0x2d
 800a098:	425b      	negs	r3, r3
 800a09a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a09e:	486f      	ldr	r0, [pc, #444]	; (800a25c <_printf_i+0x21c>)
 800a0a0:	220a      	movs	r2, #10
 800a0a2:	e039      	b.n	800a118 <_printf_i+0xd8>
 800a0a4:	2973      	cmp	r1, #115	; 0x73
 800a0a6:	f000 809d 	beq.w	800a1e4 <_printf_i+0x1a4>
 800a0aa:	d808      	bhi.n	800a0be <_printf_i+0x7e>
 800a0ac:	296f      	cmp	r1, #111	; 0x6f
 800a0ae:	d020      	beq.n	800a0f2 <_printf_i+0xb2>
 800a0b0:	2970      	cmp	r1, #112	; 0x70
 800a0b2:	d1dd      	bne.n	800a070 <_printf_i+0x30>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	f043 0320 	orr.w	r3, r3, #32
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	e003      	b.n	800a0c6 <_printf_i+0x86>
 800a0be:	2975      	cmp	r1, #117	; 0x75
 800a0c0:	d017      	beq.n	800a0f2 <_printf_i+0xb2>
 800a0c2:	2978      	cmp	r1, #120	; 0x78
 800a0c4:	d1d4      	bne.n	800a070 <_printf_i+0x30>
 800a0c6:	2378      	movs	r3, #120	; 0x78
 800a0c8:	4865      	ldr	r0, [pc, #404]	; (800a260 <_printf_i+0x220>)
 800a0ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0ce:	e055      	b.n	800a17c <_printf_i+0x13c>
 800a0d0:	6813      	ldr	r3, [r2, #0]
 800a0d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0d6:	1d19      	adds	r1, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6011      	str	r1, [r2, #0]
 800a0dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e08c      	b.n	800a1fe <_printf_i+0x1be>
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0ea:	6011      	str	r1, [r2, #0]
 800a0ec:	bf18      	it	ne
 800a0ee:	b21b      	sxthne	r3, r3
 800a0f0:	e7cf      	b.n	800a092 <_printf_i+0x52>
 800a0f2:	6813      	ldr	r3, [r2, #0]
 800a0f4:	6825      	ldr	r5, [r4, #0]
 800a0f6:	1d18      	adds	r0, r3, #4
 800a0f8:	6010      	str	r0, [r2, #0]
 800a0fa:	0628      	lsls	r0, r5, #24
 800a0fc:	d501      	bpl.n	800a102 <_printf_i+0xc2>
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	e002      	b.n	800a108 <_printf_i+0xc8>
 800a102:	0668      	lsls	r0, r5, #25
 800a104:	d5fb      	bpl.n	800a0fe <_printf_i+0xbe>
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	296f      	cmp	r1, #111	; 0x6f
 800a10a:	bf14      	ite	ne
 800a10c:	220a      	movne	r2, #10
 800a10e:	2208      	moveq	r2, #8
 800a110:	4852      	ldr	r0, [pc, #328]	; (800a25c <_printf_i+0x21c>)
 800a112:	2100      	movs	r1, #0
 800a114:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a118:	6865      	ldr	r5, [r4, #4]
 800a11a:	2d00      	cmp	r5, #0
 800a11c:	60a5      	str	r5, [r4, #8]
 800a11e:	f2c0 8095 	blt.w	800a24c <_printf_i+0x20c>
 800a122:	6821      	ldr	r1, [r4, #0]
 800a124:	f021 0104 	bic.w	r1, r1, #4
 800a128:	6021      	str	r1, [r4, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d13d      	bne.n	800a1aa <_printf_i+0x16a>
 800a12e:	2d00      	cmp	r5, #0
 800a130:	f040 808e 	bne.w	800a250 <_printf_i+0x210>
 800a134:	4665      	mov	r5, ip
 800a136:	2a08      	cmp	r2, #8
 800a138:	d10b      	bne.n	800a152 <_printf_i+0x112>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	07db      	lsls	r3, r3, #31
 800a13e:	d508      	bpl.n	800a152 <_printf_i+0x112>
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	6862      	ldr	r2, [r4, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	bfde      	ittt	le
 800a148:	2330      	movle	r3, #48	; 0x30
 800a14a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a14e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a152:	ebac 0305 	sub.w	r3, ip, r5
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	f8cd 8000 	str.w	r8, [sp]
 800a15c:	463b      	mov	r3, r7
 800a15e:	aa03      	add	r2, sp, #12
 800a160:	4621      	mov	r1, r4
 800a162:	4630      	mov	r0, r6
 800a164:	f7ff fef6 	bl	8009f54 <_printf_common>
 800a168:	3001      	adds	r0, #1
 800a16a:	d14d      	bne.n	800a208 <_printf_i+0x1c8>
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a170:	b005      	add	sp, #20
 800a172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a176:	4839      	ldr	r0, [pc, #228]	; (800a25c <_printf_i+0x21c>)
 800a178:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a17c:	6813      	ldr	r3, [r2, #0]
 800a17e:	6821      	ldr	r1, [r4, #0]
 800a180:	1d1d      	adds	r5, r3, #4
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6015      	str	r5, [r2, #0]
 800a186:	060a      	lsls	r2, r1, #24
 800a188:	d50b      	bpl.n	800a1a2 <_printf_i+0x162>
 800a18a:	07ca      	lsls	r2, r1, #31
 800a18c:	bf44      	itt	mi
 800a18e:	f041 0120 	orrmi.w	r1, r1, #32
 800a192:	6021      	strmi	r1, [r4, #0]
 800a194:	b91b      	cbnz	r3, 800a19e <_printf_i+0x15e>
 800a196:	6822      	ldr	r2, [r4, #0]
 800a198:	f022 0220 	bic.w	r2, r2, #32
 800a19c:	6022      	str	r2, [r4, #0]
 800a19e:	2210      	movs	r2, #16
 800a1a0:	e7b7      	b.n	800a112 <_printf_i+0xd2>
 800a1a2:	064d      	lsls	r5, r1, #25
 800a1a4:	bf48      	it	mi
 800a1a6:	b29b      	uxthmi	r3, r3
 800a1a8:	e7ef      	b.n	800a18a <_printf_i+0x14a>
 800a1aa:	4665      	mov	r5, ip
 800a1ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1b0:	fb02 3311 	mls	r3, r2, r1, r3
 800a1b4:	5cc3      	ldrb	r3, [r0, r3]
 800a1b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	d1f5      	bne.n	800a1ac <_printf_i+0x16c>
 800a1c0:	e7b9      	b.n	800a136 <_printf_i+0xf6>
 800a1c2:	6813      	ldr	r3, [r2, #0]
 800a1c4:	6825      	ldr	r5, [r4, #0]
 800a1c6:	1d18      	adds	r0, r3, #4
 800a1c8:	6961      	ldr	r1, [r4, #20]
 800a1ca:	6010      	str	r0, [r2, #0]
 800a1cc:	0628      	lsls	r0, r5, #24
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	d501      	bpl.n	800a1d6 <_printf_i+0x196>
 800a1d2:	6019      	str	r1, [r3, #0]
 800a1d4:	e002      	b.n	800a1dc <_printf_i+0x19c>
 800a1d6:	066a      	lsls	r2, r5, #25
 800a1d8:	d5fb      	bpl.n	800a1d2 <_printf_i+0x192>
 800a1da:	8019      	strh	r1, [r3, #0]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4665      	mov	r5, ip
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	e7b9      	b.n	800a158 <_printf_i+0x118>
 800a1e4:	6813      	ldr	r3, [r2, #0]
 800a1e6:	1d19      	adds	r1, r3, #4
 800a1e8:	6011      	str	r1, [r2, #0]
 800a1ea:	681d      	ldr	r5, [r3, #0]
 800a1ec:	6862      	ldr	r2, [r4, #4]
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f000 f844 	bl	800a27e <memchr>
 800a1f6:	b108      	cbz	r0, 800a1fc <_printf_i+0x1bc>
 800a1f8:	1b40      	subs	r0, r0, r5
 800a1fa:	6060      	str	r0, [r4, #4]
 800a1fc:	6863      	ldr	r3, [r4, #4]
 800a1fe:	6123      	str	r3, [r4, #16]
 800a200:	2300      	movs	r3, #0
 800a202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a206:	e7a7      	b.n	800a158 <_printf_i+0x118>
 800a208:	6923      	ldr	r3, [r4, #16]
 800a20a:	462a      	mov	r2, r5
 800a20c:	4639      	mov	r1, r7
 800a20e:	4630      	mov	r0, r6
 800a210:	47c0      	blx	r8
 800a212:	3001      	adds	r0, #1
 800a214:	d0aa      	beq.n	800a16c <_printf_i+0x12c>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	079b      	lsls	r3, r3, #30
 800a21a:	d413      	bmi.n	800a244 <_printf_i+0x204>
 800a21c:	68e0      	ldr	r0, [r4, #12]
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	4298      	cmp	r0, r3
 800a222:	bfb8      	it	lt
 800a224:	4618      	movlt	r0, r3
 800a226:	e7a3      	b.n	800a170 <_printf_i+0x130>
 800a228:	2301      	movs	r3, #1
 800a22a:	464a      	mov	r2, r9
 800a22c:	4639      	mov	r1, r7
 800a22e:	4630      	mov	r0, r6
 800a230:	47c0      	blx	r8
 800a232:	3001      	adds	r0, #1
 800a234:	d09a      	beq.n	800a16c <_printf_i+0x12c>
 800a236:	3501      	adds	r5, #1
 800a238:	68e3      	ldr	r3, [r4, #12]
 800a23a:	9a03      	ldr	r2, [sp, #12]
 800a23c:	1a9b      	subs	r3, r3, r2
 800a23e:	42ab      	cmp	r3, r5
 800a240:	dcf2      	bgt.n	800a228 <_printf_i+0x1e8>
 800a242:	e7eb      	b.n	800a21c <_printf_i+0x1dc>
 800a244:	2500      	movs	r5, #0
 800a246:	f104 0919 	add.w	r9, r4, #25
 800a24a:	e7f5      	b.n	800a238 <_printf_i+0x1f8>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1ac      	bne.n	800a1aa <_printf_i+0x16a>
 800a250:	7803      	ldrb	r3, [r0, #0]
 800a252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a256:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a25a:	e76c      	b.n	800a136 <_printf_i+0xf6>
 800a25c:	0800a5d3 	.word	0x0800a5d3
 800a260:	0800a5e4 	.word	0x0800a5e4

0800a264 <__ascii_wctomb>:
 800a264:	b149      	cbz	r1, 800a27a <__ascii_wctomb+0x16>
 800a266:	2aff      	cmp	r2, #255	; 0xff
 800a268:	bf8b      	itete	hi
 800a26a:	238a      	movhi	r3, #138	; 0x8a
 800a26c:	700a      	strbls	r2, [r1, #0]
 800a26e:	6003      	strhi	r3, [r0, #0]
 800a270:	2001      	movls	r0, #1
 800a272:	bf88      	it	hi
 800a274:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a278:	4770      	bx	lr
 800a27a:	4608      	mov	r0, r1
 800a27c:	4770      	bx	lr

0800a27e <memchr>:
 800a27e:	b510      	push	{r4, lr}
 800a280:	b2c9      	uxtb	r1, r1
 800a282:	4402      	add	r2, r0
 800a284:	4290      	cmp	r0, r2
 800a286:	4603      	mov	r3, r0
 800a288:	d101      	bne.n	800a28e <memchr+0x10>
 800a28a:	2300      	movs	r3, #0
 800a28c:	e003      	b.n	800a296 <memchr+0x18>
 800a28e:	781c      	ldrb	r4, [r3, #0]
 800a290:	3001      	adds	r0, #1
 800a292:	428c      	cmp	r4, r1
 800a294:	d1f6      	bne.n	800a284 <memchr+0x6>
 800a296:	4618      	mov	r0, r3
 800a298:	bd10      	pop	{r4, pc}

0800a29a <memmove>:
 800a29a:	4288      	cmp	r0, r1
 800a29c:	b510      	push	{r4, lr}
 800a29e:	eb01 0302 	add.w	r3, r1, r2
 800a2a2:	d807      	bhi.n	800a2b4 <memmove+0x1a>
 800a2a4:	1e42      	subs	r2, r0, #1
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	d00a      	beq.n	800a2c0 <memmove+0x26>
 800a2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a2b2:	e7f8      	b.n	800a2a6 <memmove+0xc>
 800a2b4:	4283      	cmp	r3, r0
 800a2b6:	d9f5      	bls.n	800a2a4 <memmove+0xa>
 800a2b8:	1881      	adds	r1, r0, r2
 800a2ba:	1ad2      	subs	r2, r2, r3
 800a2bc:	42d3      	cmn	r3, r2
 800a2be:	d100      	bne.n	800a2c2 <memmove+0x28>
 800a2c0:	bd10      	pop	{r4, pc}
 800a2c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a2ca:	e7f7      	b.n	800a2bc <memmove+0x22>

0800a2cc <_free_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	d043      	beq.n	800a35c <_free_r+0x90>
 800a2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d8:	1f0c      	subs	r4, r1, #4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bfb8      	it	lt
 800a2de:	18e4      	addlt	r4, r4, r3
 800a2e0:	f000 f8d0 	bl	800a484 <__malloc_lock>
 800a2e4:	4a1e      	ldr	r2, [pc, #120]	; (800a360 <_free_r+0x94>)
 800a2e6:	6813      	ldr	r3, [r2, #0]
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	b933      	cbnz	r3, 800a2fa <_free_r+0x2e>
 800a2ec:	6063      	str	r3, [r4, #4]
 800a2ee:	6014      	str	r4, [r2, #0]
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2f6:	f000 b8c6 	b.w	800a486 <__malloc_unlock>
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	d90b      	bls.n	800a316 <_free_r+0x4a>
 800a2fe:	6821      	ldr	r1, [r4, #0]
 800a300:	1862      	adds	r2, r4, r1
 800a302:	4293      	cmp	r3, r2
 800a304:	bf01      	itttt	eq
 800a306:	681a      	ldreq	r2, [r3, #0]
 800a308:	685b      	ldreq	r3, [r3, #4]
 800a30a:	1852      	addeq	r2, r2, r1
 800a30c:	6022      	streq	r2, [r4, #0]
 800a30e:	6063      	str	r3, [r4, #4]
 800a310:	6004      	str	r4, [r0, #0]
 800a312:	e7ed      	b.n	800a2f0 <_free_r+0x24>
 800a314:	4613      	mov	r3, r2
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	b10a      	cbz	r2, 800a31e <_free_r+0x52>
 800a31a:	42a2      	cmp	r2, r4
 800a31c:	d9fa      	bls.n	800a314 <_free_r+0x48>
 800a31e:	6819      	ldr	r1, [r3, #0]
 800a320:	1858      	adds	r0, r3, r1
 800a322:	42a0      	cmp	r0, r4
 800a324:	d10b      	bne.n	800a33e <_free_r+0x72>
 800a326:	6820      	ldr	r0, [r4, #0]
 800a328:	4401      	add	r1, r0
 800a32a:	1858      	adds	r0, r3, r1
 800a32c:	4282      	cmp	r2, r0
 800a32e:	6019      	str	r1, [r3, #0]
 800a330:	d1de      	bne.n	800a2f0 <_free_r+0x24>
 800a332:	6810      	ldr	r0, [r2, #0]
 800a334:	6852      	ldr	r2, [r2, #4]
 800a336:	4401      	add	r1, r0
 800a338:	6019      	str	r1, [r3, #0]
 800a33a:	605a      	str	r2, [r3, #4]
 800a33c:	e7d8      	b.n	800a2f0 <_free_r+0x24>
 800a33e:	d902      	bls.n	800a346 <_free_r+0x7a>
 800a340:	230c      	movs	r3, #12
 800a342:	602b      	str	r3, [r5, #0]
 800a344:	e7d4      	b.n	800a2f0 <_free_r+0x24>
 800a346:	6820      	ldr	r0, [r4, #0]
 800a348:	1821      	adds	r1, r4, r0
 800a34a:	428a      	cmp	r2, r1
 800a34c:	bf01      	itttt	eq
 800a34e:	6811      	ldreq	r1, [r2, #0]
 800a350:	6852      	ldreq	r2, [r2, #4]
 800a352:	1809      	addeq	r1, r1, r0
 800a354:	6021      	streq	r1, [r4, #0]
 800a356:	6062      	str	r2, [r4, #4]
 800a358:	605c      	str	r4, [r3, #4]
 800a35a:	e7c9      	b.n	800a2f0 <_free_r+0x24>
 800a35c:	bd38      	pop	{r3, r4, r5, pc}
 800a35e:	bf00      	nop
 800a360:	200017d4 	.word	0x200017d4

0800a364 <_malloc_r>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	1ccd      	adds	r5, r1, #3
 800a368:	f025 0503 	bic.w	r5, r5, #3
 800a36c:	3508      	adds	r5, #8
 800a36e:	2d0c      	cmp	r5, #12
 800a370:	bf38      	it	cc
 800a372:	250c      	movcc	r5, #12
 800a374:	2d00      	cmp	r5, #0
 800a376:	4606      	mov	r6, r0
 800a378:	db01      	blt.n	800a37e <_malloc_r+0x1a>
 800a37a:	42a9      	cmp	r1, r5
 800a37c:	d903      	bls.n	800a386 <_malloc_r+0x22>
 800a37e:	230c      	movs	r3, #12
 800a380:	6033      	str	r3, [r6, #0]
 800a382:	2000      	movs	r0, #0
 800a384:	bd70      	pop	{r4, r5, r6, pc}
 800a386:	f000 f87d 	bl	800a484 <__malloc_lock>
 800a38a:	4a21      	ldr	r2, [pc, #132]	; (800a410 <_malloc_r+0xac>)
 800a38c:	6814      	ldr	r4, [r2, #0]
 800a38e:	4621      	mov	r1, r4
 800a390:	b991      	cbnz	r1, 800a3b8 <_malloc_r+0x54>
 800a392:	4c20      	ldr	r4, [pc, #128]	; (800a414 <_malloc_r+0xb0>)
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	b91b      	cbnz	r3, 800a3a0 <_malloc_r+0x3c>
 800a398:	4630      	mov	r0, r6
 800a39a:	f000 f863 	bl	800a464 <_sbrk_r>
 800a39e:	6020      	str	r0, [r4, #0]
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f000 f85e 	bl	800a464 <_sbrk_r>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d124      	bne.n	800a3f6 <_malloc_r+0x92>
 800a3ac:	230c      	movs	r3, #12
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	6033      	str	r3, [r6, #0]
 800a3b2:	f000 f868 	bl	800a486 <__malloc_unlock>
 800a3b6:	e7e4      	b.n	800a382 <_malloc_r+0x1e>
 800a3b8:	680b      	ldr	r3, [r1, #0]
 800a3ba:	1b5b      	subs	r3, r3, r5
 800a3bc:	d418      	bmi.n	800a3f0 <_malloc_r+0x8c>
 800a3be:	2b0b      	cmp	r3, #11
 800a3c0:	d90f      	bls.n	800a3e2 <_malloc_r+0x7e>
 800a3c2:	600b      	str	r3, [r1, #0]
 800a3c4:	18cc      	adds	r4, r1, r3
 800a3c6:	50cd      	str	r5, [r1, r3]
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f000 f85c 	bl	800a486 <__malloc_unlock>
 800a3ce:	f104 000b 	add.w	r0, r4, #11
 800a3d2:	1d23      	adds	r3, r4, #4
 800a3d4:	f020 0007 	bic.w	r0, r0, #7
 800a3d8:	1ac3      	subs	r3, r0, r3
 800a3da:	d0d3      	beq.n	800a384 <_malloc_r+0x20>
 800a3dc:	425a      	negs	r2, r3
 800a3de:	50e2      	str	r2, [r4, r3]
 800a3e0:	e7d0      	b.n	800a384 <_malloc_r+0x20>
 800a3e2:	684b      	ldr	r3, [r1, #4]
 800a3e4:	428c      	cmp	r4, r1
 800a3e6:	bf16      	itet	ne
 800a3e8:	6063      	strne	r3, [r4, #4]
 800a3ea:	6013      	streq	r3, [r2, #0]
 800a3ec:	460c      	movne	r4, r1
 800a3ee:	e7eb      	b.n	800a3c8 <_malloc_r+0x64>
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	6849      	ldr	r1, [r1, #4]
 800a3f4:	e7cc      	b.n	800a390 <_malloc_r+0x2c>
 800a3f6:	1cc4      	adds	r4, r0, #3
 800a3f8:	f024 0403 	bic.w	r4, r4, #3
 800a3fc:	42a0      	cmp	r0, r4
 800a3fe:	d005      	beq.n	800a40c <_malloc_r+0xa8>
 800a400:	1a21      	subs	r1, r4, r0
 800a402:	4630      	mov	r0, r6
 800a404:	f000 f82e 	bl	800a464 <_sbrk_r>
 800a408:	3001      	adds	r0, #1
 800a40a:	d0cf      	beq.n	800a3ac <_malloc_r+0x48>
 800a40c:	6025      	str	r5, [r4, #0]
 800a40e:	e7db      	b.n	800a3c8 <_malloc_r+0x64>
 800a410:	200017d4 	.word	0x200017d4
 800a414:	200017d8 	.word	0x200017d8

0800a418 <_realloc_r>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	4607      	mov	r7, r0
 800a41c:	4614      	mov	r4, r2
 800a41e:	460e      	mov	r6, r1
 800a420:	b921      	cbnz	r1, 800a42c <_realloc_r+0x14>
 800a422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a426:	4611      	mov	r1, r2
 800a428:	f7ff bf9c 	b.w	800a364 <_malloc_r>
 800a42c:	b922      	cbnz	r2, 800a438 <_realloc_r+0x20>
 800a42e:	f7ff ff4d 	bl	800a2cc <_free_r>
 800a432:	4625      	mov	r5, r4
 800a434:	4628      	mov	r0, r5
 800a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a438:	f000 f826 	bl	800a488 <_malloc_usable_size_r>
 800a43c:	42a0      	cmp	r0, r4
 800a43e:	d20f      	bcs.n	800a460 <_realloc_r+0x48>
 800a440:	4621      	mov	r1, r4
 800a442:	4638      	mov	r0, r7
 800a444:	f7ff ff8e 	bl	800a364 <_malloc_r>
 800a448:	4605      	mov	r5, r0
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d0f2      	beq.n	800a434 <_realloc_r+0x1c>
 800a44e:	4631      	mov	r1, r6
 800a450:	4622      	mov	r2, r4
 800a452:	f7ff fb51 	bl	8009af8 <memcpy>
 800a456:	4631      	mov	r1, r6
 800a458:	4638      	mov	r0, r7
 800a45a:	f7ff ff37 	bl	800a2cc <_free_r>
 800a45e:	e7e9      	b.n	800a434 <_realloc_r+0x1c>
 800a460:	4635      	mov	r5, r6
 800a462:	e7e7      	b.n	800a434 <_realloc_r+0x1c>

0800a464 <_sbrk_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	2300      	movs	r3, #0
 800a468:	4c05      	ldr	r4, [pc, #20]	; (800a480 <_sbrk_r+0x1c>)
 800a46a:	4605      	mov	r5, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	f7f8 fbd8 	bl	8002c24 <_sbrk>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d102      	bne.n	800a47e <_sbrk_r+0x1a>
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	b103      	cbz	r3, 800a47e <_sbrk_r+0x1a>
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	20001f74 	.word	0x20001f74

0800a484 <__malloc_lock>:
 800a484:	4770      	bx	lr

0800a486 <__malloc_unlock>:
 800a486:	4770      	bx	lr

0800a488 <_malloc_usable_size_r>:
 800a488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a48c:	1f18      	subs	r0, r3, #4
 800a48e:	2b00      	cmp	r3, #0
 800a490:	bfbc      	itt	lt
 800a492:	580b      	ldrlt	r3, [r1, r0]
 800a494:	18c0      	addlt	r0, r0, r3
 800a496:	4770      	bx	lr

0800a498 <_init>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	bf00      	nop
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr

0800a4a4 <_fini>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr
