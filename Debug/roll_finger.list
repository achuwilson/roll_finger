
roll_finger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a038  0800a038  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800a038  0800a038  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a038  0800a038  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800a040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf8  20000204  0800a244  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001efc  0800a244  00021efc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ff1  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036f9  00000000  00000000  0003921e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003c918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  0003dde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a443  00000000  00000000  0003f128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ebb  00000000  00000000  0005956b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097d96  00000000  00000000  0006a426  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001021bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd8  00000000  00000000  00102238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	08009dc8 	.word	0x08009dc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	08009dc8 	.word	0x08009dc8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <vApplicationGetIdleTaskMemory+0x28>)
 800095c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <vApplicationGetIdleTaskMemory+0x2c>)
 8000962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000220 	.word	0x20000220
 8000978:	20000274 	.word	0x20000274

0800097c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800098c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <vApplicationGetTimerTaskMemory+0x30>)
 8000992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000474 	.word	0x20000474
 80009ac:	200004c8 	.word	0x200004c8

080009b0 <lightupLED>:
    }*/

}

void lightupLED(struct pixel *framebuffer)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e01a      	b.n	80009f4 <lightupLED+0x44>
	{
		framebuffer[i].r=0;
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	dde1      	ble.n	80009be <lightupLED+0xe>
	}
	for(int i=5;i<12;i++)
 80009fa:	2305      	movs	r3, #5
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	e01a      	b.n	8000a36 <lightupLED+0x86>
	{
		framebuffer[i].r=0;
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	3301      	adds	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	2b0b      	cmp	r3, #11
 8000a3a:	dde1      	ble.n	8000a00 <lightupLED+0x50>
	}
	for(int i=12;i<17;i++)
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e01a      	b.n	8000a78 <lightupLED+0xc8>
	{
		framebuffer[i].r=50;
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	2232      	movs	r2, #50	; 0x32
 8000a50:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=50;
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	2232      	movs	r2, #50	; 0x32
 8000a60:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=50;
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2232      	movs	r2, #50	; 0x32
 8000a70:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<17;i++)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	dde1      	ble.n	8000a42 <lightupLED+0x92>
	}
	for(int i=17;i<24;i++)
 8000a7e:	2311      	movs	r3, #17
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	e01a      	b.n	8000aba <lightupLED+0x10a>
	{
		framebuffer[i].r=255;
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	709a      	strb	r2, [r3, #2]
	for(int i=17;i<24;i++)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b17      	cmp	r3, #23
 8000abe:	dde1      	ble.n	8000a84 <lightupLED+0xd4>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <lightupLED2>:
void lightupLED2(struct pixel *framebuffer)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b087      	sub	sp, #28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e01a      	b.n	8000b0e <lightupLED2+0x44>
	{
		framebuffer[i].r=0;
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	dde1      	ble.n	8000ad8 <lightupLED2+0xe>
	}
	for(int i=5;i<12;i++)
 8000b14:	2305      	movs	r3, #5
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	e01a      	b.n	8000b50 <lightupLED2+0x86>
	{
		framebuffer[i].r=0;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	2200      	movs	r2, #0
 8000b28:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	2200      	movs	r2, #0
 8000b48:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b0b      	cmp	r3, #11
 8000b54:	dde1      	ble.n	8000b1a <lightupLED2+0x50>
	}
	for(int i=12;i<19;i++)
 8000b56:	230c      	movs	r3, #12
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e01a      	b.n	8000b92 <lightupLED2+0xc8>
	{
		framebuffer[i].r=255;
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	2200      	movs	r2, #0
 8000b8a:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<19;i++)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b12      	cmp	r3, #18
 8000b96:	dde1      	ble.n	8000b5c <lightupLED2+0x92>
	}
}
 8000b98:	bf00      	nop
 8000b9a:	371c      	adds	r7, #28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <HAL_UART_RxCpltCallback>:
//---------[ UART Data Reception Completion CallBackFunc. ]---------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
   // HAL_UART_Transmit(&huart1, UART1_rxBuffer, 5, 100);  //for debug
    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 5);
 8000bac:	2205      	movs	r2, #5
 8000bae:	4904      	ldr	r1, [pc, #16]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1c>)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <HAL_UART_RxCpltCallback+0x20>)
 8000bb2:	f004 ffa7 	bl	8005b04 <HAL_UART_Receive_IT>

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200008c8 	.word	0x200008c8
 8000bc4:	20001904 	.word	0x20001904

08000bc8 <open>:

void open(int pwmval)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	6078      	str	r0, [r7, #4]

	if((adc_value[3]>M1MinPos)||(adc_value[4]>M2MinPos))
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <open+0x78>)
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <open+0x7c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d805      	bhi.n	8000be8 <open+0x20>
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <open+0x78>)
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <open+0x80>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d926      	bls.n	8000c36 <open+0x6e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <open+0x84>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f005 fc1b 	bl	800642c <osSemaphoreWait>
		m12o=1;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <open+0x88>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000bfc:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	2264      	movs	r2, #100	; 0x64
 8000c06:	2100      	movs	r1, #0
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 fa1f 	bl	800104c <scale_val>
 8000c0e:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwmval);
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <open+0x8c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	480e      	ldr	r0, [pc, #56]	; (8000c58 <open+0x90>)
 8000c1e:	f003 f98b 	bl	8003f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2108      	movs	r1, #8
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <open+0x90>)
 8000c28:	f003 f986 	bl	8003f38 <HAL_GPIO_WritePin>
		osSemaphoreRelease(BinSemHandle);
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <open+0x84>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 fc49 	bl	80064c8 <osSemaphoreRelease>
	 		  		  }
		    	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
		    	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		*/
	}
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20001888 	.word	0x20001888
 8000c44:	20000010 	.word	0x20000010
 8000c48:	20000018 	.word	0x20000018
 8000c4c:	20001ad4 	.word	0x20001ad4
 8000c50:	200008e0 	.word	0x200008e0
 8000c54:	200019ac 	.word	0x200019ac
 8000c58:	40010c00 	.word	0x40010c00

08000c5c <close_vel>:

void close_vel(int pwmval)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]

	if((adc_value[3]<M1MaxPos)||(adc_value[4]<M2MaxPos))
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <close_vel+0x78>)
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <close_vel+0x7c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d305      	bcc.n	8000c7c <close_vel+0x20>
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <close_vel+0x78>)
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <close_vel+0x80>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d226      	bcs.n	8000cca <close_vel+0x6e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <close_vel+0x84>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c84:	4618      	mov	r0, r3
 8000c86:	f005 fbd1 	bl	800642c <osSemaphoreWait>
		m12c=1;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <close_vel+0x88>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000c90:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2300      	movs	r3, #0
 8000c98:	2264      	movs	r2, #100	; 0x64
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 f9d5 	bl	800104c <scale_val>
 8000ca2:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pwmval);
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <close_vel+0x8c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2108      	movs	r1, #8
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <close_vel+0x90>)
 8000cb2:	f003 f941 	bl	8003f38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2110      	movs	r1, #16
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <close_vel+0x90>)
 8000cbc:	f003 f93c 	bl	8003f38 <HAL_GPIO_WritePin>
		osSemaphoreRelease(BinSemHandle);
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <close_vel+0x84>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 fbff 	bl	80064c8 <osSemaphoreRelease>
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		    		  */
	}

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20001888 	.word	0x20001888
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	2000001c 	.word	0x2000001c
 8000ce0:	20001ad4 	.word	0x20001ad4
 8000ce4:	200008e4 	.word	0x200008e4
 8000ce8:	200019ac 	.word	0x200019ac
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <stop_all>:

void stop_all()
{/*Stops all motors*/
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	480e      	ldr	r0, [pc, #56]	; (8000d34 <stop_all+0x44>)
 8000cfa:	f003 f91d 	bl	8003f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2108      	movs	r1, #8
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <stop_all+0x44>)
 8000d04:	f003 f918 	bl	8003f38 <HAL_GPIO_WritePin>

	//set all PWMs to 0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <stop_all+0x48>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <stop_all+0x48>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <stop_all+0x48>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <stop_all+0x48>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2200      	movs	r2, #0
 8000d26:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <stop_all+0x4c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010c00 	.word	0x40010c00
 8000d38:	200017ac 	.word	0x200017ac
 8000d3c:	200019ac 	.word	0x200019ac

08000d40 <move_lf>:

void move_lf(int pwmval)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[6]<LFMaxPos)
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <move_lf+0x60>)
 8000d4a:	699a      	ldr	r2, [r3, #24]
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <move_lf+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d220      	bcs.n	8000d96 <move_lf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <move_lf+0x68>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fb65 	bl	800642c <osSemaphoreWait>
		// set the moving flag
		lfw= 1;
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <move_lf+0x6c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000d68:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2264      	movs	r2, #100	; 0x64
 8000d72:	2100      	movs	r1, #0
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f969 	bl	800104c <scale_val>
 8000d7a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <move_lf+0x70>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwmval);
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <move_lf+0x70>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <move_lf+0x68>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f005 fb99 	bl	80064c8 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20001888 	.word	0x20001888
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20001ad4 	.word	0x20001ad4
 8000dac:	200008d0 	.word	0x200008d0
 8000db0:	200017ac 	.word	0x200017ac

08000db4 <move_lb>:

void move_lb(int pwmval)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
	if(adc_value[6]>LFMinPos)
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <move_lb+0x60>)
 8000dbe:	699a      	ldr	r2, [r3, #24]
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <move_lb+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d920      	bls.n	8000e0a <move_lb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <move_lb+0x68>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 fb2b 	bl	800642c <osSemaphoreWait>
		//isMoveB_LF = 1;
		lrw=1;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <move_lb+0x6c>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000ddc:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	2264      	movs	r2, #100	; 0x64
 8000de6:	2100      	movs	r1, #0
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f92f 	bl	800104c <scale_val>
 8000dee:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwmval);
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <move_lb+0x70>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <move_lb+0x70>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <move_lb+0x68>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 fb5f 	bl	80064c8 <osSemaphoreRelease>

	}

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20001888 	.word	0x20001888
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	20001ad4 	.word	0x20001ad4
 8000e20:	200008d4 	.word	0x200008d4
 8000e24:	200017ac 	.word	0x200017ac

08000e28 <move_rf>:

void move_rf(int pwmval)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[5]<RFMaxPos)
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <move_rf+0x60>)
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <move_rf+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d220      	bcs.n	8000e7e <move_rf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <move_rf+0x68>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 faf1 	bl	800642c <osSemaphoreWait>
		// set the moving flag
		rfw= 1;
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <move_rf+0x6c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000e50:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2300      	movs	r3, #0
 8000e58:	2264      	movs	r2, #100	; 0x64
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f8f5 	bl	800104c <scale_val>
 8000e62:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <move_rf+0x70>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwmval);
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <move_rf+0x70>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <move_rf+0x68>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f005 fb25 	bl	80064c8 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001888 	.word	0x20001888
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20001ad4 	.word	0x20001ad4
 8000e94:	200008d8 	.word	0x200008d8
 8000e98:	200017ac 	.word	0x200017ac

08000e9c <move_rb>:

void move_rb(int pwmval)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	6078      	str	r0, [r7, #4]
	if(adc_value[5]>RFMinPos)
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <move_rb+0x60>)
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <move_rb+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d920      	bls.n	8000ef2 <move_rb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <move_rb+0x68>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f005 fab7 	bl	800642c <osSemaphoreWait>
		//isMoveB_LF = 1;
		rrw=1;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <move_rb+0x6c>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000ec4:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2264      	movs	r2, #100	; 0x64
 8000ece:	2100      	movs	r1, #0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f8bb 	bl	800104c <scale_val>
 8000ed6:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwmval);
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <move_rb+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <move_rb+0x70>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <move_rb+0x68>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 faeb 	bl	80064c8 <osSemaphoreRelease>

	}

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20001888 	.word	0x20001888
 8000f00:	2000000c 	.word	0x2000000c
 8000f04:	20001ad4 	.word	0x20001ad4
 8000f08:	200008dc 	.word	0x200008dc
 8000f0c:	200017ac 	.word	0x200017ac

08000f10 <ir_led_on>:

void ir_led_on()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2120      	movs	r1, #32
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <ir_led_on+0x14>)
 8000f1a:	f003 f80d 	bl	8003f38 <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <ir_led_off>:

void ir_led_off()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <ir_led_off+0x14>)
 8000f32:	f003 f801 	bl	8003f38 <HAL_GPIO_WritePin>

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <clear_rxBuffer>:

void clear_rxBuffer(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; ++i) // Using for loop we are initializing
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e007      	b.n	8000f5c <clear_rxBuffer+0x1c>
	{
		UART1_rxBuffer[i] = 0;
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <clear_rxBuffer+0x2c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i) // Using for loop we are initializing
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	ddf4      	ble.n	8000f4c <clear_rxBuffer+0xc>
	}
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	200008c8 	.word	0x200008c8

08000f70 <set_mux_fl>:

void set_mux_fl(value)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]


HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value & 0b0001);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <set_mux_fl+0x68>)
 8000f8a:	f002 ffd5 	bl	8003f38 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value & 0b0010);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <set_mux_fl+0x68>)
 8000fa0:	f002 ffca 	bl	8003f38 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value & 0b0100);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <set_mux_fl+0x68>)
 8000fb6:	f002 ffbf 	bl	8003f38 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, value & 0b1000);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <set_mux_fl+0x68>)
 8000fcc:	f002 ffb4 	bl	8003f38 <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010c00 	.word	0x40010c00

08000fdc <set_mux_fr>:
void set_mux_fr(value)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value & 0b0001);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <set_mux_fr+0x68>)
 8000ff6:	f002 ff9f 	bl	8003f38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value & 0b0010);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100a:	480e      	ldr	r0, [pc, #56]	; (8001044 <set_mux_fr+0x68>)
 800100c:	f002 ff94 	bl	8003f38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value & 0b0100);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	b2db      	uxtb	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <set_mux_fr+0x6c>)
 8001022:	f002 ff89 	bl	8003f38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value & 0b1000);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <set_mux_fr+0x6c>)
 8001038:	f002 ff7e 	bl	8003f38 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40010c00 	.word	0x40010c00
 8001048:	40010800 	.word	0x40010800

0800104c <scale_val>:

int scale_val(int inval, int inmin, int inmax, int outmin, int outmax)
{
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
	if (inval>=inmax)
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	db02      	blt.n	8001068 <scale_val+0x1c>
	{
		inval = inmax;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e005      	b.n	8001074 <scale_val+0x28>
	}
	else if(inval<=inmin)
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	429a      	cmp	r2, r3
 800106e:	dc01      	bgt.n	8001074 <scale_val+0x28>
	{
		inval =inmin;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60fb      	str	r3, [r7, #12]
	}

	double slope = 1.0 * (outmax - outmin) / (inmax - inmin);
 8001074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9c2 	bl	8000404 <__aeabi_i2d>
 8001080:	4604      	mov	r4, r0
 8001082:	460d      	mov	r5, r1
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9ba 	bl	8000404 <__aeabi_i2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4620      	mov	r0, r4
 8001096:	4629      	mov	r1, r5
 8001098:	f7ff fb48 	bl	800072c <__aeabi_ddiv>
 800109c:	4603      	mov	r3, r0
 800109e:	460c      	mov	r4, r1
 80010a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return outmin + slope * (inval - inmin);
 80010a4:	6838      	ldr	r0, [r7, #0]
 80010a6:	f7ff f9ad 	bl	8000404 <__aeabi_i2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9a5 	bl	8000404 <__aeabi_i2d>
 80010ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010be:	f7ff fa0b 	bl	80004d8 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4620      	mov	r0, r4
 80010c8:	4629      	mov	r1, r5
 80010ca:	f7ff f84f 	bl	800016c <__adddf3>
 80010ce:	4603      	mov	r3, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	4618      	mov	r0, r3
 80010d4:	4621      	mov	r1, r4
 80010d6:	f7ff fc11 	bl	80008fc <__aeabi_d2iz>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bdb0      	pop	{r4, r5, r7, pc}

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b09a      	sub	sp, #104	; 0x68
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ea:	f001 fe35 	bl	8002d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ee:	f000 f8ed 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f2:	f000 fbf5 	bl	80018e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f6:	f000 fbbd 	bl	8001874 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80010fa:	f000 fb91 	bl	8001820 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80010fe:	f000 f941 	bl	8001384 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001102:	f000 fa77 	bl	80015f4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001106:	f000 faf3 	bl	80016f0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800110a:	f000 f9d3 	bl	80014b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //start ADC conversations
  HAL_ADC_Start_DMA(&hadc1, adc_value, 7);
 800110e:	2207      	movs	r2, #7
 8001110:	495c      	ldr	r1, [pc, #368]	; (8001284 <main+0x1a0>)
 8001112:	485d      	ldr	r0, [pc, #372]	; (8001288 <main+0x1a4>)
 8001114:	f001 ff4c 	bl	8002fb0 <HAL_ADC_Start_DMA>
  // Start UART interrupts
  /* When UART gets 5 bytes, it calls the function
   * HAL_UART_RxCpltCallback(
   *
   */
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 5);
 8001118:	2205      	movs	r2, #5
 800111a:	495c      	ldr	r1, [pc, #368]	; (800128c <main+0x1a8>)
 800111c:	485c      	ldr	r0, [pc, #368]	; (8001290 <main+0x1ac>)
 800111e:	f004 fcf1 	bl	8005b04 <HAL_UART_Receive_IT>
   *		TIM4->CCR1 = pwm_value;
   *		or
   *		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_value);
   *
   */
  HAL_TIM_Base_Start(&htim4);
 8001122:	485c      	ldr	r0, [pc, #368]	; (8001294 <main+0x1b0>)
 8001124:	f003 fc72 	bl	8004a0c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001128:	485b      	ldr	r0, [pc, #364]	; (8001298 <main+0x1b4>)
 800112a:	f003 fc6f 	bl	8004a0c <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800112e:	2100      	movs	r1, #0
 8001130:	4858      	ldr	r0, [pc, #352]	; (8001294 <main+0x1b0>)
 8001132:	f003 fd5f 	bl	8004bf4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001136:	2104      	movs	r1, #4
 8001138:	4856      	ldr	r0, [pc, #344]	; (8001294 <main+0x1b0>)
 800113a:	f003 fd5b 	bl	8004bf4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 800113e:	2108      	movs	r1, #8
 8001140:	4854      	ldr	r0, [pc, #336]	; (8001294 <main+0x1b0>)
 8001142:	f003 fd57 	bl	8004bf4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001146:	210c      	movs	r1, #12
 8001148:	4852      	ldr	r0, [pc, #328]	; (8001294 <main+0x1b0>)
 800114a:	f003 fd53 	bl	8004bf4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800114e:	2100      	movs	r1, #0
 8001150:	4851      	ldr	r0, [pc, #324]	; (8001298 <main+0x1b4>)
 8001152:	f003 fd4f 	bl	8004bf4 <HAL_TIM_PWM_Start>


  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <main+0x1b0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 800115e:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <main+0x1b0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <main+0x1b0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 800116e:	4b49      	ldr	r3, [pc, #292]	; (8001294 <main+0x1b0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8001176:	4b48      	ldr	r3, [pc, #288]	; (8001298 <main+0x1b4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  // = {'\0'};
  long X = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	667b      	str	r3, [r7, #100]	; 0x64

  int temp;

  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

      int ch, animation_state = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	663b      	str	r3, [r7, #96]	; 0x60
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001186:	b662      	cpsie	i

      __enable_irq();
      HAL_Delay(200);
 8001188:	20c8      	movs	r0, #200	; 0xc8
 800118a:	f001 fe17 	bl	8002dbc <HAL_Delay>

      //INITIALIZE NEOPIXELS
      //channel 0
      led_channels[0].framebuffer = channel_framebuffers[0];
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <main+0x1b8>)
 8001190:	653b      	str	r3, [r7, #80]	; 0x50
      led_channels[0].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 8001192:	2348      	movs	r3, #72	; 0x48
 8001194:	657b      	str	r3, [r7, #84]	; 0x54

      //channel1
      led_channels[1].framebuffer = channel_framebuffers[1];
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <main+0x1bc>)
 8001198:	65bb      	str	r3, [r7, #88]	; 0x58
      led_channels[1].length = FRAMEBUFFER2_SIZE * sizeof(struct pixel);
 800119a:	2339      	movs	r3, #57	; 0x39
 800119c:	65fb      	str	r3, [r7, #92]	; 0x5c

      HAL_Delay(200);
 800119e:	20c8      	movs	r0, #200	; 0xc8
 80011a0:	f001 fe0c 	bl	8002dbc <HAL_Delay>
      ws2812_init();
 80011a4:	f001 fd8c 	bl	8002cc0 <ws2812_init>
      HAL_Delay(200);
 80011a8:	20c8      	movs	r0, #200	; 0xc8
 80011aa:	f001 fe07 	bl	8002dbc <HAL_Delay>
      // SETUP LED COLORS
      lightupLED(channel_framebuffers[0]);
 80011ae:	483b      	ldr	r0, [pc, #236]	; (800129c <main+0x1b8>)
 80011b0:	f7ff fbfe 	bl	80009b0 <lightupLED>
      lightupLED2(channel_framebuffers[1]);
 80011b4:	483a      	ldr	r0, [pc, #232]	; (80012a0 <main+0x1bc>)
 80011b6:	f7ff fc88 	bl	8000aca <lightupLED2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ba:	b672      	cpsid	i

   	  __disable_irq();
   	  ws2812_refresh(led_channels, GPIOB);
 80011bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011c0:	4938      	ldr	r1, [pc, #224]	; (80012a4 <main+0x1c0>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fc22 	bl	8002a0c <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 80011c8:	b662      	cpsie	i
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 80011ca:	2300      	movs	r3, #0
 80011cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80011ce:	2300      	movs	r3, #0
 80011d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 80011d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d6:	2101      	movs	r1, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 f8f3 	bl	80063c4 <osSemaphoreCreate>
 80011de:	4602      	mov	r2, r0
 80011e0:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <main+0x1c4>)
 80011e2:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of pidTimer */
  osTimerDef(pidTimer, pid_timer);
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <main+0x1c8>)
 80011e6:	643b      	str	r3, [r7, #64]	; 0x40
 80011e8:	2300      	movs	r3, #0
 80011ea:	647b      	str	r3, [r7, #68]	; 0x44
  pidTimerHandle = osTimerCreate(osTimer(pidTimer), osTimerPeriodic, NULL);
 80011ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011f0:	2200      	movs	r2, #0
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f005 f86b 	bl	80062d0 <osTimerCreate>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <main+0x1cc>)
 80011fe:	601a      	str	r2, [r3, #0]

  /* definition and creation of statusUpdate */
  osTimerDef(statusUpdate, status_update_timer);
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <main+0x1d0>)
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
 8001204:	2300      	movs	r3, #0
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  statusUpdateHandle = osTimerCreate(osTimer(statusUpdate), osTimerPeriodic, NULL);
 8001208:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800120c:	2200      	movs	r2, #0
 800120e:	2101      	movs	r1, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f005 f85d 	bl	80062d0 <osTimerCreate>
 8001216:	4602      	mov	r2, r0
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <main+0x1d4>)
 800121a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  // PID timer runs at 100hz
  osTimerStart(pidTimerHandle, 10);
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <main+0x1cc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	210a      	movs	r1, #10
 8001222:	4618      	mov	r0, r3
 8001224:	f005 f888 	bl	8006338 <osTimerStart>
  //status update timer runs at 100 hz
  osTimerStart(statusUpdateHandle, 10);
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <main+0x1d4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	210a      	movs	r1, #10
 800122e:	4618      	mov	r0, r3
 8001230:	f005 f882 	bl	8006338 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adcreader */
  osThreadDef(adcreader, adc_reader_task, osPriorityNormal, 0, 128);
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <main+0x1d8>)
 8001236:	f107 041c 	add.w	r4, r7, #28
 800123a:	461d      	mov	r5, r3
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001244:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcreaderHandle = osThreadCreate(osThread(adcreader), NULL);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 ffdd 	bl	800620e <osThreadCreate>
 8001254:	4602      	mov	r2, r0
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <main+0x1dc>)
 8001258:	601a      	str	r2, [r3, #0]

  /* definition and creation of serialreader */
  osThreadDef(serialreader, serial_reader_task, osPriorityHigh, 0, 128);
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <main+0x1e0>)
 800125c:	463c      	mov	r4, r7
 800125e:	461d      	mov	r5, r3
 8001260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialreaderHandle = osThreadCreate(osThread(serialreader), NULL);
 800126c:	463b      	mov	r3, r7
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f004 ffcc 	bl	800620e <osThreadCreate>
 8001276:	4602      	mov	r2, r0
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <main+0x1e4>)
 800127a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800127c:	f004 ffc0 	bl	8006200 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001280:	e7fe      	b.n	8001280 <main+0x19c>
 8001282:	bf00      	nop
 8001284:	20001888 	.word	0x20001888
 8001288:	200018cc 	.word	0x200018cc
 800128c:	200008c8 	.word	0x200008c8
 8001290:	20001904 	.word	0x20001904
 8001294:	200017ac 	.word	0x200017ac
 8001298:	200019ac 	.word	0x200019ac
 800129c:	20001a44 	.word	0x20001a44
 80012a0:	20001a8c 	.word	0x20001a8c
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	20001ad4 	.word	0x20001ad4
 80012ac:	08001cd1 	.word	0x08001cd1
 80012b0:	200018fc 	.word	0x200018fc
 80012b4:	08001ef1 	.word	0x08001ef1
 80012b8:	20001900 	.word	0x20001900
 80012bc:	08009dec 	.word	0x08009dec
 80012c0:	20001884 	.word	0x20001884
 80012c4:	08009e18 	.word	0x08009e18
 80012c8:	2000183c 	.word	0x2000183c

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	; 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	2228      	movs	r2, #40	; 0x28
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f008 f8af 	bl	800943e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2301      	movs	r3, #1
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130e:	2302      	movs	r3, #2
 8001310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001318:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 800131c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fe20 	bl	8003f68 <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800132e:	f000 fe81 	bl	8002034 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001342:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2102      	movs	r1, #2
 800134e:	4618      	mov	r0, r3
 8001350:	f003 f88a 	bl	8004468 <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800135a:	f000 fe6b 	bl	8002034 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800135e:	2302      	movs	r3, #2
 8001360:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001366:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fa48 	bl	8004800 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001376:	f000 fe5d 	bl	8002034 <Error_Handler>
  }
}
 800137a:	bf00      	nop
 800137c:	3750      	adds	r7, #80	; 0x50
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001394:	4b45      	ldr	r3, [pc, #276]	; (80014ac <MX_ADC1_Init+0x128>)
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <MX_ADC1_Init+0x12c>)
 8001398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800139a:	4b44      	ldr	r3, [pc, #272]	; (80014ac <MX_ADC1_Init+0x128>)
 800139c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013a2:	4b42      	ldr	r3, [pc, #264]	; (80014ac <MX_ADC1_Init+0x128>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a8:	4b40      	ldr	r3, [pc, #256]	; (80014ac <MX_ADC1_Init+0x128>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <MX_ADC1_Init+0x128>)
 80013b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <MX_ADC1_Init+0x128>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 80013bc:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <MX_ADC1_Init+0x128>)
 80013be:	2207      	movs	r2, #7
 80013c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c2:	483a      	ldr	r0, [pc, #232]	; (80014ac <MX_ADC1_Init+0x128>)
 80013c4:	f001 fd1c 	bl	8002e00 <HAL_ADC_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80013ce:	f000 fe31 	bl	8002034 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80013da:	2304      	movs	r3, #4
 80013dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4832      	ldr	r0, [pc, #200]	; (80014ac <MX_ADC1_Init+0x128>)
 80013e4:	f001 fede 	bl	80031a4 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 fe21 	bl	8002034 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	482b      	ldr	r0, [pc, #172]	; (80014ac <MX_ADC1_Init+0x128>)
 8001400:	f001 fed0 	bl	80031a4 <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800140a:	f000 fe13 	bl	8002034 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800140e:	2302      	movs	r3, #2
 8001410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001412:	2303      	movs	r3, #3
 8001414:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001416:	2305      	movs	r3, #5
 8001418:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4823      	ldr	r0, [pc, #140]	; (80014ac <MX_ADC1_Init+0x128>)
 8001420:	f001 fec0 	bl	80031a4 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800142a:	f000 fe03 	bl	8002034 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800142e:	2303      	movs	r3, #3
 8001430:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001432:	2304      	movs	r3, #4
 8001434:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001436:	2304      	movs	r3, #4
 8001438:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	481b      	ldr	r0, [pc, #108]	; (80014ac <MX_ADC1_Init+0x128>)
 8001440:	f001 feb0 	bl	80031a4 <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800144a:	f000 fdf3 	bl	8002034 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800144e:	2304      	movs	r3, #4
 8001450:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001452:	2305      	movs	r3, #5
 8001454:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_ADC1_Init+0x128>)
 800145c:	f001 fea2 	bl	80031a4 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001466:	f000 fde5 	bl	8002034 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800146a:	2307      	movs	r3, #7
 800146c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800146e:	2306      	movs	r3, #6
 8001470:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_ADC1_Init+0x128>)
 8001478:	f001 fe94 	bl	80031a4 <HAL_ADC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001482:	f000 fdd7 	bl	8002034 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001486:	2306      	movs	r3, #6
 8001488:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800148a:	2307      	movs	r3, #7
 800148c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_ADC1_Init+0x128>)
 8001494:	f001 fe86 	bl	80031a4 <HAL_ADC_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800149e:	f000 fdc9 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200018cc 	.word	0x200018cc
 80014b0:	40012400 	.word	0x40012400

080014b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b096      	sub	sp, #88	; 0x58
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2220      	movs	r2, #32
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f007 ffa6 	bl	800943e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <MX_TIM1_Init+0x138>)
 80014f4:	4a3e      	ldr	r2, [pc, #248]	; (80015f0 <MX_TIM1_Init+0x13c>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <MX_TIM1_Init+0x138>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <MX_TIM1_Init+0x138>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2799;
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <MX_TIM1_Init+0x138>)
 8001506:	f640 22ef 	movw	r2, #2799	; 0xaef
 800150a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <MX_TIM1_Init+0x138>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <MX_TIM1_Init+0x138>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <MX_TIM1_Init+0x138>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800151e:	4833      	ldr	r0, [pc, #204]	; (80015ec <MX_TIM1_Init+0x138>)
 8001520:	f003 fa24 	bl	800496c <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800152a:	f000 fd83 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001538:	4619      	mov	r1, r3
 800153a:	482c      	ldr	r0, [pc, #176]	; (80015ec <MX_TIM1_Init+0x138>)
 800153c:	f003 fdc2 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001546:	f000 fd75 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800154a:	4828      	ldr	r0, [pc, #160]	; (80015ec <MX_TIM1_Init+0x138>)
 800154c:	f003 fafa 	bl	8004b44 <HAL_TIM_PWM_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001556:	f000 fd6d 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001566:	4619      	mov	r1, r3
 8001568:	4820      	ldr	r0, [pc, #128]	; (80015ec <MX_TIM1_Init+0x138>)
 800156a:	f004 f92b 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001574:	f000 fd5e 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001578:	2360      	movs	r3, #96	; 0x60
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <MX_TIM1_Init+0x138>)
 800159e:	f003 fcd3 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015a8:	f000 fd44 	bl	8002034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM1_Init+0x138>)
 80015d0:	f004 f956 	bl	8005880 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80015da:	f000 fd2b 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM1_Init+0x138>)
 80015e0:	f000 fea0 	bl	8002324 <HAL_TIM_MspPostInit>

}
 80015e4:	bf00      	nop
 80015e6:	3758      	adds	r7, #88	; 0x58
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200019ac 	.word	0x200019ac
 80015f0:	40012c00 	.word	0x40012c00

080015f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001624:	4b31      	ldr	r3, [pc, #196]	; (80016ec <MX_TIM2_Init+0xf8>)
 8001626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <MX_TIM2_Init+0xf8>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <MX_TIM2_Init+0xf8>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <MX_TIM2_Init+0xf8>)
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <MX_TIM2_Init+0xf8>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MX_TIM2_Init+0xf8>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164c:	4827      	ldr	r0, [pc, #156]	; (80016ec <MX_TIM2_Init+0xf8>)
 800164e:	f003 f98d 	bl	800496c <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001658:	f000 fcec 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	4619      	mov	r1, r3
 8001668:	4820      	ldr	r0, [pc, #128]	; (80016ec <MX_TIM2_Init+0xf8>)
 800166a:	f003 fd2b 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001674:	f000 fcde 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001678:	481c      	ldr	r0, [pc, #112]	; (80016ec <MX_TIM2_Init+0xf8>)
 800167a:	f003 fa63 	bl	8004b44 <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001684:	f000 fcd6 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	4619      	mov	r1, r3
 8001696:	4815      	ldr	r0, [pc, #84]	; (80016ec <MX_TIM2_Init+0xf8>)
 8001698:	f004 f894 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016a2:	f000 fcc7 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	; 0x60
 80016a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_TIM2_Init+0xf8>)
 80016be:	f003 fc43 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016c8:	f000 fcb4 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2204      	movs	r2, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_TIM2_Init+0xf8>)
 80016d4:	f003 fc38 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80016de:	f000 fca9 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3738      	adds	r7, #56	; 0x38
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200019fc 	.word	0x200019fc

080016f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <MX_TIM4_Init+0x128>)
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <MX_TIM4_Init+0x12c>)
 8001724:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <MX_TIM4_Init+0x128>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <MX_TIM4_Init+0x128>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2799;
 8001732:	4b39      	ldr	r3, [pc, #228]	; (8001818 <MX_TIM4_Init+0x128>)
 8001734:	f640 22ef 	movw	r2, #2799	; 0xaef
 8001738:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b37      	ldr	r3, [pc, #220]	; (8001818 <MX_TIM4_Init+0x128>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <MX_TIM4_Init+0x128>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001746:	4834      	ldr	r0, [pc, #208]	; (8001818 <MX_TIM4_Init+0x128>)
 8001748:	f003 f910 	bl	800496c <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001752:	f000 fc6f 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800175c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001760:	4619      	mov	r1, r3
 8001762:	482d      	ldr	r0, [pc, #180]	; (8001818 <MX_TIM4_Init+0x128>)
 8001764:	f003 fcae 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800176e:	f000 fc61 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001772:	4829      	ldr	r0, [pc, #164]	; (8001818 <MX_TIM4_Init+0x128>)
 8001774:	f003 f9e6 	bl	8004b44 <HAL_TIM_PWM_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800177e:	f000 fc59 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	4619      	mov	r1, r3
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <MX_TIM4_Init+0x128>)
 8001792:	f004 f817 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800179c:	f000 fc4a 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a0:	2360      	movs	r3, #96	; 0x60
 80017a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	4619      	mov	r1, r3
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <MX_TIM4_Init+0x128>)
 80017b8:	f003 fbc6 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80017c2:	f000 fc37 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2204      	movs	r2, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4812      	ldr	r0, [pc, #72]	; (8001818 <MX_TIM4_Init+0x128>)
 80017ce:	f003 fbbb 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80017d8:	f000 fc2c 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2208      	movs	r2, #8
 80017e0:	4619      	mov	r1, r3
 80017e2:	480d      	ldr	r0, [pc, #52]	; (8001818 <MX_TIM4_Init+0x128>)
 80017e4:	f003 fbb0 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80017ee:	f000 fc21 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	220c      	movs	r2, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <MX_TIM4_Init+0x128>)
 80017fa:	f003 fba5 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001804:	f000 fc16 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <MX_TIM4_Init+0x128>)
 800180a:	f000 fd8b 	bl	8002324 <HAL_TIM_MspPostInit>

}
 800180e:	bf00      	nop
 8001810:	3738      	adds	r7, #56	; 0x38
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200017ac 	.word	0x200017ac
 800181c:	40000800 	.word	0x40000800

08001820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <MX_USART1_UART_Init+0x50>)
 8001828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001858:	f004 f875 	bl	8005946 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001862:	f000 fbe7 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20001904 	.word	0x20001904
 8001870:	40013800 	.word	0x40013800

08001874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_DMA_Init+0x68>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a17      	ldr	r2, [pc, #92]	; (80018dc <MX_DMA_Init+0x68>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6153      	str	r3, [r2, #20]
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_DMA_Init+0x68>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2105      	movs	r1, #5
 8001896:	200b      	movs	r0, #11
 8001898:	f001 ff23 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800189c:	200b      	movs	r0, #11
 800189e:	f001 ff3c 	bl	800371a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2105      	movs	r1, #5
 80018a6:	200c      	movs	r0, #12
 80018a8:	f001 ff1b 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018ac:	200c      	movs	r0, #12
 80018ae:	f001 ff34 	bl	800371a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2105      	movs	r1, #5
 80018b6:	200f      	movs	r0, #15
 80018b8:	f001 ff13 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018bc:	200f      	movs	r0, #15
 80018be:	f001 ff2c 	bl	800371a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	2011      	movs	r0, #17
 80018c8:	f001 ff0b 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018cc:	2011      	movs	r0, #17
 80018ce:	f001 ff24 	bl	800371a <HAL_NVIC_EnableIRQ>

}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <MX_GPIO_Init+0xfc>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a38      	ldr	r2, [pc, #224]	; (80019dc <MX_GPIO_Init+0xfc>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <MX_GPIO_Init+0xfc>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <MX_GPIO_Init+0xfc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a32      	ldr	r2, [pc, #200]	; (80019dc <MX_GPIO_Init+0xfc>)
 8001912:	f043 0320 	orr.w	r3, r3, #32
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b30      	ldr	r3, [pc, #192]	; (80019dc <MX_GPIO_Init+0xfc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <MX_GPIO_Init+0xfc>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a2c      	ldr	r2, [pc, #176]	; (80019dc <MX_GPIO_Init+0xfc>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <MX_GPIO_Init+0xfc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <MX_GPIO_Init+0xfc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a26      	ldr	r2, [pc, #152]	; (80019dc <MX_GPIO_Init+0xfc>)
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <MX_GPIO_Init+0xfc>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195a:	4821      	ldr	r0, [pc, #132]	; (80019e0 <MX_GPIO_Init+0x100>)
 800195c:	f002 faec 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001960:	2200      	movs	r2, #0
 8001962:	f64f 413b 	movw	r1, #64571	; 0xfc3b
 8001966:	481f      	ldr	r0, [pc, #124]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001968:	f002 fae6 	bl	8003f38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001972:	481d      	ldr	r0, [pc, #116]	; (80019e8 <MX_GPIO_Init+0x108>)
 8001974:	f002 fae0 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2302      	movs	r3, #2
 8001988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	4619      	mov	r1, r3
 8001990:	4813      	ldr	r0, [pc, #76]	; (80019e0 <MX_GPIO_Init+0x100>)
 8001992:	f002 f977 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001996:	f64f 433b 	movw	r3, #64571	; 0xfc3b
 800199a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	480d      	ldr	r0, [pc, #52]	; (80019e4 <MX_GPIO_Init+0x104>)
 80019b0:	f002 f968 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4619      	mov	r1, r3
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_GPIO_Init+0x108>)
 80019ce:	f002 f959 	bl	8003c84 <HAL_GPIO_Init>

}
 80019d2:	bf00      	nop
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40011000 	.word	0x40011000
 80019e4:	40010c00 	.word	0x40010c00
 80019e8:	40010800 	.word	0x40010800

080019ec <adc_reader_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_adc_reader_task */
void adc_reader_task(void const * argument)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  for(int i=0;i<num_irsensors;i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e040      	b.n	8001a7c <adc_reader_task+0x90>
	  	  {
	  		  // set IR off
	  		  ir_led_off();
 80019fa:	f7ff fa95 	bl	8000f28 <ir_led_off>

	  		  // select mux channel
	  		  set_mux_fl(i);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff fab6 	bl	8000f70 <set_mux_fl>
	  		  set_mux_fr(i);
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff fae9 	bl	8000fdc <set_mux_fr>

	  		  //small delay
	  		  HAL_Delay(1);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f001 f9d6 	bl	8002dbc <HAL_Delay>

	  		  // get initial readings
	  		  data_fl_noise = adc_value[0];
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <adc_reader_task+0x9c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <adc_reader_task+0xa0>)
 8001a18:	601a      	str	r2, [r3, #0]
	  		  data_fr_noise = adc_value[1];
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <adc_reader_task+0x9c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <adc_reader_task+0xa4>)
 8001a22:	601a      	str	r2, [r3, #0]

	  		  // set IR on
	  		  ir_led_on();
 8001a24:	f7ff fa74 	bl	8000f10 <ir_led_on>
	  		  //small delay
	  		  HAL_Delay(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f001 f9c7 	bl	8002dbc <HAL_Delay>

	  		  // get second readings
	  		  data_fl = adc_value[0];
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <adc_reader_task+0x9c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <adc_reader_task+0xa8>)
 8001a36:	601a      	str	r2, [r3, #0]
	  		  data_fr = adc_value[1];
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <adc_reader_task+0x9c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <adc_reader_task+0xac>)
 8001a40:	601a      	str	r2, [r3, #0]

	  		  //calculate the real value and set it in ir_data array
	  		  data_fl_real = -1*(data_fl - data_fl_noise);
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <adc_reader_task+0xa0>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <adc_reader_task+0xa8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <adc_reader_task+0xb0>)
 8001a4e:	6013      	str	r3, [r2, #0]
	  		  data_fr_real = -1*(data_fr - data_fr_noise);
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <adc_reader_task+0xa4>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <adc_reader_task+0xac>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <adc_reader_task+0xb4>)
 8001a5c:	6013      	str	r3, [r2, #0]

	  		  irdata_fl[i] = data_fl_real;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <adc_reader_task+0xb0>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4910      	ldr	r1, [pc, #64]	; (8001aa4 <adc_reader_task+0xb8>)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  irdata_fr[i] = data_fr_real;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <adc_reader_task+0xb4>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <adc_reader_task+0xbc>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<num_irsensors;i++)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <adc_reader_task+0xc0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dbb9      	blt.n	80019fa <adc_reader_task+0xe>
 8001a86:	e7b5      	b.n	80019f4 <adc_reader_task+0x8>
 8001a88:	20001888 	.word	0x20001888
 8001a8c:	200019f8 	.word	0x200019f8
 8001a90:	200019a8 	.word	0x200019a8
 8001a94:	20001760 	.word	0x20001760
 8001a98:	20001838 	.word	0x20001838
 8001a9c:	200019f4 	.word	0x200019f4
 8001aa0:	200017a8 	.word	0x200017a8
 8001aa4:	200018a4 	.word	0x200018a4
 8001aa8:	20001ad8 	.word	0x20001ad8
 8001aac:	20000020 	.word	0x20000020

08001ab0 <serial_reader_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_reader_task */
void serial_reader_task(void const * argument)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	   *    rrXXX - move right finger reverse with XXX speed
	   *    s0000 - stop
	   */
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "Serial READ \n", 1), 10);
	  //close gripper
	  switch(UART1_rxBuffer[0])
 8001ab8:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <serial_reader_task+0x208>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	3b63      	subs	r3, #99	; 0x63
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	f200 80f3 	bhi.w	8001caa <serial_reader_task+0x1fa>
 8001ac4:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <serial_reader_task+0x1c>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001b11 	.word	0x08001b11
 8001ad0:	08001cab 	.word	0x08001cab
 8001ad4:	08001cab 	.word	0x08001cab
 8001ad8:	08001cab 	.word	0x08001cab
 8001adc:	08001cab 	.word	0x08001cab
 8001ae0:	08001cab 	.word	0x08001cab
 8001ae4:	08001cab 	.word	0x08001cab
 8001ae8:	08001cab 	.word	0x08001cab
 8001aec:	08001cab 	.word	0x08001cab
 8001af0:	08001c5d 	.word	0x08001c5d
 8001af4:	08001cab 	.word	0x08001cab
 8001af8:	08001cab 	.word	0x08001cab
 8001afc:	08001bb7 	.word	0x08001bb7
 8001b00:	08001cab 	.word	0x08001cab
 8001b04:	08001cab 	.word	0x08001cab
 8001b08:	08001c0f 	.word	0x08001c0f
 8001b0c:	08001bad 	.word	0x08001bad
	  {

	  case 'c':
	  	  {
			  //close in current control mode
			  if(UART1_rxBuffer[1]=='c')
 8001b10:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <serial_reader_task+0x208>)
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	2b63      	cmp	r3, #99	; 0x63
 8001b16:	d11d      	bne.n	8001b54 <serial_reader_task+0xa4>
			  	  {
				  // create the NULL terminated character array with the values
				  char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001b18:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <serial_reader_task+0x208>)
 8001b1a:	789b      	ldrb	r3, [r3, #2]
 8001b1c:	763b      	strb	r3, [r7, #24]
 8001b1e:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <serial_reader_task+0x208>)
 8001b20:	78db      	ldrb	r3, [r3, #3]
 8001b22:	767b      	strb	r3, [r7, #25]
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <serial_reader_task+0x208>)
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	76bb      	strb	r3, [r7, #26]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	76fb      	strb	r3, [r7, #27]
				  int cmd_val = atoi(val_ar);
 8001b2e:	f107 0318 	add.w	r3, r7, #24
 8001b32:	4618      	mov	r0, r3
 8001b34:	f007 fc4a 	bl	80093cc <atoi>
 8001b38:	61f8      	str	r0, [r7, #28]
				  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cc %d \n", cmd_val), 100);
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	495f      	ldr	r1, [pc, #380]	; (8001cbc <serial_reader_task+0x20c>)
 8001b3e:	4860      	ldr	r0, [pc, #384]	; (8001cc0 <serial_reader_task+0x210>)
 8001b40:	f007 fc86 	bl	8009450 <siprintf>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	2364      	movs	r3, #100	; 0x64
 8001b4a:	495d      	ldr	r1, [pc, #372]	; (8001cc0 <serial_reader_task+0x210>)
 8001b4c:	485d      	ldr	r0, [pc, #372]	; (8001cc4 <serial_reader_task+0x214>)
 8001b4e:	f003 ff47 	bl	80059e0 <HAL_UART_Transmit>
 8001b52:	e028      	b.n	8001ba6 <serial_reader_task+0xf6>
			  	  }
			  //close in position hold mode
			  else if(UART1_rxBuffer[1]=='p')
 8001b54:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <serial_reader_task+0x208>)
 8001b56:	785b      	ldrb	r3, [r3, #1]
 8001b58:	2b70      	cmp	r3, #112	; 0x70
 8001b5a:	d10c      	bne.n	8001b76 <serial_reader_task+0xc6>
		  	  	  {
				  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cp  \n", 1), 100);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	495a      	ldr	r1, [pc, #360]	; (8001cc8 <serial_reader_task+0x218>)
 8001b60:	4857      	ldr	r0, [pc, #348]	; (8001cc0 <serial_reader_task+0x210>)
 8001b62:	f007 fc75 	bl	8009450 <siprintf>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	2364      	movs	r3, #100	; 0x64
 8001b6c:	4954      	ldr	r1, [pc, #336]	; (8001cc0 <serial_reader_task+0x210>)
 8001b6e:	4855      	ldr	r0, [pc, #340]	; (8001cc4 <serial_reader_task+0x214>)
 8001b70:	f003 ff36 	bl	80059e0 <HAL_UART_Transmit>
 8001b74:	e017      	b.n	8001ba6 <serial_reader_task+0xf6>
		  	  	  }
			  //close in speed control mode
			  else if(UART1_rxBuffer[1]=='s')
 8001b76:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <serial_reader_task+0x208>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	2b73      	cmp	r3, #115	; 0x73
 8001b7c:	d113      	bne.n	8001ba6 <serial_reader_task+0xf6>
			  {
				  char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001b7e:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <serial_reader_task+0x208>)
 8001b80:	789b      	ldrb	r3, [r3, #2]
 8001b82:	753b      	strb	r3, [r7, #20]
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <serial_reader_task+0x208>)
 8001b86:	78db      	ldrb	r3, [r3, #3]
 8001b88:	757b      	strb	r3, [r7, #21]
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <serial_reader_task+0x208>)
 8001b8c:	791b      	ldrb	r3, [r3, #4]
 8001b8e:	75bb      	strb	r3, [r7, #22]
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
				  int cmd_val = atoi(val_ar);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f007 fc17 	bl	80093cc <atoi>
 8001b9e:	6238      	str	r0, [r7, #32]
				  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cs %d \n", cmd_val), 100);
				  close_vel(cmd_val);
 8001ba0:	6a38      	ldr	r0, [r7, #32]
 8001ba2:	f7ff f85b 	bl	8000c5c <close_vel>

			  }
		  clear_rxBuffer();
 8001ba6:	f7ff f9cb 	bl	8000f40 <clear_rxBuffer>
	  	  }break;
 8001baa:	e080      	b.n	8001cae <serial_reader_task+0x1fe>
	  case 's':
	  	  {

	  	  stop_all();
 8001bac:	f7ff f8a0 	bl	8000cf0 <stop_all>
	  	  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "STOP \n", 1), 100);
		  clear_rxBuffer();
 8001bb0:	f7ff f9c6 	bl	8000f40 <clear_rxBuffer>
	  	  }break;
 8001bb4:	e07b      	b.n	8001cae <serial_reader_task+0x1fe>
	  case 'o':
	  	  {
	  		// open upto fully open position
	  		if(UART1_rxBuffer[1]=='p')
 8001bb6:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <serial_reader_task+0x208>)
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b70      	cmp	r3, #112	; 0x70
 8001bbc:	d10c      	bne.n	8001bd8 <serial_reader_task+0x128>
	  			{
	  			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "OPEN \n", 1), 100);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4942      	ldr	r1, [pc, #264]	; (8001ccc <serial_reader_task+0x21c>)
 8001bc2:	483f      	ldr	r0, [pc, #252]	; (8001cc0 <serial_reader_task+0x210>)
 8001bc4:	f007 fc44 	bl	8009450 <siprintf>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	2364      	movs	r3, #100	; 0x64
 8001bce:	493c      	ldr	r1, [pc, #240]	; (8001cc0 <serial_reader_task+0x210>)
 8001bd0:	483c      	ldr	r0, [pc, #240]	; (8001cc4 <serial_reader_task+0x214>)
 8001bd2:	f003 ff05 	bl	80059e0 <HAL_UART_Transmit>
 8001bd6:	e017      	b.n	8001c08 <serial_reader_task+0x158>
	  			}
	  		// open with speed control
	  		else if(UART1_rxBuffer[1]=='s')
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <serial_reader_task+0x208>)
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	2b73      	cmp	r3, #115	; 0x73
 8001bde:	d113      	bne.n	8001c08 <serial_reader_task+0x158>
	  			{
	  			char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001be0:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <serial_reader_task+0x208>)
 8001be2:	789b      	ldrb	r3, [r3, #2]
 8001be4:	743b      	strb	r3, [r7, #16]
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <serial_reader_task+0x208>)
 8001be8:	78db      	ldrb	r3, [r3, #3]
 8001bea:	747b      	strb	r3, [r7, #17]
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <serial_reader_task+0x208>)
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	74bb      	strb	r3, [r7, #18]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	74fb      	strb	r3, [r7, #19]
	  			int cmd_val = atoi(val_ar);
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f007 fbe6 	bl	80093cc <atoi>
 8001c00:	62b8      	str	r0, [r7, #40]	; 0x28
	  			//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "OPEN SPEED %d \n", cmd_val), 100);
	  			open(cmd_val);
 8001c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c04:	f7fe ffe0 	bl	8000bc8 <open>
	  			}

	  	  clear_rxBuffer();
 8001c08:	f7ff f99a 	bl	8000f40 <clear_rxBuffer>
	  	  }break;
 8001c0c:	e04f      	b.n	8001cae <serial_reader_task+0x1fe>
	  case 'r':
	  	  {
	  		char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <serial_reader_task+0x208>)
 8001c10:	789b      	ldrb	r3, [r3, #2]
 8001c12:	733b      	strb	r3, [r7, #12]
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <serial_reader_task+0x208>)
 8001c16:	78db      	ldrb	r3, [r3, #3]
 8001c18:	737b      	strb	r3, [r7, #13]
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <serial_reader_task+0x208>)
 8001c1c:	791b      	ldrb	r3, [r3, #4]
 8001c1e:	73bb      	strb	r3, [r7, #14]
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
	  		int cmd_val = atoi(val_ar);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f007 fbcf 	bl	80093cc <atoi>
 8001c2e:	62f8      	str	r0, [r7, #44]	; 0x2c
	  	  	//right finger position control
	  	  	if(UART1_rxBuffer[1]=='p')
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <serial_reader_task+0x208>)
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b70      	cmp	r3, #112	; 0x70
 8001c36:	d00e      	beq.n	8001c56 <serial_reader_task+0x1a6>
	  	  		{
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RPOS %d \n", cmd_val), 100);
	  	  		}
	  	  	//right finger move forward at velocity
	  	  	else if(UART1_rxBuffer[1]=='f')
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <serial_reader_task+0x208>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	2b66      	cmp	r3, #102	; 0x66
 8001c3e:	d103      	bne.n	8001c48 <serial_reader_task+0x198>
	  	  		{
	  	  		move_rf(cmd_val);
 8001c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c42:	f7ff f8f1 	bl	8000e28 <move_rf>
 8001c46:	e006      	b.n	8001c56 <serial_reader_task+0x1a6>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RF %d \n", cmd_val), 100);
	  	  		}
	  	  	//right finger move reverse at velocity
	  	  	else if(UART1_rxBuffer[1]=='r')
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <serial_reader_task+0x208>)
 8001c4a:	785b      	ldrb	r3, [r3, #1]
 8001c4c:	2b72      	cmp	r3, #114	; 0x72
 8001c4e:	d102      	bne.n	8001c56 <serial_reader_task+0x1a6>
	  	  		{
	  	  		move_rb(cmd_val);
 8001c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c52:	f7ff f923 	bl	8000e9c <move_rb>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RR %d \n", cmd_val), 100);
	  	  		}
	  	  clear_rxBuffer();
 8001c56:	f7ff f973 	bl	8000f40 <clear_rxBuffer>
	  	  }break;
 8001c5a:	e028      	b.n	8001cae <serial_reader_task+0x1fe>
	   case 'l':
	  	  {
	  	  	char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <serial_reader_task+0x208>)
 8001c5e:	789b      	ldrb	r3, [r3, #2]
 8001c60:	723b      	strb	r3, [r7, #8]
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <serial_reader_task+0x208>)
 8001c64:	78db      	ldrb	r3, [r3, #3]
 8001c66:	727b      	strb	r3, [r7, #9]
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <serial_reader_task+0x208>)
 8001c6a:	791b      	ldrb	r3, [r3, #4]
 8001c6c:	72bb      	strb	r3, [r7, #10]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	72fb      	strb	r3, [r7, #11]
	  	  	int cmd_val = atoi(val_ar);
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	4618      	mov	r0, r3
 8001c78:	f007 fba8 	bl	80093cc <atoi>
 8001c7c:	6278      	str	r0, [r7, #36]	; 0x24
	  	  	//left finger position control
	  	  	if(UART1_rxBuffer[1]=='p')
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <serial_reader_task+0x208>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	2b70      	cmp	r3, #112	; 0x70
 8001c84:	d00e      	beq.n	8001ca4 <serial_reader_task+0x1f4>
	  	  		{
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LPOS %d \n", cmd_val), 100);
	  	  		}
	  	  	//left finger move forward at velocity
	  	  	else if(UART1_rxBuffer[1]=='f')
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <serial_reader_task+0x208>)
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	2b66      	cmp	r3, #102	; 0x66
 8001c8c:	d103      	bne.n	8001c96 <serial_reader_task+0x1e6>
	  	  		{
	  	  		move_lf(cmd_val);
 8001c8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c90:	f7ff f856 	bl	8000d40 <move_lf>
 8001c94:	e006      	b.n	8001ca4 <serial_reader_task+0x1f4>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LF %d \n", cmd_val), 100);
	  	  		}
	  	  	//left finger move reverse at velocity
	  	  	else if(UART1_rxBuffer[1]=='r')
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <serial_reader_task+0x208>)
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	2b72      	cmp	r3, #114	; 0x72
 8001c9c:	d102      	bne.n	8001ca4 <serial_reader_task+0x1f4>
	  	  		{
	  	  		move_lb(cmd_val);
 8001c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ca0:	f7ff f888 	bl	8000db4 <move_lb>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LR %d \n", cmd_val), 100);
	  	  		}

	  	  	clear_rxBuffer();
 8001ca4:	f7ff f94c 	bl	8000f40 <clear_rxBuffer>
	  	  }break;
 8001ca8:	e001      	b.n	8001cae <serial_reader_task+0x1fe>

	   default:
		   clear_rxBuffer();
 8001caa:	f7ff f949 	bl	8000f40 <clear_rxBuffer>

	  }
    osDelay(10);
 8001cae:	200a      	movs	r0, #10
 8001cb0:	f004 faf9 	bl	80062a6 <osDelay>
	  switch(UART1_rxBuffer[0])
 8001cb4:	e700      	b.n	8001ab8 <serial_reader_task+0x8>
 8001cb6:	bf00      	nop
 8001cb8:	200008c8 	.word	0x200008c8
 8001cbc:	08009e34 	.word	0x08009e34
 8001cc0:	20001944 	.word	0x20001944
 8001cc4:	20001904 	.word	0x20001904
 8001cc8:	08009e3c 	.word	0x08009e3c
 8001ccc:	08009e44 	.word	0x08009e44

08001cd0 <pid_timer>:
  /* USER CODE END serial_reader_task */
}

/* pid_timer function */
void pid_timer(void const * argument)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pid_timer */
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "TIMER \n", 1), 10);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
	//HAL_GPIO_WritePin(GPIOB, , value & 0b0001);
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "CC %d %d  %d \n", adc_value[6],lfw, isMoveB_LF ), 100);
	if((adc_value[6]>LFMaxPos) && (lfw==1))
 8001cd8:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <pid_timer+0x1d4>)
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <pid_timer+0x1d8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d91b      	bls.n	8001d1c <pid_timer+0x4c>
 8001ce4:	4b71      	ldr	r3, [pc, #452]	; (8001eac <pid_timer+0x1dc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d117      	bne.n	8001d1c <pid_timer+0x4c>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001cec:	4b70      	ldr	r3, [pc, #448]	; (8001eb0 <pid_timer+0x1e0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fb99 	bl	800642c <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <pid_timer+0x1e4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001d02:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <pid_timer+0x1e4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
		lfw=0;
 8001d0a:	4b68      	ldr	r3, [pc, #416]	; (8001eac <pid_timer+0x1dc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 8001d10:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <pid_timer+0x1e0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 fbd7 	bl	80064c8 <osSemaphoreRelease>
 8001d1a:	e020      	b.n	8001d5e <pid_timer+0x8e>
	}
	else if((adc_value[6]<LFMinPos) && (lrw==1))
 8001d1c:	4b61      	ldr	r3, [pc, #388]	; (8001ea4 <pid_timer+0x1d4>)
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <pid_timer+0x1e8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d21a      	bcs.n	8001d5e <pid_timer+0x8e>
 8001d28:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <pid_timer+0x1ec>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d116      	bne.n	8001d5e <pid_timer+0x8e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <pid_timer+0x1e0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fb77 	bl	800642c <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <pid_timer+0x1e4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001d46:	4b5b      	ldr	r3, [pc, #364]	; (8001eb4 <pid_timer+0x1e4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
		lrw=0;
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <pid_timer+0x1ec>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <pid_timer+0x1e0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fbb5 	bl	80064c8 <osSemaphoreRelease>
	}

	if((adc_value[5]>RFMaxPos) && (rfw==1))
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <pid_timer+0x1d4>)
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	4b57      	ldr	r3, [pc, #348]	; (8001ec0 <pid_timer+0x1f0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d91b      	bls.n	8001da2 <pid_timer+0xd2>
 8001d6a:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <pid_timer+0x1f4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d117      	bne.n	8001da2 <pid_timer+0xd2>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8001d72:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <pid_timer+0x1e0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fb56 	bl	800642c <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8001d80:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <pid_timer+0x1e4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2200      	movs	r2, #0
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <pid_timer+0x1e4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
			rfw=0;
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <pid_timer+0x1f4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <pid_timer+0x1e0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fb94 	bl	80064c8 <osSemaphoreRelease>
 8001da0:	e020      	b.n	8001de4 <pid_timer+0x114>
		}
		else if((adc_value[5]<RFMinPos) && (rrw==1))
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <pid_timer+0x1d4>)
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <pid_timer+0x1f8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d21a      	bcs.n	8001de4 <pid_timer+0x114>
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <pid_timer+0x1fc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d116      	bne.n	8001de4 <pid_timer+0x114>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <pid_timer+0x1e0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fb34 	bl	800642c <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <pid_timer+0x1e4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8001dcc:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <pid_timer+0x1e4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
			rrw=0;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <pid_timer+0x1fc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <pid_timer+0x1e0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 fb72 	bl	80064c8 <osSemaphoreRelease>
		}

	if((adc_value[3]<M1MinPos) && (m12o==1) &&(adc_value[4]<M2MinPos))
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <pid_timer+0x1d4>)
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <pid_timer+0x200>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d227      	bcs.n	8001e40 <pid_timer+0x170>
 8001df0:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <pid_timer+0x204>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d123      	bne.n	8001e40 <pid_timer+0x170>
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <pid_timer+0x1d4>)
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <pid_timer+0x208>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d21d      	bcs.n	8001e40 <pid_timer+0x170>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <pid_timer+0x1e0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 fb0d 	bl	800642c <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <pid_timer+0x20c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2200      	movs	r2, #0
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	4830      	ldr	r0, [pc, #192]	; (8001ee0 <pid_timer+0x210>)
 8001e20:	f002 f88a 	bl	8003f38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2110      	movs	r1, #16
 8001e28:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <pid_timer+0x210>)
 8001e2a:	f002 f885 	bl	8003f38 <HAL_GPIO_WritePin>
			m12o=0;
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <pid_timer+0x204>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <pid_timer+0x1e0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 fb45 	bl	80064c8 <osSemaphoreRelease>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
			m12c=0;
			osSemaphoreRelease(BinSemHandle);
		}
  /* USER CODE END pid_timer */
}
 8001e3e:	e02c      	b.n	8001e9a <pid_timer+0x1ca>
		else if((adc_value[3]>M1MaxPos) && (m12c==1) &&(adc_value[4]>M2MaxPos))
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <pid_timer+0x1d4>)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <pid_timer+0x214>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d926      	bls.n	8001e9a <pid_timer+0x1ca>
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <pid_timer+0x218>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d122      	bne.n	8001e9a <pid_timer+0x1ca>
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <pid_timer+0x1d4>)
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <pid_timer+0x21c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d91c      	bls.n	8001e9a <pid_timer+0x1ca>
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <pid_timer+0x1e0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 fadf 	bl	800642c <osSemaphoreWait>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <pid_timer+0x20c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2108      	movs	r1, #8
 8001e7a:	4819      	ldr	r0, [pc, #100]	; (8001ee0 <pid_timer+0x210>)
 8001e7c:	f002 f85c 	bl	8003f38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2110      	movs	r1, #16
 8001e84:	4816      	ldr	r0, [pc, #88]	; (8001ee0 <pid_timer+0x210>)
 8001e86:	f002 f857 	bl	8003f38 <HAL_GPIO_WritePin>
			m12c=0;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <pid_timer+0x218>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <pid_timer+0x1e0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fb17 	bl	80064c8 <osSemaphoreRelease>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20001888 	.word	0x20001888
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	200008d0 	.word	0x200008d0
 8001eb0:	20001ad4 	.word	0x20001ad4
 8001eb4:	200017ac 	.word	0x200017ac
 8001eb8:	20000004 	.word	0x20000004
 8001ebc:	200008d4 	.word	0x200008d4
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	200008d8 	.word	0x200008d8
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	200008dc 	.word	0x200008dc
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	200008e0 	.word	0x200008e0
 8001ed8:	20000018 	.word	0x20000018
 8001edc:	200019ac 	.word	0x200019ac
 8001ee0:	40010c00 	.word	0x40010c00
 8001ee4:	20000014 	.word	0x20000014
 8001ee8:	200008e4 	.word	0x200008e4
 8001eec:	2000001c 	.word	0x2000001c

08001ef0 <status_update_timer>:

/* status_update_timer function */
void status_update_timer(void const * argument)
{
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b0ad      	sub	sp, #180	; 0xb4
 8001ef4:	af18      	add	r7, sp, #96	; 0x60
 8001ef6:	64f8      	str	r0, [r7, #76]	; 0x4c
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	//sprintf(MSG, "Data = %d \t %d  \t %d \t %d  \t%d  \t%d \t%d \t \r\n ",
	//		irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6]);
	//sprintf(MSG,"Data = %d \t end \r\n", RX1_Char);

	sprintf(MSG, "%d \t%d \t%d \t%d \t%d \t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t \r\n",
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <status_update_timer+0x108>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001efe:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <status_update_timer+0x108>)
 8001f00:	68d9      	ldr	r1, [r3, #12]
 8001f02:	6479      	str	r1, [r7, #68]	; 0x44
 8001f04:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <status_update_timer+0x108>)
 8001f06:	6918      	ldr	r0, [r3, #16]
 8001f08:	6438      	str	r0, [r7, #64]	; 0x40
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <status_update_timer+0x108>)
 8001f0c:	695c      	ldr	r4, [r3, #20]
 8001f0e:	63fc      	str	r4, [r7, #60]	; 0x3c
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <status_update_timer+0x108>)
 8001f12:	699d      	ldr	r5, [r3, #24]
 8001f14:	63bd      	str	r5, [r7, #56]	; 0x38
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <status_update_timer+0x10c>)
 8001f18:	681e      	ldr	r6, [r3, #0]
 8001f1a:	637e      	str	r6, [r7, #52]	; 0x34
 8001f1c:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <status_update_timer+0x10c>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	633a      	str	r2, [r7, #48]	; 0x30
 8001f22:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <status_update_timer+0x10c>)
 8001f24:	6899      	ldr	r1, [r3, #8]
 8001f26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001f28:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <status_update_timer+0x10c>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2e:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <status_update_timer+0x10c>)
 8001f30:	6918      	ldr	r0, [r3, #16]
 8001f32:	6278      	str	r0, [r7, #36]	; 0x24
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <status_update_timer+0x10c>)
 8001f36:	695c      	ldr	r4, [r3, #20]
 8001f38:	623c      	str	r4, [r7, #32]
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <status_update_timer+0x10c>)
 8001f3c:	699d      	ldr	r5, [r3, #24]
 8001f3e:	61fd      	str	r5, [r7, #28]
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <status_update_timer+0x10c>)
 8001f42:	69de      	ldr	r6, [r3, #28]
 8001f44:	61be      	str	r6, [r7, #24]
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <status_update_timer+0x10c>)
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	617a      	str	r2, [r7, #20]
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <status_update_timer+0x10c>)
 8001f4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f50:	6139      	str	r1, [r7, #16]
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <status_update_timer+0x110>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <status_update_timer+0x110>)
 8001f5a:	6858      	ldr	r0, [r3, #4]
 8001f5c:	60b8      	str	r0, [r7, #8]
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <status_update_timer+0x110>)
 8001f60:	689c      	ldr	r4, [r3, #8]
 8001f62:	607c      	str	r4, [r7, #4]
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <status_update_timer+0x110>)
 8001f66:	68de      	ldr	r6, [r3, #12]
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <status_update_timer+0x110>)
 8001f6a:	691d      	ldr	r5, [r3, #16]
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <status_update_timer+0x110>)
 8001f6e:	695c      	ldr	r4, [r3, #20]
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <status_update_timer+0x110>)
 8001f72:	6998      	ldr	r0, [r3, #24]
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <status_update_timer+0x110>)
 8001f76:	69d9      	ldr	r1, [r3, #28]
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <status_update_timer+0x110>)
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <status_update_timer+0x110>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	9316      	str	r3, [sp, #88]	; 0x58
 8001f82:	9215      	str	r2, [sp, #84]	; 0x54
 8001f84:	9114      	str	r1, [sp, #80]	; 0x50
 8001f86:	9013      	str	r0, [sp, #76]	; 0x4c
 8001f88:	9412      	str	r4, [sp, #72]	; 0x48
 8001f8a:	9511      	str	r5, [sp, #68]	; 0x44
 8001f8c:	9610      	str	r6, [sp, #64]	; 0x40
 8001f8e:	687c      	ldr	r4, [r7, #4]
 8001f90:	940f      	str	r4, [sp, #60]	; 0x3c
 8001f92:	68b8      	ldr	r0, [r7, #8]
 8001f94:	900e      	str	r0, [sp, #56]	; 0x38
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	930d      	str	r3, [sp, #52]	; 0x34
 8001f9a:	6939      	ldr	r1, [r7, #16]
 8001f9c:	910c      	str	r1, [sp, #48]	; 0x30
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	920b      	str	r2, [sp, #44]	; 0x2c
 8001fa2:	69be      	ldr	r6, [r7, #24]
 8001fa4:	960a      	str	r6, [sp, #40]	; 0x28
 8001fa6:	69fd      	ldr	r5, [r7, #28]
 8001fa8:	9509      	str	r5, [sp, #36]	; 0x24
 8001faa:	6a3c      	ldr	r4, [r7, #32]
 8001fac:	9408      	str	r4, [sp, #32]
 8001fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb0:	9007      	str	r0, [sp, #28]
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	9306      	str	r3, [sp, #24]
 8001fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fb8:	9105      	str	r1, [sp, #20]
 8001fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fbc:	9204      	str	r2, [sp, #16]
 8001fbe:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8001fc0:	9603      	str	r6, [sp, #12]
 8001fc2:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8001fc4:	9502      	str	r5, [sp, #8]
 8001fc6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8001fc8:	9401      	str	r4, [sp, #4]
 8001fca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001fcc:	9000      	str	r0, [sp, #0]
 8001fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fd2:	490c      	ldr	r1, [pc, #48]	; (8002004 <status_update_timer+0x114>)
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <status_update_timer+0x118>)
 8001fd6:	f007 fa3b 	bl	8009450 <siprintf>
			adc_value[2], adc_value[3], adc_value[4], adc_value[5], adc_value[6],
				irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6],irdata_fr[7],irdata_fr[8],irdata_fr[9],
				irdata_fl[0],irdata_fl[1], irdata_fl[2], irdata_fl[3], irdata_fl[4], irdata_fl[5], irdata_fl[6],irdata_fl[7],irdata_fl[8],irdata_fl[9]);


	HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 100);
 8001fda:	480b      	ldr	r0, [pc, #44]	; (8002008 <status_update_timer+0x118>)
 8001fdc:	f7fe f8b8 	bl	8000150 <strlen>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2364      	movs	r3, #100	; 0x64
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <status_update_timer+0x118>)
 8001fe8:	4808      	ldr	r0, [pc, #32]	; (800200c <status_update_timer+0x11c>)
 8001fea:	f003 fcf9 	bl	80059e0 <HAL_UART_Transmit>

  /* USER CODE END status_update_timer */
}
 8001fee:	bf00      	nop
 8001ff0:	3754      	adds	r7, #84	; 0x54
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20001888 	.word	0x20001888
 8001ffc:	20001ad8 	.word	0x20001ad8
 8002000:	200018a4 	.word	0x200018a4
 8002004:	08009e4c 	.word	0x08009e4c
 8002008:	20001b00 	.word	0x20001b00
 800200c:	20001904 	.word	0x20001904

08002010 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002022:	f000 feaf 	bl	8002d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40000400 	.word	0x40000400

08002034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_MspInit+0x68>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_MspInit+0x68>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6193      	str	r3, [r2, #24]
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_MspInit+0x68>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_MspInit+0x68>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_MspInit+0x68>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_MspInit+0x68>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	210f      	movs	r1, #15
 800207a:	f06f 0001 	mvn.w	r0, #1
 800207e:	f001 fb30 	bl	80036e2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_MspInit+0x6c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_MspInit+0x6c>)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000

080020b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_ADC_MspInit+0xbc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d149      	bne.n	8002164 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_ADC_MspInit+0xc0>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_ADC_MspInit+0xc0>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_ADC_MspInit+0xc0>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_ADC_MspInit+0xc0>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <HAL_ADC_MspInit+0xc0>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_ADC_MspInit+0xc0>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002100:	23ff      	movs	r3, #255	; 0xff
 8002102:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002104:	2303      	movs	r3, #3
 8002106:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	4619      	mov	r1, r3
 800210e:	4819      	ldr	r0, [pc, #100]	; (8002174 <HAL_ADC_MspInit+0xc4>)
 8002110:	f001 fdb8 	bl	8003c84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 8002116:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_ADC_MspInit+0xcc>)
 8002118:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 800212e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002132:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 8002136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 800213e:	2220      	movs	r2, #32
 8002140:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 8002144:	2200      	movs	r2, #0
 8002146:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002148:	480b      	ldr	r0, [pc, #44]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 800214a:	f001 faf5 	bl	8003738 <HAL_DMA_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002154:	f7ff ff6e 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 800215c:	621a      	str	r2, [r3, #32]
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <HAL_ADC_MspInit+0xc8>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40012400 	.word	0x40012400
 8002170:	40021000 	.word	0x40021000
 8002174:	40010800 	.word	0x40010800
 8002178:	20001964 	.word	0x20001964
 800217c:	40020008 	.word	0x40020008

08002180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5c      	ldr	r2, [pc, #368]	; (8002300 <HAL_TIM_Base_MspInit+0x180>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10c      	bne.n	80021ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002192:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	4a5b      	ldr	r2, [pc, #364]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 8002198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800219c:	6193      	str	r3, [r2, #24]
 800219e:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021aa:	e0a4      	b.n	80022f6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	f040 808e 	bne.w	80022d4 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b8:	4b52      	ldr	r3, [pc, #328]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	61d3      	str	r3, [r2, #28]
 80021c4:	4b4f      	ldr	r3, [pc, #316]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80021d0:	4b4d      	ldr	r3, [pc, #308]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 80021d2:	4a4e      	ldr	r2, [pc, #312]	; (800230c <HAL_TIM_Base_MspInit+0x18c>)
 80021d4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021d6:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 80021d8:	2210      	movs	r2, #16
 80021da:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 80021e2:	4b49      	ldr	r3, [pc, #292]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 80021ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021f0:	4b45      	ldr	r3, [pc, #276]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 80021f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 80021fa:	2220      	movs	r2, #32
 80021fc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021fe:	4b42      	ldr	r3, [pc, #264]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 8002200:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002204:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002206:	4840      	ldr	r0, [pc, #256]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 8002208:	f001 fa96 	bl	8003738 <HAL_DMA_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_TIM_Base_MspInit+0x96>
      Error_Handler();
 8002212:	f7ff ff0f 	bl	8002034 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
 800221c:	4a3a      	ldr	r2, [pc, #232]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a38      	ldr	r2, [pc, #224]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
 8002228:	4a37      	ldr	r2, [pc, #220]	; (8002308 <HAL_TIM_Base_MspInit+0x188>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800222e:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 8002230:	4a38      	ldr	r2, [pc, #224]	; (8002314 <HAL_TIM_Base_MspInit+0x194>)
 8002232:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 8002236:	2210      	movs	r2, #16
 8002238:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800223a:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002240:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002246:	4b32      	ldr	r3, [pc, #200]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 8002248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800224c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 8002250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002254:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 8002258:	2220      	movs	r2, #32
 800225a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 800225e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002262:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002264:	482a      	ldr	r0, [pc, #168]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 8002266:	f001 fa67 	bl	8003738 <HAL_DMA_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_TIM_Base_MspInit+0xf4>
      Error_Handler();
 8002270:	f7ff fee0 	bl	8002034 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a26      	ldr	r2, [pc, #152]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
 800227a:	4a25      	ldr	r2, [pc, #148]	; (8002310 <HAL_TIM_Base_MspInit+0x190>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_up.Instance = DMA1_Channel2;
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 8002282:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_TIM_Base_MspInit+0x19c>)
 8002284:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 8002288:	2210      	movs	r2, #16
 800228a:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 800229a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229e:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 80022a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 80022aa:	2220      	movs	r2, #32
 80022ac:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 80022b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80022b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 80022b6:	4818      	ldr	r0, [pc, #96]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 80022b8:	f001 fa3e 	bl	8003738 <HAL_DMA_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_TIM_Base_MspInit+0x146>
      Error_Handler();
 80022c2:	f7ff feb7 	bl	8002034 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 80022ca:	621a      	str	r2, [r3, #32]
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <HAL_TIM_Base_MspInit+0x198>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80022d2:	e010      	b.n	80022f6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_TIM_Base_MspInit+0x1a0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10b      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_TIM_Base_MspInit+0x184>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40012c00 	.word	0x40012c00
 8002304:	40021000 	.word	0x40021000
 8002308:	20001840 	.word	0x20001840
 800230c:	40020080 	.word	0x40020080
 8002310:	20001764 	.word	0x20001764
 8002314:	40020058 	.word	0x40020058
 8002318:	200017f4 	.word	0x200017f4
 800231c:	4002001c 	.word	0x4002001c
 8002320:	40000800 	.word	0x40000800

08002324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_TIM_MspPostInit+0x98>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d119      	bne.n	8002378 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_TIM_MspPostInit+0x9c>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_TIM_MspPostInit+0x9c>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_TIM_MspPostInit+0x9c>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800235c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002360:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2302      	movs	r3, #2
 8002368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	4619      	mov	r1, r3
 8002370:	4814      	ldr	r0, [pc, #80]	; (80023c4 <HAL_TIM_MspPostInit+0xa0>)
 8002372:	f001 fc87 	bl	8003c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002376:	e01d      	b.n	80023b4 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_TIM_MspPostInit+0xa4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d118      	bne.n	80023b4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_TIM_MspPostInit+0x9c>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_TIM_MspPostInit+0x9c>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6193      	str	r3, [r2, #24]
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_TIM_MspPostInit+0x9c>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800239a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800239e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	4807      	ldr	r0, [pc, #28]	; (80023cc <HAL_TIM_MspPostInit+0xa8>)
 80023b0:	f001 fc68 	bl	8003c84 <HAL_GPIO_Init>
}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010800 	.word	0x40010800
 80023c8:	40000800 	.word	0x40000800
 80023cc:	40010c00 	.word	0x40010c00

080023d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a20      	ldr	r2, [pc, #128]	; (800246c <HAL_UART_MspInit+0x9c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d139      	bne.n	8002464 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_UART_MspInit+0xa0>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_UART_MspInit+0xa0>)
 80023f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_UART_MspInit+0xa0>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_UART_MspInit+0xa0>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_UART_MspInit+0xa0>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_UART_MspInit+0xa0>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4619      	mov	r1, r3
 8002434:	480f      	ldr	r0, [pc, #60]	; (8002474 <HAL_UART_MspInit+0xa4>)
 8002436:	f001 fc25 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800243a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800243e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4619      	mov	r1, r3
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <HAL_UART_MspInit+0xa4>)
 8002450:	f001 fc18 	bl	8003c84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2105      	movs	r1, #5
 8002458:	2025      	movs	r0, #37	; 0x25
 800245a:	f001 f942 	bl	80036e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800245e:	2025      	movs	r0, #37	; 0x25
 8002460:	f001 f95b 	bl	800371a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40013800 	.word	0x40013800
 8002470:	40021000 	.word	0x40021000
 8002474:	40010800 	.word	0x40010800

08002478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	201d      	movs	r0, #29
 800248e:	f001 f928 	bl	80036e2 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002492:	201d      	movs	r0, #29
 8002494:	f001 f941 	bl	800371a <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <HAL_InitTick+0xa0>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <HAL_InitTick+0xa0>)
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	61d3      	str	r3, [r2, #28]
 80024a4:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_InitTick+0xa0>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024b0:	f107 0210 	add.w	r2, r7, #16
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 f952 	bl	8004764 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80024c0:	f002 f928 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
 80024c4:	4603      	mov	r3, r0
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <HAL_InitTick+0xa4>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0c9b      	lsrs	r3, r3, #18
 80024d4:	3b01      	subs	r3, #1
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_InitTick+0xa8>)
 80024da:	4a12      	ldr	r2, [pc, #72]	; (8002524 <HAL_InitTick+0xac>)
 80024dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_InitTick+0xa8>)
 80024e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024e4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80024e6:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_InitTick+0xa8>)
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_InitTick+0xa8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_InitTick+0xa8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80024f8:	4809      	ldr	r0, [pc, #36]	; (8002520 <HAL_InitTick+0xa8>)
 80024fa:	f002 fa37 	bl	800496c <HAL_TIM_Base_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002504:	4806      	ldr	r0, [pc, #24]	; (8002520 <HAL_InitTick+0xa8>)
 8002506:	f002 facb 	bl	8004aa0 <HAL_TIM_Base_Start_IT>
 800250a:	4603      	mov	r3, r0
 800250c:	e000      	b.n	8002510 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	3730      	adds	r7, #48	; 0x30
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000
 800251c:	431bde83 	.word	0x431bde83
 8002520:	20001d58 	.word	0x20001d58
 8002524:	40000400 	.word	0x40000400

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <HardFault_Handler+0x4>

0800253a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <MemManage_Handler+0x4>

08002540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <BusFault_Handler+0x4>

08002546 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <UsageFault_Handler+0x4>

0800254c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <DMA1_Channel1_IRQHandler+0x10>)
 800255e:	f001 fa5d 	bl	8003a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20001964 	.word	0x20001964

0800256c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA1_Channel2_IRQHandler+0x10>)
 8002572:	f001 fa53 	bl	8003a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200017f4 	.word	0x200017f4

08002580 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <DMA1_Channel5_IRQHandler+0x10>)
 8002586:	f001 fa49 	bl	8003a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20001764 	.word	0x20001764

08002594 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <DMA1_Channel7_IRQHandler+0x10>)
 800259a:	f001 fa3f 	bl	8003a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20001840 	.word	0x20001840

080025a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <TIM3_IRQHandler+0x10>)
 80025ae:	f002 fbc3 	bl	8004d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20001d58 	.word	0x20001d58

080025bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <USART1_IRQHandler+0x10>)
 80025c2:	f003 faf3 	bl	8005bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20001904 	.word	0x20001904

080025d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <_sbrk+0x5c>)
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <_sbrk+0x60>)
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <_sbrk+0x64>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <_sbrk+0x68>)
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d207      	bcs.n	8002610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002600:	f006 fee8 	bl	80093d4 <__errno>
 8002604:	4602      	mov	r2, r0
 8002606:	230c      	movs	r3, #12
 8002608:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260e:	e009      	b.n	8002624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <_sbrk+0x64>)
 8002620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20005000 	.word	0x20005000
 8002630:	00000400 	.word	0x00000400
 8002634:	200008e8 	.word	0x200008e8
 8002638:	20001f00 	.word	0x20001f00

0800263c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <ws2812_timer2_init>:
    WS2812_CH14_GPIO,
    WS2812_CH15_GPIO
};

static void ws2812_timer2_init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08e      	sub	sp, #56	; 0x38
 800264c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	f107 0320 	add.w	r3, r7, #32
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
 8002674:	615a      	str	r2, [r3, #20]
 8002676:	619a      	str	r2, [r3, #24]

    htimer2.Instance = TIM2;
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <ws2812_timer2_init+0xc8>)
 800267a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267e:	601a      	str	r2, [r3, #0]
    htimer2.Init.Prescaler = 0;
 8002680:	4b23      	ldr	r3, [pc, #140]	; (8002710 <ws2812_timer2_init+0xc8>)
 8002682:	2200      	movs	r2, #0
 8002684:	605a      	str	r2, [r3, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <ws2812_timer2_init+0xc8>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 800268c:	4b20      	ldr	r3, [pc, #128]	; (8002710 <ws2812_timer2_init+0xc8>)
 800268e:	2246      	movs	r2, #70	; 0x46
 8002690:	60da      	str	r2, [r3, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <ws2812_timer2_init+0xc8>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <ws2812_timer2_init+0xc8>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer2);
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <ws2812_timer2_init+0xc8>)
 80026a0:	f002 f964 	bl	800496c <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 80026aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ae:	4619      	mov	r1, r3
 80026b0:	4817      	ldr	r0, [pc, #92]	; (8002710 <ws2812_timer2_init+0xc8>)
 80026b2:	f002 fd07 	bl	80050c4 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 80026b6:	4816      	ldr	r0, [pc, #88]	; (8002710 <ws2812_timer2_init+0xc8>)
 80026b8:	f002 fa44 	bl	8004b44 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 80026c4:	f107 0320 	add.w	r3, r7, #32
 80026c8:	4619      	mov	r1, r3
 80026ca:	4811      	ldr	r0, [pc, #68]	; (8002710 <ws2812_timer2_init+0xc8>)
 80026cc:	f003 f87a 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d0:	2360      	movs	r3, #96	; 0x60
 80026d2:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 80026d4:	2316      	movs	r3, #22
 80026d6:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2200      	movs	r2, #0
 80026e4:	4619      	mov	r1, r3
 80026e6:	480a      	ldr	r0, [pc, #40]	; (8002710 <ws2812_timer2_init+0xc8>)
 80026e8:	f002 fc2e 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ec:	2360      	movs	r3, #96	; 0x60
 80026ee:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 80026f0:	232c      	movs	r3, #44	; 0x2c
 80026f2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2204      	movs	r2, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4803      	ldr	r0, [pc, #12]	; (8002710 <ws2812_timer2_init+0xc8>)
 8002704:	f002 fc20 	bl	8004f48 <HAL_TIM_PWM_ConfigChannel>
}
 8002708:	bf00      	nop
 800270a:	3738      	adds	r7, #56	; 0x38
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20001e6c 	.word	0x20001e6c

08002714 <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800271c:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <ws2812_dma_start+0x13c>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <ws2812_dma_start+0x13c>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	61d3      	str	r3, [r2, #28]
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <ws2812_dma_start+0x13c>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_update.Instance = DMA1_Channel2;
 8002734:	4b47      	ldr	r3, [pc, #284]	; (8002854 <ws2812_dma_start+0x140>)
 8002736:	4a48      	ldr	r2, [pc, #288]	; (8002858 <ws2812_dma_start+0x144>)
 8002738:	601a      	str	r2, [r3, #0]
    hdma_tim2_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800273a:	4b46      	ldr	r3, [pc, #280]	; (8002854 <ws2812_dma_start+0x140>)
 800273c:	2210      	movs	r2, #16
 800273e:	605a      	str	r2, [r3, #4]
    hdma_tim2_update.Init.PeriphInc = DMA_PINC_DISABLE;
 8002740:	4b44      	ldr	r3, [pc, #272]	; (8002854 <ws2812_dma_start+0x140>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
    hdma_tim2_update.Init.MemInc = DMA_MINC_DISABLE;
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <ws2812_dma_start+0x140>)
 8002748:	2200      	movs	r2, #0
 800274a:	60da      	str	r2, [r3, #12]
    hdma_tim2_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800274c:	4b41      	ldr	r3, [pc, #260]	; (8002854 <ws2812_dma_start+0x140>)
 800274e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002752:	611a      	str	r2, [r3, #16]
    hdma_tim2_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002754:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <ws2812_dma_start+0x140>)
 8002756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275a:	615a      	str	r2, [r3, #20]
    hdma_tim2_update.Init.Mode = DMA_CIRCULAR;
 800275c:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <ws2812_dma_start+0x140>)
 800275e:	2220      	movs	r2, #32
 8002760:	619a      	str	r2, [r3, #24]
    hdma_tim2_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <ws2812_dma_start+0x140>)
 8002764:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002768:	61da      	str	r2, [r3, #28]

    /* TIM2_CH1 Init */
    hdma_tim2_pwm_ch1.Instance = DMA1_Channel5;
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <ws2812_dma_start+0x148>)
 800276c:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <ws2812_dma_start+0x14c>)
 800276e:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002770:	4b3a      	ldr	r3, [pc, #232]	; (800285c <ws2812_dma_start+0x148>)
 8002772:	2210      	movs	r2, #16
 8002774:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002776:	4b39      	ldr	r3, [pc, #228]	; (800285c <ws2812_dma_start+0x148>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800277c:	4b37      	ldr	r3, [pc, #220]	; (800285c <ws2812_dma_start+0x148>)
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <ws2812_dma_start+0x148>)
 8002784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002788:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <ws2812_dma_start+0x148>)
 800278c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002790:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch1.Init.Mode = DMA_CIRCULAR;
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <ws2812_dma_start+0x148>)
 8002794:	2220      	movs	r2, #32
 8002796:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <ws2812_dma_start+0x148>)
 800279a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800279e:	61da      	str	r2, [r3, #28]

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_pwm_ch2.Instance = DMA1_Channel7;
 80027a0:	4b30      	ldr	r3, [pc, #192]	; (8002864 <ws2812_dma_start+0x150>)
 80027a2:	4a31      	ldr	r2, [pc, #196]	; (8002868 <ws2812_dma_start+0x154>)
 80027a4:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <ws2812_dma_start+0x150>)
 80027a8:	2210      	movs	r2, #16
 80027aa:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ac:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <ws2812_dma_start+0x150>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch2.Init.MemInc = DMA_MINC_DISABLE;
 80027b2:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <ws2812_dma_start+0x150>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027b8:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <ws2812_dma_start+0x150>)
 80027ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027be:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027c0:	4b28      	ldr	r3, [pc, #160]	; (8002864 <ws2812_dma_start+0x150>)
 80027c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c6:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch2.Init.Mode = DMA_CIRCULAR;
 80027c8:	4b26      	ldr	r3, [pc, #152]	; (8002864 <ws2812_dma_start+0x150>)
 80027ca:	2220      	movs	r2, #32
 80027cc:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027ce:	4b25      	ldr	r3, [pc, #148]	; (8002864 <ws2812_dma_start+0x150>)
 80027d0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80027d4:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim2_update);
 80027d6:	481f      	ldr	r0, [pc, #124]	; (8002854 <ws2812_dma_start+0x140>)
 80027d8:	f000 ffae 	bl	8003738 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch1);
 80027dc:	481f      	ldr	r0, [pc, #124]	; (800285c <ws2812_dma_start+0x148>)
 80027de:	f000 ffab 	bl	8003738 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch2);
 80027e2:	4820      	ldr	r0, [pc, #128]	; (8002864 <ws2812_dma_start+0x150>)
 80027e4:	f000 ffa8 	bl	8003738 <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim2_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 80027e8:	4920      	ldr	r1, [pc, #128]	; (800286c <ws2812_dma_start+0x158>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3310      	adds	r3, #16
 80027ee:	461a      	mov	r2, r3
 80027f0:	2310      	movs	r3, #16
 80027f2:	4818      	ldr	r0, [pc, #96]	; (8002854 <ws2812_dma_start+0x140>)
 80027f4:	f000 fffa 	bl	80037ec <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_pwm_ch1, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 80027f8:	491d      	ldr	r1, [pc, #116]	; (8002870 <ws2812_dma_start+0x15c>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3314      	adds	r3, #20
 80027fe:	461a      	mov	r2, r3
 8002800:	2310      	movs	r3, #16
 8002802:	4816      	ldr	r0, [pc, #88]	; (800285c <ws2812_dma_start+0x148>)
 8002804:	f000 fff2 	bl	80037ec <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim2_pwm_ch2, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 8002808:	4918      	ldr	r1, [pc, #96]	; (800286c <ws2812_dma_start+0x158>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3314      	adds	r3, #20
 800280e:	461a      	mov	r2, r3
 8002810:	2310      	movs	r3, #16
 8002812:	4814      	ldr	r0, [pc, #80]	; (8002864 <ws2812_dma_start+0x150>)
 8002814:	f000 ffea 	bl	80037ec <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <ws2812_dma_start+0x160>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <ws2812_dma_start+0x160>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002826:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC1);
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <ws2812_dma_start+0x160>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <ws2812_dma_start+0x160>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002836:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC2);
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <ws2812_dma_start+0x160>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <ws2812_dma_start+0x160>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002846:	60da      	str	r2, [r3, #12]
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	20001e28 	.word	0x20001e28
 8002858:	4002001c 	.word	0x4002001c
 800285c:	20001de4 	.word	0x20001de4
 8002860:	40020058 	.word	0x40020058
 8002864:	20001da0 	.word	0x20001da0
 8002868:	40020080 	.word	0x40020080
 800286c:	200008ec 	.word	0x200008ec
 8002870:	200008f0 	.word	0x200008f0
 8002874:	20001e6c 	.word	0x20001e6c

08002878 <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
    /* If all channels are the same length, we can skip the 'pos' range check, and speed up our
     * inner loop *substantially*
     */

    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	da07      	bge.n	800289c <get_channel_byte+0x24>
        return channel->framebuffer[pos] ^ 0xff;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	43db      	mvns	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	e000      	b.n	800289e <get_channel_byte+0x26>

    return 0xff;
 800289c:	23ff      	movs	r3, #255	; 0xff
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 80028a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ac:	b087      	sub	sp, #28
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	f04f 0b00 	mov.w	fp, #0
 80028be:	2600      	movs	r6, #0
 80028c0:	2500      	movs	r5, #0
 80028c2:	2400      	movs	r4, #0
 80028c4:	f04f 0a00 	mov.w	sl, #0
 80028c8:	f04f 0900 	mov.w	r9, #0
 80028cc:	f04f 0800 	mov.w	r8, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ffd0 	bl	8002878 <get_channel_byte>
 80028d8:	4603      	mov	r3, r0
 80028da:	75fb      	strb	r3, [r7, #23]
 80028dc:	7df8      	ldrb	r0, [r7, #23]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	469e      	mov	lr, r3
 80028e2:	46dc      	mov	ip, fp
 80028e4:	4651      	mov	r1, sl
 80028e6:	464a      	mov	r2, r9
 80028e8:	4643      	mov	r3, r8
 80028ea:	4680      	mov	r8, r0
 80028ec:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 80028f0:	f360 0e00 	bfi	lr, r0, #0, #1
 80028f4:	f3c8 1080 	ubfx	r0, r8, #6, #1
 80028f8:	f360 0c00 	bfi	ip, r0, #0, #1
 80028fc:	f3c8 1040 	ubfx	r0, r8, #5, #1
 8002900:	f360 0600 	bfi	r6, r0, #0, #1
 8002904:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8002908:	f360 0500 	bfi	r5, r0, #0, #1
 800290c:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 8002910:	f360 0400 	bfi	r4, r0, #0, #1
 8002914:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8002918:	f360 0100 	bfi	r1, r0, #0, #1
 800291c:	f3c8 0040 	ubfx	r0, r8, #1, #1
 8002920:	f360 0200 	bfi	r2, r0, #0, #1
 8002924:	f3c8 0000 	ubfx	r0, r8, #0, #1
 8002928:	f360 0300 	bfi	r3, r0, #0, #1
 800292c:	fa1f f08e 	uxth.w	r0, lr
 8002930:	6038      	str	r0, [r7, #0]
 8002932:	fa1f fb8c 	uxth.w	fp, ip
 8002936:	b2b6      	uxth	r6, r6
 8002938:	b2ad      	uxth	r5, r5
 800293a:	b2a4      	uxth	r4, r4
 800293c:	fa1f fa81 	uxth.w	sl, r1
 8002940:	fa1f f982 	uxth.w	r9, r2
 8002944:	fa1f f883 	uxth.w	r8, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3308      	adds	r3, #8
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff92 	bl	8002878 <get_channel_byte>
 8002954:	4603      	mov	r3, r0
 8002956:	75fb      	strb	r3, [r7, #23]
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	4618      	mov	r0, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	469e      	mov	lr, r3
 8002960:	46dc      	mov	ip, fp
 8002962:	4651      	mov	r1, sl
 8002964:	464a      	mov	r2, r9
 8002966:	4643      	mov	r3, r8
 8002968:	4680      	mov	r8, r0
 800296a:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 800296e:	f360 0e41 	bfi	lr, r0, #1, #1
 8002972:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8002976:	f360 0c41 	bfi	ip, r0, #1, #1
 800297a:	f3c8 1040 	ubfx	r0, r8, #5, #1
 800297e:	f360 0641 	bfi	r6, r0, #1, #1
 8002982:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8002986:	f360 0541 	bfi	r5, r0, #1, #1
 800298a:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 800298e:	f360 0441 	bfi	r4, r0, #1, #1
 8002992:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8002996:	f360 0141 	bfi	r1, r0, #1, #1
 800299a:	f3c8 0040 	ubfx	r0, r8, #1, #1
 800299e:	f360 0241 	bfi	r2, r0, #1, #1
 80029a2:	f3c8 0000 	ubfx	r0, r8, #0, #1
 80029a6:	f360 0341 	bfi	r3, r0, #1, #1
 80029aa:	fa1f f08e 	uxth.w	r0, lr
 80029ae:	fa1f fb8c 	uxth.w	fp, ip
 80029b2:	b2b6      	uxth	r6, r6
 80029b4:	b2ad      	uxth	r5, r5
 80029b6:	b2a4      	uxth	r4, r4
 80029b8:	fa1f fa81 	uxth.w	sl, r1
 80029bc:	fa1f f982 	uxth.w	r9, r2
 80029c0:	fa1f f883 	uxth.w	r8, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4602      	mov	r2, r0
 80029c8:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3302      	adds	r3, #2
 80029ce:	465a      	mov	r2, fp
 80029d0:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4632      	mov	r2, r6
 80029d8:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3306      	adds	r3, #6
 80029de:	462a      	mov	r2, r5
 80029e0:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3308      	adds	r3, #8
 80029e6:	4622      	mov	r2, r4
 80029e8:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	330a      	adds	r3, #10
 80029ee:	4652      	mov	r2, sl
 80029f0:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	330c      	adds	r3, #12
 80029f6:	464a      	mov	r2, r9
 80029f8:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	330e      	adds	r3, #14
 80029fe:	4642      	mov	r2, r8
 8002a00:	801a      	strh	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002a0c <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 8002a22:	4b80      	ldr	r3, [pc, #512]	; (8002c24 <ws2812_refresh+0x218>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	e00e      	b.n	8002a4c <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4a7d      	ldr	r2, [pc, #500]	; (8002c28 <ws2812_refresh+0x21c>)
 8002a34:	4413      	add	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff34 	bl	80028a8 <fill_dma_buffer>
        pos++;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	3308      	adds	r3, #8
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	dded      	ble.n	8002a2e <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e027      	b.n	8002aa8 <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	da05      	bge.n	8002a74 <ws2812_refresh+0x68>
            max_length = channels[i].length;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00f      	beq.n	8002aa2 <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 8002a82:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <ws2812_refresh+0x220>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4413      	add	r3, r2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	4093      	lsls	r3, r2
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	4b64      	ldr	r3, [pc, #400]	; (8002c24 <ws2812_refresh+0x218>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b21b      	sxth	r3, r3
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	b21b      	sxth	r3, r3
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <ws2812_refresh+0x218>)
 8002aa0:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	ddd4      	ble.n	8002a58 <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	3303      	adds	r3, #3
 8002ab8:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <ws2812_refresh+0x224>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	4b5b      	ldr	r3, [pc, #364]	; (8002c30 <ws2812_refresh+0x224>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC1);
 8002aca:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <ws2812_refresh+0x224>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <ws2812_refresh+0x224>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ad8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC2);
 8002ada:	4b55      	ldr	r3, [pc, #340]	; (8002c30 <ws2812_refresh+0x224>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <ws2812_refresh+0x224>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae8:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer2);
 8002aea:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <ws2812_refresh+0x224>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <ws2812_refresh+0x10e>
 8002afa:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <ws2812_refresh+0x224>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	f240 4344 	movw	r3, #1092	; 0x444
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <ws2812_refresh+0x10e>
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <ws2812_refresh+0x224>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <ws2812_refresh+0x224>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8002b1a:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <ws2812_refresh+0x218>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer2);
 8002b24:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <ws2812_refresh+0x224>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <ws2812_refresh+0x224>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e00f      	b.n	8002b5a <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer2, TIM_FLAG_UPDATE));
 8002b3a:	bf00      	nop
 8002b3c:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <ws2812_refresh+0x224>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d1f8      	bne.n	8002b3c <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer2, TIM_FLAG_UPDATE);
 8002b4a:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <ws2812_refresh+0x224>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0201 	mvn.w	r2, #1
 8002b52:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	3301      	adds	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2be0      	cmp	r3, #224	; 0xe0
 8002b5e:	ddec      	ble.n	8002b3a <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer2);
 8002b60:	4b33      	ldr	r3, [pc, #204]	; (8002c30 <ws2812_refresh+0x224>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a1a      	ldr	r2, [r3, #32]
 8002b66:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10f      	bne.n	8002b90 <ws2812_refresh+0x184>
 8002b70:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <ws2812_refresh+0x224>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a1a      	ldr	r2, [r3, #32]
 8002b76:	f240 4344 	movw	r3, #1092	; 0x444
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <ws2812_refresh+0x184>
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <ws2812_refresh+0x224>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <ws2812_refresh+0x224>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 8002b90:	6838      	ldr	r0, [r7, #0]
 8002b92:	f7ff fdbf 	bl	8002714 <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer2, __HAL_TIM_GET_AUTORELOAD(&htimer2) - 10);
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <ws2812_refresh+0x224>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <ws2812_refresh+0x224>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3a0a      	subs	r2, #10
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <ws2812_refresh+0x228>)
 8002ba6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002baa:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer2);
 8002bac:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <ws2812_refresh+0x224>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <ws2812_refresh+0x224>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_ISR_TCIF5 | DMA_ISR_HTIF5))) {
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <ws2812_refresh+0x228>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <ws2812_refresh+0x1c4>
            cycles++;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
            continue;
 8002bce:	e027      	b.n	8002c20 <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <ws2812_refresh+0x21c>)
 8002bd2:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_ISR_TCIF5)
 8002bd4:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <ws2812_refresh+0x228>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3310      	adds	r3, #16
 8002be4:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <ws2812_refresh+0x228>)
 8002be8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002bec:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e00e      	b.n	8002c12 <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6979      	ldr	r1, [r7, #20]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fe51 	bl	80028a8 <fill_dma_buffer>
            pos++;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	3308      	adds	r3, #8
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b07      	cmp	r3, #7
 8002c16:	dded      	ble.n	8002bf4 <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	dc0b      	bgt.n	8002c38 <ws2812_refresh+0x22c>
    while(1) {
 8002c20:	e7cc      	b.n	8002bbc <ws2812_refresh+0x1b0>
 8002c22:	bf00      	nop
 8002c24:	200008ec 	.word	0x200008ec
 8002c28:	200008f0 	.word	0x200008f0
 8002c2c:	08009ee8 	.word	0x08009ee8
 8002c30:	20001e6c 	.word	0x20001e6c
 8002c34:	40020000 	.word	0x40020000
            break;
 8002c38:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer2);
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <ws2812_refresh+0x2a0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a1a      	ldr	r2, [r3, #32]
 8002c40:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <ws2812_refresh+0x25e>
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <ws2812_refresh+0x2a0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	f240 4344 	movw	r3, #1092	; 0x444
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d107      	bne.n	8002c6a <ws2812_refresh+0x25e>
 8002c5a:	4b14      	ldr	r3, [pc, #80]	; (8002cac <ws2812_refresh+0x2a0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <ws2812_refresh+0x2a0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <ws2812_refresh+0x2a4>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim2_update);
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <ws2812_refresh+0x2a8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <ws2812_refresh+0x2a8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <ws2812_refresh+0x2ac>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <ws2812_refresh+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <ws2812_refresh+0x2b0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <ws2812_refresh+0x2b0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20001e6c 	.word	0x20001e6c
 8002cb0:	200008ec 	.word	0x200008ec
 8002cb4:	20001e28 	.word	0x20001e28
 8002cb8:	20001de4 	.word	0x20001de4
 8002cbc:	20001da0 	.word	0x20001da0

08002cc0 <ws2812_init>:

void ws2812_init()
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <ws2812_init+0x48>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4a0f      	ldr	r2, [pc, #60]	; (8002d08 <ws2812_init+0x48>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6153      	str	r3, [r2, #20]
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <ws2812_init+0x48>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	200c      	movs	r0, #12
 8002ce4:	f000 fcfd 	bl	80036e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2100      	movs	r1, #0
 8002cec:	200f      	movs	r0, #15
 8002cee:	f000 fcf8 	bl	80036e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2011      	movs	r0, #17
 8002cf8:	f000 fcf3 	bl	80036e2 <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8002cfc:	f7ff fca4 	bl	8002648 <ws2812_timer2_init>
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000

08002d0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d0e:	e003      	b.n	8002d18 <LoopCopyDataInit>

08002d10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d16:	3104      	adds	r1, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d18:	480a      	ldr	r0, [pc, #40]	; (8002d44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d20:	d3f6      	bcc.n	8002d10 <CopyDataInit>
  ldr r2, =_sbss
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d24:	e002      	b.n	8002d2c <LoopFillZerobss>

08002d26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d28:	f842 3b04 	str.w	r3, [r2], #4

08002d2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d30:	d3f9      	bcc.n	8002d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d32:	f7ff fc83 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d36:	f006 fb53 	bl	80093e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d3a:	f7fe f9d3 	bl	80010e4 <main>
  bx lr
 8002d3e:	4770      	bx	lr
  ldr r3, =_sidata
 8002d40:	0800a040 	.word	0x0800a040
  ldr r0, =_sdata
 8002d44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d48:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8002d4c:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 8002d50:	20001efc 	.word	0x20001efc

08002d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC1_2_IRQHandler>
	...

08002d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_Init+0x28>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_Init+0x28>)
 8002d62:	f043 0310 	orr.w	r3, r3, #16
 8002d66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 fcaf 	bl	80036cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7ff fb82 	bl	8002478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d74:	f7ff f964 	bl	8002040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40022000 	.word	0x40022000

08002d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_IncTick+0x1c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_IncTick+0x20>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4413      	add	r3, r2
 8002d94:	4a03      	ldr	r2, [pc, #12]	; (8002da4 <HAL_IncTick+0x20>)
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	2000002c 	.word	0x2000002c
 8002da4:	20001eb4 	.word	0x20001eb4

08002da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_GetTick+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20001eb4 	.word	0x20001eb4

08002dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_GetTick>
 8002dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd4:	d005      	beq.n	8002de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_Delay+0x40>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de2:	bf00      	nop
 8002de4:	f7ff ffe0 	bl	8002da8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d8f7      	bhi.n	8002de4 <HAL_Delay+0x28>
  {
  }
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	2000002c 	.word	0x2000002c

08002e00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0be      	b.n	8002fa0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff f936 	bl	80020b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 faf7 	bl	8003438 <ADC_ConversionStop_Disable>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 8099 	bne.w	8002f8e <HAL_ADC_Init+0x18e>
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 8095 	bne.w	8002f8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e6c:	f023 0302 	bic.w	r3, r3, #2
 8002e70:	f043 0202 	orr.w	r2, r3, #2
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	7b1b      	ldrb	r3, [r3, #12]
 8002e86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	d003      	beq.n	8002ea2 <HAL_ADC_Init+0xa2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_ADC_Init+0xa8>
 8002ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea6:	e000      	b.n	8002eaa <HAL_ADC_Init+0xaa>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7d1b      	ldrb	r3, [r3, #20]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d119      	bne.n	8002eec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7b1b      	ldrb	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	035a      	lsls	r2, r3, #13
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e00b      	b.n	8002eec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_ADC_Init+0x1a8>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1c:	d003      	beq.n	8002f26 <HAL_ADC_Init+0x126>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d104      	bne.n	8002f30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	051b      	lsls	r3, r3, #20
 8002f2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_ADC_Init+0x1ac>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d10b      	bne.n	8002f6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f6a:	e018      	b.n	8002f9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	f023 0312 	bic.w	r3, r3, #18
 8002f74:	f043 0210 	orr.w	r2, r3, #16
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f8c:	e007      	b.n	8002f9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	ffe1f7fd 	.word	0xffe1f7fd
 8002fac:	ff1f0efe 	.word	0xff1f0efe

08002fb0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a64      	ldr	r2, [pc, #400]	; (8003158 <HAL_ADC_Start_DMA+0x1a8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_Start_DMA+0x24>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a63      	ldr	r2, [pc, #396]	; (800315c <HAL_ADC_Start_DMA+0x1ac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d106      	bne.n	8002fe2 <HAL_ADC_Start_DMA+0x32>
 8002fd4:	4b60      	ldr	r3, [pc, #384]	; (8003158 <HAL_ADC_Start_DMA+0x1a8>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 80b3 	bne.w	8003148 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_Start_DMA+0x40>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e0ae      	b.n	800314e <HAL_ADC_Start_DMA+0x19e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f9cb 	bl	8003394 <ADC_Enable>
 8002ffe:	4603      	mov	r3, r0
 8003000:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 809a 	bne.w	800313e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a4e      	ldr	r2, [pc, #312]	; (800315c <HAL_ADC_Start_DMA+0x1ac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d105      	bne.n	8003034 <HAL_ADC_Start_DMA+0x84>
 8003028:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_ADC_Start_DMA+0x1a8>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304a:	2b00      	cmp	r3, #0
 800304c:	d026      	beq.n	800309c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800305e:	e01d      	b.n	800309c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a39      	ldr	r2, [pc, #228]	; (8003158 <HAL_ADC_Start_DMA+0x1a8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_ADC_Start_DMA+0xd0>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a38      	ldr	r2, [pc, #224]	; (800315c <HAL_ADC_Start_DMA+0x1ac>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10d      	bne.n	800309c <HAL_ADC_Start_DMA+0xec>
 8003080:	4b35      	ldr	r3, [pc, #212]	; (8003158 <HAL_ADC_Start_DMA+0x1a8>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003094:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f023 0206 	bic.w	r2, r3, #6
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80030b4:	e002      	b.n	80030bc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_ADC_Start_DMA+0x1b0>)
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_ADC_Start_DMA+0x1b4>)
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a23      	ldr	r2, [pc, #140]	; (8003168 <HAL_ADC_Start_DMA+0x1b8>)
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0202 	mvn.w	r2, #2
 80030e4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a18      	ldr	r0, [r3, #32]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	334c      	adds	r3, #76	; 0x4c
 8003100:	4619      	mov	r1, r3
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f000 fbb3 	bl	8003870 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003114:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003118:	d108      	bne.n	800312c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003128:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800312a:	e00f      	b.n	800314c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800313a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800313c:	e006      	b.n	800314c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003146:	e001      	b.n	800314c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40012400 	.word	0x40012400
 800315c:	40012800 	.word	0x40012800
 8003160:	080034ad 	.word	0x080034ad
 8003164:	08003529 	.word	0x08003529
 8003168:	08003545 	.word	0x08003545

0800316c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x20>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e0dc      	b.n	800337e <HAL_ADC_ConfigChannel+0x1da>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d81c      	bhi.n	800320e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	3b05      	subs	r3, #5
 80031e6:	221f      	movs	r2, #31
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4019      	ands	r1, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	3b05      	subs	r3, #5
 8003200:	fa00 f203 	lsl.w	r2, r0, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	635a      	str	r2, [r3, #52]	; 0x34
 800320c:	e03c      	b.n	8003288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d81c      	bhi.n	8003250 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	3b23      	subs	r3, #35	; 0x23
 8003228:	221f      	movs	r2, #31
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	4019      	ands	r1, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	3b23      	subs	r3, #35	; 0x23
 8003242:	fa00 f203 	lsl.w	r2, r0, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
 800324e:	e01b      	b.n	8003288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3b41      	subs	r3, #65	; 0x41
 8003262:	221f      	movs	r2, #31
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	4019      	ands	r1, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	3b41      	subs	r3, #65	; 0x41
 800327c:	fa00 f203 	lsl.w	r2, r0, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b09      	cmp	r3, #9
 800328e:	d91c      	bls.n	80032ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	3b1e      	subs	r3, #30
 80032a2:	2207      	movs	r2, #7
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	4019      	ands	r1, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6898      	ldr	r0, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	3b1e      	subs	r3, #30
 80032bc:	fa00 f203 	lsl.w	r2, r0, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	e019      	b.n	80032fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6919      	ldr	r1, [r3, #16]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	2207      	movs	r2, #7
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	4019      	ands	r1, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6898      	ldr	r0, [r3, #8]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	fa00 f203 	lsl.w	r2, r0, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b10      	cmp	r3, #16
 8003304:	d003      	beq.n	800330e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800330a:	2b11      	cmp	r3, #17
 800330c:	d132      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_ADC_ConfigChannel+0x1e4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d125      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d126      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003334:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b10      	cmp	r3, #16
 800333c:	d11a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_ADC_ConfigChannel+0x1e8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a13      	ldr	r2, [pc, #76]	; (8003390 <HAL_ADC_ConfigChannel+0x1ec>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	0c9a      	lsrs	r2, r3, #18
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003354:	e002      	b.n	800335c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3b01      	subs	r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f9      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x1b2>
 8003362:	e007      	b.n	8003374 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40012400 	.word	0x40012400
 800338c:	20000024 	.word	0x20000024
 8003390:	431bde83 	.word	0x431bde83

08003394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d039      	beq.n	8003426 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033c2:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <ADC_Enable+0x9c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <ADC_Enable+0xa0>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	0c9b      	lsrs	r3, r3, #18
 80033ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033d0:	e002      	b.n	80033d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f9      	bne.n	80033d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033de:	f7ff fce3 	bl	8002da8 <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033e4:	e018      	b.n	8003418 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033e6:	f7ff fcdf 	bl	8002da8 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d911      	bls.n	8003418 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e007      	b.n	8003428 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d1df      	bne.n	80033e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000024 	.word	0x20000024
 8003434:	431bde83 	.word	0x431bde83

08003438 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d127      	bne.n	80034a2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003462:	f7ff fca1 	bl	8002da8 <HAL_GetTick>
 8003466:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003468:	e014      	b.n	8003494 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800346a:	f7ff fc9d 	bl	8002da8 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d90d      	bls.n	8003494 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	f043 0210 	orr.w	r2, r3, #16
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e007      	b.n	80034a4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d0e3      	beq.n	800346a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d127      	bne.n	8003516 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034e0:	d115      	bne.n	800350e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d111      	bne.n	800350e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff fe2c 	bl	800316c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003514:	e004      	b.n	8003520 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff fe21 	bl	800317e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	f043 0204 	orr.w	r2, r3, #4
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff fe10 	bl	8003190 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003594:	4013      	ands	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60d3      	str	r3, [r2, #12]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <__NVIC_GetPriorityGrouping+0x18>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	f003 0307 	and.w	r3, r3, #7
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	db0b      	blt.n	8003606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <__NVIC_EnableIRQ+0x34>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2001      	movs	r0, #1
 80035fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ff4f 	bl	8003578 <__NVIC_SetPriorityGrouping>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f4:	f7ff ff64 	bl	80035c0 <__NVIC_GetPriorityGrouping>
 80036f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	6978      	ldr	r0, [r7, #20]
 8003700:	f7ff ffb2 	bl	8003668 <NVIC_EncodePriority>
 8003704:	4602      	mov	r2, r0
 8003706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ff81 	bl	8003614 <__NVIC_SetPriority>
}
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	4603      	mov	r3, r0
 8003722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff57 	bl	80035dc <__NVIC_EnableIRQ>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e043      	b.n	80037d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_DMA_Init+0xa8>)
 8003756:	4413      	add	r3, r2
 8003758:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <HAL_DMA_Init+0xac>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	009a      	lsls	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_DMA_Init+0xb0>)
 800376a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003782:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003786:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	bffdfff8 	.word	0xbffdfff8
 80037e4:	cccccccd 	.word	0xcccccccd
 80037e8:	40020000 	.word	0x40020000

080037ec <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_DMA_Start+0x20>
 8003808:	2302      	movs	r3, #2
 800380a:	e02d      	b.n	8003868 <HAL_DMA_Start+0x7c>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800381a:	2b01      	cmp	r3, #1
 800381c:	d11d      	bne.n	800385a <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f9f0 	bl	8003c28 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e005      	b.n	8003866 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8003862:	2302      	movs	r3, #2
 8003864:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_DMA_Start_IT+0x20>
 800388c:	2302      	movs	r3, #2
 800388e:	e04a      	b.n	8003926 <HAL_DMA_Start_IT+0xb6>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d13a      	bne.n	8003918 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f9ae 	bl	8003c28 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 020e 	orr.w	r2, r2, #14
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e00f      	b.n	8003906 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0204 	bic.w	r2, r2, #4
 80038f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 020a 	orr.w	r2, r2, #10
 8003904:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e005      	b.n	8003924 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003920:	2302      	movs	r3, #2
 8003922:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003924:	7dfb      	ldrb	r3, [r7, #23]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003942:	2b02      	cmp	r3, #2
 8003944:	d005      	beq.n	8003952 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e051      	b.n	80039f6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 020e 	bic.w	r2, r2, #14
 8003960:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <HAL_DMA_Abort_IT+0xd0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d029      	beq.n	80039d0 <HAL_DMA_Abort_IT+0xa0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a20      	ldr	r2, [pc, #128]	; (8003a04 <HAL_DMA_Abort_IT+0xd4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <HAL_DMA_Abort_IT+0x9c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_DMA_Abort_IT+0xd8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d01a      	beq.n	80039c6 <HAL_DMA_Abort_IT+0x96>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_DMA_Abort_IT+0xdc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d012      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x90>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_DMA_Abort_IT+0xe0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00a      	beq.n	80039ba <HAL_DMA_Abort_IT+0x8a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1a      	ldr	r2, [pc, #104]	; (8003a14 <HAL_DMA_Abort_IT+0xe4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d102      	bne.n	80039b4 <HAL_DMA_Abort_IT+0x84>
 80039ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039b2:	e00e      	b.n	80039d2 <HAL_DMA_Abort_IT+0xa2>
 80039b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039b8:	e00b      	b.n	80039d2 <HAL_DMA_Abort_IT+0xa2>
 80039ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039be:	e008      	b.n	80039d2 <HAL_DMA_Abort_IT+0xa2>
 80039c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c4:	e005      	b.n	80039d2 <HAL_DMA_Abort_IT+0xa2>
 80039c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ca:	e002      	b.n	80039d2 <HAL_DMA_Abort_IT+0xa2>
 80039cc:	2310      	movs	r3, #16
 80039ce:	e000      	b.n	80039d2 <HAL_DMA_Abort_IT+0xa2>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <HAL_DMA_Abort_IT+0xe8>)
 80039d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
    } 
  }
  return status;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40020008 	.word	0x40020008
 8003a04:	4002001c 	.word	0x4002001c
 8003a08:	40020030 	.word	0x40020030
 8003a0c:	40020044 	.word	0x40020044
 8003a10:	40020058 	.word	0x40020058
 8003a14:	4002006c 	.word	0x4002006c
 8003a18:	40020000 	.word	0x40020000

08003a1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2204      	movs	r2, #4
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d04f      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0xc8>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d04a      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a66      	ldr	r2, [pc, #408]	; (8003c0c <HAL_DMA_IRQHandler+0x1f0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d029      	beq.n	8003aca <HAL_DMA_IRQHandler+0xae>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a65      	ldr	r2, [pc, #404]	; (8003c10 <HAL_DMA_IRQHandler+0x1f4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d022      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xaa>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a63      	ldr	r2, [pc, #396]	; (8003c14 <HAL_DMA_IRQHandler+0x1f8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01a      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xa4>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a62      	ldr	r2, [pc, #392]	; (8003c18 <HAL_DMA_IRQHandler+0x1fc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d012      	beq.n	8003aba <HAL_DMA_IRQHandler+0x9e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a60      	ldr	r2, [pc, #384]	; (8003c1c <HAL_DMA_IRQHandler+0x200>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x98>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5f      	ldr	r2, [pc, #380]	; (8003c20 <HAL_DMA_IRQHandler+0x204>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d102      	bne.n	8003aae <HAL_DMA_IRQHandler+0x92>
 8003aa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003aac:	e00e      	b.n	8003acc <HAL_DMA_IRQHandler+0xb0>
 8003aae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ab2:	e00b      	b.n	8003acc <HAL_DMA_IRQHandler+0xb0>
 8003ab4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ab8:	e008      	b.n	8003acc <HAL_DMA_IRQHandler+0xb0>
 8003aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003abe:	e005      	b.n	8003acc <HAL_DMA_IRQHandler+0xb0>
 8003ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ac4:	e002      	b.n	8003acc <HAL_DMA_IRQHandler+0xb0>
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	e000      	b.n	8003acc <HAL_DMA_IRQHandler+0xb0>
 8003aca:	2304      	movs	r3, #4
 8003acc:	4a55      	ldr	r2, [pc, #340]	; (8003c24 <HAL_DMA_IRQHandler+0x208>)
 8003ace:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8094 	beq.w	8003c02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ae2:	e08e      	b.n	8003c02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	2202      	movs	r2, #2
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d056      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x186>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d051      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10b      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 020a 	bic.w	r2, r2, #10
 8003b1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a38      	ldr	r2, [pc, #224]	; (8003c0c <HAL_DMA_IRQHandler+0x1f0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d029      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x166>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a37      	ldr	r2, [pc, #220]	; (8003c10 <HAL_DMA_IRQHandler+0x1f4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x162>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a35      	ldr	r2, [pc, #212]	; (8003c14 <HAL_DMA_IRQHandler+0x1f8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01a      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x15c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a34      	ldr	r2, [pc, #208]	; (8003c18 <HAL_DMA_IRQHandler+0x1fc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d012      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x156>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a32      	ldr	r2, [pc, #200]	; (8003c1c <HAL_DMA_IRQHandler+0x200>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00a      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x150>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a31      	ldr	r2, [pc, #196]	; (8003c20 <HAL_DMA_IRQHandler+0x204>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d102      	bne.n	8003b66 <HAL_DMA_IRQHandler+0x14a>
 8003b60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b64:	e00e      	b.n	8003b84 <HAL_DMA_IRQHandler+0x168>
 8003b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6a:	e00b      	b.n	8003b84 <HAL_DMA_IRQHandler+0x168>
 8003b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b70:	e008      	b.n	8003b84 <HAL_DMA_IRQHandler+0x168>
 8003b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b76:	e005      	b.n	8003b84 <HAL_DMA_IRQHandler+0x168>
 8003b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b7c:	e002      	b.n	8003b84 <HAL_DMA_IRQHandler+0x168>
 8003b7e:	2320      	movs	r3, #32
 8003b80:	e000      	b.n	8003b84 <HAL_DMA_IRQHandler+0x168>
 8003b82:	2302      	movs	r3, #2
 8003b84:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <HAL_DMA_IRQHandler+0x208>)
 8003b86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d034      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ba0:	e02f      	b.n	8003c02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d028      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x1e8>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d023      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 020e 	bic.w	r2, r2, #14
 8003bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
    }
  }
  return;
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
}
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40020008 	.word	0x40020008
 8003c10:	4002001c 	.word	0x4002001c
 8003c14:	40020030 	.word	0x40020030
 8003c18:	40020044 	.word	0x40020044
 8003c1c:	40020058 	.word	0x40020058
 8003c20:	4002006c 	.word	0x4002006c
 8003c24:	40020000 	.word	0x40020000

08003c28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	2101      	movs	r1, #1
 8003c40:	fa01 f202 	lsl.w	r2, r1, r2
 8003c44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d108      	bne.n	8003c68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c66:	e007      	b.n	8003c78 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
	...

08003c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b08b      	sub	sp, #44	; 0x2c
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c96:	e127      	b.n	8003ee8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c98:	2201      	movs	r2, #1
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	f040 8116 	bne.w	8003ee2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b12      	cmp	r3, #18
 8003cbc:	d034      	beq.n	8003d28 <HAL_GPIO_Init+0xa4>
 8003cbe:	2b12      	cmp	r3, #18
 8003cc0:	d80d      	bhi.n	8003cde <HAL_GPIO_Init+0x5a>
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d02b      	beq.n	8003d1e <HAL_GPIO_Init+0x9a>
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d804      	bhi.n	8003cd4 <HAL_GPIO_Init+0x50>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d031      	beq.n	8003d32 <HAL_GPIO_Init+0xae>
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d01c      	beq.n	8003d0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cd2:	e048      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d043      	beq.n	8003d60 <HAL_GPIO_Init+0xdc>
 8003cd8:	2b11      	cmp	r3, #17
 8003cda:	d01b      	beq.n	8003d14 <HAL_GPIO_Init+0x90>
          break;
 8003cdc:	e043      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cde:	4a89      	ldr	r2, [pc, #548]	; (8003f04 <HAL_GPIO_Init+0x280>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d026      	beq.n	8003d32 <HAL_GPIO_Init+0xae>
 8003ce4:	4a87      	ldr	r2, [pc, #540]	; (8003f04 <HAL_GPIO_Init+0x280>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d806      	bhi.n	8003cf8 <HAL_GPIO_Init+0x74>
 8003cea:	4a87      	ldr	r2, [pc, #540]	; (8003f08 <HAL_GPIO_Init+0x284>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d020      	beq.n	8003d32 <HAL_GPIO_Init+0xae>
 8003cf0:	4a86      	ldr	r2, [pc, #536]	; (8003f0c <HAL_GPIO_Init+0x288>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <HAL_GPIO_Init+0xae>
          break;
 8003cf6:	e036      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cf8:	4a85      	ldr	r2, [pc, #532]	; (8003f10 <HAL_GPIO_Init+0x28c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d019      	beq.n	8003d32 <HAL_GPIO_Init+0xae>
 8003cfe:	4a85      	ldr	r2, [pc, #532]	; (8003f14 <HAL_GPIO_Init+0x290>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d016      	beq.n	8003d32 <HAL_GPIO_Init+0xae>
 8003d04:	4a84      	ldr	r2, [pc, #528]	; (8003f18 <HAL_GPIO_Init+0x294>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_GPIO_Init+0xae>
          break;
 8003d0a:	e02c      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	623b      	str	r3, [r7, #32]
          break;
 8003d12:	e028      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	623b      	str	r3, [r7, #32]
          break;
 8003d1c:	e023      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	3308      	adds	r3, #8
 8003d24:	623b      	str	r3, [r7, #32]
          break;
 8003d26:	e01e      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	623b      	str	r3, [r7, #32]
          break;
 8003d30:	e019      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	623b      	str	r3, [r7, #32]
          break;
 8003d3e:	e012      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d48:	2308      	movs	r3, #8
 8003d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	611a      	str	r2, [r3, #16]
          break;
 8003d52:	e008      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d54:	2308      	movs	r3, #8
 8003d56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	615a      	str	r2, [r3, #20]
          break;
 8003d5e:	e002      	b.n	8003d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d60:	2300      	movs	r3, #0
 8003d62:	623b      	str	r3, [r7, #32]
          break;
 8003d64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2bff      	cmp	r3, #255	; 0xff
 8003d6a:	d801      	bhi.n	8003d70 <HAL_GPIO_Init+0xec>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	e001      	b.n	8003d74 <HAL_GPIO_Init+0xf0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2bff      	cmp	r3, #255	; 0xff
 8003d7a:	d802      	bhi.n	8003d82 <HAL_GPIO_Init+0xfe>
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	e002      	b.n	8003d88 <HAL_GPIO_Init+0x104>
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	3b08      	subs	r3, #8
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	210f      	movs	r1, #15
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	401a      	ands	r2, r3
 8003d9a:	6a39      	ldr	r1, [r7, #32]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	431a      	orrs	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8096 	beq.w	8003ee2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003db6:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_GPIO_Init+0x298>)
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	4a58      	ldr	r2, [pc, #352]	; (8003f1c <HAL_GPIO_Init+0x298>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6193      	str	r3, [r2, #24]
 8003dc2:	4b56      	ldr	r3, [pc, #344]	; (8003f1c <HAL_GPIO_Init+0x298>)
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dce:	4a54      	ldr	r2, [pc, #336]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dda:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	220f      	movs	r2, #15
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4b      	ldr	r2, [pc, #300]	; (8003f24 <HAL_GPIO_Init+0x2a0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0x19e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	; (8003f28 <HAL_GPIO_Init+0x2a4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00d      	beq.n	8003e1e <HAL_GPIO_Init+0x19a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a49      	ldr	r2, [pc, #292]	; (8003f2c <HAL_GPIO_Init+0x2a8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <HAL_GPIO_Init+0x196>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a48      	ldr	r2, [pc, #288]	; (8003f30 <HAL_GPIO_Init+0x2ac>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_GPIO_Init+0x192>
 8003e12:	2303      	movs	r3, #3
 8003e14:	e006      	b.n	8003e24 <HAL_GPIO_Init+0x1a0>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e004      	b.n	8003e24 <HAL_GPIO_Init+0x1a0>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e002      	b.n	8003e24 <HAL_GPIO_Init+0x1a0>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_GPIO_Init+0x1a0>
 8003e22:	2300      	movs	r3, #0
 8003e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e26:	f002 0203 	and.w	r2, r2, #3
 8003e2a:	0092      	lsls	r2, r2, #2
 8003e2c:	4093      	lsls	r3, r2
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e34:	493a      	ldr	r1, [pc, #232]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e4e:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4938      	ldr	r1, [pc, #224]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
 8003e5a:	e006      	b.n	8003e6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	4933      	ldr	r1, [pc, #204]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	492e      	ldr	r1, [pc, #184]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
 8003e82:	e006      	b.n	8003e92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	4929      	ldr	r1, [pc, #164]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e9e:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	4924      	ldr	r1, [pc, #144]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
 8003eaa:	e006      	b.n	8003eba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	491f      	ldr	r1, [pc, #124]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	491a      	ldr	r1, [pc, #104]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60cb      	str	r3, [r1, #12]
 8003ed2:	e006      	b.n	8003ee2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ed4:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	4915      	ldr	r1, [pc, #84]	; (8003f34 <HAL_GPIO_Init+0x2b0>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f47f aed0 	bne.w	8003c98 <HAL_GPIO_Init+0x14>
  }
}
 8003ef8:	bf00      	nop
 8003efa:	372c      	adds	r7, #44	; 0x2c
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	10210000 	.word	0x10210000
 8003f08:	10110000 	.word	0x10110000
 8003f0c:	10120000 	.word	0x10120000
 8003f10:	10310000 	.word	0x10310000
 8003f14:	10320000 	.word	0x10320000
 8003f18:	10220000 	.word	0x10220000
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40010800 	.word	0x40010800
 8003f28:	40010c00 	.word	0x40010c00
 8003f2c:	40011000 	.word	0x40011000
 8003f30:	40011400 	.word	0x40011400
 8003f34:	40010400 	.word	0x40010400

08003f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
 8003f44:	4613      	mov	r3, r2
 8003f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f48:	787b      	ldrb	r3, [r7, #1]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f54:	e003      	b.n	8003f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	041a      	lsls	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	611a      	str	r2, [r3, #16]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e26c      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8087 	beq.w	8004096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f88:	4b92      	ldr	r3, [pc, #584]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d00c      	beq.n	8003fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f94:	4b8f      	ldr	r3, [pc, #572]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d112      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x5e>
 8003fa0:	4b8c      	ldr	r3, [pc, #560]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fac:	d10b      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d06c      	beq.n	8004094 <HAL_RCC_OscConfig+0x12c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d168      	bne.n	8004094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e246      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x76>
 8003fd0:	4b80      	ldr	r3, [pc, #512]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a7f      	ldr	r2, [pc, #508]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e02e      	b.n	800403c <HAL_RCC_OscConfig+0xd4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x98>
 8003fe6:	4b7b      	ldr	r3, [pc, #492]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7a      	ldr	r2, [pc, #488]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b78      	ldr	r3, [pc, #480]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a77      	ldr	r2, [pc, #476]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e01d      	b.n	800403c <HAL_RCC_OscConfig+0xd4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0xbc>
 800400a:	4b72      	ldr	r3, [pc, #456]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a71      	ldr	r2, [pc, #452]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b6f      	ldr	r3, [pc, #444]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a6e      	ldr	r2, [pc, #440]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e00b      	b.n	800403c <HAL_RCC_OscConfig+0xd4>
 8004024:	4b6b      	ldr	r3, [pc, #428]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6a      	ldr	r2, [pc, #424]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 800402a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a67      	ldr	r2, [pc, #412]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d013      	beq.n	800406c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fe feb0 	bl	8002da8 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800404c:	f7fe feac 	bl	8002da8 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1fa      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0xe4>
 800406a:	e014      	b.n	8004096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe fe9c 	bl	8002da8 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fe fe98 	bl	8002da8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e1e6      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004086:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x10c>
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d063      	beq.n	800416a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040a2:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040ae:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d11c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x18c>
 80040ba:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d116      	bne.n	80040f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_RCC_OscConfig+0x176>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e1ba      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4939      	ldr	r1, [pc, #228]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f2:	e03a      	b.n	800416a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d020      	beq.n	800413e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fc:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe fe51 	bl	8002da8 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410a:	f7fe fe4d 	bl	8002da8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e19b      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004128:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4927      	ldr	r1, [pc, #156]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]
 800413c:	e015      	b.n	800416a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <HAL_RCC_OscConfig+0x270>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fe30 	bl	8002da8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414c:	f7fe fe2c 	bl	8002da8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e17a      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d03a      	beq.n	80041ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d019      	beq.n	80041b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <HAL_RCC_OscConfig+0x274>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004184:	f7fe fe10 	bl	8002da8 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418c:	f7fe fe0c 	bl	8002da8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e15a      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041aa:	2001      	movs	r0, #1
 80041ac:	f000 fb0a 	bl	80047c4 <RCC_Delay>
 80041b0:	e01c      	b.n	80041ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <HAL_RCC_OscConfig+0x274>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b8:	f7fe fdf6 	bl	8002da8 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041be:	e00f      	b.n	80041e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fe fdf2 	bl	8002da8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d908      	bls.n	80041e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e140      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	42420000 	.word	0x42420000
 80041dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e0:	4b9e      	ldr	r3, [pc, #632]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e9      	bne.n	80041c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80a6 	beq.w	8004346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4b97      	ldr	r3, [pc, #604]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	4b94      	ldr	r3, [pc, #592]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4a93      	ldr	r2, [pc, #588]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004214:	61d3      	str	r3, [r2, #28]
 8004216:	4b91      	ldr	r3, [pc, #580]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004222:	2301      	movs	r3, #1
 8004224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004226:	4b8e      	ldr	r3, [pc, #568]	; (8004460 <HAL_RCC_OscConfig+0x4f8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d118      	bne.n	8004264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004232:	4b8b      	ldr	r3, [pc, #556]	; (8004460 <HAL_RCC_OscConfig+0x4f8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a8a      	ldr	r2, [pc, #552]	; (8004460 <HAL_RCC_OscConfig+0x4f8>)
 8004238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423e:	f7fe fdb3 	bl	8002da8 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004246:	f7fe fdaf 	bl	8002da8 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0fd      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	4b81      	ldr	r3, [pc, #516]	; (8004460 <HAL_RCC_OscConfig+0x4f8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x312>
 800426c:	4b7b      	ldr	r3, [pc, #492]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	4a7a      	ldr	r2, [pc, #488]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6213      	str	r3, [r2, #32]
 8004278:	e02d      	b.n	80042d6 <HAL_RCC_OscConfig+0x36e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x334>
 8004282:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4a75      	ldr	r2, [pc, #468]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6213      	str	r3, [r2, #32]
 800428e:	4b73      	ldr	r3, [pc, #460]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4a72      	ldr	r2, [pc, #456]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	6213      	str	r3, [r2, #32]
 800429a:	e01c      	b.n	80042d6 <HAL_RCC_OscConfig+0x36e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b05      	cmp	r3, #5
 80042a2:	d10c      	bne.n	80042be <HAL_RCC_OscConfig+0x356>
 80042a4:	4b6d      	ldr	r3, [pc, #436]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	4a6c      	ldr	r2, [pc, #432]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042aa:	f043 0304 	orr.w	r3, r3, #4
 80042ae:	6213      	str	r3, [r2, #32]
 80042b0:	4b6a      	ldr	r3, [pc, #424]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4a69      	ldr	r2, [pc, #420]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	6213      	str	r3, [r2, #32]
 80042bc:	e00b      	b.n	80042d6 <HAL_RCC_OscConfig+0x36e>
 80042be:	4b67      	ldr	r3, [pc, #412]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4a66      	ldr	r2, [pc, #408]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	6213      	str	r3, [r2, #32]
 80042ca:	4b64      	ldr	r3, [pc, #400]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4a63      	ldr	r2, [pc, #396]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d015      	beq.n	800430a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042de:	f7fe fd63 	bl	8002da8 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fe fd5f 	bl	8002da8 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0ab      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	4b57      	ldr	r3, [pc, #348]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ee      	beq.n	80042e6 <HAL_RCC_OscConfig+0x37e>
 8004308:	e014      	b.n	8004334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430a:	f7fe fd4d 	bl	8002da8 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004310:	e00a      	b.n	8004328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004312:	f7fe fd49 	bl	8002da8 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e095      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004328:	4b4c      	ldr	r3, [pc, #304]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ee      	bne.n	8004312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d105      	bne.n	8004346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433a:	4b48      	ldr	r3, [pc, #288]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	4a47      	ldr	r2, [pc, #284]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8081 	beq.w	8004452 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004350:	4b42      	ldr	r3, [pc, #264]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b08      	cmp	r3, #8
 800435a:	d061      	beq.n	8004420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d146      	bne.n	80043f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004364:	4b3f      	ldr	r3, [pc, #252]	; (8004464 <HAL_RCC_OscConfig+0x4fc>)
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fe fd1d 	bl	8002da8 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004372:	f7fe fd19 	bl	8002da8 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e067      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004384:	4b35      	ldr	r3, [pc, #212]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d108      	bne.n	80043ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800439a:	4b30      	ldr	r3, [pc, #192]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	492d      	ldr	r1, [pc, #180]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a19      	ldr	r1, [r3, #32]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	430b      	orrs	r3, r1
 80043be:	4927      	ldr	r1, [pc, #156]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <HAL_RCC_OscConfig+0x4fc>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fe fced 	bl	8002da8 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fe fce9 	bl	8002da8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e037      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x46a>
 80043f0:	e02f      	b.n	8004452 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f2:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_RCC_OscConfig+0x4fc>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe fcd6 	bl	8002da8 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004400:	f7fe fcd2 	bl	8002da8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e020      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x498>
 800441e:	e018      	b.n	8004452 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e013      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_OscConfig+0x4f4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	429a      	cmp	r2, r3
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	40007000 	.word	0x40007000
 8004464:	42420060 	.word	0x42420060

08004468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0d0      	b.n	800461e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b6a      	ldr	r3, [pc, #424]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d910      	bls.n	80044ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b67      	ldr	r3, [pc, #412]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 0207 	bic.w	r2, r3, #7
 8004492:	4965      	ldr	r1, [pc, #404]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b63      	ldr	r3, [pc, #396]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0b8      	b.n	800461e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c4:	4b59      	ldr	r3, [pc, #356]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a58      	ldr	r2, [pc, #352]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a52      	ldr	r2, [pc, #328]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80044e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e8:	4b50      	ldr	r3, [pc, #320]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	494d      	ldr	r1, [pc, #308]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d040      	beq.n	8004588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d115      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e07f      	b.n	800461e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e073      	b.n	800461e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004536:	4b3d      	ldr	r3, [pc, #244]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e06b      	b.n	800461e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f023 0203 	bic.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4936      	ldr	r1, [pc, #216]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004558:	f7fe fc26 	bl	8002da8 <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	e00a      	b.n	8004576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004560:	f7fe fc22 	bl	8002da8 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e053      	b.n	800461e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	4b2d      	ldr	r3, [pc, #180]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 020c 	and.w	r2, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	429a      	cmp	r2, r3
 8004586:	d1eb      	bne.n	8004560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004588:	4b27      	ldr	r3, [pc, #156]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d210      	bcs.n	80045b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 0207 	bic.w	r2, r3, #7
 800459e:	4922      	ldr	r1, [pc, #136]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e032      	b.n	800461e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4916      	ldr	r1, [pc, #88]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	490e      	ldr	r1, [pc, #56]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045f6:	f000 f821 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80045fa:	4601      	mov	r1, r0
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x1c8>)
 8004608:	5cd3      	ldrb	r3, [r2, r3]
 800460a:	fa21 f303 	lsr.w	r3, r1, r3
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <HAL_RCC_ClockConfig+0x1cc>)
 8004610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_RCC_ClockConfig+0x1d0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fd ff2e 	bl	8002478 <HAL_InitTick>

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40022000 	.word	0x40022000
 800462c:	40021000 	.word	0x40021000
 8004630:	08009ed0 	.word	0x08009ed0
 8004634:	20000024 	.word	0x20000024
 8004638:	20000028 	.word	0x20000028

0800463c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	b490      	push	{r4, r7}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8004644:	1d3c      	adds	r4, r7, #4
 8004646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800464c:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d002      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x40>
 8004676:	2b08      	cmp	r3, #8
 8004678:	d003      	beq.n	8004682 <HAL_RCC_GetSysClockFreq+0x46>
 800467a:	e02d      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800467c:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800467e:	623b      	str	r3, [r7, #32]
      break;
 8004680:	e02d      	b.n	80046de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	0c9b      	lsrs	r3, r3, #18
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800468e:	4413      	add	r3, r2
 8004690:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004694:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d013      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046a0:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0c5b      	lsrs	r3, r3, #17
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046ae:	4413      	add	r3, r2
 80046b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046ba:	fb02 f203 	mul.w	r2, r2, r3
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
 80046c6:	e004      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4a0c      	ldr	r2, [pc, #48]	; (80046fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	623b      	str	r3, [r7, #32]
      break;
 80046d6:	e002      	b.n	80046de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046da:	623b      	str	r3, [r7, #32]
      break;
 80046dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046de:	6a3b      	ldr	r3, [r7, #32]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3728      	adds	r7, #40	; 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc90      	pop	{r4, r7}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	08009ea0 	.word	0x08009ea0
 80046f0:	08009eb0 	.word	0x08009eb0
 80046f4:	40021000 	.word	0x40021000
 80046f8:	007a1200 	.word	0x007a1200
 80046fc:	003d0900 	.word	0x003d0900

08004700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b02      	ldr	r3, [pc, #8]	; (8004710 <HAL_RCC_GetHCLKFreq+0x10>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	20000024 	.word	0x20000024

08004714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004718:	f7ff fff2 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 800471c:	4601      	mov	r1, r0
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4a03      	ldr	r2, [pc, #12]	; (8004738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800472a:	5cd3      	ldrb	r3, [r2, r3]
 800472c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40021000 	.word	0x40021000
 8004738:	08009ee0 	.word	0x08009ee0

0800473c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004740:	f7ff ffde 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004744:	4601      	mov	r1, r0
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	0adb      	lsrs	r3, r3, #11
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4a03      	ldr	r2, [pc, #12]	; (8004760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	08009ee0 	.word	0x08009ee0

08004764 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	220f      	movs	r2, #15
 8004772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_RCC_GetClockConfig+0x58>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0203 	and.w	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <HAL_RCC_GetClockConfig+0x58>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_GetClockConfig+0x58>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <HAL_RCC_GetClockConfig+0x58>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0207 	and.w	r2, r3, #7
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40022000 	.word	0x40022000

080047c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <RCC_Delay+0x34>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <RCC_Delay+0x38>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	0a5b      	lsrs	r3, r3, #9
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047e0:	bf00      	nop
  }
  while (Delay --);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1e5a      	subs	r2, r3, #1
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f9      	bne.n	80047e0 <RCC_Delay+0x1c>
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000024 	.word	0x20000024
 80047fc:	10624dd3 	.word	0x10624dd3

08004800 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d07d      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004820:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10d      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	4a4b      	ldr	r2, [pc, #300]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	61d3      	str	r3, [r2, #28]
 8004838:	4b49      	ldr	r3, [pc, #292]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004848:	4b46      	ldr	r3, [pc, #280]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d118      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004854:	4b43      	ldr	r3, [pc, #268]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a42      	ldr	r2, [pc, #264]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800485a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004860:	f7fe faa2 	bl	8002da8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	e008      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fe fa9e 	bl	8002da8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e06d      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004886:	4b36      	ldr	r3, [pc, #216]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d02e      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d027      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ae:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048b4:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048ba:	4a29      	ldr	r2, [pc, #164]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d014      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fe fa6d 	bl	8002da8 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fe fa69 	bl	8002da8 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e036      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ee      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4917      	ldr	r1, [pc, #92]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004902:	4313      	orrs	r3, r2
 8004904:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	4b14      	ldr	r3, [pc, #80]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	4a13      	ldr	r2, [pc, #76]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004916:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004924:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	490b      	ldr	r1, [pc, #44]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	4313      	orrs	r3, r2
 8004934:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	4904      	ldr	r1, [pc, #16]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	42420440 	.word	0x42420440

0800496c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e041      	b.n	8004a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fd fbf4 	bl	8002180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fc66 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d001      	beq.n	8004a24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e032      	b.n	8004a8a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <HAL_TIM_Base_Start+0x88>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00e      	beq.n	8004a54 <HAL_TIM_Base_Start+0x48>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d009      	beq.n	8004a54 <HAL_TIM_Base_Start+0x48>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a14      	ldr	r2, [pc, #80]	; (8004a98 <HAL_TIM_Base_Start+0x8c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_TIM_Base_Start+0x48>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <HAL_TIM_Base_Start+0x90>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d111      	bne.n	8004a78 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d010      	beq.n	8004a88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a76:	e007      	b.n	8004a88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800

08004aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d001      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e03a      	b.n	8004b2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <HAL_TIM_Base_Start_IT+0x98>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x58>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae2:	d009      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x58>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <HAL_TIM_Base_Start_IT+0x9c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x58>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <HAL_TIM_Base_Start_IT+0xa0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d010      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1a:	e007      	b.n	8004b2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800

08004b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e041      	b.n	8004bda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f839 	bl	8004be2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f000 fb7a 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_TIM_PWM_Start+0x24>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e022      	b.n	8004c5e <HAL_TIM_PWM_Start+0x6a>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d109      	bne.n	8004c32 <HAL_TIM_PWM_Start+0x3e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	e015      	b.n	8004c5e <HAL_TIM_PWM_Start+0x6a>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d109      	bne.n	8004c4c <HAL_TIM_PWM_Start+0x58>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e008      	b.n	8004c5e <HAL_TIM_PWM_Start+0x6a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e05e      	b.n	8004d24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0x82>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c74:	e013      	b.n	8004c9e <HAL_TIM_PWM_Start+0xaa>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x92>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c84:	e00b      	b.n	8004c9e <HAL_TIM_PWM_Start+0xaa>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_PWM_Start+0xa2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c94:	e003      	b.n	8004c9e <HAL_TIM_PWM_Start+0xaa>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fd68 	bl	800577c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <HAL_TIM_PWM_Start+0x138>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d107      	bne.n	8004cc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <HAL_TIM_PWM_Start+0x138>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <HAL_TIM_PWM_Start+0xfa>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d009      	beq.n	8004cee <HAL_TIM_PWM_Start+0xfa>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <HAL_TIM_PWM_Start+0x13c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_TIM_PWM_Start+0xfa>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <HAL_TIM_PWM_Start+0x140>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d111      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b06      	cmp	r3, #6
 8004cfe:	d010      	beq.n	8004d22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	e007      	b.n	8004d22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800

08004d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0202 	mvn.w	r2, #2
 8004d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa62 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa55 	bl	8005232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fa64 	bl	8005256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0204 	mvn.w	r2, #4
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa38 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fa2b 	bl	8005232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fa3a 	bl	8005256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0208 	mvn.w	r2, #8
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2204      	movs	r2, #4
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa0e 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa01 	bl	8005232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fa10 	bl	8005256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0210 	mvn.w	r2, #16
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2208      	movs	r2, #8
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f9e4 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9d7 	bl	8005232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f9e6 	bl	8005256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d10e      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d107      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0201 	mvn.w	r2, #1
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fd f8aa 	bl	8002010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	2b80      	cmp	r3, #128	; 0x80
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d107      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fd26 	bl	8005934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d10e      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9aa 	bl	8005268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d10e      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d107      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0220 	mvn.w	r2, #32
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fcf1 	bl	8005922 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e0ac      	b.n	80050bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	f200 809f 	bhi.w	80050b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004f72:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004fad 	.word	0x08004fad
 8004f7c:	080050b1 	.word	0x080050b1
 8004f80:	080050b1 	.word	0x080050b1
 8004f84:	080050b1 	.word	0x080050b1
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	080050b1 	.word	0x080050b1
 8004f90:	080050b1 	.word	0x080050b1
 8004f94:	080050b1 	.word	0x080050b1
 8004f98:	0800502f 	.word	0x0800502f
 8004f9c:	080050b1 	.word	0x080050b1
 8004fa0:	080050b1 	.word	0x080050b1
 8004fa4:	080050b1 	.word	0x080050b1
 8004fa8:	0800506f 	.word	0x0800506f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f9c4 	bl	8005340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0204 	bic.w	r2, r2, #4
 8004fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6999      	ldr	r1, [r3, #24]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	619a      	str	r2, [r3, #24]
      break;
 8004fea:	e062      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fa0a 	bl	800540c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6999      	ldr	r1, [r3, #24]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	021a      	lsls	r2, r3, #8
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	619a      	str	r2, [r3, #24]
      break;
 800502c:	e041      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fa53 	bl	80054e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0208 	orr.w	r2, r2, #8
 8005048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0204 	bic.w	r2, r2, #4
 8005058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69d9      	ldr	r1, [r3, #28]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	61da      	str	r2, [r3, #28]
      break;
 800506c:	e021      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fa9d 	bl	80055b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69d9      	ldr	r1, [r3, #28]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	021a      	lsls	r2, r3, #8
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	61da      	str	r2, [r3, #28]
      break;
 80050ae:	e000      	b.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80050b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_ConfigClockSource+0x18>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0a6      	b.n	800522a <HAL_TIM_ConfigClockSource+0x166>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d067      	beq.n	80051e4 <HAL_TIM_ConfigClockSource+0x120>
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d80b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x6c>
 8005118:	2b10      	cmp	r3, #16
 800511a:	d073      	beq.n	8005204 <HAL_TIM_ConfigClockSource+0x140>
 800511c:	2b10      	cmp	r3, #16
 800511e:	d802      	bhi.n	8005126 <HAL_TIM_ConfigClockSource+0x62>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d06f      	beq.n	8005204 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005124:	e078      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005126:	2b20      	cmp	r3, #32
 8005128:	d06c      	beq.n	8005204 <HAL_TIM_ConfigClockSource+0x140>
 800512a:	2b30      	cmp	r3, #48	; 0x30
 800512c:	d06a      	beq.n	8005204 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800512e:	e073      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005130:	2b70      	cmp	r3, #112	; 0x70
 8005132:	d00d      	beq.n	8005150 <HAL_TIM_ConfigClockSource+0x8c>
 8005134:	2b70      	cmp	r3, #112	; 0x70
 8005136:	d804      	bhi.n	8005142 <HAL_TIM_ConfigClockSource+0x7e>
 8005138:	2b50      	cmp	r3, #80	; 0x50
 800513a:	d033      	beq.n	80051a4 <HAL_TIM_ConfigClockSource+0xe0>
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d041      	beq.n	80051c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005140:	e06a      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	d066      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0x152>
 8005148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800514c:	d017      	beq.n	800517e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800514e:	e063      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6899      	ldr	r1, [r3, #8]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f000 faed 	bl	800573e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005172:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
      break;
 800517c:	e04c      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6899      	ldr	r1, [r3, #8]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f000 fad6 	bl	800573e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051a0:	609a      	str	r2, [r3, #8]
      break;
 80051a2:	e039      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	461a      	mov	r2, r3
 80051b2:	f000 fa4d 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2150      	movs	r1, #80	; 0x50
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 faa4 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 80051c2:	e029      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f000 fa6b 	bl	80056ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2160      	movs	r1, #96	; 0x60
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fa94 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 80051e2:	e019      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	461a      	mov	r2, r3
 80051f2:	f000 fa2d 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2140      	movs	r1, #64	; 0x40
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fa84 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8005202:	e009      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 fa7b 	bl	800570a <TIM_ITRx_SetConfig>
        break;
 8005214:	e000      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr

08005244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr

08005256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr

08005268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
	...

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a29      	ldr	r2, [pc, #164]	; (8005334 <TIM_Base_SetConfig+0xb8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00b      	beq.n	80052ac <TIM_Base_SetConfig+0x30>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d007      	beq.n	80052ac <TIM_Base_SetConfig+0x30>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a26      	ldr	r2, [pc, #152]	; (8005338 <TIM_Base_SetConfig+0xbc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0x30>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a25      	ldr	r2, [pc, #148]	; (800533c <TIM_Base_SetConfig+0xc0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d108      	bne.n	80052be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <TIM_Base_SetConfig+0xb8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0x62>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0x62>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a19      	ldr	r2, [pc, #100]	; (8005338 <TIM_Base_SetConfig+0xbc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0x62>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a18      	ldr	r2, [pc, #96]	; (800533c <TIM_Base_SetConfig+0xc0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a07      	ldr	r2, [pc, #28]	; (8005334 <TIM_Base_SetConfig+0xb8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d103      	bne.n	8005324 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	615a      	str	r2, [r3, #20]
}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800

08005340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f023 0201 	bic.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f023 0302 	bic.w	r3, r3, #2
 8005388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <TIM_OC1_SetConfig+0xc8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0308 	bic.w	r3, r3, #8
 80053a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a13      	ldr	r2, [pc, #76]	; (8005408 <TIM_OC1_SetConfig+0xc8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d111      	bne.n	80053e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	621a      	str	r2, [r3, #32]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00

0800540c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0210 	bic.w	r2, r3, #16
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0320 	bic.w	r3, r3, #32
 8005456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <TIM_OC2_SetConfig+0xd0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10d      	bne.n	8005488 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005486:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a14      	ldr	r2, [pc, #80]	; (80054dc <TIM_OC2_SetConfig+0xd0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d113      	bne.n	80054b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr
 80054dc:	40012c00 	.word	0x40012c00

080054e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <TIM_OC3_SetConfig+0xd0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d10d      	bne.n	800555a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a14      	ldr	r2, [pc, #80]	; (80055b0 <TIM_OC3_SetConfig+0xd0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d113      	bne.n	800558a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	621a      	str	r2, [r3, #32]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40012c00 	.word	0x40012c00

080055b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a0f      	ldr	r2, [pc, #60]	; (800564c <TIM_OC4_SetConfig+0x98>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d109      	bne.n	8005628 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800561a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	019b      	lsls	r3, r3, #6
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00

08005650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800567a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f023 030a 	bic.w	r3, r3, #10
 800568c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f023 0210 	bic.w	r2, r3, #16
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	031b      	lsls	r3, r3, #12
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	f043 0307 	orr.w	r3, r3, #7
 800572c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005758:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	021a      	lsls	r2, r3, #8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	431a      	orrs	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4313      	orrs	r3, r2
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	609a      	str	r2, [r3, #8]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	2201      	movs	r2, #1
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	43db      	mvns	r3, r3
 800579e:	401a      	ands	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	fa01 f303 	lsl.w	r3, r1, r3
 80057b4:	431a      	orrs	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d8:	2302      	movs	r3, #2
 80057da:	e046      	b.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a16      	ldr	r2, [pc, #88]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00e      	beq.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d009      	beq.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d004      	beq.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a10      	ldr	r2, [pc, #64]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d10c      	bne.n	8005858 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	4313      	orrs	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800

08005880 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e03d      	b.n	8005918 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e03f      	b.n	80059d8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7fc fd2f 	bl	80023d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2224      	movs	r2, #36	; 0x24
 8005976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005988:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fb82 	bl	8006094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800599e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d17c      	bne.n	8005afa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_UART_Transmit+0x2c>
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e075      	b.n	8005afc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Transmit+0x3e>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e06e      	b.n	8005afc <HAL_UART_Transmit+0x11c>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2221      	movs	r2, #33	; 0x21
 8005a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a34:	f7fd f9b8 	bl	8002da8 <HAL_GetTick>
 8005a38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	d108      	bne.n	8005a62 <HAL_UART_Transmit+0x82>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e003      	b.n	8005a6a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005a72:	e02a      	b.n	8005aca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2180      	movs	r1, #128	; 0x80
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f9a6 	bl	8005dd0 <UART_WaitOnFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e036      	b.n	8005afc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10b      	bne.n	8005aac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	e007      	b.n	8005abc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1cf      	bne.n	8005a74 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2200      	movs	r2, #0
 8005adc:	2140      	movs	r1, #64	; 0x40
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f976 	bl	8005dd0 <UART_WaitOnFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e006      	b.n	8005afc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e000      	b.n	8005afc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005afa:	2302      	movs	r3, #2
  }
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d140      	bne.n	8005ba0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_UART_Receive_IT+0x26>
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e039      	b.n	8005ba2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_UART_Receive_IT+0x38>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e032      	b.n	8005ba2 <HAL_UART_Receive_IT+0x9e>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	88fa      	ldrh	r2, [r7, #6]
 8005b54:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2222      	movs	r2, #34	; 0x22
 8005b60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b7a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0220 	orr.w	r2, r2, #32
 8005b9a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_UART_IRQHandler+0x52>
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9cc 	bl	8005f94 <UART_Receive_IT>
      return;
 8005bfc:	e0d1      	b.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80b0 	beq.w	8005d66 <HAL_UART_IRQHandler+0x1ba>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <HAL_UART_IRQHandler+0x70>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80a5 	beq.w	8005d66 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_UART_IRQHandler+0x90>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c34:	f043 0201 	orr.w	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_UART_IRQHandler+0xb0>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	f043 0202 	orr.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_UART_IRQHandler+0xd0>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	f043 0204 	orr.w	r2, r3, #4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xfa>
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_UART_IRQHandler+0xee>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	f043 0208 	orr.w	r2, r3, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d078      	beq.n	8005da0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x11c>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f966 	bl	8005f94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bf14      	ite	ne
 8005cd6:	2301      	movne	r3, #1
 8005cd8:	2300      	moveq	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x144>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d031      	beq.n	8005d54 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f8b7 	bl	8005e64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d023      	beq.n	8005d4c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d12:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d20:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <HAL_UART_IRQHandler+0x1fc>)
 8005d22:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fd fe01 	bl	8003930 <HAL_DMA_Abort_IT>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d016      	beq.n	8005d62 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d42:	e00e      	b.n	8005d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f83a 	bl	8005dbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4a:	e00a      	b.n	8005d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f836 	bl	8005dbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d52:	e006      	b.n	8005d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f832 	bl	8005dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d60:	e01e      	b.n	8005da0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d62:	bf00      	nop
    return;
 8005d64:	e01c      	b.n	8005da0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <HAL_UART_IRQHandler+0x1d6>
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8a3 	bl	8005ec6 <UART_Transmit_IT>
    return;
 8005d80:	e00f      	b.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8e4 	bl	8005f64 <UART_EndTransmit_IT>
    return;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005da0:	bf00      	nop
  }
}
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	08005e9f 	.word	0x08005e9f

08005dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr

08005dbe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr

08005dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de0:	e02c      	b.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de8:	d028      	beq.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005df0:	f7fc ffda 	bl	8002da8 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d21d      	bcs.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695a      	ldr	r2, [r3, #20]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0201 	bic.w	r2, r2, #1
 8005e1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e00f      	b.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4013      	ands	r3, r2
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d0c3      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr

08005e9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff ff80 	bl	8005dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b21      	cmp	r3, #33	; 0x21
 8005ed8:	d13e      	bne.n	8005f58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	d114      	bne.n	8005f0e <UART_Transmit_IT+0x48>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d110      	bne.n	8005f0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	1c9a      	adds	r2, r3, #2
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	621a      	str	r2, [r3, #32]
 8005f0c:	e008      	b.n	8005f20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6211      	str	r1, [r2, #32]
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10f      	bne.n	8005f54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f58:	2302      	movs	r3, #2
  }
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff ff11 	bl	8005dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b22      	cmp	r3, #34	; 0x22
 8005fa6:	d170      	bne.n	800608a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d117      	bne.n	8005fe2 <UART_Receive_IT+0x4e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d113      	bne.n	8005fe2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	1c9a      	adds	r2, r3, #2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28
 8005fe0:	e026      	b.n	8006030 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff4:	d007      	beq.n	8006006 <UART_Receive_IT+0x72>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <UART_Receive_IT+0x80>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	e008      	b.n	8006026 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29b      	uxth	r3, r3
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4619      	mov	r1, r3
 800603e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006040:	2b00      	cmp	r3, #0
 8006042:	d120      	bne.n	8006086 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0220 	bic.w	r2, r2, #32
 8006052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7fa fd91 	bl	8000ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e002      	b.n	800608c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e000      	b.n	800608c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800608a:	2302      	movs	r3, #2
  }
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060ce:	f023 030c 	bic.w	r3, r3, #12
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6812      	ldr	r2, [r2, #0]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	430b      	orrs	r3, r1
 80060da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2c      	ldr	r2, [pc, #176]	; (80061a8 <UART_SetConfig+0x114>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d103      	bne.n	8006104 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fe fb1e 	bl	800473c <HAL_RCC_GetPCLK2Freq>
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	e002      	b.n	800610a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006104:	f7fe fb06 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
 8006108:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009a      	lsls	r2, r3, #2
 8006114:	441a      	add	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	4a22      	ldr	r2, [pc, #136]	; (80061ac <UART_SetConfig+0x118>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	0119      	lsls	r1, r3, #4
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009a      	lsls	r2, r3, #2
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006140:	4b1a      	ldr	r3, [pc, #104]	; (80061ac <UART_SetConfig+0x118>)
 8006142:	fba3 0302 	umull	r0, r3, r3, r2
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2064      	movs	r0, #100	; 0x64
 800614a:	fb00 f303 	mul.w	r3, r0, r3
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	3332      	adds	r3, #50	; 0x32
 8006154:	4a15      	ldr	r2, [pc, #84]	; (80061ac <UART_SetConfig+0x118>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006160:	4419      	add	r1, r3
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009a      	lsls	r2, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	fbb2 f2f3 	udiv	r2, r2, r3
 8006178:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <UART_SetConfig+0x118>)
 800617a:	fba3 0302 	umull	r0, r3, r3, r2
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	2064      	movs	r0, #100	; 0x64
 8006182:	fb00 f303 	mul.w	r3, r0, r3
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	3332      	adds	r3, #50	; 0x32
 800618c:	4a07      	ldr	r2, [pc, #28]	; (80061ac <UART_SetConfig+0x118>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	f003 020f 	and.w	r2, r3, #15
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	440a      	add	r2, r1
 800619e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40013800 	.word	0x40013800
 80061ac:	51eb851f 	.word	0x51eb851f

080061b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061c2:	2b84      	cmp	r3, #132	; 0x84
 80061c4:	d005      	beq.n	80061d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	3303      	adds	r3, #3
 80061d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061d2:	68fb      	ldr	r3, [r7, #12]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr

080061de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061e4:	f3ef 8305 	mrs	r3, IPSR
 80061e8:	607b      	str	r3, [r7, #4]
  return(result);
 80061ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006204:	f001 fb32 	bl	800786c <vTaskStartScheduler>
  
  return osOK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	bd80      	pop	{r7, pc}

0800620e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800620e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006210:	b089      	sub	sp, #36	; 0x24
 8006212:	af04      	add	r7, sp, #16
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d020      	beq.n	8006262 <osThreadCreate+0x54>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01c      	beq.n	8006262 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685c      	ldr	r4, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681d      	ldr	r5, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691e      	ldr	r6, [r3, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff ffb8 	bl	80061b0 <makeFreeRtosPriority>
 8006240:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800624a:	9202      	str	r2, [sp, #8]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	9100      	str	r1, [sp, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	4632      	mov	r2, r6
 8006254:	4629      	mov	r1, r5
 8006256:	4620      	mov	r0, r4
 8006258:	f001 f94e 	bl	80074f8 <xTaskCreateStatic>
 800625c:	4603      	mov	r3, r0
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e01c      	b.n	800629c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685c      	ldr	r4, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800626e:	b29e      	uxth	r6, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ff9a 	bl	80061b0 <makeFreeRtosPriority>
 800627c:	4602      	mov	r2, r0
 800627e:	f107 030c 	add.w	r3, r7, #12
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	9200      	str	r2, [sp, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	4632      	mov	r2, r6
 800628a:	4629      	mov	r1, r5
 800628c:	4620      	mov	r0, r4
 800628e:	f001 f98c 	bl	80075aa <xTaskCreate>
 8006292:	4603      	mov	r3, r0
 8006294:	2b01      	cmp	r3, #1
 8006296:	d001      	beq.n	800629c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800629c:	68fb      	ldr	r3, [r7, #12]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <osDelay+0x16>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	e000      	b.n	80062be <osDelay+0x18>
 80062bc:	2301      	movs	r3, #1
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 faa0 	bl	8007804 <vTaskDelay>
  
  return osOK;
 80062c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	460b      	mov	r3, r1
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d013      	beq.n	800630e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <osTimerCreate+0x20>
 80062ec:	2101      	movs	r1, #1
 80062ee:	e000      	b.n	80062f2 <osTimerCreate+0x22>
 80062f0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80062fa:	9201      	str	r2, [sp, #4]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	460a      	mov	r2, r1
 8006302:	2101      	movs	r1, #1
 8006304:	480b      	ldr	r0, [pc, #44]	; (8006334 <osTimerCreate+0x64>)
 8006306:	f002 f994 	bl	8008632 <xTimerCreateStatic>
 800630a:	4603      	mov	r3, r0
 800630c:	e00e      	b.n	800632c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <osTimerCreate+0x48>
 8006314:	2201      	movs	r2, #1
 8006316:	e000      	b.n	800631a <osTimerCreate+0x4a>
 8006318:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2101      	movs	r1, #1
 8006324:	4803      	ldr	r0, [pc, #12]	; (8006334 <osTimerCreate+0x64>)
 8006326:	f002 f963 	bl	80085f0 <xTimerCreate>
 800632a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	08009eb4 	.word	0x08009eb4

08006338 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af02      	add	r7, sp, #8
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <osTimerStart+0x20>
    ticks = 1;
 8006354:	2301      	movs	r3, #1
 8006356:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006358:	f7ff ff41 	bl	80061de <inHandlerMode>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01b      	beq.n	800639a <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006362:	f107 020c 	add.w	r2, r7, #12
 8006366:	2300      	movs	r3, #0
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	4613      	mov	r3, r2
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	2109      	movs	r1, #9
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f002 f9cb 	bl	800870c <xTimerGenericCommand>
 8006376:	4603      	mov	r3, r0
 8006378:	2b01      	cmp	r3, #1
 800637a:	d002      	beq.n	8006382 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 800637c:	23ff      	movs	r3, #255	; 0xff
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e018      	b.n	80063b4 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d015      	beq.n	80063b4 <osTimerStart+0x7c>
 8006388:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <osTimerStart+0x88>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	e00c      	b.n	80063b4 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800639a:	2300      	movs	r3, #0
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	2300      	movs	r3, #0
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	2104      	movs	r1, #4
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f002 f9b1 	bl	800870c <xTimerGenericCommand>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d001      	beq.n	80063b4 <osTimerStart+0x7c>
      result = osErrorOS;
 80063b0:	23ff      	movs	r3, #255	; 0xff
 80063b2:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80063b4:	697b      	ldr	r3, [r7, #20]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d010      	beq.n	80063f8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d10b      	bne.n	80063f4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	2303      	movs	r3, #3
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	2100      	movs	r1, #0
 80063ea:	2001      	movs	r0, #1
 80063ec:	f000 f9ba 	bl	8006764 <xQueueGenericCreateStatic>
 80063f0:	4603      	mov	r3, r0
 80063f2:	e016      	b.n	8006422 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e014      	b.n	8006422 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d110      	bne.n	8006420 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80063fe:	2203      	movs	r2, #3
 8006400:	2100      	movs	r1, #0
 8006402:	2001      	movs	r0, #1
 8006404:	f000 fa20 	bl	8006848 <xQueueGenericCreate>
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <osSemaphoreCreate+0x58>
 8006410:	2300      	movs	r3, #0
 8006412:	2200      	movs	r2, #0
 8006414:	2100      	movs	r1, #0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fa72 	bl	8006900 <xQueueGenericSend>
      return sema;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	e000      	b.n	8006422 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006420:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	e03a      	b.n	80064ba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644e:	d103      	bne.n	8006458 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e009      	b.n	800646c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d006      	beq.n	800646c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <osSemaphoreWait+0x40>
      ticks = 1;
 8006468:	2301      	movs	r3, #1
 800646a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800646c:	f7ff feb7 	bl	80061de <inHandlerMode>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d017      	beq.n	80064a6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006476:	f107 0308 	add.w	r3, r7, #8
 800647a:	461a      	mov	r2, r3
 800647c:	2100      	movs	r1, #0
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fe3a 	bl	80070f8 <xQueueReceiveFromISR>
 8006484:	4603      	mov	r3, r0
 8006486:	2b01      	cmp	r3, #1
 8006488:	d001      	beq.n	800648e <osSemaphoreWait+0x62>
      return osErrorOS;
 800648a:	23ff      	movs	r3, #255	; 0xff
 800648c:	e015      	b.n	80064ba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d011      	beq.n	80064b8 <osSemaphoreWait+0x8c>
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <osSemaphoreWait+0x98>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	e008      	b.n	80064b8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fd1d 	bl	8006ee8 <xQueueSemaphoreTake>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d001      	beq.n	80064b8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80064b4:	23ff      	movs	r3, #255	; 0xff
 80064b6:	e000      	b.n	80064ba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80064d8:	f7ff fe81 	bl	80061de <inHandlerMode>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d016      	beq.n	8006510 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80064e2:	f107 0308 	add.w	r3, r7, #8
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb97 	bl	8006c1c <xQueueGiveFromISR>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d001      	beq.n	80064f8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80064f4:	23ff      	movs	r3, #255	; 0xff
 80064f6:	e017      	b.n	8006528 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d013      	beq.n	8006526 <osSemaphoreRelease+0x5e>
 80064fe:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <osSemaphoreRelease+0x68>)
 8006500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	e00a      	b.n	8006526 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006510:	2300      	movs	r3, #0
 8006512:	2200      	movs	r2, #0
 8006514:	2100      	movs	r1, #0
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f9f2 	bl	8006900 <xQueueGenericSend>
 800651c:	4603      	mov	r3, r0
 800651e:	2b01      	cmp	r3, #1
 8006520:	d001      	beq.n	8006526 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006522:	23ff      	movs	r3, #255	; 0xff
 8006524:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006526:	68fb      	ldr	r3, [r7, #12]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f103 0208 	add.w	r2, r3, #8
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800654c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f103 0208 	add.w	r2, r3, #8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0208 	add.w	r2, r3, #8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800658a:	b480      	push	{r7}
 800658c:	b085      	sub	sp, #20
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr

080065d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e6:	d103      	bne.n	80065f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e00c      	b.n	800660a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3308      	adds	r3, #8
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	e002      	b.n	80065fe <vListInsert+0x2e>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	429a      	cmp	r2, r3
 8006608:	d2f6      	bcs.n	80065f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr

08006640 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6892      	ldr	r2, [r2, #8]
 8006656:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6852      	ldr	r2, [r2, #4]
 8006660:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d103      	bne.n	8006674 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	1e5a      	subs	r2, r3, #1
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
	...

08006694 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d109      	bne.n	80066bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	e7fe      	b.n	80066ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80066bc:	f002 fbbc 	bl	8008e38 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	3b01      	subs	r3, #1
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066f2:	fb01 f303 	mul.w	r3, r1, r3
 80066f6:	441a      	add	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	22ff      	movs	r2, #255	; 0xff
 8006700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	22ff      	movs	r2, #255	; 0xff
 8006708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d114      	bne.n	800673c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d01a      	beq.n	8006750 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3310      	adds	r3, #16
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fb24 	bl	8007d6c <xTaskRemoveFromEventList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d012      	beq.n	8006750 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <xQueueGenericReset+0xcc>)
 800672c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	e009      	b.n	8006750 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3310      	adds	r3, #16
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff fef7 	bl	8006534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3324      	adds	r3, #36	; 0x24
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fef2 	bl	8006534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006750:	f002 fba0 	bl	8008e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006754:	2301      	movs	r3, #1
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08e      	sub	sp, #56	; 0x38
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <xQueueGenericCreateStatic+0x28>
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	62bb      	str	r3, [r7, #40]	; 0x28
 800678a:	e7fe      	b.n	800678a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <xQueueGenericCreateStatic+0x42>
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
 80067a4:	e7fe      	b.n	80067a4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <xQueueGenericCreateStatic+0x4e>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <xQueueGenericCreateStatic+0x52>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <xQueueGenericCreateStatic+0x54>
 80067b6:	2300      	movs	r3, #0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <xQueueGenericCreateStatic+0x6c>
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	623b      	str	r3, [r7, #32]
 80067ce:	e7fe      	b.n	80067ce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d102      	bne.n	80067dc <xQueueGenericCreateStatic+0x78>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <xQueueGenericCreateStatic+0x7c>
 80067dc:	2301      	movs	r3, #1
 80067de:	e000      	b.n	80067e2 <xQueueGenericCreateStatic+0x7e>
 80067e0:	2300      	movs	r3, #0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <xQueueGenericCreateStatic+0x96>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e7fe      	b.n	80067f8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067fa:	2348      	movs	r3, #72	; 0x48
 80067fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b48      	cmp	r3, #72	; 0x48
 8006802:	d009      	beq.n	8006818 <xQueueGenericCreateStatic+0xb4>
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	e7fe      	b.n	8006816 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00d      	beq.n	800683e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800682a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	4613      	mov	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f842 	bl	80068c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006840:	4618      	mov	r0, r3
 8006842:	3730      	adds	r7, #48	; 0x30
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	; 0x28
 800684c:	af02      	add	r7, sp, #8
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <xQueueGenericCreate+0x28>
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
 800686e:	e7fe      	b.n	800686e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e004      	b.n	8006886 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	fb02 f303 	mul.w	r3, r2, r3
 8006884:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	3348      	adds	r3, #72	; 0x48
 800688a:	4618      	mov	r0, r3
 800688c:	f002 fbca 	bl	8009024 <pvPortMalloc>
 8006890:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	3348      	adds	r3, #72	; 0x48
 800689c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068a6:	79fa      	ldrb	r2, [r7, #7]
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f805 	bl	80068c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80068b8:	69bb      	ldr	r3, [r7, #24]
	}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e002      	b.n	80068e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068f0:	2101      	movs	r1, #1
 80068f2:	69b8      	ldr	r0, [r7, #24]
 80068f4:	f7ff fece 	bl	8006694 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08e      	sub	sp, #56	; 0x38
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800690e:	2300      	movs	r3, #0
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <xQueueGenericSend+0x30>
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
 800692e:	e7fe      	b.n	800692e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <xQueueGenericSend+0x3e>
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <xQueueGenericSend+0x42>
 800693e:	2301      	movs	r3, #1
 8006940:	e000      	b.n	8006944 <xQueueGenericSend+0x44>
 8006942:	2300      	movs	r3, #0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <xQueueGenericSend+0x5c>
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
 800695a:	e7fe      	b.n	800695a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d103      	bne.n	800696a <xQueueGenericSend+0x6a>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <xQueueGenericSend+0x6e>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <xQueueGenericSend+0x70>
 800696e:	2300      	movs	r3, #0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <xQueueGenericSend+0x88>
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	e7fe      	b.n	8006986 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006988:	f001 fbaa 	bl	80080e0 <xTaskGetSchedulerState>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d102      	bne.n	8006998 <xQueueGenericSend+0x98>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <xQueueGenericSend+0x9c>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <xQueueGenericSend+0x9e>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <xQueueGenericSend+0xb6>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	e7fe      	b.n	80069b4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069b6:	f002 fa3f 	bl	8008e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <xQueueGenericSend+0xcc>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d129      	bne.n	8006a20 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069d2:	f000 fc25 	bl	8007220 <prvCopyDataToQueue>
 80069d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d010      	beq.n	8006a02 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	3324      	adds	r3, #36	; 0x24
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f9c1 	bl	8007d6c <xTaskRemoveFromEventList>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069f0:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <xQueueGenericSend+0x1f0>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	e00a      	b.n	8006a18 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a08:	4b39      	ldr	r3, [pc, #228]	; (8006af0 <xQueueGenericSend+0x1f0>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a18:	f002 fa3c 	bl	8008e94 <vPortExitCritical>
				return pdPASS;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e063      	b.n	8006ae8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a26:	f002 fa35 	bl	8008e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e05c      	b.n	8006ae8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a34:	f107 0314 	add.w	r3, r7, #20
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f9f9 	bl	8007e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a42:	f002 fa27 	bl	8008e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a46:	f000 ff75 	bl	8007934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a4a:	f002 f9f5 	bl	8008e38 <vPortEnterCritical>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a5a:	d103      	bne.n	8006a64 <xQueueGenericSend+0x164>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a70:	d103      	bne.n	8006a7a <xQueueGenericSend+0x17a>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a7a:	f002 fa0b 	bl	8008e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a7e:	1d3a      	adds	r2, r7, #4
 8006a80:	f107 0314 	add.w	r3, r7, #20
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f9e8 	bl	8007e5c <xTaskCheckForTimeOut>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d124      	bne.n	8006adc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a94:	f000 fcbc 	bl	8007410 <prvIsQueueFull>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d018      	beq.n	8006ad0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f912 	bl	8007cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aae:	f000 fc47 	bl	8007340 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ab2:	f000 ff4d 	bl	8007950 <xTaskResumeAll>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f af7c 	bne.w	80069b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <xQueueGenericSend+0x1f0>)
 8006ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	e772      	b.n	80069b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ad2:	f000 fc35 	bl	8007340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ad6:	f000 ff3b 	bl	8007950 <xTaskResumeAll>
 8006ada:	e76c      	b.n	80069b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ade:	f000 fc2f 	bl	8007340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ae2:	f000 ff35 	bl	8007950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ae6:	2300      	movs	r3, #0
		}
	}
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3738      	adds	r7, #56	; 0x38
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08e      	sub	sp, #56	; 0x38
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <xQueueGenericSendFromISR+0x2c>
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1e:	e7fe      	b.n	8006b1e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <xQueueGenericSendFromISR+0x3a>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <xQueueGenericSendFromISR+0x3e>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <xQueueGenericSendFromISR+0x40>
 8006b32:	2300      	movs	r3, #0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <xQueueGenericSendFromISR+0x58>
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	623b      	str	r3, [r7, #32]
 8006b4a:	e7fe      	b.n	8006b4a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d103      	bne.n	8006b5a <xQueueGenericSendFromISR+0x66>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <xQueueGenericSendFromISR+0x6a>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <xQueueGenericSendFromISR+0x6c>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d109      	bne.n	8006b78 <xQueueGenericSendFromISR+0x84>
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	61fb      	str	r3, [r7, #28]
 8006b76:	e7fe      	b.n	8006b76 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b78:	f002 fa18 	bl	8008fac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b7c:	f3ef 8211 	mrs	r2, BASEPRI
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	61ba      	str	r2, [r7, #24]
 8006b92:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b94:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d302      	bcc.n	8006baa <xQueueGenericSendFromISR+0xb6>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d12c      	bne.n	8006c04 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bba:	f000 fb31 	bl	8007220 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bbe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc6:	d112      	bne.n	8006bee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d016      	beq.n	8006bfe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	3324      	adds	r3, #36	; 0x24
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f8c9 	bl	8007d6c <xTaskRemoveFromEventList>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00e      	beq.n	8006bfe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00b      	beq.n	8006bfe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	e007      	b.n	8006bfe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	b25a      	sxtb	r2, r3
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006c02:	e001      	b.n	8006c08 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3738      	adds	r7, #56	; 0x38
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08e      	sub	sp, #56	; 0x38
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	e7fe      	b.n	8006c42 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <xQueueGiveFromISR+0x44>
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	e7fe      	b.n	8006c5e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <xQueueGiveFromISR+0x54>
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <xQueueGiveFromISR+0x58>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <xQueueGiveFromISR+0x5a>
 8006c74:	2300      	movs	r3, #0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <xQueueGiveFromISR+0x72>
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e7fe      	b.n	8006c8c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c8e:	f002 f98d 	bl	8008fac <vPortValidateInterruptPriority>
	__asm volatile
 8006c92:	f3ef 8211 	mrs	r2, BASEPRI
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	617a      	str	r2, [r7, #20]
 8006ca8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006caa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d22b      	bcs.n	8006d16 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd8:	d112      	bne.n	8006d00 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d016      	beq.n	8006d10 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	3324      	adds	r3, #36	; 0x24
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f840 	bl	8007d6c <xTaskRemoveFromEventList>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00e      	beq.n	8006d10 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e007      	b.n	8006d10 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d04:	3301      	adds	r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	b25a      	sxtb	r2, r3
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d10:	2301      	movs	r3, #1
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34
 8006d14:	e001      	b.n	8006d1a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3738      	adds	r7, #56	; 0x38
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08c      	sub	sp, #48	; 0x30
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <xQueueReceive+0x2e>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	623b      	str	r3, [r7, #32]
 8006d5c:	e7fe      	b.n	8006d5c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <xQueueReceive+0x3c>
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <xQueueReceive+0x40>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <xQueueReceive+0x42>
 8006d70:	2300      	movs	r3, #0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d109      	bne.n	8006d8a <xQueueReceive+0x5a>
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	e7fe      	b.n	8006d88 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d8a:	f001 f9a9 	bl	80080e0 <xTaskGetSchedulerState>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d102      	bne.n	8006d9a <xQueueReceive+0x6a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <xQueueReceive+0x6e>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <xQueueReceive+0x70>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d109      	bne.n	8006db8 <xQueueReceive+0x88>
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	e7fe      	b.n	8006db6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db8:	f002 f83e 	bl	8008e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01f      	beq.n	8006e08 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dcc:	f000 fa92 	bl	80072f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	1e5a      	subs	r2, r3, #1
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00f      	beq.n	8006e00 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	3310      	adds	r3, #16
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 ffc1 	bl	8007d6c <xTaskRemoveFromEventList>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006df0:	4b3c      	ldr	r3, [pc, #240]	; (8006ee4 <xQueueReceive+0x1b4>)
 8006df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e00:	f002 f848 	bl	8008e94 <vPortExitCritical>
				return pdPASS;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e069      	b.n	8006edc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e0e:	f002 f841 	bl	8008e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e12:	2300      	movs	r3, #0
 8006e14:	e062      	b.n	8006edc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e1c:	f107 0310 	add.w	r3, r7, #16
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f805 	bl	8007e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e26:	2301      	movs	r3, #1
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e2a:	f002 f833 	bl	8008e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e2e:	f000 fd81 	bl	8007934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e32:	f002 f801 	bl	8008e38 <vPortEnterCritical>
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e3c:	b25b      	sxtb	r3, r3
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e42:	d103      	bne.n	8006e4c <xQueueReceive+0x11c>
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e52:	b25b      	sxtb	r3, r3
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e58:	d103      	bne.n	8006e62 <xQueueReceive+0x132>
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e62:	f002 f817 	bl	8008e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e66:	1d3a      	adds	r2, r7, #4
 8006e68:	f107 0310 	add.w	r3, r7, #16
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fff4 	bl	8007e5c <xTaskCheckForTimeOut>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d123      	bne.n	8006ec2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e7c:	f000 fab2 	bl	80073e4 <prvIsQueueEmpty>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d017      	beq.n	8006eb6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	3324      	adds	r3, #36	; 0x24
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 ff1e 	bl	8007cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e96:	f000 fa53 	bl	8007340 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e9a:	f000 fd59 	bl	8007950 <xTaskResumeAll>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d189      	bne.n	8006db8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <xQueueReceive+0x1b4>)
 8006ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	e780      	b.n	8006db8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb8:	f000 fa42 	bl	8007340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ebc:	f000 fd48 	bl	8007950 <xTaskResumeAll>
 8006ec0:	e77a      	b.n	8006db8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec4:	f000 fa3c 	bl	8007340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ec8:	f000 fd42 	bl	8007950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ece:	f000 fa89 	bl	80073e4 <prvIsQueueEmpty>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f43f af6f 	beq.w	8006db8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006eda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3730      	adds	r7, #48	; 0x30
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	e000ed04 	.word	0xe000ed04

08006ee8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08e      	sub	sp, #56	; 0x38
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006efa:	2300      	movs	r3, #0
 8006efc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <xQueueSemaphoreTake+0x30>
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	623b      	str	r3, [r7, #32]
 8006f16:	e7fe      	b.n	8006f16 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d009      	beq.n	8006f34 <xQueueSemaphoreTake+0x4c>
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	e7fe      	b.n	8006f32 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f34:	f001 f8d4 	bl	80080e0 <xTaskGetSchedulerState>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <xQueueSemaphoreTake+0x5c>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <xQueueSemaphoreTake+0x60>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <xQueueSemaphoreTake+0x62>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <xQueueSemaphoreTake+0x7a>
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	e7fe      	b.n	8006f60 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f62:	f001 ff69 	bl	8008e38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d024      	beq.n	8006fbc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	1e5a      	subs	r2, r3, #1
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d104      	bne.n	8006f8c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006f82:	f001 fa73 	bl	800846c <pvTaskIncrementMutexHeldCount>
 8006f86:	4602      	mov	r2, r0
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00f      	beq.n	8006fb4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	3310      	adds	r3, #16
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fee7 	bl	8007d6c <xTaskRemoveFromEventList>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fa4:	4b53      	ldr	r3, [pc, #332]	; (80070f4 <xQueueSemaphoreTake+0x20c>)
 8006fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fb4:	f001 ff6e 	bl	8008e94 <vPortExitCritical>
				return pdPASS;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e096      	b.n	80070ea <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d110      	bne.n	8006fe4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <xQueueSemaphoreTake+0xf4>
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	e7fe      	b.n	8006fda <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fdc:	f001 ff5a 	bl	8008e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e082      	b.n	80070ea <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fea:	f107 030c 	add.w	r3, r7, #12
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 ff1e 	bl	8007e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ff8:	f001 ff4c 	bl	8008e94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ffc:	f000 fc9a 	bl	8007934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007000:	f001 ff1a 	bl	8008e38 <vPortEnterCritical>
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800700a:	b25b      	sxtb	r3, r3
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007010:	d103      	bne.n	800701a <xQueueSemaphoreTake+0x132>
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007020:	b25b      	sxtb	r3, r3
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007026:	d103      	bne.n	8007030 <xQueueSemaphoreTake+0x148>
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007030:	f001 ff30 	bl	8008e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007034:	463a      	mov	r2, r7
 8007036:	f107 030c 	add.w	r3, r7, #12
 800703a:	4611      	mov	r1, r2
 800703c:	4618      	mov	r0, r3
 800703e:	f000 ff0d 	bl	8007e5c <xTaskCheckForTimeOut>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d132      	bne.n	80070ae <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800704a:	f000 f9cb 	bl	80073e4 <prvIsQueueEmpty>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d026      	beq.n	80070a2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800705c:	f001 feec 	bl	8008e38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f859 	bl	800811c <xTaskPriorityInherit>
 800706a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800706c:	f001 ff12 	bl	8008e94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	3324      	adds	r3, #36	; 0x24
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	4611      	mov	r1, r2
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fe29 	bl	8007cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800707e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007080:	f000 f95e 	bl	8007340 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007084:	f000 fc64 	bl	8007950 <xTaskResumeAll>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f47f af69 	bne.w	8006f62 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007090:	4b18      	ldr	r3, [pc, #96]	; (80070f4 <xQueueSemaphoreTake+0x20c>)
 8007092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	e75f      	b.n	8006f62 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a4:	f000 f94c 	bl	8007340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070a8:	f000 fc52 	bl	8007950 <xTaskResumeAll>
 80070ac:	e759      	b.n	8006f62 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070b0:	f000 f946 	bl	8007340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070b4:	f000 fc4c 	bl	8007950 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ba:	f000 f993 	bl	80073e4 <prvIsQueueEmpty>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f43f af4e 	beq.w	8006f62 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00d      	beq.n	80070e8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80070cc:	f001 feb4 	bl	8008e38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070d2:	f000 f88e 	bl	80071f2 <prvGetDisinheritPriorityAfterTimeout>
 80070d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070de:	4618      	mov	r0, r3
 80070e0:	f001 f926 	bl	8008330 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070e4:	f001 fed6 	bl	8008e94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3738      	adds	r7, #56	; 0x38
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08e      	sub	sp, #56	; 0x38
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <xQueueReceiveFromISR+0x2a>
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	623b      	str	r3, [r7, #32]
 8007120:	e7fe      	b.n	8007120 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <xQueueReceiveFromISR+0x38>
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <xQueueReceiveFromISR+0x3c>
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <xQueueReceiveFromISR+0x3e>
 8007134:	2300      	movs	r3, #0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <xQueueReceiveFromISR+0x56>
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	e7fe      	b.n	800714c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800714e:	f001 ff2d 	bl	8008fac <vPortValidateInterruptPriority>
	__asm volatile
 8007152:	f3ef 8211 	mrs	r2, BASEPRI
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	61ba      	str	r2, [r7, #24]
 8007168:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800716a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02f      	beq.n	80071da <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007188:	f000 f8b4 	bl	80072f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	1e5a      	subs	r2, r3, #1
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800719c:	d112      	bne.n	80071c4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d016      	beq.n	80071d4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	3310      	adds	r3, #16
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fdde 	bl	8007d6c <xTaskRemoveFromEventList>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00e      	beq.n	80071d4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e007      	b.n	80071d4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c8:	3301      	adds	r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	b25a      	sxtb	r2, r3
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80071d4:	2301      	movs	r3, #1
 80071d6:	637b      	str	r3, [r7, #52]	; 0x34
 80071d8:	e001      	b.n	80071de <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80071da:	2300      	movs	r3, #0
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3738      	adds	r7, #56	; 0x38
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80071f2:	b480      	push	{r7}
 80071f4:	b085      	sub	sp, #20
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d006      	beq.n	8007210 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f1c3 0307 	rsb	r3, r3, #7
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	e001      	b.n	8007214 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007214:	68fb      	ldr	r3, [r7, #12]
	}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	bc80      	pop	{r7}
 800721e:	4770      	bx	lr

08007220 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10d      	bne.n	800725a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d14d      	bne.n	80072e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 ffec 	bl	8008228 <xTaskPriorityDisinherit>
 8007250:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	605a      	str	r2, [r3, #4]
 8007258:	e043      	b.n	80072e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d119      	bne.n	8007294 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6898      	ldr	r0, [r3, #8]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	461a      	mov	r2, r3
 800726a:	68b9      	ldr	r1, [r7, #8]
 800726c:	f002 f8dc 	bl	8009428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	441a      	add	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d32b      	bcc.n	80072e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	609a      	str	r2, [r3, #8]
 8007292:	e026      	b.n	80072e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68d8      	ldr	r0, [r3, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	461a      	mov	r2, r3
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	f002 f8c2 	bl	8009428 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	425b      	negs	r3, r3
 80072ae:	441a      	add	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d207      	bcs.n	80072d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	425b      	negs	r3, r3
 80072ca:	441a      	add	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d105      	bne.n	80072e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3b01      	subs	r3, #1
 80072e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072ea:	697b      	ldr	r3, [r7, #20]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d018      	beq.n	8007338 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	441a      	add	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d303      	bcc.n	8007328 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68d9      	ldr	r1, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	461a      	mov	r2, r3
 8007332:	6838      	ldr	r0, [r7, #0]
 8007334:	f002 f878 	bl	8009428 <memcpy>
	}
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007348:	f001 fd76 	bl	8008e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007352:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007354:	e011      	b.n	800737a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	d012      	beq.n	8007384 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3324      	adds	r3, #36	; 0x24
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fd02 	bl	8007d6c <xTaskRemoveFromEventList>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800736e:	f000 fdd5 	bl	8007f1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	3b01      	subs	r3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800737a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dce9      	bgt.n	8007356 <prvUnlockQueue+0x16>
 8007382:	e000      	b.n	8007386 <prvUnlockQueue+0x46>
					break;
 8007384:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	22ff      	movs	r2, #255	; 0xff
 800738a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800738e:	f001 fd81 	bl	8008e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007392:	f001 fd51 	bl	8008e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800739c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800739e:	e011      	b.n	80073c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d012      	beq.n	80073ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3310      	adds	r3, #16
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fcdd 	bl	8007d6c <xTaskRemoveFromEventList>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073b8:	f000 fdb0 	bl	8007f1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	3b01      	subs	r3, #1
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dce9      	bgt.n	80073a0 <prvUnlockQueue+0x60>
 80073cc:	e000      	b.n	80073d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	22ff      	movs	r2, #255	; 0xff
 80073d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073d8:	f001 fd5c 	bl	8008e94 <vPortExitCritical>
}
 80073dc:	bf00      	nop
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073ec:	f001 fd24 	bl	8008e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073f8:	2301      	movs	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e001      	b.n	8007402 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007402:	f001 fd47 	bl	8008e94 <vPortExitCritical>

	return xReturn;
 8007406:	68fb      	ldr	r3, [r7, #12]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007418:	f001 fd0e 	bl	8008e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	429a      	cmp	r2, r3
 8007426:	d102      	bne.n	800742e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007428:	2301      	movs	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e001      	b.n	8007432 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007432:	f001 fd2f 	bl	8008e94 <vPortExitCritical>

	return xReturn;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	e014      	b.n	800747a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007450:	4a0e      	ldr	r2, [pc, #56]	; (800748c <vQueueAddToRegistry+0x4c>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800745c:	490b      	ldr	r1, [pc, #44]	; (800748c <vQueueAddToRegistry+0x4c>)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007466:	4a09      	ldr	r2, [pc, #36]	; (800748c <vQueueAddToRegistry+0x4c>)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	4413      	add	r3, r2
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007472:	e005      	b.n	8007480 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b07      	cmp	r3, #7
 800747e:	d9e7      	bls.n	8007450 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	bc80      	pop	{r7}
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	20001eb8 	.word	0x20001eb8

08007490 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074a0:	f001 fcca 	bl	8008e38 <vPortEnterCritical>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074aa:	b25b      	sxtb	r3, r3
 80074ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b0:	d103      	bne.n	80074ba <vQueueWaitForMessageRestricted+0x2a>
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074c0:	b25b      	sxtb	r3, r3
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c6:	d103      	bne.n	80074d0 <vQueueWaitForMessageRestricted+0x40>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074d0:	f001 fce0 	bl	8008e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	3324      	adds	r3, #36	; 0x24
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fc17 	bl	8007d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074ea:	6978      	ldr	r0, [r7, #20]
 80074ec:	f7ff ff28 	bl	8007340 <prvUnlockQueue>
	}
 80074f0:	bf00      	nop
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08e      	sub	sp, #56	; 0x38
 80074fc:	af04      	add	r7, sp, #16
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <xTaskCreateStatic+0x28>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	623b      	str	r3, [r7, #32]
 800751e:	e7fe      	b.n	800751e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <xTaskCreateStatic+0x42>
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e7fe      	b.n	8007538 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800753a:	2354      	movs	r3, #84	; 0x54
 800753c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b54      	cmp	r3, #84	; 0x54
 8007542:	d009      	beq.n	8007558 <xTaskCreateStatic+0x60>
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	e7fe      	b.n	8007556 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01e      	beq.n	800759c <xTaskCreateStatic+0xa4>
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01b      	beq.n	800759c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800756c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	2202      	movs	r2, #2
 8007572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007576:	2300      	movs	r3, #0
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	9302      	str	r3, [sp, #8]
 800757e:	f107 0314 	add.w	r3, r7, #20
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f850 	bl	8007634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007596:	f000 f8cb 	bl	8007730 <prvAddNewTaskToReadyList>
 800759a:	e001      	b.n	80075a0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075a0:	697b      	ldr	r3, [r7, #20]
	}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3728      	adds	r7, #40	; 0x28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b08c      	sub	sp, #48	; 0x30
 80075ae:	af04      	add	r7, sp, #16
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fd30 	bl	8009024 <pvPortMalloc>
 80075c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00e      	beq.n	80075ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80075cc:	2054      	movs	r0, #84	; 0x54
 80075ce:	f001 fd29 	bl	8009024 <pvPortMalloc>
 80075d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
 80075e0:	e005      	b.n	80075ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075e2:	6978      	ldr	r0, [r7, #20]
 80075e4:	f001 fde0 	bl	80091a8 <vPortFree>
 80075e8:	e001      	b.n	80075ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d017      	beq.n	8007624 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	2300      	movs	r3, #0
 8007600:	9303      	str	r3, [sp, #12]
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	9302      	str	r3, [sp, #8]
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f80e 	bl	8007634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007618:	69f8      	ldr	r0, [r7, #28]
 800761a:	f000 f889 	bl	8007730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800761e:	2301      	movs	r3, #1
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	e002      	b.n	800762a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007628:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800762a:	69bb      	ldr	r3, [r7, #24]
	}
 800762c:	4618      	mov	r0, r3
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800764c:	3b01      	subs	r3, #1
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f023 0307 	bic.w	r3, r3, #7
 800765a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <prvInitialiseNewTask+0x46>
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e7fe      	b.n	8007678 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]
 800767e:	e012      	b.n	80076a6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	7819      	ldrb	r1, [r3, #0]
 8007688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	4413      	add	r3, r2
 800768e:	3334      	adds	r3, #52	; 0x34
 8007690:	460a      	mov	r2, r1
 8007692:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d006      	beq.n	80076ae <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	3301      	adds	r3, #1
 80076a4:	61fb      	str	r3, [r7, #28]
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	2b0f      	cmp	r3, #15
 80076aa:	d9e9      	bls.n	8007680 <prvInitialiseNewTask+0x4c>
 80076ac:	e000      	b.n	80076b0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80076ae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2b06      	cmp	r3, #6
 80076bc:	d901      	bls.n	80076c2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076be:	2306      	movs	r3, #6
 80076c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	2200      	movs	r2, #0
 80076d2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	3304      	adds	r3, #4
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe ff4a 	bl	8006572 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	3318      	adds	r3, #24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe ff45 	bl	8006572 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	f1c3 0207 	rsb	r2, r3, #7
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	2200      	movs	r2, #0
 8007702:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	69b8      	ldr	r0, [r7, #24]
 8007712:	f001 faa3 	bl	8008c5c <pxPortInitialiseStack>
 8007716:	4602      	mov	r2, r0
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007726:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007728:	bf00      	nop
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007738:	f001 fb7e 	bl	8008e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800773c:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <prvAddNewTaskToReadyList+0xb8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	4a29      	ldr	r2, [pc, #164]	; (80077e8 <prvAddNewTaskToReadyList+0xb8>)
 8007744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007746:	4b29      	ldr	r3, [pc, #164]	; (80077ec <prvAddNewTaskToReadyList+0xbc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800774e:	4a27      	ldr	r2, [pc, #156]	; (80077ec <prvAddNewTaskToReadyList+0xbc>)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <prvAddNewTaskToReadyList+0xb8>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d110      	bne.n	800777e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800775c:	f000 fc02 	bl	8007f64 <prvInitialiseTaskLists>
 8007760:	e00d      	b.n	800777e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007762:	4b23      	ldr	r3, [pc, #140]	; (80077f0 <prvAddNewTaskToReadyList+0xc0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800776a:	4b20      	ldr	r3, [pc, #128]	; (80077ec <prvAddNewTaskToReadyList+0xbc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	429a      	cmp	r2, r3
 8007776:	d802      	bhi.n	800777e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007778:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <prvAddNewTaskToReadyList+0xbc>)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800777e:	4b1d      	ldr	r3, [pc, #116]	; (80077f4 <prvAddNewTaskToReadyList+0xc4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	4a1b      	ldr	r2, [pc, #108]	; (80077f4 <prvAddNewTaskToReadyList+0xc4>)
 8007786:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	2201      	movs	r2, #1
 800778e:	409a      	lsls	r2, r3
 8007790:	4b19      	ldr	r3, [pc, #100]	; (80077f8 <prvAddNewTaskToReadyList+0xc8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4313      	orrs	r3, r2
 8007796:	4a18      	ldr	r2, [pc, #96]	; (80077f8 <prvAddNewTaskToReadyList+0xc8>)
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4a15      	ldr	r2, [pc, #84]	; (80077fc <prvAddNewTaskToReadyList+0xcc>)
 80077a8:	441a      	add	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7fe feea 	bl	800658a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077b6:	f001 fb6d 	bl	8008e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077ba:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <prvAddNewTaskToReadyList+0xc0>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00e      	beq.n	80077e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077c2:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <prvAddNewTaskToReadyList+0xbc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d207      	bcs.n	80077e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077d0:	4b0b      	ldr	r3, [pc, #44]	; (8007800 <prvAddNewTaskToReadyList+0xd0>)
 80077d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000a10 	.word	0x20000a10
 80077ec:	20000910 	.word	0x20000910
 80077f0:	20000a1c 	.word	0x20000a1c
 80077f4:	20000a2c 	.word	0x20000a2c
 80077f8:	20000a18 	.word	0x20000a18
 80077fc:	20000914 	.word	0x20000914
 8007800:	e000ed04 	.word	0xe000ed04

08007804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d016      	beq.n	8007844 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007816:	4b13      	ldr	r3, [pc, #76]	; (8007864 <vTaskDelay+0x60>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d009      	beq.n	8007832 <vTaskDelay+0x2e>
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	60bb      	str	r3, [r7, #8]
 8007830:	e7fe      	b.n	8007830 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007832:	f000 f87f 	bl	8007934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007836:	2100      	movs	r1, #0
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fe2b 	bl	8008494 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800783e:	f000 f887 	bl	8007950 <xTaskResumeAll>
 8007842:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d107      	bne.n	800785a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <vTaskDelay+0x64>)
 800784c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000a38 	.word	0x20000a38
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007872:	2300      	movs	r3, #0
 8007874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800787a:	463a      	mov	r2, r7
 800787c:	1d39      	adds	r1, r7, #4
 800787e:	f107 0308 	add.w	r3, r7, #8
 8007882:	4618      	mov	r0, r3
 8007884:	f7f9 f862 	bl	800094c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	9202      	str	r2, [sp, #8]
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	2300      	movs	r3, #0
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	2300      	movs	r3, #0
 8007898:	460a      	mov	r2, r1
 800789a:	4920      	ldr	r1, [pc, #128]	; (800791c <vTaskStartScheduler+0xb0>)
 800789c:	4820      	ldr	r0, [pc, #128]	; (8007920 <vTaskStartScheduler+0xb4>)
 800789e:	f7ff fe2b 	bl	80074f8 <xTaskCreateStatic>
 80078a2:	4602      	mov	r2, r0
 80078a4:	4b1f      	ldr	r3, [pc, #124]	; (8007924 <vTaskStartScheduler+0xb8>)
 80078a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078a8:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <vTaskStartScheduler+0xb8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078b0:	2301      	movs	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	e001      	b.n	80078ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d102      	bne.n	80078c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078c0:	f000 fe4e 	bl	8008560 <xTimerCreateTimerTask>
 80078c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d115      	bne.n	80078f8 <vTaskStartScheduler+0x8c>
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078de:	4b12      	ldr	r3, [pc, #72]	; (8007928 <vTaskStartScheduler+0xbc>)
 80078e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078e6:	4b11      	ldr	r3, [pc, #68]	; (800792c <vTaskStartScheduler+0xc0>)
 80078e8:	2201      	movs	r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80078ec:	4b10      	ldr	r3, [pc, #64]	; (8007930 <vTaskStartScheduler+0xc4>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078f2:	f001 fa31 	bl	8008d58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078f6:	e00d      	b.n	8007914 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078fe:	d109      	bne.n	8007914 <vTaskStartScheduler+0xa8>
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	e7fe      	b.n	8007912 <vTaskStartScheduler+0xa6>
}
 8007914:	bf00      	nop
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	08009eb8 	.word	0x08009eb8
 8007920:	08007f35 	.word	0x08007f35
 8007924:	20000a34 	.word	0x20000a34
 8007928:	20000a30 	.word	0x20000a30
 800792c:	20000a1c 	.word	0x20000a1c
 8007930:	20000a14 	.word	0x20000a14

08007934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <vTaskSuspendAll+0x18>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3301      	adds	r3, #1
 800793e:	4a03      	ldr	r2, [pc, #12]	; (800794c <vTaskSuspendAll+0x18>)
 8007940:	6013      	str	r3, [r2, #0]
}
 8007942:	bf00      	nop
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000a38 	.word	0x20000a38

08007950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800795e:	4b41      	ldr	r3, [pc, #260]	; (8007a64 <xTaskResumeAll+0x114>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <xTaskResumeAll+0x2a>
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	603b      	str	r3, [r7, #0]
 8007978:	e7fe      	b.n	8007978 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800797a:	f001 fa5d 	bl	8008e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800797e:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <xTaskResumeAll+0x114>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3b01      	subs	r3, #1
 8007984:	4a37      	ldr	r2, [pc, #220]	; (8007a64 <xTaskResumeAll+0x114>)
 8007986:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007988:	4b36      	ldr	r3, [pc, #216]	; (8007a64 <xTaskResumeAll+0x114>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d161      	bne.n	8007a54 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007990:	4b35      	ldr	r3, [pc, #212]	; (8007a68 <xTaskResumeAll+0x118>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d05d      	beq.n	8007a54 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007998:	e02e      	b.n	80079f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800799a:	4b34      	ldr	r3, [pc, #208]	; (8007a6c <xTaskResumeAll+0x11c>)
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3318      	adds	r3, #24
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fe4a 	bl	8006640 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fe fe45 	bl	8006640 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	2201      	movs	r2, #1
 80079bc:	409a      	lsls	r2, r3
 80079be:	4b2c      	ldr	r3, [pc, #176]	; (8007a70 <xTaskResumeAll+0x120>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	4a2a      	ldr	r2, [pc, #168]	; (8007a70 <xTaskResumeAll+0x120>)
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4a27      	ldr	r2, [pc, #156]	; (8007a74 <xTaskResumeAll+0x124>)
 80079d6:	441a      	add	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3304      	adds	r3, #4
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f7fe fdd3 	bl	800658a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	4b23      	ldr	r3, [pc, #140]	; (8007a78 <xTaskResumeAll+0x128>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80079f2:	4b22      	ldr	r3, [pc, #136]	; (8007a7c <xTaskResumeAll+0x12c>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f8:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <xTaskResumeAll+0x11c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1cc      	bne.n	800799a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a06:	f000 fb47 	bl	8008098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a0a:	4b1d      	ldr	r3, [pc, #116]	; (8007a80 <xTaskResumeAll+0x130>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d010      	beq.n	8007a38 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a16:	f000 f845 	bl	8007aa4 <xTaskIncrementTick>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007a20:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <xTaskResumeAll+0x12c>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f1      	bne.n	8007a16 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <xTaskResumeAll+0x130>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a38:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <xTaskResumeAll+0x12c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a40:	2301      	movs	r3, #1
 8007a42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a44:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <xTaskResumeAll+0x134>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a54:	f001 fa1e 	bl	8008e94 <vPortExitCritical>

	return xAlreadyYielded;
 8007a58:	68bb      	ldr	r3, [r7, #8]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000a38 	.word	0x20000a38
 8007a68:	20000a10 	.word	0x20000a10
 8007a6c:	200009d0 	.word	0x200009d0
 8007a70:	20000a18 	.word	0x20000a18
 8007a74:	20000914 	.word	0x20000914
 8007a78:	20000910 	.word	0x20000910
 8007a7c:	20000a24 	.word	0x20000a24
 8007a80:	20000a20 	.word	0x20000a20
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <xTaskGetTickCount+0x18>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a94:	687b      	ldr	r3, [r7, #4]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bc80      	pop	{r7}
 8007a9e:	4770      	bx	lr
 8007aa0:	20000a14 	.word	0x20000a14

08007aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aae:	4b50      	ldr	r3, [pc, #320]	; (8007bf0 <xTaskIncrementTick+0x14c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 808c 	bne.w	8007bd0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ab8:	4b4e      	ldr	r3, [pc, #312]	; (8007bf4 <xTaskIncrementTick+0x150>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ac0:	4a4c      	ldr	r2, [pc, #304]	; (8007bf4 <xTaskIncrementTick+0x150>)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d11f      	bne.n	8007b0c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007acc:	4b4a      	ldr	r3, [pc, #296]	; (8007bf8 <xTaskIncrementTick+0x154>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <xTaskIncrementTick+0x46>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	e7fe      	b.n	8007ae8 <xTaskIncrementTick+0x44>
 8007aea:	4b43      	ldr	r3, [pc, #268]	; (8007bf8 <xTaskIncrementTick+0x154>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	4b42      	ldr	r3, [pc, #264]	; (8007bfc <xTaskIncrementTick+0x158>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a40      	ldr	r2, [pc, #256]	; (8007bf8 <xTaskIncrementTick+0x154>)
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	4a40      	ldr	r2, [pc, #256]	; (8007bfc <xTaskIncrementTick+0x158>)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	4b40      	ldr	r3, [pc, #256]	; (8007c00 <xTaskIncrementTick+0x15c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a3e      	ldr	r2, [pc, #248]	; (8007c00 <xTaskIncrementTick+0x15c>)
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	f000 fac6 	bl	8008098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b0c:	4b3d      	ldr	r3, [pc, #244]	; (8007c04 <xTaskIncrementTick+0x160>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d34d      	bcc.n	8007bb2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b16:	4b38      	ldr	r3, [pc, #224]	; (8007bf8 <xTaskIncrementTick+0x154>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <xTaskIncrementTick+0x80>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e000      	b.n	8007b26 <xTaskIncrementTick+0x82>
 8007b24:	2300      	movs	r3, #0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2a:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <xTaskIncrementTick+0x160>)
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b30:	601a      	str	r2, [r3, #0]
					break;
 8007b32:	e03e      	b.n	8007bb2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b34:	4b30      	ldr	r3, [pc, #192]	; (8007bf8 <xTaskIncrementTick+0x154>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d203      	bcs.n	8007b54 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b4c:	4a2d      	ldr	r2, [pc, #180]	; (8007c04 <xTaskIncrementTick+0x160>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6013      	str	r3, [r2, #0]
						break;
 8007b52:	e02e      	b.n	8007bb2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fd71 	bl	8006640 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	3318      	adds	r3, #24
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe fd68 	bl	8006640 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	2201      	movs	r2, #1
 8007b76:	409a      	lsls	r2, r3
 8007b78:	4b23      	ldr	r3, [pc, #140]	; (8007c08 <xTaskIncrementTick+0x164>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <xTaskIncrementTick+0x164>)
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b86:	4613      	mov	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <xTaskIncrementTick+0x168>)
 8007b90:	441a      	add	r2, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	3304      	adds	r3, #4
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f7fe fcf6 	bl	800658a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba2:	4b1b      	ldr	r3, [pc, #108]	; (8007c10 <xTaskIncrementTick+0x16c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d3b4      	bcc.n	8007b16 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007bac:	2301      	movs	r3, #1
 8007bae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bb0:	e7b1      	b.n	8007b16 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bb2:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <xTaskIncrementTick+0x16c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	4914      	ldr	r1, [pc, #80]	; (8007c0c <xTaskIncrementTick+0x168>)
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d907      	bls.n	8007bda <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	e004      	b.n	8007bda <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007bd0:	4b10      	ldr	r3, [pc, #64]	; (8007c14 <xTaskIncrementTick+0x170>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	4a0f      	ldr	r2, [pc, #60]	; (8007c14 <xTaskIncrementTick+0x170>)
 8007bd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <xTaskIncrementTick+0x174>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007be2:	2301      	movs	r3, #1
 8007be4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007be6:	697b      	ldr	r3, [r7, #20]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000a38 	.word	0x20000a38
 8007bf4:	20000a14 	.word	0x20000a14
 8007bf8:	200009c8 	.word	0x200009c8
 8007bfc:	200009cc 	.word	0x200009cc
 8007c00:	20000a28 	.word	0x20000a28
 8007c04:	20000a30 	.word	0x20000a30
 8007c08:	20000a18 	.word	0x20000a18
 8007c0c:	20000914 	.word	0x20000914
 8007c10:	20000910 	.word	0x20000910
 8007c14:	20000a20 	.word	0x20000a20
 8007c18:	20000a24 	.word	0x20000a24

08007c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c22:	4b26      	ldr	r3, [pc, #152]	; (8007cbc <vTaskSwitchContext+0xa0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c2a:	4b25      	ldr	r3, [pc, #148]	; (8007cc0 <vTaskSwitchContext+0xa4>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c30:	e03e      	b.n	8007cb0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007c32:	4b23      	ldr	r3, [pc, #140]	; (8007cc0 <vTaskSwitchContext+0xa4>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007c38:	4b22      	ldr	r3, [pc, #136]	; (8007cc4 <vTaskSwitchContext+0xa8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	fab3 f383 	clz	r3, r3
 8007c44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	f1c3 031f 	rsb	r3, r3, #31
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	491e      	ldr	r1, [pc, #120]	; (8007cc8 <vTaskSwitchContext+0xac>)
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	607b      	str	r3, [r7, #4]
 8007c74:	e7fe      	b.n	8007c74 <vTaskSwitchContext+0x58>
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <vTaskSwitchContext+0xac>)
 8007c82:	4413      	add	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	605a      	str	r2, [r3, #4]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	3308      	adds	r3, #8
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d104      	bne.n	8007ca6 <vTaskSwitchContext+0x8a>
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	4a07      	ldr	r2, [pc, #28]	; (8007ccc <vTaskSwitchContext+0xb0>)
 8007cae:	6013      	str	r3, [r2, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	20000a38 	.word	0x20000a38
 8007cc0:	20000a24 	.word	0x20000a24
 8007cc4:	20000a18 	.word	0x20000a18
 8007cc8:	20000914 	.word	0x20000914
 8007ccc:	20000910 	.word	0x20000910

08007cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <vTaskPlaceOnEventList+0x24>
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	e7fe      	b.n	8007cf2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cf4:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <vTaskPlaceOnEventList+0x44>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3318      	adds	r3, #24
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fe fc67 	bl	80065d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d02:	2101      	movs	r1, #1
 8007d04:	6838      	ldr	r0, [r7, #0]
 8007d06:	f000 fbc5 	bl	8008494 <prvAddCurrentTaskToDelayedList>
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000910 	.word	0x20000910

08007d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <vTaskPlaceOnEventListRestricted+0x26>
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e7fe      	b.n	8007d3c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <vTaskPlaceOnEventListRestricted+0x50>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3318      	adds	r3, #24
 8007d44:	4619      	mov	r1, r3
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7fe fc1f 	bl	800658a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	68b8      	ldr	r0, [r7, #8]
 8007d5c:	f000 fb9a 	bl	8008494 <prvAddCurrentTaskToDelayedList>
	}
 8007d60:	bf00      	nop
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20000910 	.word	0x20000910

08007d6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <xTaskRemoveFromEventList+0x2a>
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e7fe      	b.n	8007d94 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	3318      	adds	r3, #24
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fc50 	bl	8006640 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007da0:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <xTaskRemoveFromEventList+0xac>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11c      	bne.n	8007de2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe fc47 	bl	8006640 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	2201      	movs	r2, #1
 8007db8:	409a      	lsls	r2, r3
 8007dba:	4b18      	ldr	r3, [pc, #96]	; (8007e1c <xTaskRemoveFromEventList+0xb0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	4a16      	ldr	r2, [pc, #88]	; (8007e1c <xTaskRemoveFromEventList+0xb0>)
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4a13      	ldr	r2, [pc, #76]	; (8007e20 <xTaskRemoveFromEventList+0xb4>)
 8007dd2:	441a      	add	r2, r3
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f7fe fbd5 	bl	800658a <vListInsertEnd>
 8007de0:	e005      	b.n	8007dee <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	3318      	adds	r3, #24
 8007de6:	4619      	mov	r1, r3
 8007de8:	480e      	ldr	r0, [pc, #56]	; (8007e24 <xTaskRemoveFromEventList+0xb8>)
 8007dea:	f7fe fbce 	bl	800658a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df2:	4b0d      	ldr	r3, [pc, #52]	; (8007e28 <xTaskRemoveFromEventList+0xbc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d905      	bls.n	8007e08 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <xTaskRemoveFromEventList+0xc0>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	e001      	b.n	8007e0c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007e0c:	697b      	ldr	r3, [r7, #20]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000a38 	.word	0x20000a38
 8007e1c:	20000a18 	.word	0x20000a18
 8007e20:	20000914 	.word	0x20000914
 8007e24:	200009d0 	.word	0x200009d0
 8007e28:	20000910 	.word	0x20000910
 8007e2c:	20000a24 	.word	0x20000a24

08007e30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <vTaskInternalSetTimeOutState+0x24>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <vTaskInternalSetTimeOutState+0x28>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	605a      	str	r2, [r3, #4]
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20000a28 	.word	0x20000a28
 8007e58:	20000a14 	.word	0x20000a14

08007e5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d109      	bne.n	8007e80 <xTaskCheckForTimeOut+0x24>
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	e7fe      	b.n	8007e7e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <xTaskCheckForTimeOut+0x3e>
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	e7fe      	b.n	8007e98 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007e9a:	f000 ffcd 	bl	8008e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e9e:	4b1d      	ldr	r3, [pc, #116]	; (8007f14 <xTaskCheckForTimeOut+0xb8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eb6:	d102      	bne.n	8007ebe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	e023      	b.n	8007f06 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <xTaskCheckForTimeOut+0xbc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d007      	beq.n	8007eda <xTaskCheckForTimeOut+0x7e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d302      	bcc.n	8007eda <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	e015      	b.n	8007f06 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d20b      	bcs.n	8007efc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	1ad2      	subs	r2, r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff ff9d 	bl	8007e30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61fb      	str	r3, [r7, #28]
 8007efa:	e004      	b.n	8007f06 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f02:	2301      	movs	r3, #1
 8007f04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f06:	f000 ffc5 	bl	8008e94 <vPortExitCritical>

	return xReturn;
 8007f0a:	69fb      	ldr	r3, [r7, #28]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000a14 	.word	0x20000a14
 8007f18:	20000a28 	.word	0x20000a28

08007f1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f20:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <vTaskMissedYield+0x14>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
}
 8007f26:	bf00      	nop
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20000a24 	.word	0x20000a24

08007f34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f3c:	f000 f852 	bl	8007fe4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f40:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <prvIdleTask+0x28>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d9f9      	bls.n	8007f3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <prvIdleTask+0x2c>)
 8007f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f58:	e7f0      	b.n	8007f3c <prvIdleTask+0x8>
 8007f5a:	bf00      	nop
 8007f5c:	20000914 	.word	0x20000914
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	e00c      	b.n	8007f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4a12      	ldr	r2, [pc, #72]	; (8007fc4 <prvInitialiseTaskLists+0x60>)
 8007f7c:	4413      	add	r3, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fad8 	bl	8006534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3301      	adds	r3, #1
 8007f88:	607b      	str	r3, [r7, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b06      	cmp	r3, #6
 8007f8e:	d9ef      	bls.n	8007f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f90:	480d      	ldr	r0, [pc, #52]	; (8007fc8 <prvInitialiseTaskLists+0x64>)
 8007f92:	f7fe facf 	bl	8006534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f96:	480d      	ldr	r0, [pc, #52]	; (8007fcc <prvInitialiseTaskLists+0x68>)
 8007f98:	f7fe facc 	bl	8006534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f9c:	480c      	ldr	r0, [pc, #48]	; (8007fd0 <prvInitialiseTaskLists+0x6c>)
 8007f9e:	f7fe fac9 	bl	8006534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fa2:	480c      	ldr	r0, [pc, #48]	; (8007fd4 <prvInitialiseTaskLists+0x70>)
 8007fa4:	f7fe fac6 	bl	8006534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fa8:	480b      	ldr	r0, [pc, #44]	; (8007fd8 <prvInitialiseTaskLists+0x74>)
 8007faa:	f7fe fac3 	bl	8006534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fae:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <prvInitialiseTaskLists+0x78>)
 8007fb0:	4a05      	ldr	r2, [pc, #20]	; (8007fc8 <prvInitialiseTaskLists+0x64>)
 8007fb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fb4:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <prvInitialiseTaskLists+0x7c>)
 8007fb6:	4a05      	ldr	r2, [pc, #20]	; (8007fcc <prvInitialiseTaskLists+0x68>)
 8007fb8:	601a      	str	r2, [r3, #0]
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000914 	.word	0x20000914
 8007fc8:	200009a0 	.word	0x200009a0
 8007fcc:	200009b4 	.word	0x200009b4
 8007fd0:	200009d0 	.word	0x200009d0
 8007fd4:	200009e4 	.word	0x200009e4
 8007fd8:	200009fc 	.word	0x200009fc
 8007fdc:	200009c8 	.word	0x200009c8
 8007fe0:	200009cc 	.word	0x200009cc

08007fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fea:	e019      	b.n	8008020 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fec:	f000 ff24 	bl	8008e38 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <prvCheckTasksWaitingTermination+0x4c>)
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fe fb1f 	bl	8006640 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008002:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <prvCheckTasksWaitingTermination+0x50>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3b01      	subs	r3, #1
 8008008:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <prvCheckTasksWaitingTermination+0x50>)
 800800a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <prvCheckTasksWaitingTermination+0x54>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3b01      	subs	r3, #1
 8008012:	4a09      	ldr	r2, [pc, #36]	; (8008038 <prvCheckTasksWaitingTermination+0x54>)
 8008014:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008016:	f000 ff3d 	bl	8008e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f80e 	bl	800803c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <prvCheckTasksWaitingTermination+0x54>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e1      	bne.n	8007fec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	200009e4 	.word	0x200009e4
 8008034:	20000a10 	.word	0x20000a10
 8008038:	200009f8 	.word	0x200009f8

0800803c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800804a:	2b00      	cmp	r3, #0
 800804c:	d108      	bne.n	8008060 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008052:	4618      	mov	r0, r3
 8008054:	f001 f8a8 	bl	80091a8 <vPortFree>
				vPortFree( pxTCB );
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f001 f8a5 	bl	80091a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800805e:	e017      	b.n	8008090 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008066:	2b01      	cmp	r3, #1
 8008068:	d103      	bne.n	8008072 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 f89c 	bl	80091a8 <vPortFree>
	}
 8008070:	e00e      	b.n	8008090 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008078:	2b02      	cmp	r3, #2
 800807a:	d009      	beq.n	8008090 <prvDeleteTCB+0x54>
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	e7fe      	b.n	800808e <prvDeleteTCB+0x52>
	}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800809e:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <prvResetNextTaskUnblockTime+0x40>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <prvResetNextTaskUnblockTime+0x14>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <prvResetNextTaskUnblockTime+0x16>
 80080ac:	2300      	movs	r3, #0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d004      	beq.n	80080bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080b2:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <prvResetNextTaskUnblockTime+0x44>)
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080ba:	e008      	b.n	80080ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80080bc:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <prvResetNextTaskUnblockTime+0x40>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	4a04      	ldr	r2, [pc, #16]	; (80080dc <prvResetNextTaskUnblockTime+0x44>)
 80080cc:	6013      	str	r3, [r2, #0]
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bc80      	pop	{r7}
 80080d6:	4770      	bx	lr
 80080d8:	200009c8 	.word	0x200009c8
 80080dc:	20000a30 	.word	0x20000a30

080080e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <xTaskGetSchedulerState+0x34>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080ee:	2301      	movs	r3, #1
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	e008      	b.n	8008106 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <xTaskGetSchedulerState+0x38>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080fc:	2302      	movs	r3, #2
 80080fe:	607b      	str	r3, [r7, #4]
 8008100:	e001      	b.n	8008106 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008102:	2300      	movs	r3, #0
 8008104:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008106:	687b      	ldr	r3, [r7, #4]
	}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000a1c 	.word	0x20000a1c
 8008118:	20000a38 	.word	0x20000a38

0800811c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d06e      	beq.n	8008210 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008136:	4b39      	ldr	r3, [pc, #228]	; (800821c <xTaskPriorityInherit+0x100>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	429a      	cmp	r2, r3
 800813e:	d25e      	bcs.n	80081fe <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db06      	blt.n	8008156 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008148:	4b34      	ldr	r3, [pc, #208]	; (800821c <xTaskPriorityInherit+0x100>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	f1c3 0207 	rsb	r2, r3, #7
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6959      	ldr	r1, [r3, #20]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4a2e      	ldr	r2, [pc, #184]	; (8008220 <xTaskPriorityInherit+0x104>)
 8008168:	4413      	add	r3, r2
 800816a:	4299      	cmp	r1, r3
 800816c:	d101      	bne.n	8008172 <xTaskPriorityInherit+0x56>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <xTaskPriorityInherit+0x58>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d03a      	beq.n	80081ee <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	3304      	adds	r3, #4
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe fa5f 	bl	8006640 <uxListRemove>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d115      	bne.n	80081b4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818c:	4924      	ldr	r1, [pc, #144]	; (8008220 <xTaskPriorityInherit+0x104>)
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <xTaskPriorityInherit+0x98>
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	2201      	movs	r2, #1
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	43da      	mvns	r2, r3
 80081aa:	4b1e      	ldr	r3, [pc, #120]	; (8008224 <xTaskPriorityInherit+0x108>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4013      	ands	r3, r2
 80081b0:	4a1c      	ldr	r2, [pc, #112]	; (8008224 <xTaskPriorityInherit+0x108>)
 80081b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081b4:	4b19      	ldr	r3, [pc, #100]	; (800821c <xTaskPriorityInherit+0x100>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	2201      	movs	r2, #1
 80081c4:	409a      	lsls	r2, r3
 80081c6:	4b17      	ldr	r3, [pc, #92]	; (8008224 <xTaskPriorityInherit+0x108>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	4a15      	ldr	r2, [pc, #84]	; (8008224 <xTaskPriorityInherit+0x108>)
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d4:	4613      	mov	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4a10      	ldr	r2, [pc, #64]	; (8008220 <xTaskPriorityInherit+0x104>)
 80081de:	441a      	add	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4619      	mov	r1, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	f7fe f9cf 	bl	800658a <vListInsertEnd>
 80081ec:	e004      	b.n	80081f8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081ee:	4b0b      	ldr	r3, [pc, #44]	; (800821c <xTaskPriorityInherit+0x100>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e008      	b.n	8008210 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <xTaskPriorityInherit+0x100>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	429a      	cmp	r2, r3
 800820a:	d201      	bcs.n	8008210 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008210:	68fb      	ldr	r3, [r7, #12]
	}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000910 	.word	0x20000910
 8008220:	20000914 	.word	0x20000914
 8008224:	20000a18 	.word	0x20000a18

08008228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d06c      	beq.n	8008318 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800823e:	4b39      	ldr	r3, [pc, #228]	; (8008324 <xTaskPriorityDisinherit+0xfc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	429a      	cmp	r2, r3
 8008246:	d009      	beq.n	800825c <xTaskPriorityDisinherit+0x34>
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	e7fe      	b.n	800825a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <xTaskPriorityDisinherit+0x50>
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	e7fe      	b.n	8008276 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800827c:	1e5a      	subs	r2, r3, #1
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828a:	429a      	cmp	r2, r3
 800828c:	d044      	beq.n	8008318 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008292:	2b00      	cmp	r3, #0
 8008294:	d140      	bne.n	8008318 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	3304      	adds	r3, #4
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe f9d0 	bl	8006640 <uxListRemove>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d115      	bne.n	80082d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082aa:	491f      	ldr	r1, [pc, #124]	; (8008328 <xTaskPriorityDisinherit+0x100>)
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <xTaskPriorityDisinherit+0xaa>
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c0:	2201      	movs	r2, #1
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	43da      	mvns	r2, r3
 80082c8:	4b18      	ldr	r3, [pc, #96]	; (800832c <xTaskPriorityDisinherit+0x104>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4013      	ands	r3, r2
 80082ce:	4a17      	ldr	r2, [pc, #92]	; (800832c <xTaskPriorityDisinherit+0x104>)
 80082d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	f1c3 0207 	rsb	r2, r3, #7
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	2201      	movs	r2, #1
 80082ec:	409a      	lsls	r2, r3
 80082ee:	4b0f      	ldr	r3, [pc, #60]	; (800832c <xTaskPriorityDisinherit+0x104>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	4a0d      	ldr	r2, [pc, #52]	; (800832c <xTaskPriorityDisinherit+0x104>)
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4a08      	ldr	r2, [pc, #32]	; (8008328 <xTaskPriorityDisinherit+0x100>)
 8008306:	441a      	add	r2, r3
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fe f93b 	bl	800658a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008318:	697b      	ldr	r3, [r7, #20]
	}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000910 	.word	0x20000910
 8008328:	20000914 	.word	0x20000914
 800832c:	20000a18 	.word	0x20000a18

08008330 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800833e:	2301      	movs	r3, #1
 8008340:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8086 	beq.w	8008456 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e7fe      	b.n	8008364 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d902      	bls.n	8008376 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	61fb      	str	r3, [r7, #28]
 8008374:	e002      	b.n	800837c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	429a      	cmp	r2, r3
 8008384:	d067      	beq.n	8008456 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	429a      	cmp	r2, r3
 800838e:	d162      	bne.n	8008456 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008390:	4b33      	ldr	r3, [pc, #204]	; (8008460 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	429a      	cmp	r2, r3
 8008398:	d109      	bne.n	80083ae <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60bb      	str	r3, [r7, #8]
 80083ac:	e7fe      	b.n	80083ac <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	db04      	blt.n	80083cc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	f1c3 0207 	rsb	r2, r3, #7
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	6959      	ldr	r1, [r3, #20]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4a22      	ldr	r2, [pc, #136]	; (8008464 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80083dc:	4413      	add	r3, r2
 80083de:	4299      	cmp	r1, r3
 80083e0:	d101      	bne.n	80083e6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80083e6:	2300      	movs	r3, #0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d034      	beq.n	8008456 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe f925 	bl	8006640 <uxListRemove>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d115      	bne.n	8008428 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008400:	4918      	ldr	r1, [pc, #96]	; (8008464 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	2201      	movs	r2, #1
 8008418:	fa02 f303 	lsl.w	r3, r2, r3
 800841c:	43da      	mvns	r2, r3
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4013      	ands	r3, r2
 8008424:	4a10      	ldr	r2, [pc, #64]	; (8008468 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008426:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	2201      	movs	r2, #1
 800842e:	409a      	lsls	r2, r3
 8008430:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4313      	orrs	r3, r2
 8008436:	4a0c      	ldr	r2, [pc, #48]	; (8008468 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4a07      	ldr	r2, [pc, #28]	; (8008464 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008448:	441a      	add	r2, r3
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	3304      	adds	r3, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fe f89a 	bl	800658a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008456:	bf00      	nop
 8008458:	3720      	adds	r7, #32
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000910 	.word	0x20000910
 8008464:	20000914 	.word	0x20000914
 8008468:	20000a18 	.word	0x20000a18

0800846c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <pvTaskIncrementMutexHeldCount+0x24>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d004      	beq.n	8008482 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008478:	4b05      	ldr	r3, [pc, #20]	; (8008490 <pvTaskIncrementMutexHeldCount+0x24>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800847e:	3201      	adds	r2, #1
 8008480:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008482:	4b03      	ldr	r3, [pc, #12]	; (8008490 <pvTaskIncrementMutexHeldCount+0x24>)
 8008484:	681b      	ldr	r3, [r3, #0]
	}
 8008486:	4618      	mov	r0, r3
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20000910 	.word	0x20000910

08008494 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800849e:	4b29      	ldr	r3, [pc, #164]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb0>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a4:	4b28      	ldr	r3, [pc, #160]	; (8008548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3304      	adds	r3, #4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe f8c8 	bl	8006640 <uxListRemove>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80084b6:	4b24      	ldr	r3, [pc, #144]	; (8008548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	2201      	movs	r2, #1
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	43da      	mvns	r2, r3
 80084c4:	4b21      	ldr	r3, [pc, #132]	; (800854c <prvAddCurrentTaskToDelayedList+0xb8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4013      	ands	r3, r2
 80084ca:	4a20      	ldr	r2, [pc, #128]	; (800854c <prvAddCurrentTaskToDelayedList+0xb8>)
 80084cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084d4:	d10a      	bne.n	80084ec <prvAddCurrentTaskToDelayedList+0x58>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d007      	beq.n	80084ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084dc:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3304      	adds	r3, #4
 80084e2:	4619      	mov	r1, r3
 80084e4:	481a      	ldr	r0, [pc, #104]	; (8008550 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084e6:	f7fe f850 	bl	800658a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084ea:	e026      	b.n	800853a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084f4:	4b14      	ldr	r3, [pc, #80]	; (8008548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	429a      	cmp	r2, r3
 8008502:	d209      	bcs.n	8008518 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008504:	4b13      	ldr	r3, [pc, #76]	; (8008554 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3304      	adds	r3, #4
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f7fe f85d 	bl	80065d0 <vListInsert>
}
 8008516:	e010      	b.n	800853a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008518:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <prvAddCurrentTaskToDelayedList+0xc4>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3304      	adds	r3, #4
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f7fe f853 	bl	80065d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <prvAddCurrentTaskToDelayedList+0xc8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	429a      	cmp	r2, r3
 8008532:	d202      	bcs.n	800853a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008534:	4a09      	ldr	r2, [pc, #36]	; (800855c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6013      	str	r3, [r2, #0]
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000a14 	.word	0x20000a14
 8008548:	20000910 	.word	0x20000910
 800854c:	20000a18 	.word	0x20000a18
 8008550:	200009fc 	.word	0x200009fc
 8008554:	200009cc 	.word	0x200009cc
 8008558:	200009c8 	.word	0x200009c8
 800855c:	20000a30 	.word	0x20000a30

08008560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b08a      	sub	sp, #40	; 0x28
 8008564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800856a:	f000 fb37 	bl	8008bdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800856e:	4b1c      	ldr	r3, [pc, #112]	; (80085e0 <xTimerCreateTimerTask+0x80>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d021      	beq.n	80085ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800857e:	1d3a      	adds	r2, r7, #4
 8008580:	f107 0108 	add.w	r1, r7, #8
 8008584:	f107 030c 	add.w	r3, r7, #12
 8008588:	4618      	mov	r0, r3
 800858a:	f7f8 f9f7 	bl	800097c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	9202      	str	r2, [sp, #8]
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	2305      	movs	r3, #5
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	2300      	movs	r3, #0
 800859e:	460a      	mov	r2, r1
 80085a0:	4910      	ldr	r1, [pc, #64]	; (80085e4 <xTimerCreateTimerTask+0x84>)
 80085a2:	4811      	ldr	r0, [pc, #68]	; (80085e8 <xTimerCreateTimerTask+0x88>)
 80085a4:	f7fe ffa8 	bl	80074f8 <xTaskCreateStatic>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b10      	ldr	r3, [pc, #64]	; (80085ec <xTimerCreateTimerTask+0x8c>)
 80085ac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085ae:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <xTimerCreateTimerTask+0x8c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085b6:	2301      	movs	r3, #1
 80085b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d109      	bne.n	80085d4 <xTimerCreateTimerTask+0x74>
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	613b      	str	r3, [r7, #16]
 80085d2:	e7fe      	b.n	80085d2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80085d4:	697b      	ldr	r3, [r7, #20]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	20000a6c 	.word	0x20000a6c
 80085e4:	08009ec0 	.word	0x08009ec0
 80085e8:	08008825 	.word	0x08008825
 80085ec:	20000a70 	.word	0x20000a70

080085f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80085fe:	202c      	movs	r0, #44	; 0x2c
 8008600:	f000 fd10 	bl	8009024 <pvPortMalloc>
 8008604:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00d      	beq.n	8008628 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f844 	bl	80086a8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008628:	697b      	ldr	r3, [r7, #20]
	}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008632:	b580      	push	{r7, lr}
 8008634:	b08a      	sub	sp, #40	; 0x28
 8008636:	af02      	add	r7, sp, #8
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008640:	232c      	movs	r3, #44	; 0x2c
 8008642:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	2b2c      	cmp	r3, #44	; 0x2c
 8008648:	d009      	beq.n	800865e <xTimerCreateStatic+0x2c>
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	e7fe      	b.n	800865c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d109      	bne.n	8008678 <xTimerCreateStatic+0x46>
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	e7fe      	b.n	8008676 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00d      	beq.n	800869e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 f809 	bl	80086a8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800869e:	69fb      	ldr	r3, [r7, #28]
	}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3720      	adds	r7, #32
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d109      	bne.n	80086d0 <prvInitialiseNewTimer+0x28>
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	617b      	str	r3, [r7, #20]
 80086ce:	e7fe      	b.n	80086ce <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d015      	beq.n	8008702 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80086d6:	f000 fa81 	bl	8008bdc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	6a3a      	ldr	r2, [r7, #32]
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	3304      	adds	r3, #4
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd ff38 	bl	8006572 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008702:	bf00      	nop
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800871a:	2300      	movs	r3, #0
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d109      	bne.n	8008738 <xTimerGenericCommand+0x2c>
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	623b      	str	r3, [r7, #32]
 8008736:	e7fe      	b.n	8008736 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008738:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <xTimerGenericCommand+0x94>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d02a      	beq.n	8008796 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b05      	cmp	r3, #5
 8008750:	dc18      	bgt.n	8008784 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008752:	f7ff fcc5 	bl	80080e0 <xTaskGetSchedulerState>
 8008756:	4603      	mov	r3, r0
 8008758:	2b02      	cmp	r3, #2
 800875a:	d109      	bne.n	8008770 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800875c:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <xTimerGenericCommand+0x94>)
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	f107 0114 	add.w	r1, r7, #20
 8008764:	2300      	movs	r3, #0
 8008766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008768:	f7fe f8ca 	bl	8006900 <xQueueGenericSend>
 800876c:	6278      	str	r0, [r7, #36]	; 0x24
 800876e:	e012      	b.n	8008796 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <xTimerGenericCommand+0x94>)
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	f107 0114 	add.w	r1, r7, #20
 8008778:	2300      	movs	r3, #0
 800877a:	2200      	movs	r2, #0
 800877c:	f7fe f8c0 	bl	8006900 <xQueueGenericSend>
 8008780:	6278      	str	r0, [r7, #36]	; 0x24
 8008782:	e008      	b.n	8008796 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008784:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <xTimerGenericCommand+0x94>)
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	f107 0114 	add.w	r1, r7, #20
 800878c:	2300      	movs	r3, #0
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	f7fe f9b0 	bl	8006af4 <xQueueGenericSendFromISR>
 8008794:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008798:	4618      	mov	r0, r3
 800879a:	3728      	adds	r7, #40	; 0x28
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000a6c 	.word	0x20000a6c

080087a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af02      	add	r7, sp, #8
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087ae:	4b1c      	ldr	r3, [pc, #112]	; (8008820 <prvProcessExpiredTimer+0x7c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fd ff3f 	bl	8006640 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d121      	bne.n	800880e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	18d1      	adds	r1, r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	6978      	ldr	r0, [r7, #20]
 80087d8:	f000 f8c8 	bl	800896c <prvInsertTimerInActiveList>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d015      	beq.n	800880e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087e2:	2300      	movs	r3, #0
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	2300      	movs	r3, #0
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	2100      	movs	r1, #0
 80087ec:	6978      	ldr	r0, [r7, #20]
 80087ee:	f7ff ff8d 	bl	800870c <xTimerGenericCommand>
 80087f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <prvProcessExpiredTimer+0x6a>
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	e7fe      	b.n	800880c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	6978      	ldr	r0, [r7, #20]
 8008814:	4798      	blx	r3
}
 8008816:	bf00      	nop
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000a64 	.word	0x20000a64

08008824 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800882c:	f107 0308 	add.w	r3, r7, #8
 8008830:	4618      	mov	r0, r3
 8008832:	f000 f857 	bl	80088e4 <prvGetNextExpireTime>
 8008836:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4619      	mov	r1, r3
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 f803 	bl	8008848 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008842:	f000 f8d5 	bl	80089f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008846:	e7f1      	b.n	800882c <prvTimerTask+0x8>

08008848 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008852:	f7ff f86f 	bl	8007934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008856:	f107 0308 	add.w	r3, r7, #8
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f866 	bl	800892c <prvSampleTimeNow>
 8008860:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d130      	bne.n	80088ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <prvProcessTimerOrBlockTask+0x3c>
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	429a      	cmp	r2, r3
 8008874:	d806      	bhi.n	8008884 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008876:	f7ff f86b 	bl	8007950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800887a:	68f9      	ldr	r1, [r7, #12]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ff91 	bl	80087a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008882:	e024      	b.n	80088ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d008      	beq.n	800889c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <prvProcessTimerOrBlockTask+0x90>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bf0c      	ite	eq
 8008894:	2301      	moveq	r3, #1
 8008896:	2300      	movne	r3, #0
 8008898:	b2db      	uxtb	r3, r3
 800889a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <prvProcessTimerOrBlockTask+0x94>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	4619      	mov	r1, r3
 80088aa:	f7fe fdf1 	bl	8007490 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088ae:	f7ff f84f 	bl	8007950 <xTaskResumeAll>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10a      	bne.n	80088ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088b8:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <prvProcessTimerOrBlockTask+0x98>)
 80088ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	f3bf 8f6f 	isb	sy
}
 80088c8:	e001      	b.n	80088ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088ca:	f7ff f841 	bl	8007950 <xTaskResumeAll>
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000a68 	.word	0x20000a68
 80088dc:	20000a6c 	.word	0x20000a6c
 80088e0:	e000ed04 	.word	0xe000ed04

080088e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <prvGetNextExpireTime+0x44>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bf0c      	ite	eq
 80088f6:	2301      	moveq	r3, #1
 80088f8:	2300      	movne	r3, #0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800890a:	4b07      	ldr	r3, [pc, #28]	; (8008928 <prvGetNextExpireTime+0x44>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e001      	b.n	800891a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	20000a64 	.word	0x20000a64

0800892c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008934:	f7ff f8a8 	bl	8007a88 <xTaskGetTickCount>
 8008938:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800893a:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <prvSampleTimeNow+0x3c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	429a      	cmp	r2, r3
 8008942:	d205      	bcs.n	8008950 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008944:	f000 f8ea 	bl	8008b1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	e002      	b.n	8008956 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008956:	4a04      	ldr	r2, [pc, #16]	; (8008968 <prvSampleTimeNow+0x3c>)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800895c:	68fb      	ldr	r3, [r7, #12]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000a74 	.word	0x20000a74

0800896c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	429a      	cmp	r2, r3
 8008990:	d812      	bhi.n	80089b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	1ad2      	subs	r2, r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	429a      	cmp	r2, r3
 800899e:	d302      	bcc.n	80089a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e01b      	b.n	80089de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <prvInsertTimerInActiveList+0x7c>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fd fe0d 	bl	80065d0 <vListInsert>
 80089b6:	e012      	b.n	80089de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d206      	bcs.n	80089ce <prvInsertTimerInActiveList+0x62>
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d302      	bcc.n	80089ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089c8:	2301      	movs	r3, #1
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	e007      	b.n	80089de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089ce:	4b07      	ldr	r3, [pc, #28]	; (80089ec <prvInsertTimerInActiveList+0x80>)
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4619      	mov	r1, r3
 80089d8:	4610      	mov	r0, r2
 80089da:	f7fd fdf9 	bl	80065d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089de:	697b      	ldr	r3, [r7, #20]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20000a68 	.word	0x20000a68
 80089ec:	20000a64 	.word	0x20000a64

080089f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08c      	sub	sp, #48	; 0x30
 80089f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089f6:	e07f      	b.n	8008af8 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	db7b      	blt.n	8008af6 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d004      	beq.n	8008a14 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fd fe16 	bl	8006640 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a14:	1d3b      	adds	r3, r7, #4
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff ff88 	bl	800892c <prvSampleTimeNow>
 8008a1c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b09      	cmp	r3, #9
 8008a22:	d869      	bhi.n	8008af8 <prvProcessReceivedCommands+0x108>
 8008a24:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <prvProcessReceivedCommands+0x3c>)
 8008a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2a:	bf00      	nop
 8008a2c:	08008a55 	.word	0x08008a55
 8008a30:	08008a55 	.word	0x08008a55
 8008a34:	08008a55 	.word	0x08008a55
 8008a38:	08008af9 	.word	0x08008af9
 8008a3c:	08008aaf 	.word	0x08008aaf
 8008a40:	08008ae5 	.word	0x08008ae5
 8008a44:	08008a55 	.word	0x08008a55
 8008a48:	08008a55 	.word	0x08008a55
 8008a4c:	08008af9 	.word	0x08008af9
 8008a50:	08008aaf 	.word	0x08008aaf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	18d1      	adds	r1, r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a3a      	ldr	r2, [r7, #32]
 8008a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a62:	f7ff ff83 	bl	800896c <prvInsertTimerInActiveList>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d045      	beq.n	8008af8 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d13d      	bne.n	8008af8 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	441a      	add	r2, r3
 8008a84:	2300      	movs	r3, #0
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a8e:	f7ff fe3d 	bl	800870c <xTimerGenericCommand>
 8008a92:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d12e      	bne.n	8008af8 <prvProcessReceivedCommands+0x108>
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e7fe      	b.n	8008aac <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d109      	bne.n	8008ad0 <prvProcessReceivedCommands+0xe0>
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	e7fe      	b.n	8008ace <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	699a      	ldr	r2, [r3, #24]
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	18d1      	adds	r1, r2, r3
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	6a3a      	ldr	r2, [r7, #32]
 8008adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ade:	f7ff ff45 	bl	800896c <prvInsertTimerInActiveList>
					break;
 8008ae2:	e009      	b.n	8008af8 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d104      	bne.n	8008af8 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8008aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008af0:	f000 fb5a 	bl	80091a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008af4:	e000      	b.n	8008af8 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008af6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008af8:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <prvProcessReceivedCommands+0x128>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f107 0108 	add.w	r1, r7, #8
 8008b00:	2200      	movs	r2, #0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe f914 	bl	8006d30 <xQueueReceive>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f47f af74 	bne.w	80089f8 <prvProcessReceivedCommands+0x8>
	}
}
 8008b10:	bf00      	nop
 8008b12:	3728      	adds	r7, #40	; 0x28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20000a6c 	.word	0x20000a6c

08008b1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b22:	e044      	b.n	8008bae <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b24:	4b2b      	ldr	r3, [pc, #172]	; (8008bd4 <prvSwitchTimerLists+0xb8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b2e:	4b29      	ldr	r3, [pc, #164]	; (8008bd4 <prvSwitchTimerLists+0xb8>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd fd7f 	bl	8006640 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d12d      	bne.n	8008bae <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4413      	add	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d90e      	bls.n	8008b82 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b70:	4b18      	ldr	r3, [pc, #96]	; (8008bd4 <prvSwitchTimerLists+0xb8>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f7fd fd28 	bl	80065d0 <vListInsert>
 8008b80:	e015      	b.n	8008bae <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b82:	2300      	movs	r3, #0
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	2300      	movs	r3, #0
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f7ff fdbd 	bl	800870c <xTimerGenericCommand>
 8008b92:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d109      	bne.n	8008bae <prvSwitchTimerLists+0x92>
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	e7fe      	b.n	8008bac <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <prvSwitchTimerLists+0xb8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1b5      	bne.n	8008b24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bb8:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <prvSwitchTimerLists+0xb8>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bbe:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <prvSwitchTimerLists+0xbc>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a04      	ldr	r2, [pc, #16]	; (8008bd4 <prvSwitchTimerLists+0xb8>)
 8008bc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bc6:	4a04      	ldr	r2, [pc, #16]	; (8008bd8 <prvSwitchTimerLists+0xbc>)
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	6013      	str	r3, [r2, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000a64 	.word	0x20000a64
 8008bd8:	20000a68 	.word	0x20000a68

08008bdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008be2:	f000 f929 	bl	8008e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008be6:	4b15      	ldr	r3, [pc, #84]	; (8008c3c <prvCheckForValidListAndQueue+0x60>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d120      	bne.n	8008c30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bee:	4814      	ldr	r0, [pc, #80]	; (8008c40 <prvCheckForValidListAndQueue+0x64>)
 8008bf0:	f7fd fca0 	bl	8006534 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008bf4:	4813      	ldr	r0, [pc, #76]	; (8008c44 <prvCheckForValidListAndQueue+0x68>)
 8008bf6:	f7fd fc9d 	bl	8006534 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <prvCheckForValidListAndQueue+0x6c>)
 8008bfc:	4a10      	ldr	r2, [pc, #64]	; (8008c40 <prvCheckForValidListAndQueue+0x64>)
 8008bfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c00:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <prvCheckForValidListAndQueue+0x70>)
 8008c02:	4a10      	ldr	r2, [pc, #64]	; (8008c44 <prvCheckForValidListAndQueue+0x68>)
 8008c04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c06:	2300      	movs	r3, #0
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <prvCheckForValidListAndQueue+0x74>)
 8008c0c:	4a11      	ldr	r2, [pc, #68]	; (8008c54 <prvCheckForValidListAndQueue+0x78>)
 8008c0e:	210c      	movs	r1, #12
 8008c10:	200a      	movs	r0, #10
 8008c12:	f7fd fda7 	bl	8006764 <xQueueGenericCreateStatic>
 8008c16:	4602      	mov	r2, r0
 8008c18:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <prvCheckForValidListAndQueue+0x60>)
 8008c1a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c1c:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <prvCheckForValidListAndQueue+0x60>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <prvCheckForValidListAndQueue+0x60>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	490b      	ldr	r1, [pc, #44]	; (8008c58 <prvCheckForValidListAndQueue+0x7c>)
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fc08 	bl	8007440 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c30:	f000 f930 	bl	8008e94 <vPortExitCritical>
}
 8008c34:	bf00      	nop
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000a6c 	.word	0x20000a6c
 8008c40:	20000a3c 	.word	0x20000a3c
 8008c44:	20000a50 	.word	0x20000a50
 8008c48:	20000a64 	.word	0x20000a64
 8008c4c:	20000a68 	.word	0x20000a68
 8008c50:	20000af0 	.word	0x20000af0
 8008c54:	20000a78 	.word	0x20000a78
 8008c58:	08009ec8 	.word	0x08009ec8

08008c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3b04      	subs	r3, #4
 8008c6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3b04      	subs	r3, #4
 8008c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f023 0201 	bic.w	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3b04      	subs	r3, #4
 8008c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c8c:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <pxPortInitialiseStack+0x54>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3b14      	subs	r3, #20
 8008c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3b20      	subs	r3, #32
 8008ca2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr
 8008cb0:	08008cb5 	.word	0x08008cb5

08008cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cbe:	4b10      	ldr	r3, [pc, #64]	; (8008d00 <prvTaskExitError+0x4c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cc6:	d009      	beq.n	8008cdc <prvTaskExitError+0x28>
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	e7fe      	b.n	8008cda <prvTaskExitError+0x26>
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cee:	bf00      	nop
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0fc      	beq.n	8008cf0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bc80      	pop	{r7}
 8008cfe:	4770      	bx	lr
 8008d00:	20000030 	.word	0x20000030
	...

08008d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d10:	4b07      	ldr	r3, [pc, #28]	; (8008d30 <pxCurrentTCBConst2>)
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	6808      	ldr	r0, [r1, #0]
 8008d16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d1a:	f380 8809 	msr	PSP, r0
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f04f 0000 	mov.w	r0, #0
 8008d26:	f380 8811 	msr	BASEPRI, r0
 8008d2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008d2e:	4770      	bx	lr

08008d30 <pxCurrentTCBConst2>:
 8008d30:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop

08008d38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008d38:	4806      	ldr	r0, [pc, #24]	; (8008d54 <prvPortStartFirstTask+0x1c>)
 8008d3a:	6800      	ldr	r0, [r0, #0]
 8008d3c:	6800      	ldr	r0, [r0, #0]
 8008d3e:	f380 8808 	msr	MSP, r0
 8008d42:	b662      	cpsie	i
 8008d44:	b661      	cpsie	f
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	df00      	svc	0
 8008d50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d52:	bf00      	nop
 8008d54:	e000ed08 	.word	0xe000ed08

08008d58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d5e:	4b31      	ldr	r3, [pc, #196]	; (8008e24 <xPortStartScheduler+0xcc>)
 8008d60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	22ff      	movs	r2, #255	; 0xff
 8008d6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	4b29      	ldr	r3, [pc, #164]	; (8008e28 <xPortStartScheduler+0xd0>)
 8008d84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d86:	4b29      	ldr	r3, [pc, #164]	; (8008e2c <xPortStartScheduler+0xd4>)
 8008d88:	2207      	movs	r2, #7
 8008d8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d8c:	e009      	b.n	8008da2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008d8e:	4b27      	ldr	r3, [pc, #156]	; (8008e2c <xPortStartScheduler+0xd4>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	4a25      	ldr	r2, [pc, #148]	; (8008e2c <xPortStartScheduler+0xd4>)
 8008d96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008daa:	2b80      	cmp	r3, #128	; 0x80
 8008dac:	d0ef      	beq.n	8008d8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008dae:	4b1f      	ldr	r3, [pc, #124]	; (8008e2c <xPortStartScheduler+0xd4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f1c3 0307 	rsb	r3, r3, #7
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d009      	beq.n	8008dce <xPortStartScheduler+0x76>
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	e7fe      	b.n	8008dcc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008dce:	4b17      	ldr	r3, [pc, #92]	; (8008e2c <xPortStartScheduler+0xd4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	021b      	lsls	r3, r3, #8
 8008dd4:	4a15      	ldr	r2, [pc, #84]	; (8008e2c <xPortStartScheduler+0xd4>)
 8008dd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dd8:	4b14      	ldr	r3, [pc, #80]	; (8008e2c <xPortStartScheduler+0xd4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008de0:	4a12      	ldr	r2, [pc, #72]	; (8008e2c <xPortStartScheduler+0xd4>)
 8008de2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008dec:	4b10      	ldr	r3, [pc, #64]	; (8008e30 <xPortStartScheduler+0xd8>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a0f      	ldr	r2, [pc, #60]	; (8008e30 <xPortStartScheduler+0xd8>)
 8008df2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008df8:	4b0d      	ldr	r3, [pc, #52]	; (8008e30 <xPortStartScheduler+0xd8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a0c      	ldr	r2, [pc, #48]	; (8008e30 <xPortStartScheduler+0xd8>)
 8008dfe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e04:	f000 f8b0 	bl	8008f68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <xPortStartScheduler+0xdc>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e0e:	f7ff ff93 	bl	8008d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e12:	f7fe ff03 	bl	8007c1c <vTaskSwitchContext>
	prvTaskExitError();
 8008e16:	f7ff ff4d 	bl	8008cb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	e000e400 	.word	0xe000e400
 8008e28:	20000b38 	.word	0x20000b38
 8008e2c:	20000b3c 	.word	0x20000b3c
 8008e30:	e000ed20 	.word	0xe000ed20
 8008e34:	20000030 	.word	0x20000030

08008e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e50:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <vPortEnterCritical+0x54>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3301      	adds	r3, #1
 8008e56:	4a0d      	ldr	r2, [pc, #52]	; (8008e8c <vPortEnterCritical+0x54>)
 8008e58:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <vPortEnterCritical+0x54>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d10e      	bne.n	8008e80 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e62:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <vPortEnterCritical+0x58>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d009      	beq.n	8008e80 <vPortEnterCritical+0x48>
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	603b      	str	r3, [r7, #0]
 8008e7e:	e7fe      	b.n	8008e7e <vPortEnterCritical+0x46>
	}
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bc80      	pop	{r7}
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000030 	.word	0x20000030
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e9a:	4b10      	ldr	r3, [pc, #64]	; (8008edc <vPortExitCritical+0x48>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <vPortExitCritical+0x22>
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	607b      	str	r3, [r7, #4]
 8008eb4:	e7fe      	b.n	8008eb4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <vPortExitCritical+0x48>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	4a07      	ldr	r2, [pc, #28]	; (8008edc <vPortExitCritical+0x48>)
 8008ebe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <vPortExitCritical+0x48>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <vPortExitCritical+0x3e>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr
 8008edc:	20000030 	.word	0x20000030

08008ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ee0:	f3ef 8009 	mrs	r0, PSP
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <pxCurrentTCBConst>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ef0:	6010      	str	r0, [r2, #0]
 8008ef2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008ef6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008efa:	f380 8811 	msr	BASEPRI, r0
 8008efe:	f7fe fe8d 	bl	8007c1c <vTaskSwitchContext>
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8811 	msr	BASEPRI, r0
 8008f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	6808      	ldr	r0, [r1, #0]
 8008f12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f16:	f380 8809 	msr	PSP, r0
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	4770      	bx	lr

08008f20 <pxCurrentTCBConst>:
 8008f20:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f40:	f7fe fdb0 	bl	8007aa4 <xTaskIncrementTick>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4a:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <SysTick_Handler+0x3c>)
 8008f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	2300      	movs	r3, #0
 8008f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f5c:	bf00      	nop
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	e000ed04 	.word	0xe000ed04

08008f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <vPortSetupTimerInterrupt+0x30>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f72:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <vPortSetupTimerInterrupt+0x34>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f78:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <vPortSetupTimerInterrupt+0x38>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a09      	ldr	r2, [pc, #36]	; (8008fa4 <vPortSetupTimerInterrupt+0x3c>)
 8008f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f82:	099b      	lsrs	r3, r3, #6
 8008f84:	4a08      	ldr	r2, [pc, #32]	; (8008fa8 <vPortSetupTimerInterrupt+0x40>)
 8008f86:	3b01      	subs	r3, #1
 8008f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f8a:	4b03      	ldr	r3, [pc, #12]	; (8008f98 <vPortSetupTimerInterrupt+0x30>)
 8008f8c:	2207      	movs	r2, #7
 8008f8e:	601a      	str	r2, [r3, #0]
}
 8008f90:	bf00      	nop
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr
 8008f98:	e000e010 	.word	0xe000e010
 8008f9c:	e000e018 	.word	0xe000e018
 8008fa0:	20000024 	.word	0x20000024
 8008fa4:	10624dd3 	.word	0x10624dd3
 8008fa8:	e000e014 	.word	0xe000e014

08008fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fb2:	f3ef 8305 	mrs	r3, IPSR
 8008fb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	d913      	bls.n	8008fe6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fbe:	4a15      	ldr	r2, [pc, #84]	; (8009014 <vPortValidateInterruptPriority+0x68>)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fc8:	4b13      	ldr	r3, [pc, #76]	; (8009018 <vPortValidateInterruptPriority+0x6c>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	7afa      	ldrb	r2, [r7, #11]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d209      	bcs.n	8008fe6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	607b      	str	r3, [r7, #4]
 8008fe4:	e7fe      	b.n	8008fe4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fe6:	4b0d      	ldr	r3, [pc, #52]	; (800901c <vPortValidateInterruptPriority+0x70>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <vPortValidateInterruptPriority+0x74>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d909      	bls.n	800900a <vPortValidateInterruptPriority+0x5e>
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	e7fe      	b.n	8009008 <vPortValidateInterruptPriority+0x5c>
	}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	bc80      	pop	{r7}
 8009012:	4770      	bx	lr
 8009014:	e000e3f0 	.word	0xe000e3f0
 8009018:	20000b38 	.word	0x20000b38
 800901c:	e000ed0c 	.word	0xe000ed0c
 8009020:	20000b3c 	.word	0x20000b3c

08009024 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800902c:	2300      	movs	r3, #0
 800902e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009030:	f7fe fc80 	bl	8007934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009034:	4b57      	ldr	r3, [pc, #348]	; (8009194 <pvPortMalloc+0x170>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800903c:	f000 f90c 	bl	8009258 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009040:	4b55      	ldr	r3, [pc, #340]	; (8009198 <pvPortMalloc+0x174>)
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4013      	ands	r3, r2
 8009048:	2b00      	cmp	r3, #0
 800904a:	f040 808c 	bne.w	8009166 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d01c      	beq.n	800908e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009054:	2208      	movs	r2, #8
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4413      	add	r3, r2
 800905a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	2b00      	cmp	r3, #0
 8009064:	d013      	beq.n	800908e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f023 0307 	bic.w	r3, r3, #7
 800906c:	3308      	adds	r3, #8
 800906e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	2b00      	cmp	r3, #0
 8009078:	d009      	beq.n	800908e <pvPortMalloc+0x6a>
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e7fe      	b.n	800908c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d068      	beq.n	8009166 <pvPortMalloc+0x142>
 8009094:	4b41      	ldr	r3, [pc, #260]	; (800919c <pvPortMalloc+0x178>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	d863      	bhi.n	8009166 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800909e:	4b40      	ldr	r3, [pc, #256]	; (80091a0 <pvPortMalloc+0x17c>)
 80090a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090a2:	4b3f      	ldr	r3, [pc, #252]	; (80091a0 <pvPortMalloc+0x17c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090a8:	e004      	b.n	80090b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d903      	bls.n	80090c6 <pvPortMalloc+0xa2>
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1f1      	bne.n	80090aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090c6:	4b33      	ldr	r3, [pc, #204]	; (8009194 <pvPortMalloc+0x170>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d04a      	beq.n	8009166 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2208      	movs	r2, #8
 80090d6:	4413      	add	r3, r2
 80090d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	1ad2      	subs	r2, r2, r3
 80090ea:	2308      	movs	r3, #8
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d91e      	bls.n	8009130 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	f003 0307 	and.w	r3, r3, #7
 8009100:	2b00      	cmp	r3, #0
 8009102:	d009      	beq.n	8009118 <pvPortMalloc+0xf4>
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	613b      	str	r3, [r7, #16]
 8009116:	e7fe      	b.n	8009116 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	1ad2      	subs	r2, r2, r3
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800912a:	69b8      	ldr	r0, [r7, #24]
 800912c:	f000 f8f6 	bl	800931c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009130:	4b1a      	ldr	r3, [pc, #104]	; (800919c <pvPortMalloc+0x178>)
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	4a18      	ldr	r2, [pc, #96]	; (800919c <pvPortMalloc+0x178>)
 800913c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800913e:	4b17      	ldr	r3, [pc, #92]	; (800919c <pvPortMalloc+0x178>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b18      	ldr	r3, [pc, #96]	; (80091a4 <pvPortMalloc+0x180>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d203      	bcs.n	8009152 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800914a:	4b14      	ldr	r3, [pc, #80]	; (800919c <pvPortMalloc+0x178>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a15      	ldr	r2, [pc, #84]	; (80091a4 <pvPortMalloc+0x180>)
 8009150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	4b10      	ldr	r3, [pc, #64]	; (8009198 <pvPortMalloc+0x174>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	431a      	orrs	r2, r3
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009166:	f7fe fbf3 	bl	8007950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	f003 0307 	and.w	r3, r3, #7
 8009170:	2b00      	cmp	r3, #0
 8009172:	d009      	beq.n	8009188 <pvPortMalloc+0x164>
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	e7fe      	b.n	8009186 <pvPortMalloc+0x162>
	return pvReturn;
 8009188:	69fb      	ldr	r3, [r7, #28]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3728      	adds	r7, #40	; 0x28
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20001748 	.word	0x20001748
 8009198:	20001754 	.word	0x20001754
 800919c:	2000174c 	.word	0x2000174c
 80091a0:	20001740 	.word	0x20001740
 80091a4:	20001750 	.word	0x20001750

080091a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d046      	beq.n	8009248 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091ba:	2308      	movs	r3, #8
 80091bc:	425b      	negs	r3, r3
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4413      	add	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	4b20      	ldr	r3, [pc, #128]	; (8009250 <vPortFree+0xa8>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4013      	ands	r3, r2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d109      	bne.n	80091ea <vPortFree+0x42>
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	e7fe      	b.n	80091e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <vPortFree+0x5e>
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	60bb      	str	r3, [r7, #8]
 8009204:	e7fe      	b.n	8009204 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	4b11      	ldr	r3, [pc, #68]	; (8009250 <vPortFree+0xa8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4013      	ands	r3, r2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d019      	beq.n	8009248 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d115      	bne.n	8009248 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <vPortFree+0xa8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	43db      	mvns	r3, r3
 8009226:	401a      	ands	r2, r3
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800922c:	f7fe fb82 	bl	8007934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	4b07      	ldr	r3, [pc, #28]	; (8009254 <vPortFree+0xac>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4413      	add	r3, r2
 800923a:	4a06      	ldr	r2, [pc, #24]	; (8009254 <vPortFree+0xac>)
 800923c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800923e:	6938      	ldr	r0, [r7, #16]
 8009240:	f000 f86c 	bl	800931c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009244:	f7fe fb84 	bl	8007950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009248:	bf00      	nop
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20001754 	.word	0x20001754
 8009254:	2000174c 	.word	0x2000174c

08009258 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800925e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009262:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009264:	4b27      	ldr	r3, [pc, #156]	; (8009304 <prvHeapInit+0xac>)
 8009266:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0307 	and.w	r3, r3, #7
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00c      	beq.n	800928c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3307      	adds	r3, #7
 8009276:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0307 	bic.w	r3, r3, #7
 800927e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	4a1f      	ldr	r2, [pc, #124]	; (8009304 <prvHeapInit+0xac>)
 8009288:	4413      	add	r3, r2
 800928a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009290:	4a1d      	ldr	r2, [pc, #116]	; (8009308 <prvHeapInit+0xb0>)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009296:	4b1c      	ldr	r3, [pc, #112]	; (8009308 <prvHeapInit+0xb0>)
 8009298:	2200      	movs	r2, #0
 800929a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	4413      	add	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092a4:	2208      	movs	r2, #8
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f023 0307 	bic.w	r3, r3, #7
 80092b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4a15      	ldr	r2, [pc, #84]	; (800930c <prvHeapInit+0xb4>)
 80092b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092ba:	4b14      	ldr	r3, [pc, #80]	; (800930c <prvHeapInit+0xb4>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2200      	movs	r2, #0
 80092c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092c2:	4b12      	ldr	r3, [pc, #72]	; (800930c <prvHeapInit+0xb4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	1ad2      	subs	r2, r2, r3
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092d8:	4b0c      	ldr	r3, [pc, #48]	; (800930c <prvHeapInit+0xb4>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4a0a      	ldr	r2, [pc, #40]	; (8009310 <prvHeapInit+0xb8>)
 80092e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	4a09      	ldr	r2, [pc, #36]	; (8009314 <prvHeapInit+0xbc>)
 80092ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092f0:	4b09      	ldr	r3, [pc, #36]	; (8009318 <prvHeapInit+0xc0>)
 80092f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092f6:	601a      	str	r2, [r3, #0]
}
 80092f8:	bf00      	nop
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bc80      	pop	{r7}
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20000b40 	.word	0x20000b40
 8009308:	20001740 	.word	0x20001740
 800930c:	20001748 	.word	0x20001748
 8009310:	20001750 	.word	0x20001750
 8009314:	2000174c 	.word	0x2000174c
 8009318:	20001754 	.word	0x20001754

0800931c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009324:	4b27      	ldr	r3, [pc, #156]	; (80093c4 <prvInsertBlockIntoFreeList+0xa8>)
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e002      	b.n	8009330 <prvInsertBlockIntoFreeList+0x14>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	429a      	cmp	r2, r3
 8009338:	d8f7      	bhi.n	800932a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	4413      	add	r3, r2
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	429a      	cmp	r2, r3
 800934a:	d108      	bne.n	800935e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	441a      	add	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d118      	bne.n	80093a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <prvInsertBlockIntoFreeList+0xac>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d00d      	beq.n	800939a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	441a      	add	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	e008      	b.n	80093ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800939a:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <prvInsertBlockIntoFreeList+0xac>)
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	e003      	b.n	80093ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d002      	beq.n	80093ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ba:	bf00      	nop
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	bc80      	pop	{r7}
 80093c2:	4770      	bx	lr
 80093c4:	20001740 	.word	0x20001740
 80093c8:	20001748 	.word	0x20001748

080093cc <atoi>:
 80093cc:	220a      	movs	r2, #10
 80093ce:	2100      	movs	r1, #0
 80093d0:	f000 b8da 	b.w	8009588 <strtol>

080093d4 <__errno>:
 80093d4:	4b01      	ldr	r3, [pc, #4]	; (80093dc <__errno+0x8>)
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20000034 	.word	0x20000034

080093e0 <__libc_init_array>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	2500      	movs	r5, #0
 80093e4:	4e0c      	ldr	r6, [pc, #48]	; (8009418 <__libc_init_array+0x38>)
 80093e6:	4c0d      	ldr	r4, [pc, #52]	; (800941c <__libc_init_array+0x3c>)
 80093e8:	1ba4      	subs	r4, r4, r6
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	42a5      	cmp	r5, r4
 80093ee:	d109      	bne.n	8009404 <__libc_init_array+0x24>
 80093f0:	f000 fcea 	bl	8009dc8 <_init>
 80093f4:	2500      	movs	r5, #0
 80093f6:	4e0a      	ldr	r6, [pc, #40]	; (8009420 <__libc_init_array+0x40>)
 80093f8:	4c0a      	ldr	r4, [pc, #40]	; (8009424 <__libc_init_array+0x44>)
 80093fa:	1ba4      	subs	r4, r4, r6
 80093fc:	10a4      	asrs	r4, r4, #2
 80093fe:	42a5      	cmp	r5, r4
 8009400:	d105      	bne.n	800940e <__libc_init_array+0x2e>
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009408:	4798      	blx	r3
 800940a:	3501      	adds	r5, #1
 800940c:	e7ee      	b.n	80093ec <__libc_init_array+0xc>
 800940e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009412:	4798      	blx	r3
 8009414:	3501      	adds	r5, #1
 8009416:	e7f2      	b.n	80093fe <__libc_init_array+0x1e>
 8009418:	0800a038 	.word	0x0800a038
 800941c:	0800a038 	.word	0x0800a038
 8009420:	0800a038 	.word	0x0800a038
 8009424:	0800a03c 	.word	0x0800a03c

08009428 <memcpy>:
 8009428:	b510      	push	{r4, lr}
 800942a:	1e43      	subs	r3, r0, #1
 800942c:	440a      	add	r2, r1
 800942e:	4291      	cmp	r1, r2
 8009430:	d100      	bne.n	8009434 <memcpy+0xc>
 8009432:	bd10      	pop	{r4, pc}
 8009434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800943c:	e7f7      	b.n	800942e <memcpy+0x6>

0800943e <memset>:
 800943e:	4603      	mov	r3, r0
 8009440:	4402      	add	r2, r0
 8009442:	4293      	cmp	r3, r2
 8009444:	d100      	bne.n	8009448 <memset+0xa>
 8009446:	4770      	bx	lr
 8009448:	f803 1b01 	strb.w	r1, [r3], #1
 800944c:	e7f9      	b.n	8009442 <memset+0x4>
	...

08009450 <siprintf>:
 8009450:	b40e      	push	{r1, r2, r3}
 8009452:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009456:	b500      	push	{lr}
 8009458:	b09c      	sub	sp, #112	; 0x70
 800945a:	ab1d      	add	r3, sp, #116	; 0x74
 800945c:	9002      	str	r0, [sp, #8]
 800945e:	9006      	str	r0, [sp, #24]
 8009460:	9107      	str	r1, [sp, #28]
 8009462:	9104      	str	r1, [sp, #16]
 8009464:	4808      	ldr	r0, [pc, #32]	; (8009488 <siprintf+0x38>)
 8009466:	4909      	ldr	r1, [pc, #36]	; (800948c <siprintf+0x3c>)
 8009468:	f853 2b04 	ldr.w	r2, [r3], #4
 800946c:	9105      	str	r1, [sp, #20]
 800946e:	6800      	ldr	r0, [r0, #0]
 8009470:	a902      	add	r1, sp, #8
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	f000 f90e 	bl	8009694 <_svfiprintf_r>
 8009478:	2200      	movs	r2, #0
 800947a:	9b02      	ldr	r3, [sp, #8]
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	b01c      	add	sp, #112	; 0x70
 8009480:	f85d eb04 	ldr.w	lr, [sp], #4
 8009484:	b003      	add	sp, #12
 8009486:	4770      	bx	lr
 8009488:	20000034 	.word	0x20000034
 800948c:	ffff0208 	.word	0xffff0208

08009490 <_strtol_l.isra.0>:
 8009490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009494:	4680      	mov	r8, r0
 8009496:	4689      	mov	r9, r1
 8009498:	4692      	mov	sl, r2
 800949a:	461e      	mov	r6, r3
 800949c:	460f      	mov	r7, r1
 800949e:	463d      	mov	r5, r7
 80094a0:	9808      	ldr	r0, [sp, #32]
 80094a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094a6:	f000 f885 	bl	80095b4 <__locale_ctype_ptr_l>
 80094aa:	4420      	add	r0, r4
 80094ac:	7843      	ldrb	r3, [r0, #1]
 80094ae:	f013 0308 	ands.w	r3, r3, #8
 80094b2:	d132      	bne.n	800951a <_strtol_l.isra.0+0x8a>
 80094b4:	2c2d      	cmp	r4, #45	; 0x2d
 80094b6:	d132      	bne.n	800951e <_strtol_l.isra.0+0x8e>
 80094b8:	2201      	movs	r2, #1
 80094ba:	787c      	ldrb	r4, [r7, #1]
 80094bc:	1cbd      	adds	r5, r7, #2
 80094be:	2e00      	cmp	r6, #0
 80094c0:	d05d      	beq.n	800957e <_strtol_l.isra.0+0xee>
 80094c2:	2e10      	cmp	r6, #16
 80094c4:	d109      	bne.n	80094da <_strtol_l.isra.0+0x4a>
 80094c6:	2c30      	cmp	r4, #48	; 0x30
 80094c8:	d107      	bne.n	80094da <_strtol_l.isra.0+0x4a>
 80094ca:	782b      	ldrb	r3, [r5, #0]
 80094cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094d0:	2b58      	cmp	r3, #88	; 0x58
 80094d2:	d14f      	bne.n	8009574 <_strtol_l.isra.0+0xe4>
 80094d4:	2610      	movs	r6, #16
 80094d6:	786c      	ldrb	r4, [r5, #1]
 80094d8:	3502      	adds	r5, #2
 80094da:	2a00      	cmp	r2, #0
 80094dc:	bf14      	ite	ne
 80094de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80094e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80094e6:	2700      	movs	r7, #0
 80094e8:	fbb1 fcf6 	udiv	ip, r1, r6
 80094ec:	4638      	mov	r0, r7
 80094ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 80094f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80094f6:	2b09      	cmp	r3, #9
 80094f8:	d817      	bhi.n	800952a <_strtol_l.isra.0+0x9a>
 80094fa:	461c      	mov	r4, r3
 80094fc:	42a6      	cmp	r6, r4
 80094fe:	dd23      	ble.n	8009548 <_strtol_l.isra.0+0xb8>
 8009500:	1c7b      	adds	r3, r7, #1
 8009502:	d007      	beq.n	8009514 <_strtol_l.isra.0+0x84>
 8009504:	4584      	cmp	ip, r0
 8009506:	d31c      	bcc.n	8009542 <_strtol_l.isra.0+0xb2>
 8009508:	d101      	bne.n	800950e <_strtol_l.isra.0+0x7e>
 800950a:	45a6      	cmp	lr, r4
 800950c:	db19      	blt.n	8009542 <_strtol_l.isra.0+0xb2>
 800950e:	2701      	movs	r7, #1
 8009510:	fb00 4006 	mla	r0, r0, r6, r4
 8009514:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009518:	e7eb      	b.n	80094f2 <_strtol_l.isra.0+0x62>
 800951a:	462f      	mov	r7, r5
 800951c:	e7bf      	b.n	800949e <_strtol_l.isra.0+0xe>
 800951e:	2c2b      	cmp	r4, #43	; 0x2b
 8009520:	bf04      	itt	eq
 8009522:	1cbd      	addeq	r5, r7, #2
 8009524:	787c      	ldrbeq	r4, [r7, #1]
 8009526:	461a      	mov	r2, r3
 8009528:	e7c9      	b.n	80094be <_strtol_l.isra.0+0x2e>
 800952a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800952e:	2b19      	cmp	r3, #25
 8009530:	d801      	bhi.n	8009536 <_strtol_l.isra.0+0xa6>
 8009532:	3c37      	subs	r4, #55	; 0x37
 8009534:	e7e2      	b.n	80094fc <_strtol_l.isra.0+0x6c>
 8009536:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800953a:	2b19      	cmp	r3, #25
 800953c:	d804      	bhi.n	8009548 <_strtol_l.isra.0+0xb8>
 800953e:	3c57      	subs	r4, #87	; 0x57
 8009540:	e7dc      	b.n	80094fc <_strtol_l.isra.0+0x6c>
 8009542:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009546:	e7e5      	b.n	8009514 <_strtol_l.isra.0+0x84>
 8009548:	1c7b      	adds	r3, r7, #1
 800954a:	d108      	bne.n	800955e <_strtol_l.isra.0+0xce>
 800954c:	2322      	movs	r3, #34	; 0x22
 800954e:	4608      	mov	r0, r1
 8009550:	f8c8 3000 	str.w	r3, [r8]
 8009554:	f1ba 0f00 	cmp.w	sl, #0
 8009558:	d107      	bne.n	800956a <_strtol_l.isra.0+0xda>
 800955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955e:	b102      	cbz	r2, 8009562 <_strtol_l.isra.0+0xd2>
 8009560:	4240      	negs	r0, r0
 8009562:	f1ba 0f00 	cmp.w	sl, #0
 8009566:	d0f8      	beq.n	800955a <_strtol_l.isra.0+0xca>
 8009568:	b10f      	cbz	r7, 800956e <_strtol_l.isra.0+0xde>
 800956a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800956e:	f8ca 9000 	str.w	r9, [sl]
 8009572:	e7f2      	b.n	800955a <_strtol_l.isra.0+0xca>
 8009574:	2430      	movs	r4, #48	; 0x30
 8009576:	2e00      	cmp	r6, #0
 8009578:	d1af      	bne.n	80094da <_strtol_l.isra.0+0x4a>
 800957a:	2608      	movs	r6, #8
 800957c:	e7ad      	b.n	80094da <_strtol_l.isra.0+0x4a>
 800957e:	2c30      	cmp	r4, #48	; 0x30
 8009580:	d0a3      	beq.n	80094ca <_strtol_l.isra.0+0x3a>
 8009582:	260a      	movs	r6, #10
 8009584:	e7a9      	b.n	80094da <_strtol_l.isra.0+0x4a>
	...

08009588 <strtol>:
 8009588:	4b08      	ldr	r3, [pc, #32]	; (80095ac <strtol+0x24>)
 800958a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800958c:	681c      	ldr	r4, [r3, #0]
 800958e:	4d08      	ldr	r5, [pc, #32]	; (80095b0 <strtol+0x28>)
 8009590:	6a23      	ldr	r3, [r4, #32]
 8009592:	2b00      	cmp	r3, #0
 8009594:	bf08      	it	eq
 8009596:	462b      	moveq	r3, r5
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	4613      	mov	r3, r2
 800959c:	460a      	mov	r2, r1
 800959e:	4601      	mov	r1, r0
 80095a0:	4620      	mov	r0, r4
 80095a2:	f7ff ff75 	bl	8009490 <_strtol_l.isra.0>
 80095a6:	b003      	add	sp, #12
 80095a8:	bd30      	pop	{r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	20000034 	.word	0x20000034
 80095b0:	20000098 	.word	0x20000098

080095b4 <__locale_ctype_ptr_l>:
 80095b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80095b8:	4770      	bx	lr

080095ba <__ascii_mbtowc>:
 80095ba:	b082      	sub	sp, #8
 80095bc:	b901      	cbnz	r1, 80095c0 <__ascii_mbtowc+0x6>
 80095be:	a901      	add	r1, sp, #4
 80095c0:	b142      	cbz	r2, 80095d4 <__ascii_mbtowc+0x1a>
 80095c2:	b14b      	cbz	r3, 80095d8 <__ascii_mbtowc+0x1e>
 80095c4:	7813      	ldrb	r3, [r2, #0]
 80095c6:	600b      	str	r3, [r1, #0]
 80095c8:	7812      	ldrb	r2, [r2, #0]
 80095ca:	1c10      	adds	r0, r2, #0
 80095cc:	bf18      	it	ne
 80095ce:	2001      	movne	r0, #1
 80095d0:	b002      	add	sp, #8
 80095d2:	4770      	bx	lr
 80095d4:	4610      	mov	r0, r2
 80095d6:	e7fb      	b.n	80095d0 <__ascii_mbtowc+0x16>
 80095d8:	f06f 0001 	mvn.w	r0, #1
 80095dc:	e7f8      	b.n	80095d0 <__ascii_mbtowc+0x16>

080095de <__ssputs_r>:
 80095de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e2:	688e      	ldr	r6, [r1, #8]
 80095e4:	4682      	mov	sl, r0
 80095e6:	429e      	cmp	r6, r3
 80095e8:	460c      	mov	r4, r1
 80095ea:	4690      	mov	r8, r2
 80095ec:	4699      	mov	r9, r3
 80095ee:	d837      	bhi.n	8009660 <__ssputs_r+0x82>
 80095f0:	898a      	ldrh	r2, [r1, #12]
 80095f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095f6:	d031      	beq.n	800965c <__ssputs_r+0x7e>
 80095f8:	2302      	movs	r3, #2
 80095fa:	6825      	ldr	r5, [r4, #0]
 80095fc:	6909      	ldr	r1, [r1, #16]
 80095fe:	1a6f      	subs	r7, r5, r1
 8009600:	6965      	ldr	r5, [r4, #20]
 8009602:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009606:	fb95 f5f3 	sdiv	r5, r5, r3
 800960a:	f109 0301 	add.w	r3, r9, #1
 800960e:	443b      	add	r3, r7
 8009610:	429d      	cmp	r5, r3
 8009612:	bf38      	it	cc
 8009614:	461d      	movcc	r5, r3
 8009616:	0553      	lsls	r3, r2, #21
 8009618:	d530      	bpl.n	800967c <__ssputs_r+0x9e>
 800961a:	4629      	mov	r1, r5
 800961c:	f000 fb3a 	bl	8009c94 <_malloc_r>
 8009620:	4606      	mov	r6, r0
 8009622:	b950      	cbnz	r0, 800963a <__ssputs_r+0x5c>
 8009624:	230c      	movs	r3, #12
 8009626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800962a:	f8ca 3000 	str.w	r3, [sl]
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963a:	463a      	mov	r2, r7
 800963c:	6921      	ldr	r1, [r4, #16]
 800963e:	f7ff fef3 	bl	8009428 <memcpy>
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	6126      	str	r6, [r4, #16]
 8009650:	443e      	add	r6, r7
 8009652:	6026      	str	r6, [r4, #0]
 8009654:	464e      	mov	r6, r9
 8009656:	6165      	str	r5, [r4, #20]
 8009658:	1bed      	subs	r5, r5, r7
 800965a:	60a5      	str	r5, [r4, #8]
 800965c:	454e      	cmp	r6, r9
 800965e:	d900      	bls.n	8009662 <__ssputs_r+0x84>
 8009660:	464e      	mov	r6, r9
 8009662:	4632      	mov	r2, r6
 8009664:	4641      	mov	r1, r8
 8009666:	6820      	ldr	r0, [r4, #0]
 8009668:	f000 faaf 	bl	8009bca <memmove>
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	2000      	movs	r0, #0
 8009670:	1b9b      	subs	r3, r3, r6
 8009672:	60a3      	str	r3, [r4, #8]
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	441e      	add	r6, r3
 8009678:	6026      	str	r6, [r4, #0]
 800967a:	e7dc      	b.n	8009636 <__ssputs_r+0x58>
 800967c:	462a      	mov	r2, r5
 800967e:	f000 fb63 	bl	8009d48 <_realloc_r>
 8009682:	4606      	mov	r6, r0
 8009684:	2800      	cmp	r0, #0
 8009686:	d1e2      	bne.n	800964e <__ssputs_r+0x70>
 8009688:	6921      	ldr	r1, [r4, #16]
 800968a:	4650      	mov	r0, sl
 800968c:	f000 fab6 	bl	8009bfc <_free_r>
 8009690:	e7c8      	b.n	8009624 <__ssputs_r+0x46>
	...

08009694 <_svfiprintf_r>:
 8009694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	461d      	mov	r5, r3
 800969a:	898b      	ldrh	r3, [r1, #12]
 800969c:	b09d      	sub	sp, #116	; 0x74
 800969e:	061f      	lsls	r7, r3, #24
 80096a0:	4680      	mov	r8, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	4616      	mov	r6, r2
 80096a6:	d50f      	bpl.n	80096c8 <_svfiprintf_r+0x34>
 80096a8:	690b      	ldr	r3, [r1, #16]
 80096aa:	b96b      	cbnz	r3, 80096c8 <_svfiprintf_r+0x34>
 80096ac:	2140      	movs	r1, #64	; 0x40
 80096ae:	f000 faf1 	bl	8009c94 <_malloc_r>
 80096b2:	6020      	str	r0, [r4, #0]
 80096b4:	6120      	str	r0, [r4, #16]
 80096b6:	b928      	cbnz	r0, 80096c4 <_svfiprintf_r+0x30>
 80096b8:	230c      	movs	r3, #12
 80096ba:	f8c8 3000 	str.w	r3, [r8]
 80096be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c2:	e0c8      	b.n	8009856 <_svfiprintf_r+0x1c2>
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	6163      	str	r3, [r4, #20]
 80096c8:	2300      	movs	r3, #0
 80096ca:	9309      	str	r3, [sp, #36]	; 0x24
 80096cc:	2320      	movs	r3, #32
 80096ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096d2:	2330      	movs	r3, #48	; 0x30
 80096d4:	f04f 0b01 	mov.w	fp, #1
 80096d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096dc:	9503      	str	r5, [sp, #12]
 80096de:	4637      	mov	r7, r6
 80096e0:	463d      	mov	r5, r7
 80096e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80096e6:	b10b      	cbz	r3, 80096ec <_svfiprintf_r+0x58>
 80096e8:	2b25      	cmp	r3, #37	; 0x25
 80096ea:	d13e      	bne.n	800976a <_svfiprintf_r+0xd6>
 80096ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80096f0:	d00b      	beq.n	800970a <_svfiprintf_r+0x76>
 80096f2:	4653      	mov	r3, sl
 80096f4:	4632      	mov	r2, r6
 80096f6:	4621      	mov	r1, r4
 80096f8:	4640      	mov	r0, r8
 80096fa:	f7ff ff70 	bl	80095de <__ssputs_r>
 80096fe:	3001      	adds	r0, #1
 8009700:	f000 80a4 	beq.w	800984c <_svfiprintf_r+0x1b8>
 8009704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009706:	4453      	add	r3, sl
 8009708:	9309      	str	r3, [sp, #36]	; 0x24
 800970a:	783b      	ldrb	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 809d 	beq.w	800984c <_svfiprintf_r+0x1b8>
 8009712:	2300      	movs	r3, #0
 8009714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	9307      	str	r3, [sp, #28]
 8009720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009724:	931a      	str	r3, [sp, #104]	; 0x68
 8009726:	462f      	mov	r7, r5
 8009728:	2205      	movs	r2, #5
 800972a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800972e:	4850      	ldr	r0, [pc, #320]	; (8009870 <_svfiprintf_r+0x1dc>)
 8009730:	f000 fa3d 	bl	8009bae <memchr>
 8009734:	9b04      	ldr	r3, [sp, #16]
 8009736:	b9d0      	cbnz	r0, 800976e <_svfiprintf_r+0xda>
 8009738:	06d9      	lsls	r1, r3, #27
 800973a:	bf44      	itt	mi
 800973c:	2220      	movmi	r2, #32
 800973e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009742:	071a      	lsls	r2, r3, #28
 8009744:	bf44      	itt	mi
 8009746:	222b      	movmi	r2, #43	; 0x2b
 8009748:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800974c:	782a      	ldrb	r2, [r5, #0]
 800974e:	2a2a      	cmp	r2, #42	; 0x2a
 8009750:	d015      	beq.n	800977e <_svfiprintf_r+0xea>
 8009752:	462f      	mov	r7, r5
 8009754:	2000      	movs	r0, #0
 8009756:	250a      	movs	r5, #10
 8009758:	9a07      	ldr	r2, [sp, #28]
 800975a:	4639      	mov	r1, r7
 800975c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009760:	3b30      	subs	r3, #48	; 0x30
 8009762:	2b09      	cmp	r3, #9
 8009764:	d94d      	bls.n	8009802 <_svfiprintf_r+0x16e>
 8009766:	b1b8      	cbz	r0, 8009798 <_svfiprintf_r+0x104>
 8009768:	e00f      	b.n	800978a <_svfiprintf_r+0xf6>
 800976a:	462f      	mov	r7, r5
 800976c:	e7b8      	b.n	80096e0 <_svfiprintf_r+0x4c>
 800976e:	4a40      	ldr	r2, [pc, #256]	; (8009870 <_svfiprintf_r+0x1dc>)
 8009770:	463d      	mov	r5, r7
 8009772:	1a80      	subs	r0, r0, r2
 8009774:	fa0b f000 	lsl.w	r0, fp, r0
 8009778:	4318      	orrs	r0, r3
 800977a:	9004      	str	r0, [sp, #16]
 800977c:	e7d3      	b.n	8009726 <_svfiprintf_r+0x92>
 800977e:	9a03      	ldr	r2, [sp, #12]
 8009780:	1d11      	adds	r1, r2, #4
 8009782:	6812      	ldr	r2, [r2, #0]
 8009784:	9103      	str	r1, [sp, #12]
 8009786:	2a00      	cmp	r2, #0
 8009788:	db01      	blt.n	800978e <_svfiprintf_r+0xfa>
 800978a:	9207      	str	r2, [sp, #28]
 800978c:	e004      	b.n	8009798 <_svfiprintf_r+0x104>
 800978e:	4252      	negs	r2, r2
 8009790:	f043 0302 	orr.w	r3, r3, #2
 8009794:	9207      	str	r2, [sp, #28]
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	783b      	ldrb	r3, [r7, #0]
 800979a:	2b2e      	cmp	r3, #46	; 0x2e
 800979c:	d10c      	bne.n	80097b8 <_svfiprintf_r+0x124>
 800979e:	787b      	ldrb	r3, [r7, #1]
 80097a0:	2b2a      	cmp	r3, #42	; 0x2a
 80097a2:	d133      	bne.n	800980c <_svfiprintf_r+0x178>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	3702      	adds	r7, #2
 80097a8:	1d1a      	adds	r2, r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	9203      	str	r2, [sp, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfb8      	it	lt
 80097b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	4d2e      	ldr	r5, [pc, #184]	; (8009874 <_svfiprintf_r+0x1e0>)
 80097ba:	2203      	movs	r2, #3
 80097bc:	7839      	ldrb	r1, [r7, #0]
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 f9f5 	bl	8009bae <memchr>
 80097c4:	b138      	cbz	r0, 80097d6 <_svfiprintf_r+0x142>
 80097c6:	2340      	movs	r3, #64	; 0x40
 80097c8:	1b40      	subs	r0, r0, r5
 80097ca:	fa03 f000 	lsl.w	r0, r3, r0
 80097ce:	9b04      	ldr	r3, [sp, #16]
 80097d0:	3701      	adds	r7, #1
 80097d2:	4303      	orrs	r3, r0
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	7839      	ldrb	r1, [r7, #0]
 80097d8:	2206      	movs	r2, #6
 80097da:	4827      	ldr	r0, [pc, #156]	; (8009878 <_svfiprintf_r+0x1e4>)
 80097dc:	1c7e      	adds	r6, r7, #1
 80097de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e2:	f000 f9e4 	bl	8009bae <memchr>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d038      	beq.n	800985c <_svfiprintf_r+0x1c8>
 80097ea:	4b24      	ldr	r3, [pc, #144]	; (800987c <_svfiprintf_r+0x1e8>)
 80097ec:	bb13      	cbnz	r3, 8009834 <_svfiprintf_r+0x1a0>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	3307      	adds	r3, #7
 80097f2:	f023 0307 	bic.w	r3, r3, #7
 80097f6:	3308      	adds	r3, #8
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fc:	444b      	add	r3, r9
 80097fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009800:	e76d      	b.n	80096de <_svfiprintf_r+0x4a>
 8009802:	fb05 3202 	mla	r2, r5, r2, r3
 8009806:	2001      	movs	r0, #1
 8009808:	460f      	mov	r7, r1
 800980a:	e7a6      	b.n	800975a <_svfiprintf_r+0xc6>
 800980c:	2300      	movs	r3, #0
 800980e:	250a      	movs	r5, #10
 8009810:	4619      	mov	r1, r3
 8009812:	3701      	adds	r7, #1
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	4638      	mov	r0, r7
 8009818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800981c:	3a30      	subs	r2, #48	; 0x30
 800981e:	2a09      	cmp	r2, #9
 8009820:	d903      	bls.n	800982a <_svfiprintf_r+0x196>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0c8      	beq.n	80097b8 <_svfiprintf_r+0x124>
 8009826:	9105      	str	r1, [sp, #20]
 8009828:	e7c6      	b.n	80097b8 <_svfiprintf_r+0x124>
 800982a:	fb05 2101 	mla	r1, r5, r1, r2
 800982e:	2301      	movs	r3, #1
 8009830:	4607      	mov	r7, r0
 8009832:	e7f0      	b.n	8009816 <_svfiprintf_r+0x182>
 8009834:	ab03      	add	r3, sp, #12
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4622      	mov	r2, r4
 800983a:	4b11      	ldr	r3, [pc, #68]	; (8009880 <_svfiprintf_r+0x1ec>)
 800983c:	a904      	add	r1, sp, #16
 800983e:	4640      	mov	r0, r8
 8009840:	f3af 8000 	nop.w
 8009844:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009848:	4681      	mov	r9, r0
 800984a:	d1d6      	bne.n	80097fa <_svfiprintf_r+0x166>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	065b      	lsls	r3, r3, #25
 8009850:	f53f af35 	bmi.w	80096be <_svfiprintf_r+0x2a>
 8009854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009856:	b01d      	add	sp, #116	; 0x74
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985c:	ab03      	add	r3, sp, #12
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	4622      	mov	r2, r4
 8009862:	4b07      	ldr	r3, [pc, #28]	; (8009880 <_svfiprintf_r+0x1ec>)
 8009864:	a904      	add	r1, sp, #16
 8009866:	4640      	mov	r0, r8
 8009868:	f000 f882 	bl	8009970 <_printf_i>
 800986c:	e7ea      	b.n	8009844 <_svfiprintf_r+0x1b0>
 800986e:	bf00      	nop
 8009870:	08009f02 	.word	0x08009f02
 8009874:	08009f08 	.word	0x08009f08
 8009878:	08009f0c 	.word	0x08009f0c
 800987c:	00000000 	.word	0x00000000
 8009880:	080095df 	.word	0x080095df

08009884 <_printf_common>:
 8009884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	4691      	mov	r9, r2
 800988a:	461f      	mov	r7, r3
 800988c:	688a      	ldr	r2, [r1, #8]
 800988e:	690b      	ldr	r3, [r1, #16]
 8009890:	4606      	mov	r6, r0
 8009892:	4293      	cmp	r3, r2
 8009894:	bfb8      	it	lt
 8009896:	4613      	movlt	r3, r2
 8009898:	f8c9 3000 	str.w	r3, [r9]
 800989c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098a0:	460c      	mov	r4, r1
 80098a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098a6:	b112      	cbz	r2, 80098ae <_printf_common+0x2a>
 80098a8:	3301      	adds	r3, #1
 80098aa:	f8c9 3000 	str.w	r3, [r9]
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	0699      	lsls	r1, r3, #26
 80098b2:	bf42      	ittt	mi
 80098b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80098b8:	3302      	addmi	r3, #2
 80098ba:	f8c9 3000 	strmi.w	r3, [r9]
 80098be:	6825      	ldr	r5, [r4, #0]
 80098c0:	f015 0506 	ands.w	r5, r5, #6
 80098c4:	d107      	bne.n	80098d6 <_printf_common+0x52>
 80098c6:	f104 0a19 	add.w	sl, r4, #25
 80098ca:	68e3      	ldr	r3, [r4, #12]
 80098cc:	f8d9 2000 	ldr.w	r2, [r9]
 80098d0:	1a9b      	subs	r3, r3, r2
 80098d2:	42ab      	cmp	r3, r5
 80098d4:	dc29      	bgt.n	800992a <_printf_common+0xa6>
 80098d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	3300      	adds	r3, #0
 80098de:	bf18      	it	ne
 80098e0:	2301      	movne	r3, #1
 80098e2:	0692      	lsls	r2, r2, #26
 80098e4:	d42e      	bmi.n	8009944 <_printf_common+0xc0>
 80098e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ea:	4639      	mov	r1, r7
 80098ec:	4630      	mov	r0, r6
 80098ee:	47c0      	blx	r8
 80098f0:	3001      	adds	r0, #1
 80098f2:	d021      	beq.n	8009938 <_printf_common+0xb4>
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	68e5      	ldr	r5, [r4, #12]
 80098f8:	f003 0306 	and.w	r3, r3, #6
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	bf18      	it	ne
 8009900:	2500      	movne	r5, #0
 8009902:	f8d9 2000 	ldr.w	r2, [r9]
 8009906:	f04f 0900 	mov.w	r9, #0
 800990a:	bf08      	it	eq
 800990c:	1aad      	subeq	r5, r5, r2
 800990e:	68a3      	ldr	r3, [r4, #8]
 8009910:	6922      	ldr	r2, [r4, #16]
 8009912:	bf08      	it	eq
 8009914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009918:	4293      	cmp	r3, r2
 800991a:	bfc4      	itt	gt
 800991c:	1a9b      	subgt	r3, r3, r2
 800991e:	18ed      	addgt	r5, r5, r3
 8009920:	341a      	adds	r4, #26
 8009922:	454d      	cmp	r5, r9
 8009924:	d11a      	bne.n	800995c <_printf_common+0xd8>
 8009926:	2000      	movs	r0, #0
 8009928:	e008      	b.n	800993c <_printf_common+0xb8>
 800992a:	2301      	movs	r3, #1
 800992c:	4652      	mov	r2, sl
 800992e:	4639      	mov	r1, r7
 8009930:	4630      	mov	r0, r6
 8009932:	47c0      	blx	r8
 8009934:	3001      	adds	r0, #1
 8009936:	d103      	bne.n	8009940 <_printf_common+0xbc>
 8009938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009940:	3501      	adds	r5, #1
 8009942:	e7c2      	b.n	80098ca <_printf_common+0x46>
 8009944:	2030      	movs	r0, #48	; 0x30
 8009946:	18e1      	adds	r1, r4, r3
 8009948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009952:	4422      	add	r2, r4
 8009954:	3302      	adds	r3, #2
 8009956:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800995a:	e7c4      	b.n	80098e6 <_printf_common+0x62>
 800995c:	2301      	movs	r3, #1
 800995e:	4622      	mov	r2, r4
 8009960:	4639      	mov	r1, r7
 8009962:	4630      	mov	r0, r6
 8009964:	47c0      	blx	r8
 8009966:	3001      	adds	r0, #1
 8009968:	d0e6      	beq.n	8009938 <_printf_common+0xb4>
 800996a:	f109 0901 	add.w	r9, r9, #1
 800996e:	e7d8      	b.n	8009922 <_printf_common+0x9e>

08009970 <_printf_i>:
 8009970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009974:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009978:	460c      	mov	r4, r1
 800997a:	7e09      	ldrb	r1, [r1, #24]
 800997c:	b085      	sub	sp, #20
 800997e:	296e      	cmp	r1, #110	; 0x6e
 8009980:	4617      	mov	r7, r2
 8009982:	4606      	mov	r6, r0
 8009984:	4698      	mov	r8, r3
 8009986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009988:	f000 80b3 	beq.w	8009af2 <_printf_i+0x182>
 800998c:	d822      	bhi.n	80099d4 <_printf_i+0x64>
 800998e:	2963      	cmp	r1, #99	; 0x63
 8009990:	d036      	beq.n	8009a00 <_printf_i+0x90>
 8009992:	d80a      	bhi.n	80099aa <_printf_i+0x3a>
 8009994:	2900      	cmp	r1, #0
 8009996:	f000 80b9 	beq.w	8009b0c <_printf_i+0x19c>
 800999a:	2958      	cmp	r1, #88	; 0x58
 800999c:	f000 8083 	beq.w	8009aa6 <_printf_i+0x136>
 80099a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80099a8:	e032      	b.n	8009a10 <_printf_i+0xa0>
 80099aa:	2964      	cmp	r1, #100	; 0x64
 80099ac:	d001      	beq.n	80099b2 <_printf_i+0x42>
 80099ae:	2969      	cmp	r1, #105	; 0x69
 80099b0:	d1f6      	bne.n	80099a0 <_printf_i+0x30>
 80099b2:	6820      	ldr	r0, [r4, #0]
 80099b4:	6813      	ldr	r3, [r2, #0]
 80099b6:	0605      	lsls	r5, r0, #24
 80099b8:	f103 0104 	add.w	r1, r3, #4
 80099bc:	d52a      	bpl.n	8009a14 <_printf_i+0xa4>
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6011      	str	r1, [r2, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	da03      	bge.n	80099ce <_printf_i+0x5e>
 80099c6:	222d      	movs	r2, #45	; 0x2d
 80099c8:	425b      	negs	r3, r3
 80099ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80099ce:	486f      	ldr	r0, [pc, #444]	; (8009b8c <_printf_i+0x21c>)
 80099d0:	220a      	movs	r2, #10
 80099d2:	e039      	b.n	8009a48 <_printf_i+0xd8>
 80099d4:	2973      	cmp	r1, #115	; 0x73
 80099d6:	f000 809d 	beq.w	8009b14 <_printf_i+0x1a4>
 80099da:	d808      	bhi.n	80099ee <_printf_i+0x7e>
 80099dc:	296f      	cmp	r1, #111	; 0x6f
 80099de:	d020      	beq.n	8009a22 <_printf_i+0xb2>
 80099e0:	2970      	cmp	r1, #112	; 0x70
 80099e2:	d1dd      	bne.n	80099a0 <_printf_i+0x30>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	f043 0320 	orr.w	r3, r3, #32
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	e003      	b.n	80099f6 <_printf_i+0x86>
 80099ee:	2975      	cmp	r1, #117	; 0x75
 80099f0:	d017      	beq.n	8009a22 <_printf_i+0xb2>
 80099f2:	2978      	cmp	r1, #120	; 0x78
 80099f4:	d1d4      	bne.n	80099a0 <_printf_i+0x30>
 80099f6:	2378      	movs	r3, #120	; 0x78
 80099f8:	4865      	ldr	r0, [pc, #404]	; (8009b90 <_printf_i+0x220>)
 80099fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099fe:	e055      	b.n	8009aac <_printf_i+0x13c>
 8009a00:	6813      	ldr	r3, [r2, #0]
 8009a02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a06:	1d19      	adds	r1, r3, #4
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6011      	str	r1, [r2, #0]
 8009a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a10:	2301      	movs	r3, #1
 8009a12:	e08c      	b.n	8009b2e <_printf_i+0x1be>
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a1a:	6011      	str	r1, [r2, #0]
 8009a1c:	bf18      	it	ne
 8009a1e:	b21b      	sxthne	r3, r3
 8009a20:	e7cf      	b.n	80099c2 <_printf_i+0x52>
 8009a22:	6813      	ldr	r3, [r2, #0]
 8009a24:	6825      	ldr	r5, [r4, #0]
 8009a26:	1d18      	adds	r0, r3, #4
 8009a28:	6010      	str	r0, [r2, #0]
 8009a2a:	0628      	lsls	r0, r5, #24
 8009a2c:	d501      	bpl.n	8009a32 <_printf_i+0xc2>
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	e002      	b.n	8009a38 <_printf_i+0xc8>
 8009a32:	0668      	lsls	r0, r5, #25
 8009a34:	d5fb      	bpl.n	8009a2e <_printf_i+0xbe>
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	296f      	cmp	r1, #111	; 0x6f
 8009a3a:	bf14      	ite	ne
 8009a3c:	220a      	movne	r2, #10
 8009a3e:	2208      	moveq	r2, #8
 8009a40:	4852      	ldr	r0, [pc, #328]	; (8009b8c <_printf_i+0x21c>)
 8009a42:	2100      	movs	r1, #0
 8009a44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a48:	6865      	ldr	r5, [r4, #4]
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	60a5      	str	r5, [r4, #8]
 8009a4e:	f2c0 8095 	blt.w	8009b7c <_printf_i+0x20c>
 8009a52:	6821      	ldr	r1, [r4, #0]
 8009a54:	f021 0104 	bic.w	r1, r1, #4
 8009a58:	6021      	str	r1, [r4, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d13d      	bne.n	8009ada <_printf_i+0x16a>
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	f040 808e 	bne.w	8009b80 <_printf_i+0x210>
 8009a64:	4665      	mov	r5, ip
 8009a66:	2a08      	cmp	r2, #8
 8009a68:	d10b      	bne.n	8009a82 <_printf_i+0x112>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	07db      	lsls	r3, r3, #31
 8009a6e:	d508      	bpl.n	8009a82 <_printf_i+0x112>
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	6862      	ldr	r2, [r4, #4]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	bfde      	ittt	le
 8009a78:	2330      	movle	r3, #48	; 0x30
 8009a7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a7e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009a82:	ebac 0305 	sub.w	r3, ip, r5
 8009a86:	6123      	str	r3, [r4, #16]
 8009a88:	f8cd 8000 	str.w	r8, [sp]
 8009a8c:	463b      	mov	r3, r7
 8009a8e:	aa03      	add	r2, sp, #12
 8009a90:	4621      	mov	r1, r4
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff fef6 	bl	8009884 <_printf_common>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d14d      	bne.n	8009b38 <_printf_i+0x1c8>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aa0:	b005      	add	sp, #20
 8009aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aa6:	4839      	ldr	r0, [pc, #228]	; (8009b8c <_printf_i+0x21c>)
 8009aa8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009aac:	6813      	ldr	r3, [r2, #0]
 8009aae:	6821      	ldr	r1, [r4, #0]
 8009ab0:	1d1d      	adds	r5, r3, #4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6015      	str	r5, [r2, #0]
 8009ab6:	060a      	lsls	r2, r1, #24
 8009ab8:	d50b      	bpl.n	8009ad2 <_printf_i+0x162>
 8009aba:	07ca      	lsls	r2, r1, #31
 8009abc:	bf44      	itt	mi
 8009abe:	f041 0120 	orrmi.w	r1, r1, #32
 8009ac2:	6021      	strmi	r1, [r4, #0]
 8009ac4:	b91b      	cbnz	r3, 8009ace <_printf_i+0x15e>
 8009ac6:	6822      	ldr	r2, [r4, #0]
 8009ac8:	f022 0220 	bic.w	r2, r2, #32
 8009acc:	6022      	str	r2, [r4, #0]
 8009ace:	2210      	movs	r2, #16
 8009ad0:	e7b7      	b.n	8009a42 <_printf_i+0xd2>
 8009ad2:	064d      	lsls	r5, r1, #25
 8009ad4:	bf48      	it	mi
 8009ad6:	b29b      	uxthmi	r3, r3
 8009ad8:	e7ef      	b.n	8009aba <_printf_i+0x14a>
 8009ada:	4665      	mov	r5, ip
 8009adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ae0:	fb02 3311 	mls	r3, r2, r1, r3
 8009ae4:	5cc3      	ldrb	r3, [r0, r3]
 8009ae6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009aea:	460b      	mov	r3, r1
 8009aec:	2900      	cmp	r1, #0
 8009aee:	d1f5      	bne.n	8009adc <_printf_i+0x16c>
 8009af0:	e7b9      	b.n	8009a66 <_printf_i+0xf6>
 8009af2:	6813      	ldr	r3, [r2, #0]
 8009af4:	6825      	ldr	r5, [r4, #0]
 8009af6:	1d18      	adds	r0, r3, #4
 8009af8:	6961      	ldr	r1, [r4, #20]
 8009afa:	6010      	str	r0, [r2, #0]
 8009afc:	0628      	lsls	r0, r5, #24
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	d501      	bpl.n	8009b06 <_printf_i+0x196>
 8009b02:	6019      	str	r1, [r3, #0]
 8009b04:	e002      	b.n	8009b0c <_printf_i+0x19c>
 8009b06:	066a      	lsls	r2, r5, #25
 8009b08:	d5fb      	bpl.n	8009b02 <_printf_i+0x192>
 8009b0a:	8019      	strh	r1, [r3, #0]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4665      	mov	r5, ip
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	e7b9      	b.n	8009a88 <_printf_i+0x118>
 8009b14:	6813      	ldr	r3, [r2, #0]
 8009b16:	1d19      	adds	r1, r3, #4
 8009b18:	6011      	str	r1, [r2, #0]
 8009b1a:	681d      	ldr	r5, [r3, #0]
 8009b1c:	6862      	ldr	r2, [r4, #4]
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 f844 	bl	8009bae <memchr>
 8009b26:	b108      	cbz	r0, 8009b2c <_printf_i+0x1bc>
 8009b28:	1b40      	subs	r0, r0, r5
 8009b2a:	6060      	str	r0, [r4, #4]
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	6123      	str	r3, [r4, #16]
 8009b30:	2300      	movs	r3, #0
 8009b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b36:	e7a7      	b.n	8009a88 <_printf_i+0x118>
 8009b38:	6923      	ldr	r3, [r4, #16]
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	4630      	mov	r0, r6
 8009b40:	47c0      	blx	r8
 8009b42:	3001      	adds	r0, #1
 8009b44:	d0aa      	beq.n	8009a9c <_printf_i+0x12c>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	079b      	lsls	r3, r3, #30
 8009b4a:	d413      	bmi.n	8009b74 <_printf_i+0x204>
 8009b4c:	68e0      	ldr	r0, [r4, #12]
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	4298      	cmp	r0, r3
 8009b52:	bfb8      	it	lt
 8009b54:	4618      	movlt	r0, r3
 8009b56:	e7a3      	b.n	8009aa0 <_printf_i+0x130>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	464a      	mov	r2, r9
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	4630      	mov	r0, r6
 8009b60:	47c0      	blx	r8
 8009b62:	3001      	adds	r0, #1
 8009b64:	d09a      	beq.n	8009a9c <_printf_i+0x12c>
 8009b66:	3501      	adds	r5, #1
 8009b68:	68e3      	ldr	r3, [r4, #12]
 8009b6a:	9a03      	ldr	r2, [sp, #12]
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	42ab      	cmp	r3, r5
 8009b70:	dcf2      	bgt.n	8009b58 <_printf_i+0x1e8>
 8009b72:	e7eb      	b.n	8009b4c <_printf_i+0x1dc>
 8009b74:	2500      	movs	r5, #0
 8009b76:	f104 0919 	add.w	r9, r4, #25
 8009b7a:	e7f5      	b.n	8009b68 <_printf_i+0x1f8>
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1ac      	bne.n	8009ada <_printf_i+0x16a>
 8009b80:	7803      	ldrb	r3, [r0, #0]
 8009b82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b8a:	e76c      	b.n	8009a66 <_printf_i+0xf6>
 8009b8c:	08009f13 	.word	0x08009f13
 8009b90:	08009f24 	.word	0x08009f24

08009b94 <__ascii_wctomb>:
 8009b94:	b149      	cbz	r1, 8009baa <__ascii_wctomb+0x16>
 8009b96:	2aff      	cmp	r2, #255	; 0xff
 8009b98:	bf8b      	itete	hi
 8009b9a:	238a      	movhi	r3, #138	; 0x8a
 8009b9c:	700a      	strbls	r2, [r1, #0]
 8009b9e:	6003      	strhi	r3, [r0, #0]
 8009ba0:	2001      	movls	r0, #1
 8009ba2:	bf88      	it	hi
 8009ba4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009ba8:	4770      	bx	lr
 8009baa:	4608      	mov	r0, r1
 8009bac:	4770      	bx	lr

08009bae <memchr>:
 8009bae:	b510      	push	{r4, lr}
 8009bb0:	b2c9      	uxtb	r1, r1
 8009bb2:	4402      	add	r2, r0
 8009bb4:	4290      	cmp	r0, r2
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	d101      	bne.n	8009bbe <memchr+0x10>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e003      	b.n	8009bc6 <memchr+0x18>
 8009bbe:	781c      	ldrb	r4, [r3, #0]
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	428c      	cmp	r4, r1
 8009bc4:	d1f6      	bne.n	8009bb4 <memchr+0x6>
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	bd10      	pop	{r4, pc}

08009bca <memmove>:
 8009bca:	4288      	cmp	r0, r1
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	eb01 0302 	add.w	r3, r1, r2
 8009bd2:	d807      	bhi.n	8009be4 <memmove+0x1a>
 8009bd4:	1e42      	subs	r2, r0, #1
 8009bd6:	4299      	cmp	r1, r3
 8009bd8:	d00a      	beq.n	8009bf0 <memmove+0x26>
 8009bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bde:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009be2:	e7f8      	b.n	8009bd6 <memmove+0xc>
 8009be4:	4283      	cmp	r3, r0
 8009be6:	d9f5      	bls.n	8009bd4 <memmove+0xa>
 8009be8:	1881      	adds	r1, r0, r2
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	42d3      	cmn	r3, r2
 8009bee:	d100      	bne.n	8009bf2 <memmove+0x28>
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bf6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009bfa:	e7f7      	b.n	8009bec <memmove+0x22>

08009bfc <_free_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4605      	mov	r5, r0
 8009c00:	2900      	cmp	r1, #0
 8009c02:	d043      	beq.n	8009c8c <_free_r+0x90>
 8009c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c08:	1f0c      	subs	r4, r1, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bfb8      	it	lt
 8009c0e:	18e4      	addlt	r4, r4, r3
 8009c10:	f000 f8d0 	bl	8009db4 <__malloc_lock>
 8009c14:	4a1e      	ldr	r2, [pc, #120]	; (8009c90 <_free_r+0x94>)
 8009c16:	6813      	ldr	r3, [r2, #0]
 8009c18:	4610      	mov	r0, r2
 8009c1a:	b933      	cbnz	r3, 8009c2a <_free_r+0x2e>
 8009c1c:	6063      	str	r3, [r4, #4]
 8009c1e:	6014      	str	r4, [r2, #0]
 8009c20:	4628      	mov	r0, r5
 8009c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c26:	f000 b8c6 	b.w	8009db6 <__malloc_unlock>
 8009c2a:	42a3      	cmp	r3, r4
 8009c2c:	d90b      	bls.n	8009c46 <_free_r+0x4a>
 8009c2e:	6821      	ldr	r1, [r4, #0]
 8009c30:	1862      	adds	r2, r4, r1
 8009c32:	4293      	cmp	r3, r2
 8009c34:	bf01      	itttt	eq
 8009c36:	681a      	ldreq	r2, [r3, #0]
 8009c38:	685b      	ldreq	r3, [r3, #4]
 8009c3a:	1852      	addeq	r2, r2, r1
 8009c3c:	6022      	streq	r2, [r4, #0]
 8009c3e:	6063      	str	r3, [r4, #4]
 8009c40:	6004      	str	r4, [r0, #0]
 8009c42:	e7ed      	b.n	8009c20 <_free_r+0x24>
 8009c44:	4613      	mov	r3, r2
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	b10a      	cbz	r2, 8009c4e <_free_r+0x52>
 8009c4a:	42a2      	cmp	r2, r4
 8009c4c:	d9fa      	bls.n	8009c44 <_free_r+0x48>
 8009c4e:	6819      	ldr	r1, [r3, #0]
 8009c50:	1858      	adds	r0, r3, r1
 8009c52:	42a0      	cmp	r0, r4
 8009c54:	d10b      	bne.n	8009c6e <_free_r+0x72>
 8009c56:	6820      	ldr	r0, [r4, #0]
 8009c58:	4401      	add	r1, r0
 8009c5a:	1858      	adds	r0, r3, r1
 8009c5c:	4282      	cmp	r2, r0
 8009c5e:	6019      	str	r1, [r3, #0]
 8009c60:	d1de      	bne.n	8009c20 <_free_r+0x24>
 8009c62:	6810      	ldr	r0, [r2, #0]
 8009c64:	6852      	ldr	r2, [r2, #4]
 8009c66:	4401      	add	r1, r0
 8009c68:	6019      	str	r1, [r3, #0]
 8009c6a:	605a      	str	r2, [r3, #4]
 8009c6c:	e7d8      	b.n	8009c20 <_free_r+0x24>
 8009c6e:	d902      	bls.n	8009c76 <_free_r+0x7a>
 8009c70:	230c      	movs	r3, #12
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	e7d4      	b.n	8009c20 <_free_r+0x24>
 8009c76:	6820      	ldr	r0, [r4, #0]
 8009c78:	1821      	adds	r1, r4, r0
 8009c7a:	428a      	cmp	r2, r1
 8009c7c:	bf01      	itttt	eq
 8009c7e:	6811      	ldreq	r1, [r2, #0]
 8009c80:	6852      	ldreq	r2, [r2, #4]
 8009c82:	1809      	addeq	r1, r1, r0
 8009c84:	6021      	streq	r1, [r4, #0]
 8009c86:	6062      	str	r2, [r4, #4]
 8009c88:	605c      	str	r4, [r3, #4]
 8009c8a:	e7c9      	b.n	8009c20 <_free_r+0x24>
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
 8009c8e:	bf00      	nop
 8009c90:	20001758 	.word	0x20001758

08009c94 <_malloc_r>:
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	1ccd      	adds	r5, r1, #3
 8009c98:	f025 0503 	bic.w	r5, r5, #3
 8009c9c:	3508      	adds	r5, #8
 8009c9e:	2d0c      	cmp	r5, #12
 8009ca0:	bf38      	it	cc
 8009ca2:	250c      	movcc	r5, #12
 8009ca4:	2d00      	cmp	r5, #0
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	db01      	blt.n	8009cae <_malloc_r+0x1a>
 8009caa:	42a9      	cmp	r1, r5
 8009cac:	d903      	bls.n	8009cb6 <_malloc_r+0x22>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	6033      	str	r3, [r6, #0]
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}
 8009cb6:	f000 f87d 	bl	8009db4 <__malloc_lock>
 8009cba:	4a21      	ldr	r2, [pc, #132]	; (8009d40 <_malloc_r+0xac>)
 8009cbc:	6814      	ldr	r4, [r2, #0]
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	b991      	cbnz	r1, 8009ce8 <_malloc_r+0x54>
 8009cc2:	4c20      	ldr	r4, [pc, #128]	; (8009d44 <_malloc_r+0xb0>)
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	b91b      	cbnz	r3, 8009cd0 <_malloc_r+0x3c>
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f000 f863 	bl	8009d94 <_sbrk_r>
 8009cce:	6020      	str	r0, [r4, #0]
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f000 f85e 	bl	8009d94 <_sbrk_r>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d124      	bne.n	8009d26 <_malloc_r+0x92>
 8009cdc:	230c      	movs	r3, #12
 8009cde:	4630      	mov	r0, r6
 8009ce0:	6033      	str	r3, [r6, #0]
 8009ce2:	f000 f868 	bl	8009db6 <__malloc_unlock>
 8009ce6:	e7e4      	b.n	8009cb2 <_malloc_r+0x1e>
 8009ce8:	680b      	ldr	r3, [r1, #0]
 8009cea:	1b5b      	subs	r3, r3, r5
 8009cec:	d418      	bmi.n	8009d20 <_malloc_r+0x8c>
 8009cee:	2b0b      	cmp	r3, #11
 8009cf0:	d90f      	bls.n	8009d12 <_malloc_r+0x7e>
 8009cf2:	600b      	str	r3, [r1, #0]
 8009cf4:	18cc      	adds	r4, r1, r3
 8009cf6:	50cd      	str	r5, [r1, r3]
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f000 f85c 	bl	8009db6 <__malloc_unlock>
 8009cfe:	f104 000b 	add.w	r0, r4, #11
 8009d02:	1d23      	adds	r3, r4, #4
 8009d04:	f020 0007 	bic.w	r0, r0, #7
 8009d08:	1ac3      	subs	r3, r0, r3
 8009d0a:	d0d3      	beq.n	8009cb4 <_malloc_r+0x20>
 8009d0c:	425a      	negs	r2, r3
 8009d0e:	50e2      	str	r2, [r4, r3]
 8009d10:	e7d0      	b.n	8009cb4 <_malloc_r+0x20>
 8009d12:	684b      	ldr	r3, [r1, #4]
 8009d14:	428c      	cmp	r4, r1
 8009d16:	bf16      	itet	ne
 8009d18:	6063      	strne	r3, [r4, #4]
 8009d1a:	6013      	streq	r3, [r2, #0]
 8009d1c:	460c      	movne	r4, r1
 8009d1e:	e7eb      	b.n	8009cf8 <_malloc_r+0x64>
 8009d20:	460c      	mov	r4, r1
 8009d22:	6849      	ldr	r1, [r1, #4]
 8009d24:	e7cc      	b.n	8009cc0 <_malloc_r+0x2c>
 8009d26:	1cc4      	adds	r4, r0, #3
 8009d28:	f024 0403 	bic.w	r4, r4, #3
 8009d2c:	42a0      	cmp	r0, r4
 8009d2e:	d005      	beq.n	8009d3c <_malloc_r+0xa8>
 8009d30:	1a21      	subs	r1, r4, r0
 8009d32:	4630      	mov	r0, r6
 8009d34:	f000 f82e 	bl	8009d94 <_sbrk_r>
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d0cf      	beq.n	8009cdc <_malloc_r+0x48>
 8009d3c:	6025      	str	r5, [r4, #0]
 8009d3e:	e7db      	b.n	8009cf8 <_malloc_r+0x64>
 8009d40:	20001758 	.word	0x20001758
 8009d44:	2000175c 	.word	0x2000175c

08009d48 <_realloc_r>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	460e      	mov	r6, r1
 8009d50:	b921      	cbnz	r1, 8009d5c <_realloc_r+0x14>
 8009d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d56:	4611      	mov	r1, r2
 8009d58:	f7ff bf9c 	b.w	8009c94 <_malloc_r>
 8009d5c:	b922      	cbnz	r2, 8009d68 <_realloc_r+0x20>
 8009d5e:	f7ff ff4d 	bl	8009bfc <_free_r>
 8009d62:	4625      	mov	r5, r4
 8009d64:	4628      	mov	r0, r5
 8009d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d68:	f000 f826 	bl	8009db8 <_malloc_usable_size_r>
 8009d6c:	42a0      	cmp	r0, r4
 8009d6e:	d20f      	bcs.n	8009d90 <_realloc_r+0x48>
 8009d70:	4621      	mov	r1, r4
 8009d72:	4638      	mov	r0, r7
 8009d74:	f7ff ff8e 	bl	8009c94 <_malloc_r>
 8009d78:	4605      	mov	r5, r0
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d0f2      	beq.n	8009d64 <_realloc_r+0x1c>
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4622      	mov	r2, r4
 8009d82:	f7ff fb51 	bl	8009428 <memcpy>
 8009d86:	4631      	mov	r1, r6
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f7ff ff37 	bl	8009bfc <_free_r>
 8009d8e:	e7e9      	b.n	8009d64 <_realloc_r+0x1c>
 8009d90:	4635      	mov	r5, r6
 8009d92:	e7e7      	b.n	8009d64 <_realloc_r+0x1c>

08009d94 <_sbrk_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	2300      	movs	r3, #0
 8009d98:	4c05      	ldr	r4, [pc, #20]	; (8009db0 <_sbrk_r+0x1c>)
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	f7f8 fc16 	bl	80025d0 <_sbrk>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_sbrk_r+0x1a>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_sbrk_r+0x1a>
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	20001ef8 	.word	0x20001ef8

08009db4 <__malloc_lock>:
 8009db4:	4770      	bx	lr

08009db6 <__malloc_unlock>:
 8009db6:	4770      	bx	lr

08009db8 <_malloc_usable_size_r>:
 8009db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dbc:	1f18      	subs	r0, r3, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bfbc      	itt	lt
 8009dc2:	580b      	ldrlt	r3, [r1, r0]
 8009dc4:	18c0      	addlt	r0, r0, r3
 8009dc6:	4770      	bx	lr

08009dc8 <_init>:
 8009dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dca:	bf00      	nop
 8009dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dce:	bc08      	pop	{r3}
 8009dd0:	469e      	mov	lr, r3
 8009dd2:	4770      	bx	lr

08009dd4 <_fini>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr
