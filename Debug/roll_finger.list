
roll_finger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08009c00  08009c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e70  08009e70  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009e70  08009e70  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e70  08009e70  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf0  200001f4  0800a06c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ee4  0800a06c  00021ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f68  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000370f  00000000  00000000  00039185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003c898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  0003dd60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a443  00000000  00000000  0003f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e9f  00000000  00000000  000594eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097d5e  00000000  00000000  0006a38a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001020e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  00102164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009be8 	.word	0x08009be8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08009be8 	.word	0x08009be8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <vApplicationGetIdleTaskMemory+0x28>)
 800095c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <vApplicationGetIdleTaskMemory+0x2c>)
 8000962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000210 	.word	0x20000210
 8000978:	20000264 	.word	0x20000264

0800097c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800098c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <vApplicationGetTimerTaskMemory+0x30>)
 8000992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000464 	.word	0x20000464
 80009ac:	200004b8 	.word	0x200004b8

080009b0 <lightupLED>:
    }*/

}

void lightupLED(struct pixel *framebuffer)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e01a      	b.n	80009f4 <lightupLED+0x44>
	{
		framebuffer[i].r=0;
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	dde1      	ble.n	80009be <lightupLED+0xe>
	}
	for(int i=5;i<12;i++)
 80009fa:	2305      	movs	r3, #5
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	e01a      	b.n	8000a36 <lightupLED+0x86>
	{
		framebuffer[i].r=0;
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	3301      	adds	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	2b0b      	cmp	r3, #11
 8000a3a:	dde1      	ble.n	8000a00 <lightupLED+0x50>
	}
	for(int i=12;i<17;i++)
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e01a      	b.n	8000a78 <lightupLED+0xc8>
	{
		framebuffer[i].r=50;
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	2232      	movs	r2, #50	; 0x32
 8000a50:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=50;
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	2232      	movs	r2, #50	; 0x32
 8000a60:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=50;
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2232      	movs	r2, #50	; 0x32
 8000a70:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<17;i++)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	dde1      	ble.n	8000a42 <lightupLED+0x92>
	}
	for(int i=17;i<24;i++)
 8000a7e:	2311      	movs	r3, #17
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	e01a      	b.n	8000aba <lightupLED+0x10a>
	{
		framebuffer[i].r=255;
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	709a      	strb	r2, [r3, #2]
	for(int i=17;i<24;i++)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b17      	cmp	r3, #23
 8000abe:	dde1      	ble.n	8000a84 <lightupLED+0xd4>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <lightupLED2>:
void lightupLED2(struct pixel *framebuffer)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b087      	sub	sp, #28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e01a      	b.n	8000b0e <lightupLED2+0x44>
	{
		framebuffer[i].r=0;
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	dde1      	ble.n	8000ad8 <lightupLED2+0xe>
	}
	for(int i=5;i<12;i++)
 8000b14:	2305      	movs	r3, #5
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	e01a      	b.n	8000b50 <lightupLED2+0x86>
	{
		framebuffer[i].r=0;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	2200      	movs	r2, #0
 8000b28:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	2200      	movs	r2, #0
 8000b48:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b0b      	cmp	r3, #11
 8000b54:	dde1      	ble.n	8000b1a <lightupLED2+0x50>
	}
	for(int i=12;i<19;i++)
 8000b56:	230c      	movs	r3, #12
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e01a      	b.n	8000b92 <lightupLED2+0xc8>
	{
		framebuffer[i].r=255;
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	2200      	movs	r2, #0
 8000b8a:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<19;i++)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b12      	cmp	r3, #18
 8000b96:	dde1      	ble.n	8000b5c <lightupLED2+0x92>
	}
}
 8000b98:	bf00      	nop
 8000b9a:	371c      	adds	r7, #28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <HAL_UART_RxCpltCallback>:
//---------[ UART Data Reception Completion CallBackFunc. ]---------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
   // HAL_UART_Transmit(&huart1, UART1_rxBuffer, 5, 100);  //for debug
    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 5);
 8000bac:	2205      	movs	r2, #5
 8000bae:	4904      	ldr	r1, [pc, #16]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1c>)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <HAL_UART_RxCpltCallback+0x20>)
 8000bb2:	f004 febd 	bl	8005930 <HAL_UART_Receive_IT>

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200008b8 	.word	0x200008b8
 8000bc4:	200018ec 	.word	0x200018ec

08000bc8 <stop_all>:
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

}

void stop_all()
{/*Stops all motors*/
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

	//reset the GPIO for open-close motors
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	480e      	ldr	r0, [pc, #56]	; (8000c0c <stop_all+0x44>)
 8000bd2:	f003 f8c7 	bl	8003d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2108      	movs	r1, #8
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <stop_all+0x44>)
 8000bdc:	f003 f8c2 	bl	8003d64 <HAL_GPIO_WritePin>

	//set all PWMs to 0
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <stop_all+0x48>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2200      	movs	r2, #0
 8000be6:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <stop_all+0x48>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2200      	movs	r2, #0
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <stop_all+0x48>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <stop_all+0x48>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <stop_all+0x4c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2200      	movs	r2, #0
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	20001794 	.word	0x20001794
 8000c14:	20001994 	.word	0x20001994

08000c18 <move_lf>:

void move_lf(int pwmval)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[6]<LFMaxPos)
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <move_lf+0x60>)
 8000c22:	699a      	ldr	r2, [r3, #24]
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <move_lf+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d220      	bcs.n	8000c6e <move_lf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <move_lf+0x68>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c34:	4618      	mov	r0, r3
 8000c36:	f005 fb0f 	bl	8006258 <osSemaphoreWait>
		// set the moving flag
		lfw= 1;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <move_lf+0x6c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000c40:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	2264      	movs	r2, #100	; 0x64
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f969 	bl	8000f24 <scale_val>
 8000c52:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <move_lf+0x70>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwmval);
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <move_lf+0x70>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <move_lf+0x68>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 fb43 	bl	80062f4 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20001870 	.word	0x20001870
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20001abc 	.word	0x20001abc
 8000c84:	200008c0 	.word	0x200008c0
 8000c88:	20001794 	.word	0x20001794

08000c8c <move_lb>:

void move_lb(int pwmval)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
	if(adc_value[6]>LFMinPos)
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <move_lb+0x60>)
 8000c96:	699a      	ldr	r2, [r3, #24]
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <move_lb+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d920      	bls.n	8000ce2 <move_lb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <move_lb+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 fad5 	bl	8006258 <osSemaphoreWait>
		//isMoveB_LF = 1;
		lrw=1;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <move_lb+0x6c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000cb4:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2264      	movs	r2, #100	; 0x64
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f92f 	bl	8000f24 <scale_val>
 8000cc6:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwmval);
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <move_lb+0x70>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <move_lb+0x70>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
		osSemaphoreRelease(BinSemHandle);
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <move_lb+0x68>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 fb09 	bl	80062f4 <osSemaphoreRelease>

	}

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20001870 	.word	0x20001870
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	20001abc 	.word	0x20001abc
 8000cf8:	200008c4 	.word	0x200008c4
 8000cfc:	20001794 	.word	0x20001794

08000d00 <move_rf>:

void move_rf(int pwmval)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	6078      	str	r0, [r7, #4]
	//	Check whether we are at the end positions
		//LF pos given by adc_value[6]
		// min value is around 100, max value 4000, so we set limits as 120 and 3900
		//scale the value from 0 to 100 => 0 to 2800
	if(adc_value[5]<RFMaxPos)
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <move_rf+0x60>)
 8000d0a:	695a      	ldr	r2, [r3, #20]
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <move_rf+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d220      	bcs.n	8000d56 <move_rf+0x56>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S1 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <move_rf+0x68>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fa9b 	bl	8006258 <osSemaphoreWait>
		// set the moving flag
		rfw= 1;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <move_rf+0x6c>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000d28:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2264      	movs	r2, #100	; 0x64
 8000d32:	2100      	movs	r1, #0
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f8f5 	bl	8000f24 <scale_val>
 8000d3a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <move_rf+0x70>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, pwmval);
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <move_rf+0x70>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <move_rf+0x68>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 facf 	bl	80062f4 <osSemaphoreRelease>
		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "S2 %d  %d \n", adc_value[6],isMoveF_LF ), 100);
	}

}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20001870 	.word	0x20001870
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20001abc 	.word	0x20001abc
 8000d6c:	200008c8 	.word	0x200008c8
 8000d70:	20001794 	.word	0x20001794

08000d74 <move_rb>:

void move_rb(int pwmval)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	6078      	str	r0, [r7, #4]
	if(adc_value[5]>RFMinPos)
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <move_rb+0x60>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <move_rb+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d920      	bls.n	8000dca <move_rb+0x56>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <move_rb+0x68>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	4618      	mov	r0, r3
 8000d92:	f005 fa61 	bl	8006258 <osSemaphoreWait>
		//isMoveB_LF = 1;
		rrw=1;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <move_rb+0x6c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
		//scale the value from 0 to 100 => 0 to 2800
		pwmval = scale_val(pwmval,0,100, 0, 2800);
 8000d9c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	2264      	movs	r2, #100	; 0x64
 8000da6:	2100      	movs	r1, #0
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 f8bb 	bl	8000f24 <scale_val>
 8000dae:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwmval);
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <move_rb+0x70>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <move_rb+0x70>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
		osSemaphoreRelease(BinSemHandle);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <move_rb+0x68>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 fa95 	bl	80062f4 <osSemaphoreRelease>

	}

}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20001870 	.word	0x20001870
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	20001abc 	.word	0x20001abc
 8000de0:	200008cc 	.word	0x200008cc
 8000de4:	20001794 	.word	0x20001794

08000de8 <ir_led_on>:

void ir_led_on()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2120      	movs	r1, #32
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <ir_led_on+0x14>)
 8000df2:	f002 ffb7 	bl	8003d64 <HAL_GPIO_WritePin>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <ir_led_off>:

void ir_led_off()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2120      	movs	r1, #32
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <ir_led_off+0x14>)
 8000e0a:	f002 ffab 	bl	8003d64 <HAL_GPIO_WritePin>

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40010c00 	.word	0x40010c00

08000e18 <clear_rxBuffer>:

void clear_rxBuffer(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; ++i) // Using for loop we are initializing
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e007      	b.n	8000e34 <clear_rxBuffer+0x1c>
	{
		UART1_rxBuffer[i] = 0;
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <clear_rxBuffer+0x2c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i) // Using for loop we are initializing
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3301      	adds	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b05      	cmp	r3, #5
 8000e38:	ddf4      	ble.n	8000e24 <clear_rxBuffer+0xc>
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	200008b8 	.word	0x200008b8

08000e48 <set_mux_fl>:

void set_mux_fl(value)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]


HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value & 0b0001);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <set_mux_fl+0x68>)
 8000e62:	f002 ff7f 	bl	8003d64 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value & 0b0010);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <set_mux_fl+0x68>)
 8000e78:	f002 ff74 	bl	8003d64 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value & 0b0100);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <set_mux_fl+0x68>)
 8000e8e:	f002 ff69 	bl	8003d64 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, value & 0b1000);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <set_mux_fl+0x68>)
 8000ea4:	f002 ff5e 	bl	8003d64 <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <set_mux_fr>:
void set_mux_fr(value)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value & 0b0001);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <set_mux_fr+0x68>)
 8000ece:	f002 ff49 	bl	8003d64 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value & 0b0010);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee2:	480e      	ldr	r0, [pc, #56]	; (8000f1c <set_mux_fr+0x68>)
 8000ee4:	f002 ff3e 	bl	8003d64 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value & 0b0100);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <set_mux_fr+0x6c>)
 8000efa:	f002 ff33 	bl	8003d64 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value & 0b1000);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <set_mux_fr+0x6c>)
 8000f10:	f002 ff28 	bl	8003d64 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40010800 	.word	0x40010800

08000f24 <scale_val>:

int scale_val(int inval, int inmin, int inmax, int outmin, int outmax)
{
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
	if (inval>=inmax)
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	db02      	blt.n	8000f40 <scale_val+0x1c>
	{
		inval = inmax;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	e005      	b.n	8000f4c <scale_val+0x28>
	}
	else if(inval<=inmin)
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dc01      	bgt.n	8000f4c <scale_val+0x28>
	{
		inval =inmin;
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60fb      	str	r3, [r7, #12]
	}

	double slope = 1.0 * (outmax - outmin) / (inmax - inmin);
 8000f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa56 	bl	8000404 <__aeabi_i2d>
 8000f58:	4604      	mov	r4, r0
 8000f5a:	460d      	mov	r5, r1
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa4e 	bl	8000404 <__aeabi_i2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	4629      	mov	r1, r5
 8000f70:	f7ff fbdc 	bl	800072c <__aeabi_ddiv>
 8000f74:	4603      	mov	r3, r0
 8000f76:	460c      	mov	r4, r1
 8000f78:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return outmin + slope * (inval - inmin);
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff fa41 	bl	8000404 <__aeabi_i2d>
 8000f82:	4604      	mov	r4, r0
 8000f84:	460d      	mov	r5, r1
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa39 	bl	8000404 <__aeabi_i2d>
 8000f92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f96:	f7ff fa9f 	bl	80004d8 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff f8e3 	bl	800016c <__adddf3>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460c      	mov	r4, r1
 8000faa:	4618      	mov	r0, r3
 8000fac:	4621      	mov	r1, r4
 8000fae:	f7ff fca5 	bl	80008fc <__aeabi_d2iz>
 8000fb2:	4603      	mov	r3, r0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b09a      	sub	sp, #104	; 0x68
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f001 fddf 	bl	8002b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f8ed 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 fbf5 	bl	80017b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fce:	f000 fbbd 	bl	800174c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fd2:	f000 fb91 	bl	80016f8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000fd6:	f000 f941 	bl	800125c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fda:	f000 fa77 	bl	80014cc <MX_TIM2_Init>
  MX_TIM4_Init();
 8000fde:	f000 faf3 	bl	80015c8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000fe2:	f000 f9d3 	bl	800138c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //start ADC conversations
  HAL_ADC_Start_DMA(&hadc1, adc_value, 7);
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	495c      	ldr	r1, [pc, #368]	; (800115c <main+0x1a0>)
 8000fea:	485d      	ldr	r0, [pc, #372]	; (8001160 <main+0x1a4>)
 8000fec:	f001 fef6 	bl	8002ddc <HAL_ADC_Start_DMA>
  // Start UART interrupts
  /* When UART gets 5 bytes, it calls the function
   * HAL_UART_RxCpltCallback(
   *
   */
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 5);
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	495c      	ldr	r1, [pc, #368]	; (8001164 <main+0x1a8>)
 8000ff4:	485c      	ldr	r0, [pc, #368]	; (8001168 <main+0x1ac>)
 8000ff6:	f004 fc9b 	bl	8005930 <HAL_UART_Receive_IT>
   *		TIM4->CCR1 = pwm_value;
   *		or
   *		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_value);
   *
   */
  HAL_TIM_Base_Start(&htim4);
 8000ffa:	485c      	ldr	r0, [pc, #368]	; (800116c <main+0x1b0>)
 8000ffc:	f003 fc1c 	bl	8004838 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001000:	485b      	ldr	r0, [pc, #364]	; (8001170 <main+0x1b4>)
 8001002:	f003 fc19 	bl	8004838 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001006:	2100      	movs	r1, #0
 8001008:	4858      	ldr	r0, [pc, #352]	; (800116c <main+0x1b0>)
 800100a:	f003 fd09 	bl	8004a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800100e:	2104      	movs	r1, #4
 8001010:	4856      	ldr	r0, [pc, #344]	; (800116c <main+0x1b0>)
 8001012:	f003 fd05 	bl	8004a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001016:	2108      	movs	r1, #8
 8001018:	4854      	ldr	r0, [pc, #336]	; (800116c <main+0x1b0>)
 800101a:	f003 fd01 	bl	8004a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800101e:	210c      	movs	r1, #12
 8001020:	4852      	ldr	r0, [pc, #328]	; (800116c <main+0x1b0>)
 8001022:	f003 fcfd 	bl	8004a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001026:	2100      	movs	r1, #0
 8001028:	4851      	ldr	r0, [pc, #324]	; (8001170 <main+0x1b4>)
 800102a:	f003 fcf9 	bl	8004a20 <HAL_TIM_PWM_Start>


  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 800102e:	4b4f      	ldr	r3, [pc, #316]	; (800116c <main+0x1b0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001036:	4b4d      	ldr	r3, [pc, #308]	; (800116c <main+0x1b0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 800103e:	4b4b      	ldr	r3, [pc, #300]	; (800116c <main+0x1b0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8001046:	4b49      	ldr	r3, [pc, #292]	; (800116c <main+0x1b0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 800104e:	4b48      	ldr	r3, [pc, #288]	; (8001170 <main+0x1b4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
  // = {'\0'};
  long X = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	667b      	str	r3, [r7, #100]	; 0x64

  int temp;

  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

      int ch, animation_state = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	663b      	str	r3, [r7, #96]	; 0x60
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800105e:	b662      	cpsie	i

      __enable_irq();
      HAL_Delay(200);
 8001060:	20c8      	movs	r0, #200	; 0xc8
 8001062:	f001 fdc1 	bl	8002be8 <HAL_Delay>

      //INITIALIZE NEOPIXELS
      //channel 0
      led_channels[0].framebuffer = channel_framebuffers[0];
 8001066:	4b43      	ldr	r3, [pc, #268]	; (8001174 <main+0x1b8>)
 8001068:	653b      	str	r3, [r7, #80]	; 0x50
      led_channels[0].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 800106a:	2348      	movs	r3, #72	; 0x48
 800106c:	657b      	str	r3, [r7, #84]	; 0x54

      //channel1
      led_channels[1].framebuffer = channel_framebuffers[1];
 800106e:	4b42      	ldr	r3, [pc, #264]	; (8001178 <main+0x1bc>)
 8001070:	65bb      	str	r3, [r7, #88]	; 0x58
      led_channels[1].length = FRAMEBUFFER2_SIZE * sizeof(struct pixel);
 8001072:	2339      	movs	r3, #57	; 0x39
 8001074:	65fb      	str	r3, [r7, #92]	; 0x5c

      HAL_Delay(200);
 8001076:	20c8      	movs	r0, #200	; 0xc8
 8001078:	f001 fdb6 	bl	8002be8 <HAL_Delay>
      ws2812_init();
 800107c:	f001 fd36 	bl	8002aec <ws2812_init>
      HAL_Delay(200);
 8001080:	20c8      	movs	r0, #200	; 0xc8
 8001082:	f001 fdb1 	bl	8002be8 <HAL_Delay>
      // SETUP LED COLORS
      lightupLED(channel_framebuffers[0]);
 8001086:	483b      	ldr	r0, [pc, #236]	; (8001174 <main+0x1b8>)
 8001088:	f7ff fc92 	bl	80009b0 <lightupLED>
      lightupLED2(channel_framebuffers[1]);
 800108c:	483a      	ldr	r0, [pc, #232]	; (8001178 <main+0x1bc>)
 800108e:	f7ff fd1c 	bl	8000aca <lightupLED2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001092:	b672      	cpsid	i

   	  __disable_irq();
   	  ws2812_refresh(led_channels, GPIOB);
 8001094:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001098:	4938      	ldr	r1, [pc, #224]	; (800117c <main+0x1c0>)
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fbcc 	bl	8002838 <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 80010a0:	b662      	cpsie	i
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 80010a2:	2300      	movs	r3, #0
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 80010aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f005 f89d 	bl	80061f0 <osSemaphoreCreate>
 80010b6:	4602      	mov	r2, r0
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <main+0x1c4>)
 80010ba:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of pidTimer */
  osTimerDef(pidTimer, pid_timer);
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <main+0x1c8>)
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
 80010c0:	2300      	movs	r3, #0
 80010c2:	647b      	str	r3, [r7, #68]	; 0x44
  pidTimerHandle = osTimerCreate(osTimer(pidTimer), osTimerPeriodic, NULL);
 80010c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c8:	2200      	movs	r2, #0
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 f815 	bl	80060fc <osTimerCreate>
 80010d2:	4602      	mov	r2, r0
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <main+0x1cc>)
 80010d6:	601a      	str	r2, [r3, #0]

  /* definition and creation of statusUpdate */
  osTimerDef(statusUpdate, status_update_timer);
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <main+0x1d0>)
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
 80010dc:	2300      	movs	r3, #0
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  statusUpdateHandle = osTimerCreate(osTimer(statusUpdate), osTimerPeriodic, NULL);
 80010e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 f807 	bl	80060fc <osTimerCreate>
 80010ee:	4602      	mov	r2, r0
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <main+0x1d4>)
 80010f2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  // PID timer runs at 100hz
  osTimerStart(pidTimerHandle, 10);
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <main+0x1cc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	210a      	movs	r1, #10
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f832 	bl	8006164 <osTimerStart>
  //status update timer runs at 100 hz
  osTimerStart(statusUpdateHandle, 10);
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <main+0x1d4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	210a      	movs	r1, #10
 8001106:	4618      	mov	r0, r3
 8001108:	f005 f82c 	bl	8006164 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of adcreader */
  osThreadDef(adcreader, adc_reader_task, osPriorityNormal, 0, 128);
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <main+0x1d8>)
 800110e:	f107 041c 	add.w	r4, r7, #28
 8001112:	461d      	mov	r5, r3
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcreaderHandle = osThreadCreate(osThread(adcreader), NULL);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f004 ff87 	bl	800603a <osThreadCreate>
 800112c:	4602      	mov	r2, r0
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <main+0x1dc>)
 8001130:	601a      	str	r2, [r3, #0]

  /* definition and creation of serialreader */
  osThreadDef(serialreader, serial_reader_task, osPriorityHigh, 0, 128);
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <main+0x1e0>)
 8001134:	463c      	mov	r4, r7
 8001136:	461d      	mov	r5, r3
 8001138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001140:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serialreaderHandle = osThreadCreate(osThread(serialreader), NULL);
 8001144:	463b      	mov	r3, r7
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f004 ff76 	bl	800603a <osThreadCreate>
 800114e:	4602      	mov	r2, r0
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <main+0x1e4>)
 8001152:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001154:	f004 ff6a 	bl	800602c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001158:	e7fe      	b.n	8001158 <main+0x19c>
 800115a:	bf00      	nop
 800115c:	20001870 	.word	0x20001870
 8001160:	200018b4 	.word	0x200018b4
 8001164:	200008b8 	.word	0x200008b8
 8001168:	200018ec 	.word	0x200018ec
 800116c:	20001794 	.word	0x20001794
 8001170:	20001994 	.word	0x20001994
 8001174:	20001a2c 	.word	0x20001a2c
 8001178:	20001a74 	.word	0x20001a74
 800117c:	40010c00 	.word	0x40010c00
 8001180:	20001abc 	.word	0x20001abc
 8001184:	08001bd5 	.word	0x08001bd5
 8001188:	200018e4 	.word	0x200018e4
 800118c:	08001d1d 	.word	0x08001d1d
 8001190:	200018e8 	.word	0x200018e8
 8001194:	08009c0c 	.word	0x08009c0c
 8001198:	2000186c 	.word	0x2000186c
 800119c:	08009c38 	.word	0x08009c38
 80011a0:	20001824 	.word	0x20001824

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ae:	2228      	movs	r2, #40	; 0x28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f008 f853 	bl	800925e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e2:	2301      	movs	r3, #1
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80011f0:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80011f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fdca 	bl	8003d94 <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001206:	f000 fe2b 	bl	8001e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
 800120c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2102      	movs	r1, #2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f834 	bl	8004294 <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001232:	f000 fe15 	bl	8001e60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001236:	2302      	movs	r3, #2
 8001238:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800123a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800123e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f9f2 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800124e:	f000 fe07 	bl	8001e60 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <MX_ADC1_Init+0x128>)
 800126e:	4a46      	ldr	r2, [pc, #280]	; (8001388 <MX_ADC1_Init+0x12c>)
 8001270:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001272:	4b44      	ldr	r3, [pc, #272]	; (8001384 <MX_ADC1_Init+0x128>)
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <MX_ADC1_Init+0x128>)
 800127c:	2201      	movs	r2, #1
 800127e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001280:	4b40      	ldr	r3, [pc, #256]	; (8001384 <MX_ADC1_Init+0x128>)
 8001282:	2200      	movs	r2, #0
 8001284:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <MX_ADC1_Init+0x128>)
 8001288:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800128c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <MX_ADC1_Init+0x128>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <MX_ADC1_Init+0x128>)
 8001296:	2207      	movs	r2, #7
 8001298:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800129a:	483a      	ldr	r0, [pc, #232]	; (8001384 <MX_ADC1_Init+0x128>)
 800129c:	f001 fcc6 	bl	8002c2c <HAL_ADC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012a6:	f000 fddb 	bl	8001e60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80012b2:	2304      	movs	r3, #4
 80012b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4832      	ldr	r0, [pc, #200]	; (8001384 <MX_ADC1_Init+0x128>)
 80012bc:	f001 fe88 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 fdcb 	bl	8001e60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	482b      	ldr	r0, [pc, #172]	; (8001384 <MX_ADC1_Init+0x128>)
 80012d8:	f001 fe7a 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012e2:	f000 fdbd 	bl	8001e60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012e6:	2302      	movs	r3, #2
 80012e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012ea:	2303      	movs	r3, #3
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80012ee:	2305      	movs	r3, #5
 80012f0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4823      	ldr	r0, [pc, #140]	; (8001384 <MX_ADC1_Init+0x128>)
 80012f8:	f001 fe6a 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001302:	f000 fdad 	bl	8001e60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001306:	2303      	movs	r3, #3
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800130a:	2304      	movs	r3, #4
 800130c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800130e:	2304      	movs	r3, #4
 8001310:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	481b      	ldr	r0, [pc, #108]	; (8001384 <MX_ADC1_Init+0x128>)
 8001318:	f001 fe5a 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001322:	f000 fd9d 	bl	8001e60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001326:	2304      	movs	r3, #4
 8001328:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800132a:	2305      	movs	r3, #5
 800132c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <MX_ADC1_Init+0x128>)
 8001334:	f001 fe4c 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800133e:	f000 fd8f 	bl	8001e60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001342:	2307      	movs	r3, #7
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001346:	2306      	movs	r3, #6
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_ADC1_Init+0x128>)
 8001350:	f001 fe3e 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800135a:	f000 fd81 	bl	8001e60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800135e:	2306      	movs	r3, #6
 8001360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001362:	2307      	movs	r3, #7
 8001364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_ADC1_Init+0x128>)
 800136c:	f001 fe30 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001376:	f000 fd73 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200018b4 	.word	0x200018b4
 8001388:	40012400 	.word	0x40012400

0800138c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b096      	sub	sp, #88	; 0x58
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2220      	movs	r2, #32
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 ff4a 	bl	800925e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <MX_TIM1_Init+0x138>)
 80013cc:	4a3e      	ldr	r2, [pc, #248]	; (80014c8 <MX_TIM1_Init+0x13c>)
 80013ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013d0:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_TIM1_Init+0x138>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <MX_TIM1_Init+0x138>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2799;
 80013dc:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <MX_TIM1_Init+0x138>)
 80013de:	f640 22ef 	movw	r2, #2799	; 0xaef
 80013e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <MX_TIM1_Init+0x138>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <MX_TIM1_Init+0x138>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <MX_TIM1_Init+0x138>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013f6:	4833      	ldr	r0, [pc, #204]	; (80014c4 <MX_TIM1_Init+0x138>)
 80013f8:	f003 f9ce 	bl	8004798 <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001402:	f000 fd2d 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800140c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001410:	4619      	mov	r1, r3
 8001412:	482c      	ldr	r0, [pc, #176]	; (80014c4 <MX_TIM1_Init+0x138>)
 8001414:	f003 fd6c 	bl	8004ef0 <HAL_TIM_ConfigClockSource>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800141e:	f000 fd1f 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001422:	4828      	ldr	r0, [pc, #160]	; (80014c4 <MX_TIM1_Init+0x138>)
 8001424:	f003 faa4 	bl	8004970 <HAL_TIM_PWM_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800142e:	f000 fd17 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800143e:	4619      	mov	r1, r3
 8001440:	4820      	ldr	r0, [pc, #128]	; (80014c4 <MX_TIM1_Init+0x138>)
 8001442:	f004 f8d5 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800144c:	f000 fd08 	bl	8001e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001450:	2360      	movs	r3, #96	; 0x60
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	4813      	ldr	r0, [pc, #76]	; (80014c4 <MX_TIM1_Init+0x138>)
 8001476:	f003 fc7d 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001480:	f000 fcee 	bl	8001e60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_TIM1_Init+0x138>)
 80014a8:	f004 f900 	bl	80056ac <HAL_TIMEx_ConfigBreakDeadTime>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014b2:	f000 fcd5 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b6:	4803      	ldr	r0, [pc, #12]	; (80014c4 <MX_TIM1_Init+0x138>)
 80014b8:	f000 fe4a 	bl	8002150 <HAL_TIM_MspPostInit>

}
 80014bc:	bf00      	nop
 80014be:	3758      	adds	r7, #88	; 0x58
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20001994 	.word	0x20001994
 80014c8:	40012c00 	.word	0x40012c00

080014cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <MX_TIM2_Init+0xf8>)
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <MX_TIM2_Init+0xf8>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MX_TIM2_Init+0xf8>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001510:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <MX_TIM2_Init+0xf8>)
 8001512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001516:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <MX_TIM2_Init+0xf8>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <MX_TIM2_Init+0xf8>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001524:	4827      	ldr	r0, [pc, #156]	; (80015c4 <MX_TIM2_Init+0xf8>)
 8001526:	f003 f937 	bl	8004798 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001530:	f000 fc96 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	4619      	mov	r1, r3
 8001540:	4820      	ldr	r0, [pc, #128]	; (80015c4 <MX_TIM2_Init+0xf8>)
 8001542:	f003 fcd5 	bl	8004ef0 <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800154c:	f000 fc88 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001550:	481c      	ldr	r0, [pc, #112]	; (80015c4 <MX_TIM2_Init+0xf8>)
 8001552:	f003 fa0d 	bl	8004970 <HAL_TIM_PWM_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800155c:	f000 fc80 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	4619      	mov	r1, r3
 800156e:	4815      	ldr	r0, [pc, #84]	; (80015c4 <MX_TIM2_Init+0xf8>)
 8001570:	f004 f83e 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800157a:	f000 fc71 	bl	8001e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2360      	movs	r3, #96	; 0x60
 8001580:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <MX_TIM2_Init+0xf8>)
 8001596:	f003 fbed 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015a0:	f000 fc5e 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2204      	movs	r2, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <MX_TIM2_Init+0xf8>)
 80015ac:	f003 fbe2 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015b6:	f000 fc53 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	3738      	adds	r7, #56	; 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200019e4 	.word	0x200019e4

080015c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08e      	sub	sp, #56	; 0x38
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015f8:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <MX_TIM4_Init+0x128>)
 80015fa:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <MX_TIM4_Init+0x12c>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015fe:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <MX_TIM4_Init+0x128>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <MX_TIM4_Init+0x128>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2799;
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <MX_TIM4_Init+0x128>)
 800160c:	f640 22ef 	movw	r2, #2799	; 0xaef
 8001610:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <MX_TIM4_Init+0x128>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <MX_TIM4_Init+0x128>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800161e:	4834      	ldr	r0, [pc, #208]	; (80016f0 <MX_TIM4_Init+0x128>)
 8001620:	f003 f8ba 	bl	8004798 <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800162a:	f000 fc19 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001638:	4619      	mov	r1, r3
 800163a:	482d      	ldr	r0, [pc, #180]	; (80016f0 <MX_TIM4_Init+0x128>)
 800163c:	f003 fc58 	bl	8004ef0 <HAL_TIM_ConfigClockSource>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001646:	f000 fc0b 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800164a:	4829      	ldr	r0, [pc, #164]	; (80016f0 <MX_TIM4_Init+0x128>)
 800164c:	f003 f990 	bl	8004970 <HAL_TIM_PWM_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001656:	f000 fc03 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	4619      	mov	r1, r3
 8001668:	4821      	ldr	r0, [pc, #132]	; (80016f0 <MX_TIM4_Init+0x128>)
 800166a:	f003 ffc1 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001674:	f000 fbf4 	bl	8001e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001678:	2360      	movs	r3, #96	; 0x60
 800167a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	4818      	ldr	r0, [pc, #96]	; (80016f0 <MX_TIM4_Init+0x128>)
 8001690:	f003 fb70 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800169a:	f000 fbe1 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2204      	movs	r2, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <MX_TIM4_Init+0x128>)
 80016a6:	f003 fb65 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80016b0:	f000 fbd6 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2208      	movs	r2, #8
 80016b8:	4619      	mov	r1, r3
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_TIM4_Init+0x128>)
 80016bc:	f003 fb5a 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80016c6:	f000 fbcb 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	220c      	movs	r2, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <MX_TIM4_Init+0x128>)
 80016d2:	f003 fb4f 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80016dc:	f000 fbc0 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <MX_TIM4_Init+0x128>)
 80016e2:	f000 fd35 	bl	8002150 <HAL_TIM_MspPostInit>

}
 80016e6:	bf00      	nop
 80016e8:	3738      	adds	r7, #56	; 0x38
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20001794 	.word	0x20001794
 80016f4:	40000800 	.word	0x40000800

080016f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <MX_USART1_UART_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001730:	f004 f81f 	bl	8005772 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800173a:	f000 fb91 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200018ec 	.word	0x200018ec
 8001748:	40013800 	.word	0x40013800

0800174c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_DMA_Init+0x68>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <MX_DMA_Init+0x68>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6153      	str	r3, [r2, #20]
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_DMA_Init+0x68>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2105      	movs	r1, #5
 800176e:	200b      	movs	r0, #11
 8001770:	f001 fecd 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001774:	200b      	movs	r0, #11
 8001776:	f001 fee6 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2105      	movs	r1, #5
 800177e:	200c      	movs	r0, #12
 8001780:	f001 fec5 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001784:	200c      	movs	r0, #12
 8001786:	f001 fede 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2105      	movs	r1, #5
 800178e:	200f      	movs	r0, #15
 8001790:	f001 febd 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001794:	200f      	movs	r0, #15
 8001796:	f001 fed6 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	2011      	movs	r0, #17
 80017a0:	f001 feb5 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017a4:	2011      	movs	r0, #17
 80017a6:	f001 fece 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <MX_GPIO_Init+0xfc>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a38      	ldr	r2, [pc, #224]	; (80018b4 <MX_GPIO_Init+0xfc>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <MX_GPIO_Init+0xfc>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e4:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <MX_GPIO_Init+0xfc>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <MX_GPIO_Init+0xfc>)
 80017ea:	f043 0320 	orr.w	r3, r3, #32
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <MX_GPIO_Init+0xfc>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <MX_GPIO_Init+0xfc>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <MX_GPIO_Init+0xfc>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <MX_GPIO_Init+0xfc>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <MX_GPIO_Init+0xfc>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <MX_GPIO_Init+0xfc>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <MX_GPIO_Init+0xfc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	4821      	ldr	r0, [pc, #132]	; (80018b8 <MX_GPIO_Init+0x100>)
 8001834:	f002 fa96 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001838:	2200      	movs	r2, #0
 800183a:	f64f 413b 	movw	r1, #64571	; 0xfc3b
 800183e:	481f      	ldr	r0, [pc, #124]	; (80018bc <MX_GPIO_Init+0x104>)
 8001840:	f002 fa90 	bl	8003d64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800184a:	481d      	ldr	r0, [pc, #116]	; (80018c0 <MX_GPIO_Init+0x108>)
 800184c:	f002 fa8a 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2302      	movs	r3, #2
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4619      	mov	r1, r3
 8001868:	4813      	ldr	r0, [pc, #76]	; (80018b8 <MX_GPIO_Init+0x100>)
 800186a:	f002 f921 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800186e:	f64f 433b 	movw	r3, #64571	; 0xfc3b
 8001872:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2302      	movs	r3, #2
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <MX_GPIO_Init+0x104>)
 8001888:	f002 f912 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800188c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2302      	movs	r3, #2
 800189c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_GPIO_Init+0x108>)
 80018a6:	f002 f903 	bl	8003ab0 <HAL_GPIO_Init>

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40011000 	.word	0x40011000
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	40010800 	.word	0x40010800

080018c4 <adc_reader_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_adc_reader_task */
void adc_reader_task(void const * argument)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  for(int i=0;i<num_irsensors;i++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e040      	b.n	8001954 <adc_reader_task+0x90>
	  	  {
	  		  // set IR off
	  		  ir_led_off();
 80018d2:	f7ff fa95 	bl	8000e00 <ir_led_off>

	  		  // select mux channel
	  		  set_mux_fl(i);
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff fab6 	bl	8000e48 <set_mux_fl>
	  		  set_mux_fr(i);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff fae9 	bl	8000eb4 <set_mux_fr>

	  		  //small delay
	  		  HAL_Delay(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f001 f980 	bl	8002be8 <HAL_Delay>

	  		  // get initial readings
	  		  data_fl_noise = adc_value[0];
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <adc_reader_task+0x9c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <adc_reader_task+0xa0>)
 80018f0:	601a      	str	r2, [r3, #0]
	  		  data_fr_noise = adc_value[1];
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <adc_reader_task+0x9c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <adc_reader_task+0xa4>)
 80018fa:	601a      	str	r2, [r3, #0]

	  		  // set IR on
	  		  ir_led_on();
 80018fc:	f7ff fa74 	bl	8000de8 <ir_led_on>
	  		  //small delay
	  		  HAL_Delay(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f001 f971 	bl	8002be8 <HAL_Delay>

	  		  // get second readings
	  		  data_fl = adc_value[0];
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <adc_reader_task+0x9c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <adc_reader_task+0xa8>)
 800190e:	601a      	str	r2, [r3, #0]
	  		  data_fr = adc_value[1];
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <adc_reader_task+0x9c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	461a      	mov	r2, r3
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <adc_reader_task+0xac>)
 8001918:	601a      	str	r2, [r3, #0]

	  		  //calculate the real value and set it in ir_data array
	  		  data_fl_real = -1*(data_fl - data_fl_noise);
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <adc_reader_task+0xa0>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <adc_reader_task+0xa8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <adc_reader_task+0xb0>)
 8001926:	6013      	str	r3, [r2, #0]
	  		  data_fr_real = -1*(data_fr - data_fr_noise);
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <adc_reader_task+0xa4>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <adc_reader_task+0xac>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	4a11      	ldr	r2, [pc, #68]	; (8001978 <adc_reader_task+0xb4>)
 8001934:	6013      	str	r3, [r2, #0]

	  		  irdata_fl[i] = data_fl_real;
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <adc_reader_task+0xb0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4910      	ldr	r1, [pc, #64]	; (800197c <adc_reader_task+0xb8>)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  irdata_fr[i] = data_fr_real;
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <adc_reader_task+0xb4>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	490e      	ldr	r1, [pc, #56]	; (8001980 <adc_reader_task+0xbc>)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<num_irsensors;i++)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3301      	adds	r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <adc_reader_task+0xc0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbb9      	blt.n	80018d2 <adc_reader_task+0xe>
 800195e:	e7b5      	b.n	80018cc <adc_reader_task+0x8>
 8001960:	20001870 	.word	0x20001870
 8001964:	200019e0 	.word	0x200019e0
 8001968:	20001990 	.word	0x20001990
 800196c:	20001748 	.word	0x20001748
 8001970:	20001820 	.word	0x20001820
 8001974:	200019dc 	.word	0x200019dc
 8001978:	20001790 	.word	0x20001790
 800197c:	2000188c 	.word	0x2000188c
 8001980:	20001ac0 	.word	0x20001ac0
 8001984:	20000010 	.word	0x20000010

08001988 <serial_reader_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_reader_task */
void serial_reader_task(void const * argument)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08c      	sub	sp, #48	; 0x30
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	   *    rrXXX - move right finger reverse with XXX speed
	   *    s0000 - stop
	   */
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "Serial READ \n", 1), 10);
	  //close gripper
	  switch(UART1_rxBuffer[0])
 8001990:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <serial_reader_task+0x22c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	3b63      	subs	r3, #99	; 0x63
 8001996:	2b10      	cmp	r3, #16
 8001998:	f200 8105 	bhi.w	8001ba6 <serial_reader_task+0x21e>
 800199c:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <serial_reader_task+0x1c>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019e9 	.word	0x080019e9
 80019a8:	08001ba7 	.word	0x08001ba7
 80019ac:	08001ba7 	.word	0x08001ba7
 80019b0:	08001ba7 	.word	0x08001ba7
 80019b4:	08001ba7 	.word	0x08001ba7
 80019b8:	08001ba7 	.word	0x08001ba7
 80019bc:	08001ba7 	.word	0x08001ba7
 80019c0:	08001ba7 	.word	0x08001ba7
 80019c4:	08001ba7 	.word	0x08001ba7
 80019c8:	08001b59 	.word	0x08001b59
 80019cc:	08001ba7 	.word	0x08001ba7
 80019d0:	08001ba7 	.word	0x08001ba7
 80019d4:	08001aa1 	.word	0x08001aa1
 80019d8:	08001ba7 	.word	0x08001ba7
 80019dc:	08001ba7 	.word	0x08001ba7
 80019e0:	08001b0b 	.word	0x08001b0b
 80019e4:	08001a97 	.word	0x08001a97
	  {

	  case 'c':
	  	  {
			  //close in current control mode
			  if(UART1_rxBuffer[1]=='c')
 80019e8:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <serial_reader_task+0x22c>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	2b63      	cmp	r3, #99	; 0x63
 80019ee:	d11d      	bne.n	8001a2c <serial_reader_task+0xa4>
			  	  {
				  // create the NULL terminated character array with the values
				  char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 80019f0:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <serial_reader_task+0x22c>)
 80019f2:	789b      	ldrb	r3, [r3, #2]
 80019f4:	763b      	strb	r3, [r7, #24]
 80019f6:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <serial_reader_task+0x22c>)
 80019f8:	78db      	ldrb	r3, [r3, #3]
 80019fa:	767b      	strb	r3, [r7, #25]
 80019fc:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <serial_reader_task+0x22c>)
 80019fe:	791b      	ldrb	r3, [r3, #4]
 8001a00:	76bb      	strb	r3, [r7, #26]
 8001a02:	2300      	movs	r3, #0
 8001a04:	76fb      	strb	r3, [r7, #27]
				  int cmd_val = atoi(val_ar);
 8001a06:	f107 0318 	add.w	r3, r7, #24
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f007 fbee 	bl	80091ec <atoi>
 8001a10:	61f8      	str	r0, [r7, #28]
				  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cc %d \n", cmd_val), 100);
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	4968      	ldr	r1, [pc, #416]	; (8001bb8 <serial_reader_task+0x230>)
 8001a16:	4869      	ldr	r0, [pc, #420]	; (8001bbc <serial_reader_task+0x234>)
 8001a18:	f007 fc2a 	bl	8009270 <siprintf>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	2364      	movs	r3, #100	; 0x64
 8001a22:	4966      	ldr	r1, [pc, #408]	; (8001bbc <serial_reader_task+0x234>)
 8001a24:	4866      	ldr	r0, [pc, #408]	; (8001bc0 <serial_reader_task+0x238>)
 8001a26:	f003 fef1 	bl	800580c <HAL_UART_Transmit>
 8001a2a:	e031      	b.n	8001a90 <serial_reader_task+0x108>
			  	  }
			  //close in position hold mode
			  else if(UART1_rxBuffer[1]=='p')
 8001a2c:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <serial_reader_task+0x22c>)
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	2b70      	cmp	r3, #112	; 0x70
 8001a32:	d10c      	bne.n	8001a4e <serial_reader_task+0xc6>
		  	  	  {
				  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cp  \n", 1), 100);
 8001a34:	2201      	movs	r2, #1
 8001a36:	4963      	ldr	r1, [pc, #396]	; (8001bc4 <serial_reader_task+0x23c>)
 8001a38:	4860      	ldr	r0, [pc, #384]	; (8001bbc <serial_reader_task+0x234>)
 8001a3a:	f007 fc19 	bl	8009270 <siprintf>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	2364      	movs	r3, #100	; 0x64
 8001a44:	495d      	ldr	r1, [pc, #372]	; (8001bbc <serial_reader_task+0x234>)
 8001a46:	485e      	ldr	r0, [pc, #376]	; (8001bc0 <serial_reader_task+0x238>)
 8001a48:	f003 fee0 	bl	800580c <HAL_UART_Transmit>
 8001a4c:	e020      	b.n	8001a90 <serial_reader_task+0x108>
		  	  	  }
			  //close in speed control mode
			  else if(UART1_rxBuffer[1]=='s')
 8001a4e:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <serial_reader_task+0x22c>)
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	2b73      	cmp	r3, #115	; 0x73
 8001a54:	d11c      	bne.n	8001a90 <serial_reader_task+0x108>
			  {
				  char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001a56:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <serial_reader_task+0x22c>)
 8001a58:	789b      	ldrb	r3, [r3, #2]
 8001a5a:	753b      	strb	r3, [r7, #20]
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <serial_reader_task+0x22c>)
 8001a5e:	78db      	ldrb	r3, [r3, #3]
 8001a60:	757b      	strb	r3, [r7, #21]
 8001a62:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <serial_reader_task+0x22c>)
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	75bb      	strb	r3, [r7, #22]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	75fb      	strb	r3, [r7, #23]
				  int cmd_val = atoi(val_ar);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4618      	mov	r0, r3
 8001a72:	f007 fbbb 	bl	80091ec <atoi>
 8001a76:	6238      	str	r0, [r7, #32]
				  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "cs %d \n", cmd_val), 100);
 8001a78:	6a3a      	ldr	r2, [r7, #32]
 8001a7a:	4953      	ldr	r1, [pc, #332]	; (8001bc8 <serial_reader_task+0x240>)
 8001a7c:	484f      	ldr	r0, [pc, #316]	; (8001bbc <serial_reader_task+0x234>)
 8001a7e:	f007 fbf7 	bl	8009270 <siprintf>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	2364      	movs	r3, #100	; 0x64
 8001a88:	494c      	ldr	r1, [pc, #304]	; (8001bbc <serial_reader_task+0x234>)
 8001a8a:	484d      	ldr	r0, [pc, #308]	; (8001bc0 <serial_reader_task+0x238>)
 8001a8c:	f003 febe 	bl	800580c <HAL_UART_Transmit>

			  }
		  clear_rxBuffer();
 8001a90:	f7ff f9c2 	bl	8000e18 <clear_rxBuffer>
	  	  }break;
 8001a94:	e089      	b.n	8001baa <serial_reader_task+0x222>
	  case 's':
	  	  {

	  	  stop_all();
 8001a96:	f7ff f897 	bl	8000bc8 <stop_all>
	  	  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "STOP \n", 1), 100);
		  clear_rxBuffer();
 8001a9a:	f7ff f9bd 	bl	8000e18 <clear_rxBuffer>
	  	  }break;
 8001a9e:	e084      	b.n	8001baa <serial_reader_task+0x222>
	  case 'o':
	  	  {
	  		// open upto fully open position
	  		if(UART1_rxBuffer[1]=='p')
 8001aa0:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <serial_reader_task+0x22c>)
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	2b70      	cmp	r3, #112	; 0x70
 8001aa6:	d10c      	bne.n	8001ac2 <serial_reader_task+0x13a>
	  			{
	  			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "OPEN \n", 1), 100);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4948      	ldr	r1, [pc, #288]	; (8001bcc <serial_reader_task+0x244>)
 8001aac:	4843      	ldr	r0, [pc, #268]	; (8001bbc <serial_reader_task+0x234>)
 8001aae:	f007 fbdf 	bl	8009270 <siprintf>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	2364      	movs	r3, #100	; 0x64
 8001ab8:	4940      	ldr	r1, [pc, #256]	; (8001bbc <serial_reader_task+0x234>)
 8001aba:	4841      	ldr	r0, [pc, #260]	; (8001bc0 <serial_reader_task+0x238>)
 8001abc:	f003 fea6 	bl	800580c <HAL_UART_Transmit>
 8001ac0:	e020      	b.n	8001b04 <serial_reader_task+0x17c>
	  			}
	  		// open with speed control
	  		else if(UART1_rxBuffer[1]=='s')
 8001ac2:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <serial_reader_task+0x22c>)
 8001ac4:	785b      	ldrb	r3, [r3, #1]
 8001ac6:	2b73      	cmp	r3, #115	; 0x73
 8001ac8:	d11c      	bne.n	8001b04 <serial_reader_task+0x17c>
	  			{
	  			char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001aca:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <serial_reader_task+0x22c>)
 8001acc:	789b      	ldrb	r3, [r3, #2]
 8001ace:	743b      	strb	r3, [r7, #16]
 8001ad0:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <serial_reader_task+0x22c>)
 8001ad2:	78db      	ldrb	r3, [r3, #3]
 8001ad4:	747b      	strb	r3, [r7, #17]
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <serial_reader_task+0x22c>)
 8001ad8:	791b      	ldrb	r3, [r3, #4]
 8001ada:	74bb      	strb	r3, [r7, #18]
 8001adc:	2300      	movs	r3, #0
 8001ade:	74fb      	strb	r3, [r7, #19]
	  			int cmd_val = atoi(val_ar);
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fb81 	bl	80091ec <atoi>
 8001aea:	62b8      	str	r0, [r7, #40]	; 0x28
	  			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "OPEN SPEED %d \n", cmd_val), 100);
 8001aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aee:	4938      	ldr	r1, [pc, #224]	; (8001bd0 <serial_reader_task+0x248>)
 8001af0:	4832      	ldr	r0, [pc, #200]	; (8001bbc <serial_reader_task+0x234>)
 8001af2:	f007 fbbd 	bl	8009270 <siprintf>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	2364      	movs	r3, #100	; 0x64
 8001afc:	492f      	ldr	r1, [pc, #188]	; (8001bbc <serial_reader_task+0x234>)
 8001afe:	4830      	ldr	r0, [pc, #192]	; (8001bc0 <serial_reader_task+0x238>)
 8001b00:	f003 fe84 	bl	800580c <HAL_UART_Transmit>
	  			}

	  	  clear_rxBuffer();
 8001b04:	f7ff f988 	bl	8000e18 <clear_rxBuffer>
	  	  }break;
 8001b08:	e04f      	b.n	8001baa <serial_reader_task+0x222>
	  case 'r':
	  	  {
	  		char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b0c:	789b      	ldrb	r3, [r3, #2]
 8001b0e:	733b      	strb	r3, [r7, #12]
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b12:	78db      	ldrb	r3, [r3, #3]
 8001b14:	737b      	strb	r3, [r7, #13]
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	73bb      	strb	r3, [r7, #14]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
	  		int cmd_val = atoi(val_ar);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4618      	mov	r0, r3
 8001b26:	f007 fb61 	bl	80091ec <atoi>
 8001b2a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  	  	//right finger position control
	  	  	if(UART1_rxBuffer[1]=='p')
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b2e:	785b      	ldrb	r3, [r3, #1]
 8001b30:	2b70      	cmp	r3, #112	; 0x70
 8001b32:	d00e      	beq.n	8001b52 <serial_reader_task+0x1ca>
	  	  		{
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RPOS %d \n", cmd_val), 100);
	  	  		}
	  	  	//right finger move forward at velocity
	  	  	else if(UART1_rxBuffer[1]=='f')
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b36:	785b      	ldrb	r3, [r3, #1]
 8001b38:	2b66      	cmp	r3, #102	; 0x66
 8001b3a:	d103      	bne.n	8001b44 <serial_reader_task+0x1bc>
	  	  		{
	  	  		move_rf(cmd_val);
 8001b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b3e:	f7ff f8df 	bl	8000d00 <move_rf>
 8001b42:	e006      	b.n	8001b52 <serial_reader_task+0x1ca>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RF %d \n", cmd_val), 100);
	  	  		}
	  	  	//right finger move reverse at velocity
	  	  	else if(UART1_rxBuffer[1]=='r')
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b46:	785b      	ldrb	r3, [r3, #1]
 8001b48:	2b72      	cmp	r3, #114	; 0x72
 8001b4a:	d102      	bne.n	8001b52 <serial_reader_task+0x1ca>
	  	  		{
	  	  		move_rb(cmd_val);
 8001b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b4e:	f7ff f911 	bl	8000d74 <move_rb>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "RR %d \n", cmd_val), 100);
	  	  		}
	  	  clear_rxBuffer();
 8001b52:	f7ff f961 	bl	8000e18 <clear_rxBuffer>
	  	  }break;
 8001b56:	e028      	b.n	8001baa <serial_reader_task+0x222>
	   case 'l':
	  	  {
	  	  	char val_ar[4]={UART1_rxBuffer[2], UART1_rxBuffer[3], UART1_rxBuffer[4],NULL};
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b5a:	789b      	ldrb	r3, [r3, #2]
 8001b5c:	723b      	strb	r3, [r7, #8]
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b60:	78db      	ldrb	r3, [r3, #3]
 8001b62:	727b      	strb	r3, [r7, #9]
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b66:	791b      	ldrb	r3, [r3, #4]
 8001b68:	72bb      	strb	r3, [r7, #10]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	72fb      	strb	r3, [r7, #11]
	  	  	int cmd_val = atoi(val_ar);
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 fb3a 	bl	80091ec <atoi>
 8001b78:	6278      	str	r0, [r7, #36]	; 0x24
	  	  	//left finger position control
	  	  	if(UART1_rxBuffer[1]=='p')
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	2b70      	cmp	r3, #112	; 0x70
 8001b80:	d00e      	beq.n	8001ba0 <serial_reader_task+0x218>
	  	  		{
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LPOS %d \n", cmd_val), 100);
	  	  		}
	  	  	//left finger move forward at velocity
	  	  	else if(UART1_rxBuffer[1]=='f')
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b84:	785b      	ldrb	r3, [r3, #1]
 8001b86:	2b66      	cmp	r3, #102	; 0x66
 8001b88:	d103      	bne.n	8001b92 <serial_reader_task+0x20a>
	  	  		{
	  	  		move_lf(cmd_val);
 8001b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b8c:	f7ff f844 	bl	8000c18 <move_lf>
 8001b90:	e006      	b.n	8001ba0 <serial_reader_task+0x218>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LF %d \n", cmd_val), 100);
	  	  		}
	  	  	//left finger move reverse at velocity
	  	  	else if(UART1_rxBuffer[1]=='r')
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <serial_reader_task+0x22c>)
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	2b72      	cmp	r3, #114	; 0x72
 8001b98:	d102      	bne.n	8001ba0 <serial_reader_task+0x218>
	  	  		{
	  	  		move_lb(cmd_val);
 8001b9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b9c:	f7ff f876 	bl	8000c8c <move_lb>
	  	  		//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "LR %d \n", cmd_val), 100);
	  	  		}

	  	  	clear_rxBuffer();
 8001ba0:	f7ff f93a 	bl	8000e18 <clear_rxBuffer>
	  	  }break;
 8001ba4:	e001      	b.n	8001baa <serial_reader_task+0x222>

	   default:
		   clear_rxBuffer();
 8001ba6:	f7ff f937 	bl	8000e18 <clear_rxBuffer>

	  }
    osDelay(10);
 8001baa:	200a      	movs	r0, #10
 8001bac:	f004 fa91 	bl	80060d2 <osDelay>
	  switch(UART1_rxBuffer[0])
 8001bb0:	e6ee      	b.n	8001990 <serial_reader_task+0x8>
 8001bb2:	bf00      	nop
 8001bb4:	200008b8 	.word	0x200008b8
 8001bb8:	08009c54 	.word	0x08009c54
 8001bbc:	2000192c 	.word	0x2000192c
 8001bc0:	200018ec 	.word	0x200018ec
 8001bc4:	08009c5c 	.word	0x08009c5c
 8001bc8:	08009c64 	.word	0x08009c64
 8001bcc:	08009c6c 	.word	0x08009c6c
 8001bd0:	08009c74 	.word	0x08009c74

08001bd4 <pid_timer>:
  /* USER CODE END serial_reader_task */
}

/* pid_timer function */
void pid_timer(void const * argument)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pid_timer */
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "TIMER \n", 1), 10);
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
	//HAL_GPIO_WritePin(GPIOB, , value & 0b0001);
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "CC %d %d  %d \n", adc_value[6],lfw, isMoveB_LF ), 100);
	if((adc_value[6]>LFMaxPos) && (lfw==1))
 8001bdc:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <pid_timer+0x11c>)
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <pid_timer+0x120>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d91b      	bls.n	8001c20 <pid_timer+0x4c>
 8001be8:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <pid_timer+0x124>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d117      	bne.n	8001c20 <pid_timer+0x4c>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <pid_timer+0x128>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 fb2d 	bl	8006258 <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <pid_timer+0x12c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <pid_timer+0x12c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
		lfw=0;
 8001c0e:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <pid_timer+0x124>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <pid_timer+0x128>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fb6b 	bl	80062f4 <osSemaphoreRelease>
 8001c1e:	e020      	b.n	8001c62 <pid_timer+0x8e>
	}
	else if((adc_value[6]<LFMinPos) && (lrw==1))
 8001c20:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <pid_timer+0x11c>)
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <pid_timer+0x130>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d21a      	bcs.n	8001c62 <pid_timer+0x8e>
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <pid_timer+0x134>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d116      	bne.n	8001c62 <pid_timer+0x8e>
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <pid_timer+0x128>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 fb0b 	bl	8006258 <osSemaphoreWait>

		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <pid_timer+0x12c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <pid_timer+0x12c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
		lrw=0;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <pid_timer+0x134>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
		osSemaphoreRelease(BinSemHandle);
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <pid_timer+0x128>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 fb49 	bl	80062f4 <osSemaphoreRelease>
	}

	if((adc_value[5]>RFMaxPos) && (rfw==1))
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <pid_timer+0x11c>)
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <pid_timer+0x138>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d91b      	bls.n	8001ca6 <pid_timer+0xd2>
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <pid_timer+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d117      	bne.n	8001ca6 <pid_timer+0xd2>
		{
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <pid_timer+0x128>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 faea 	bl	8006258 <osSemaphoreWait>

			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <pid_timer+0x12c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <pid_timer+0x12c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2200      	movs	r2, #0
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
			rfw=0;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <pid_timer+0x13c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <pid_timer+0x128>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fb28 	bl	80062f4 <osSemaphoreRelease>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
			rrw=0;
			osSemaphoreRelease(BinSemHandle);
		}
  /* USER CODE END pid_timer */
}
 8001ca4:	e020      	b.n	8001ce8 <pid_timer+0x114>
		else if((adc_value[5]<RFMinPos) && (rrw==1))
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <pid_timer+0x11c>)
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <pid_timer+0x140>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d21a      	bcs.n	8001ce8 <pid_timer+0x114>
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <pid_timer+0x144>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d116      	bne.n	8001ce8 <pid_timer+0x114>
			osSemaphoreWait(BinSemHandle, osWaitForever);
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <pid_timer+0x128>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 fac8 	bl	8006258 <osSemaphoreWait>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <pid_timer+0x12c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <pid_timer+0x12c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
			rrw=0;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <pid_timer+0x144>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(BinSemHandle);
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <pid_timer+0x128>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 fb06 	bl	80062f4 <osSemaphoreRelease>
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20001870 	.word	0x20001870
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	200008c0 	.word	0x200008c0
 8001cfc:	20001abc 	.word	0x20001abc
 8001d00:	20001794 	.word	0x20001794
 8001d04:	20000004 	.word	0x20000004
 8001d08:	200008c4 	.word	0x200008c4
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	200008c8 	.word	0x200008c8
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	200008cc 	.word	0x200008cc

08001d1c <status_update_timer>:

/* status_update_timer function */
void status_update_timer(void const * argument)
{
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	b0ad      	sub	sp, #180	; 0xb4
 8001d20:	af18      	add	r7, sp, #96	; 0x60
 8001d22:	64f8      	str	r0, [r7, #76]	; 0x4c
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	//sprintf(MSG, "Data = %d \t %d  \t %d \t %d  \t%d  \t%d \t%d \t \r\n ",
	//		irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6]);
	//sprintf(MSG,"Data = %d \t end \r\n", RX1_Char);

	sprintf(MSG, "%d \t%d \t%d \t%d \t%d \t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t \r\n",
 8001d24:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <status_update_timer+0x108>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <status_update_timer+0x108>)
 8001d2c:	68d9      	ldr	r1, [r3, #12]
 8001d2e:	6479      	str	r1, [r7, #68]	; 0x44
 8001d30:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <status_update_timer+0x108>)
 8001d32:	6918      	ldr	r0, [r3, #16]
 8001d34:	6438      	str	r0, [r7, #64]	; 0x40
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <status_update_timer+0x108>)
 8001d38:	695c      	ldr	r4, [r3, #20]
 8001d3a:	63fc      	str	r4, [r7, #60]	; 0x3c
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <status_update_timer+0x108>)
 8001d3e:	699d      	ldr	r5, [r3, #24]
 8001d40:	63bd      	str	r5, [r7, #56]	; 0x38
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <status_update_timer+0x10c>)
 8001d44:	681e      	ldr	r6, [r3, #0]
 8001d46:	637e      	str	r6, [r7, #52]	; 0x34
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <status_update_timer+0x10c>)
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	633a      	str	r2, [r7, #48]	; 0x30
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <status_update_timer+0x10c>)
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001d54:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <status_update_timer+0x10c>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5a:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <status_update_timer+0x10c>)
 8001d5c:	6918      	ldr	r0, [r3, #16]
 8001d5e:	6278      	str	r0, [r7, #36]	; 0x24
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <status_update_timer+0x10c>)
 8001d62:	695c      	ldr	r4, [r3, #20]
 8001d64:	623c      	str	r4, [r7, #32]
 8001d66:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <status_update_timer+0x10c>)
 8001d68:	699d      	ldr	r5, [r3, #24]
 8001d6a:	61fd      	str	r5, [r7, #28]
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <status_update_timer+0x10c>)
 8001d6e:	69de      	ldr	r6, [r3, #28]
 8001d70:	61be      	str	r6, [r7, #24]
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <status_update_timer+0x10c>)
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	617a      	str	r2, [r7, #20]
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <status_update_timer+0x10c>)
 8001d7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d7c:	6139      	str	r1, [r7, #16]
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <status_update_timer+0x110>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <status_update_timer+0x110>)
 8001d86:	6858      	ldr	r0, [r3, #4]
 8001d88:	60b8      	str	r0, [r7, #8]
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <status_update_timer+0x110>)
 8001d8c:	689c      	ldr	r4, [r3, #8]
 8001d8e:	607c      	str	r4, [r7, #4]
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <status_update_timer+0x110>)
 8001d92:	68de      	ldr	r6, [r3, #12]
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <status_update_timer+0x110>)
 8001d96:	691d      	ldr	r5, [r3, #16]
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <status_update_timer+0x110>)
 8001d9a:	695c      	ldr	r4, [r3, #20]
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <status_update_timer+0x110>)
 8001d9e:	6998      	ldr	r0, [r3, #24]
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <status_update_timer+0x110>)
 8001da2:	69d9      	ldr	r1, [r3, #28]
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <status_update_timer+0x110>)
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <status_update_timer+0x110>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	9316      	str	r3, [sp, #88]	; 0x58
 8001dae:	9215      	str	r2, [sp, #84]	; 0x54
 8001db0:	9114      	str	r1, [sp, #80]	; 0x50
 8001db2:	9013      	str	r0, [sp, #76]	; 0x4c
 8001db4:	9412      	str	r4, [sp, #72]	; 0x48
 8001db6:	9511      	str	r5, [sp, #68]	; 0x44
 8001db8:	9610      	str	r6, [sp, #64]	; 0x40
 8001dba:	687c      	ldr	r4, [r7, #4]
 8001dbc:	940f      	str	r4, [sp, #60]	; 0x3c
 8001dbe:	68b8      	ldr	r0, [r7, #8]
 8001dc0:	900e      	str	r0, [sp, #56]	; 0x38
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8001dc6:	6939      	ldr	r1, [r7, #16]
 8001dc8:	910c      	str	r1, [sp, #48]	; 0x30
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8001dce:	69be      	ldr	r6, [r7, #24]
 8001dd0:	960a      	str	r6, [sp, #40]	; 0x28
 8001dd2:	69fd      	ldr	r5, [r7, #28]
 8001dd4:	9509      	str	r5, [sp, #36]	; 0x24
 8001dd6:	6a3c      	ldr	r4, [r7, #32]
 8001dd8:	9408      	str	r4, [sp, #32]
 8001dda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ddc:	9007      	str	r0, [sp, #28]
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	9306      	str	r3, [sp, #24]
 8001de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001de4:	9105      	str	r1, [sp, #20]
 8001de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de8:	9204      	str	r2, [sp, #16]
 8001dea:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8001dec:	9603      	str	r6, [sp, #12]
 8001dee:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8001df0:	9502      	str	r5, [sp, #8]
 8001df2:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8001df4:	9401      	str	r4, [sp, #4]
 8001df6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001df8:	9000      	str	r0, [sp, #0]
 8001dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dfe:	490c      	ldr	r1, [pc, #48]	; (8001e30 <status_update_timer+0x114>)
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <status_update_timer+0x118>)
 8001e02:	f007 fa35 	bl	8009270 <siprintf>
			adc_value[2], adc_value[3], adc_value[4], adc_value[5], adc_value[6],
				irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6],irdata_fr[7],irdata_fr[8],irdata_fr[9],
				irdata_fl[0],irdata_fl[1], irdata_fl[2], irdata_fl[3], irdata_fl[4], irdata_fl[5], irdata_fl[6],irdata_fl[7],irdata_fl[8],irdata_fl[9]);


	HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 100);
 8001e06:	480b      	ldr	r0, [pc, #44]	; (8001e34 <status_update_timer+0x118>)
 8001e08:	f7fe f9a2 	bl	8000150 <strlen>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	2364      	movs	r3, #100	; 0x64
 8001e12:	4908      	ldr	r1, [pc, #32]	; (8001e34 <status_update_timer+0x118>)
 8001e14:	4808      	ldr	r0, [pc, #32]	; (8001e38 <status_update_timer+0x11c>)
 8001e16:	f003 fcf9 	bl	800580c <HAL_UART_Transmit>

  /* USER CODE END status_update_timer */
}
 8001e1a:	bf00      	nop
 8001e1c:	3754      	adds	r7, #84	; 0x54
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20001870 	.word	0x20001870
 8001e28:	20001ac0 	.word	0x20001ac0
 8001e2c:	2000188c 	.word	0x2000188c
 8001e30:	08009c84 	.word	0x08009c84
 8001e34:	20001ae8 	.word	0x20001ae8
 8001e38:	200018ec 	.word	0x200018ec

08001e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e4e:	f000 feaf 	bl	8002bb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40000400 	.word	0x40000400

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_MspInit+0x68>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_MspInit+0x68>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_MspInit+0x68>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_MspInit+0x68>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_MspInit+0x68>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_MspInit+0x68>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	210f      	movs	r1, #15
 8001ea6:	f06f 0001 	mvn.w	r0, #1
 8001eaa:	f001 fb30 	bl	800350e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_MspInit+0x6c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_MspInit+0x6c>)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010000 	.word	0x40010000

08001edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a28      	ldr	r2, [pc, #160]	; (8001f98 <HAL_ADC_MspInit+0xbc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d149      	bne.n	8001f90 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_ADC_MspInit+0xc0>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <HAL_ADC_MspInit+0xc0>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_ADC_MspInit+0xc0>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_ADC_MspInit+0xc0>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_ADC_MspInit+0xc0>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_ADC_MspInit+0xc0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f2c:	23ff      	movs	r3, #255	; 0xff
 8001f2e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f30:	2303      	movs	r3, #3
 8001f32:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4819      	ldr	r0, [pc, #100]	; (8001fa0 <HAL_ADC_MspInit+0xc4>)
 8001f3c:	f001 fdb8 	bl	8003ab0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f42:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_ADC_MspInit+0xcc>)
 8001f44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f74:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f76:	f001 faf5 	bl	8003564 <HAL_DMA_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001f80:	f7ff ff6e 	bl	8001e60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f88:	621a      	str	r2, [r3, #32]
 8001f8a:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <HAL_ADC_MspInit+0xc8>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40012400 	.word	0x40012400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	2000194c 	.word	0x2000194c
 8001fa8:	40020008 	.word	0x40020008

08001fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5c      	ldr	r2, [pc, #368]	; (800212c <HAL_TIM_Base_MspInit+0x180>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a5b      	ldr	r2, [pc, #364]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 8001fc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fd6:	e0a4      	b.n	8002122 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe0:	f040 808e 	bne.w	8002100 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe4:	4b52      	ldr	r3, [pc, #328]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a51      	ldr	r2, [pc, #324]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	61d3      	str	r3, [r2, #28]
 8001ff0:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8001ffe:	4a4e      	ldr	r2, [pc, #312]	; (8002138 <HAL_TIM_Base_MspInit+0x18c>)
 8002000:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002002:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8002004:	2210      	movs	r2, #16
 8002006:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8002016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800201c:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 800201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002022:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002024:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8002026:	2220      	movs	r2, #32
 8002028:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800202a:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 800202c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002030:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002032:	4840      	ldr	r0, [pc, #256]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8002034:	f001 fa96 	bl	8003564 <HAL_DMA_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_TIM_Base_MspInit+0x96>
      Error_Handler();
 800203e:	f7ff ff0f 	bl	8001e60 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
 8002048:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
 8002054:	4a37      	ldr	r2, [pc, #220]	; (8002134 <HAL_TIM_Base_MspInit+0x188>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800205a:	4b38      	ldr	r3, [pc, #224]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 800205c:	4a38      	ldr	r2, [pc, #224]	; (8002140 <HAL_TIM_Base_MspInit+0x194>)
 800205e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002060:	4b36      	ldr	r3, [pc, #216]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 8002062:	2210      	movs	r2, #16
 8002064:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002066:	4b35      	ldr	r3, [pc, #212]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 800206c:	4b33      	ldr	r3, [pc, #204]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002072:	4b32      	ldr	r3, [pc, #200]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 8002074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002078:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 800207c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002080:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 8002084:	2220      	movs	r2, #32
 8002086:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 800208a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800208e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002090:	482a      	ldr	r0, [pc, #168]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 8002092:	f001 fa67 	bl	8003564 <HAL_DMA_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_TIM_Base_MspInit+0xf4>
      Error_Handler();
 800209c:	f7ff fee0 	bl	8001e60 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a26      	ldr	r2, [pc, #152]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24
 80020a6:	4a25      	ldr	r2, [pc, #148]	; (800213c <HAL_TIM_Base_MspInit+0x190>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_up.Instance = DMA1_Channel2;
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020ae:	4a26      	ldr	r2, [pc, #152]	; (8002148 <HAL_TIM_Base_MspInit+0x19c>)
 80020b0:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020b4:	2210      	movs	r2, #16
 80020b6:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ca:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d2:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020d6:	2220      	movs	r2, #32
 80020d8:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80020e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 80020e2:	4818      	ldr	r0, [pc, #96]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020e4:	f001 fa3e 	bl	8003564 <HAL_DMA_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_TIM_Base_MspInit+0x146>
      Error_Handler();
 80020ee:	f7ff feb7 	bl	8001e60 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a13      	ldr	r2, [pc, #76]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020f6:	621a      	str	r2, [r3, #32]
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_TIM_Base_MspInit+0x198>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6253      	str	r3, [r2, #36]	; 0x24
}
 80020fe:	e010      	b.n	8002122 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_TIM_Base_MspInit+0x1a0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10b      	bne.n	8002122 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_TIM_Base_MspInit+0x184>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40021000 	.word	0x40021000
 8002134:	20001828 	.word	0x20001828
 8002138:	40020080 	.word	0x40020080
 800213c:	2000174c 	.word	0x2000174c
 8002140:	40020058 	.word	0x40020058
 8002144:	200017dc 	.word	0x200017dc
 8002148:	4002001c 	.word	0x4002001c
 800214c:	40000800 	.word	0x40000800

08002150 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <HAL_TIM_MspPostInit+0x98>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d119      	bne.n	80021a4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_TIM_MspPostInit+0x9c>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_TIM_MspPostInit+0x9c>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_TIM_MspPostInit+0x9c>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2302      	movs	r3, #2
 8002194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	4619      	mov	r1, r3
 800219c:	4814      	ldr	r0, [pc, #80]	; (80021f0 <HAL_TIM_MspPostInit+0xa0>)
 800219e:	f001 fc87 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021a2:	e01d      	b.n	80021e0 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_TIM_MspPostInit+0xa4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d118      	bne.n	80021e0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_TIM_MspPostInit+0x9c>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_TIM_MspPostInit+0x9c>)
 80021b4:	f043 0308 	orr.w	r3, r3, #8
 80021b8:	6193      	str	r3, [r2, #24]
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_TIM_MspPostInit+0x9c>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2302      	movs	r3, #2
 80021d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	4619      	mov	r1, r3
 80021da:	4807      	ldr	r0, [pc, #28]	; (80021f8 <HAL_TIM_MspPostInit+0xa8>)
 80021dc:	f001 fc68 	bl	8003ab0 <HAL_GPIO_Init>
}
 80021e0:	bf00      	nop
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010800 	.word	0x40010800
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40010c00 	.word	0x40010c00

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a20      	ldr	r2, [pc, #128]	; (8002298 <HAL_UART_MspInit+0x9c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d139      	bne.n	8002290 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <HAL_UART_MspInit+0xa0>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_UART_MspInit+0xa0>)
 8002222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <HAL_UART_MspInit+0xa0>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_UART_MspInit+0xa0>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_UART_MspInit+0xa0>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6193      	str	r3, [r2, #24]
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_UART_MspInit+0xa0>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4619      	mov	r1, r3
 8002260:	480f      	ldr	r0, [pc, #60]	; (80022a0 <HAL_UART_MspInit+0xa4>)
 8002262:	f001 fc25 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4619      	mov	r1, r3
 800227a:	4809      	ldr	r0, [pc, #36]	; (80022a0 <HAL_UART_MspInit+0xa4>)
 800227c:	f001 fc18 	bl	8003ab0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2105      	movs	r1, #5
 8002284:	2025      	movs	r0, #37	; 0x25
 8002286:	f001 f942 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800228a:	2025      	movs	r0, #37	; 0x25
 800228c:	f001 f95b 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40013800 	.word	0x40013800
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010800 	.word	0x40010800

080022a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	201d      	movs	r0, #29
 80022ba:	f001 f928 	bl	800350e <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022be:	201d      	movs	r0, #29
 80022c0:	f001 f941 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_InitTick+0xa0>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <HAL_InitTick+0xa0>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	61d3      	str	r3, [r2, #28]
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_InitTick+0xa0>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022dc:	f107 0210 	add.w	r2, r7, #16
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 f952 	bl	8004590 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022ec:	f002 f928 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 80022f0:	4603      	mov	r3, r0
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_InitTick+0xa4>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	3b01      	subs	r3, #1
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_InitTick+0xa8>)
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_InitTick+0xac>)
 8002308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_InitTick+0xa8>)
 800230c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002310:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_InitTick+0xa8>)
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_InitTick+0xa8>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_InitTick+0xa8>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <HAL_InitTick+0xa8>)
 8002326:	f002 fa37 	bl	8004798 <HAL_TIM_Base_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d104      	bne.n	800233a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002330:	4806      	ldr	r0, [pc, #24]	; (800234c <HAL_InitTick+0xa8>)
 8002332:	f002 facb 	bl	80048cc <HAL_TIM_Base_Start_IT>
 8002336:	4603      	mov	r3, r0
 8002338:	e000      	b.n	800233c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	431bde83 	.word	0x431bde83
 800234c:	20001d40 	.word	0x20001d40
 8002350:	40000400 	.word	0x40000400

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <HardFault_Handler+0x4>

08002366 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <MemManage_Handler+0x4>

0800236c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <BusFault_Handler+0x4>

08002372 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <UsageFault_Handler+0x4>

08002378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA1_Channel1_IRQHandler+0x10>)
 800238a:	f001 fa5d 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000194c 	.word	0x2000194c

08002398 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <DMA1_Channel2_IRQHandler+0x10>)
 800239e:	f001 fa53 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200017dc 	.word	0x200017dc

080023ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Channel5_IRQHandler+0x10>)
 80023b2:	f001 fa49 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000174c 	.word	0x2000174c

080023c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA1_Channel7_IRQHandler+0x10>)
 80023c6:	f001 fa3f 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20001828 	.word	0x20001828

080023d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TIM3_IRQHandler+0x10>)
 80023da:	f002 fbc3 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20001d40 	.word	0x20001d40

080023e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <USART1_IRQHandler+0x10>)
 80023ee:	f003 faf3 	bl	80059d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200018ec 	.word	0x200018ec

080023fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <_sbrk+0x5c>)
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <_sbrk+0x60>)
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <_sbrk+0x64>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <_sbrk+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d207      	bcs.n	800243c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800242c:	f006 fee2 	bl	80091f4 <__errno>
 8002430:	4602      	mov	r2, r0
 8002432:	230c      	movs	r3, #12
 8002434:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243a:	e009      	b.n	8002450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	4a05      	ldr	r2, [pc, #20]	; (8002460 <_sbrk+0x64>)
 800244c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20005000 	.word	0x20005000
 800245c:	00000400 	.word	0x00000400
 8002460:	200008d0 	.word	0x200008d0
 8002464:	20001ee8 	.word	0x20001ee8

08002468 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <ws2812_timer2_init>:
    WS2812_CH14_GPIO,
    WS2812_CH15_GPIO
};

static void ws2812_timer2_init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08e      	sub	sp, #56	; 0x38
 8002478:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	f107 0320 	add.w	r3, r7, #32
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
 80024a0:	615a      	str	r2, [r3, #20]
 80024a2:	619a      	str	r2, [r3, #24]

    htimer2.Instance = TIM2;
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <ws2812_timer2_init+0xc8>)
 80024a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024aa:	601a      	str	r2, [r3, #0]
    htimer2.Init.Prescaler = 0;
 80024ac:	4b23      	ldr	r3, [pc, #140]	; (800253c <ws2812_timer2_init+0xc8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <ws2812_timer2_init+0xc8>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <ws2812_timer2_init+0xc8>)
 80024ba:	2246      	movs	r2, #70	; 0x46
 80024bc:	60da      	str	r2, [r3, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <ws2812_timer2_init+0xc8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <ws2812_timer2_init+0xc8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer2);
 80024ca:	481c      	ldr	r0, [pc, #112]	; (800253c <ws2812_timer2_init+0xc8>)
 80024cc:	f002 f964 	bl	8004798 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 80024d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024da:	4619      	mov	r1, r3
 80024dc:	4817      	ldr	r0, [pc, #92]	; (800253c <ws2812_timer2_init+0xc8>)
 80024de:	f002 fd07 	bl	8004ef0 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 80024e2:	4816      	ldr	r0, [pc, #88]	; (800253c <ws2812_timer2_init+0xc8>)
 80024e4:	f002 fa44 	bl	8004970 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 80024f0:	f107 0320 	add.w	r3, r7, #32
 80024f4:	4619      	mov	r1, r3
 80024f6:	4811      	ldr	r0, [pc, #68]	; (800253c <ws2812_timer2_init+0xc8>)
 80024f8:	f003 f87a 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fc:	2360      	movs	r3, #96	; 0x60
 80024fe:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8002500:	2316      	movs	r3, #22
 8002502:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2200      	movs	r2, #0
 8002510:	4619      	mov	r1, r3
 8002512:	480a      	ldr	r0, [pc, #40]	; (800253c <ws2812_timer2_init+0xc8>)
 8002514:	f002 fc2e 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002518:	2360      	movs	r3, #96	; 0x60
 800251a:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 800251c:	232c      	movs	r3, #44	; 0x2c
 800251e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	2204      	movs	r2, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <ws2812_timer2_init+0xc8>)
 8002530:	f002 fc20 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
}
 8002534:	bf00      	nop
 8002536:	3738      	adds	r7, #56	; 0x38
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20001e54 	.word	0x20001e54

08002540 <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002548:	4b4c      	ldr	r3, [pc, #304]	; (800267c <ws2812_dma_start+0x13c>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	4a4b      	ldr	r2, [pc, #300]	; (800267c <ws2812_dma_start+0x13c>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	61d3      	str	r3, [r2, #28]
 8002554:	4b49      	ldr	r3, [pc, #292]	; (800267c <ws2812_dma_start+0x13c>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_update.Instance = DMA1_Channel2;
 8002560:	4b47      	ldr	r3, [pc, #284]	; (8002680 <ws2812_dma_start+0x140>)
 8002562:	4a48      	ldr	r2, [pc, #288]	; (8002684 <ws2812_dma_start+0x144>)
 8002564:	601a      	str	r2, [r3, #0]
    hdma_tim2_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <ws2812_dma_start+0x140>)
 8002568:	2210      	movs	r2, #16
 800256a:	605a      	str	r2, [r3, #4]
    hdma_tim2_update.Init.PeriphInc = DMA_PINC_DISABLE;
 800256c:	4b44      	ldr	r3, [pc, #272]	; (8002680 <ws2812_dma_start+0x140>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
    hdma_tim2_update.Init.MemInc = DMA_MINC_DISABLE;
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <ws2812_dma_start+0x140>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    hdma_tim2_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002578:	4b41      	ldr	r3, [pc, #260]	; (8002680 <ws2812_dma_start+0x140>)
 800257a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257e:	611a      	str	r2, [r3, #16]
    hdma_tim2_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <ws2812_dma_start+0x140>)
 8002582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002586:	615a      	str	r2, [r3, #20]
    hdma_tim2_update.Init.Mode = DMA_CIRCULAR;
 8002588:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <ws2812_dma_start+0x140>)
 800258a:	2220      	movs	r2, #32
 800258c:	619a      	str	r2, [r3, #24]
    hdma_tim2_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <ws2812_dma_start+0x140>)
 8002590:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002594:	61da      	str	r2, [r3, #28]

    /* TIM2_CH1 Init */
    hdma_tim2_pwm_ch1.Instance = DMA1_Channel5;
 8002596:	4b3c      	ldr	r3, [pc, #240]	; (8002688 <ws2812_dma_start+0x148>)
 8002598:	4a3c      	ldr	r2, [pc, #240]	; (800268c <ws2812_dma_start+0x14c>)
 800259a:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <ws2812_dma_start+0x148>)
 800259e:	2210      	movs	r2, #16
 80025a0:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <ws2812_dma_start+0x148>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <ws2812_dma_start+0x148>)
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <ws2812_dma_start+0x148>)
 80025b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b4:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <ws2812_dma_start+0x148>)
 80025b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025bc:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch1.Init.Mode = DMA_CIRCULAR;
 80025be:	4b32      	ldr	r3, [pc, #200]	; (8002688 <ws2812_dma_start+0x148>)
 80025c0:	2220      	movs	r2, #32
 80025c2:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <ws2812_dma_start+0x148>)
 80025c6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80025ca:	61da      	str	r2, [r3, #28]

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_pwm_ch2.Instance = DMA1_Channel7;
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <ws2812_dma_start+0x150>)
 80025ce:	4a31      	ldr	r2, [pc, #196]	; (8002694 <ws2812_dma_start+0x154>)
 80025d0:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <ws2812_dma_start+0x150>)
 80025d4:	2210      	movs	r2, #16
 80025d6:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d8:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <ws2812_dma_start+0x150>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch2.Init.MemInc = DMA_MINC_DISABLE;
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <ws2812_dma_start+0x150>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <ws2812_dma_start+0x150>)
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <ws2812_dma_start+0x150>)
 80025ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f2:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch2.Init.Mode = DMA_CIRCULAR;
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <ws2812_dma_start+0x150>)
 80025f6:	2220      	movs	r2, #32
 80025f8:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025fa:	4b25      	ldr	r3, [pc, #148]	; (8002690 <ws2812_dma_start+0x150>)
 80025fc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002600:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim2_update);
 8002602:	481f      	ldr	r0, [pc, #124]	; (8002680 <ws2812_dma_start+0x140>)
 8002604:	f000 ffae 	bl	8003564 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch1);
 8002608:	481f      	ldr	r0, [pc, #124]	; (8002688 <ws2812_dma_start+0x148>)
 800260a:	f000 ffab 	bl	8003564 <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch2);
 800260e:	4820      	ldr	r0, [pc, #128]	; (8002690 <ws2812_dma_start+0x150>)
 8002610:	f000 ffa8 	bl	8003564 <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim2_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 8002614:	4920      	ldr	r1, [pc, #128]	; (8002698 <ws2812_dma_start+0x158>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3310      	adds	r3, #16
 800261a:	461a      	mov	r2, r3
 800261c:	2310      	movs	r3, #16
 800261e:	4818      	ldr	r0, [pc, #96]	; (8002680 <ws2812_dma_start+0x140>)
 8002620:	f000 fffa 	bl	8003618 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_pwm_ch1, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 8002624:	491d      	ldr	r1, [pc, #116]	; (800269c <ws2812_dma_start+0x15c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3314      	adds	r3, #20
 800262a:	461a      	mov	r2, r3
 800262c:	2310      	movs	r3, #16
 800262e:	4816      	ldr	r0, [pc, #88]	; (8002688 <ws2812_dma_start+0x148>)
 8002630:	f000 fff2 	bl	8003618 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim2_pwm_ch2, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 8002634:	4918      	ldr	r1, [pc, #96]	; (8002698 <ws2812_dma_start+0x158>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3314      	adds	r3, #20
 800263a:	461a      	mov	r2, r3
 800263c:	2310      	movs	r3, #16
 800263e:	4814      	ldr	r0, [pc, #80]	; (8002690 <ws2812_dma_start+0x150>)
 8002640:	f000 ffea 	bl	8003618 <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <ws2812_dma_start+0x160>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <ws2812_dma_start+0x160>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002652:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC1);
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <ws2812_dma_start+0x160>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <ws2812_dma_start+0x160>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002662:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC2);
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <ws2812_dma_start+0x160>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <ws2812_dma_start+0x160>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002672:	60da      	str	r2, [r3, #12]
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	20001e10 	.word	0x20001e10
 8002684:	4002001c 	.word	0x4002001c
 8002688:	20001dcc 	.word	0x20001dcc
 800268c:	40020058 	.word	0x40020058
 8002690:	20001d88 	.word	0x20001d88
 8002694:	40020080 	.word	0x40020080
 8002698:	200008d4 	.word	0x200008d4
 800269c:	200008d8 	.word	0x200008d8
 80026a0:	20001e54 	.word	0x20001e54

080026a4 <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
    /* If all channels are the same length, we can skip the 'pos' range check, and speed up our
     * inner loop *substantially*
     */

    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	da07      	bge.n	80026c8 <get_channel_byte+0x24>
        return channel->framebuffer[pos] ^ 0xff;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e000      	b.n	80026ca <get_channel_byte+0x26>

    return 0xff;
 80026c8:	23ff      	movs	r3, #255	; 0xff
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 80026d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d8:	b087      	sub	sp, #28
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	f04f 0b00 	mov.w	fp, #0
 80026ea:	2600      	movs	r6, #0
 80026ec:	2500      	movs	r5, #0
 80026ee:	2400      	movs	r4, #0
 80026f0:	f04f 0a00 	mov.w	sl, #0
 80026f4:	f04f 0900 	mov.w	r9, #0
 80026f8:	f04f 0800 	mov.w	r8, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffd0 	bl	80026a4 <get_channel_byte>
 8002704:	4603      	mov	r3, r0
 8002706:	75fb      	strb	r3, [r7, #23]
 8002708:	7df8      	ldrb	r0, [r7, #23]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	469e      	mov	lr, r3
 800270e:	46dc      	mov	ip, fp
 8002710:	4651      	mov	r1, sl
 8002712:	464a      	mov	r2, r9
 8002714:	4643      	mov	r3, r8
 8002716:	4680      	mov	r8, r0
 8002718:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 800271c:	f360 0e00 	bfi	lr, r0, #0, #1
 8002720:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8002724:	f360 0c00 	bfi	ip, r0, #0, #1
 8002728:	f3c8 1040 	ubfx	r0, r8, #5, #1
 800272c:	f360 0600 	bfi	r6, r0, #0, #1
 8002730:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8002734:	f360 0500 	bfi	r5, r0, #0, #1
 8002738:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 800273c:	f360 0400 	bfi	r4, r0, #0, #1
 8002740:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8002744:	f360 0100 	bfi	r1, r0, #0, #1
 8002748:	f3c8 0040 	ubfx	r0, r8, #1, #1
 800274c:	f360 0200 	bfi	r2, r0, #0, #1
 8002750:	f3c8 0000 	ubfx	r0, r8, #0, #1
 8002754:	f360 0300 	bfi	r3, r0, #0, #1
 8002758:	fa1f f08e 	uxth.w	r0, lr
 800275c:	6038      	str	r0, [r7, #0]
 800275e:	fa1f fb8c 	uxth.w	fp, ip
 8002762:	b2b6      	uxth	r6, r6
 8002764:	b2ad      	uxth	r5, r5
 8002766:	b2a4      	uxth	r4, r4
 8002768:	fa1f fa81 	uxth.w	sl, r1
 800276c:	fa1f f982 	uxth.w	r9, r2
 8002770:	fa1f f883 	uxth.w	r8, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3308      	adds	r3, #8
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff92 	bl	80026a4 <get_channel_byte>
 8002780:	4603      	mov	r3, r0
 8002782:	75fb      	strb	r3, [r7, #23]
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	4618      	mov	r0, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	469e      	mov	lr, r3
 800278c:	46dc      	mov	ip, fp
 800278e:	4651      	mov	r1, sl
 8002790:	464a      	mov	r2, r9
 8002792:	4643      	mov	r3, r8
 8002794:	4680      	mov	r8, r0
 8002796:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 800279a:	f360 0e41 	bfi	lr, r0, #1, #1
 800279e:	f3c8 1080 	ubfx	r0, r8, #6, #1
 80027a2:	f360 0c41 	bfi	ip, r0, #1, #1
 80027a6:	f3c8 1040 	ubfx	r0, r8, #5, #1
 80027aa:	f360 0641 	bfi	r6, r0, #1, #1
 80027ae:	f3c8 1000 	ubfx	r0, r8, #4, #1
 80027b2:	f360 0541 	bfi	r5, r0, #1, #1
 80027b6:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 80027ba:	f360 0441 	bfi	r4, r0, #1, #1
 80027be:	f3c8 0080 	ubfx	r0, r8, #2, #1
 80027c2:	f360 0141 	bfi	r1, r0, #1, #1
 80027c6:	f3c8 0040 	ubfx	r0, r8, #1, #1
 80027ca:	f360 0241 	bfi	r2, r0, #1, #1
 80027ce:	f3c8 0000 	ubfx	r0, r8, #0, #1
 80027d2:	f360 0341 	bfi	r3, r0, #1, #1
 80027d6:	fa1f f08e 	uxth.w	r0, lr
 80027da:	fa1f fb8c 	uxth.w	fp, ip
 80027de:	b2b6      	uxth	r6, r6
 80027e0:	b2ad      	uxth	r5, r5
 80027e2:	b2a4      	uxth	r4, r4
 80027e4:	fa1f fa81 	uxth.w	sl, r1
 80027e8:	fa1f f982 	uxth.w	r9, r2
 80027ec:	fa1f f883 	uxth.w	r8, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4602      	mov	r2, r0
 80027f4:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3302      	adds	r3, #2
 80027fa:	465a      	mov	r2, fp
 80027fc:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3304      	adds	r3, #4
 8002802:	4632      	mov	r2, r6
 8002804:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3306      	adds	r3, #6
 800280a:	462a      	mov	r2, r5
 800280c:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3308      	adds	r3, #8
 8002812:	4622      	mov	r2, r4
 8002814:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	330a      	adds	r3, #10
 800281a:	4652      	mov	r2, sl
 800281c:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	330c      	adds	r3, #12
 8002822:	464a      	mov	r2, r9
 8002824:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	330e      	adds	r3, #14
 800282a:	4642      	mov	r2, r8
 800282c:	801a      	strh	r2, [r3, #0]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002838 <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 800284e:	4b80      	ldr	r3, [pc, #512]	; (8002a50 <ws2812_refresh+0x218>)
 8002850:	2200      	movs	r2, #0
 8002852:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e00e      	b.n	8002878 <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4a7d      	ldr	r2, [pc, #500]	; (8002a54 <ws2812_refresh+0x21c>)
 8002860:	4413      	add	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6979      	ldr	r1, [r7, #20]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff34 	bl	80026d4 <fill_dma_buffer>
        pos++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	3308      	adds	r3, #8
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b0f      	cmp	r3, #15
 800287c:	dded      	ble.n	800285a <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e027      	b.n	80028d4 <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	da05      	bge.n	80028a0 <ws2812_refresh+0x68>
            max_length = channels[i].length;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00f      	beq.n	80028ce <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 80028ae:	4a6a      	ldr	r2, [pc, #424]	; (8002a58 <ws2812_refresh+0x220>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	2301      	movs	r3, #1
 80028ba:	4093      	lsls	r3, r2
 80028bc:	b21a      	sxth	r2, r3
 80028be:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <ws2812_refresh+0x218>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <ws2812_refresh+0x218>)
 80028cc:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	ddd4      	ble.n	8002884 <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	3302      	adds	r3, #2
 80028de:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	3303      	adds	r3, #3
 80028e4:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 80028e6:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <ws2812_refresh+0x224>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	4b5b      	ldr	r3, [pc, #364]	; (8002a5c <ws2812_refresh+0x224>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC1);
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <ws2812_refresh+0x224>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <ws2812_refresh+0x224>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002904:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC2);
 8002906:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <ws2812_refresh+0x224>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <ws2812_refresh+0x224>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002914:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer2);
 8002916:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <ws2812_refresh+0x224>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a1a      	ldr	r2, [r3, #32]
 800291c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <ws2812_refresh+0x10e>
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <ws2812_refresh+0x224>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	f240 4344 	movw	r3, #1092	; 0x444
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d107      	bne.n	8002946 <ws2812_refresh+0x10e>
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <ws2812_refresh+0x224>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <ws2812_refresh+0x224>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8002946:	4b42      	ldr	r3, [pc, #264]	; (8002a50 <ws2812_refresh+0x218>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer2);
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <ws2812_refresh+0x224>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <ws2812_refresh+0x224>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	e00f      	b.n	8002986 <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer2, TIM_FLAG_UPDATE));
 8002966:	bf00      	nop
 8002968:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <ws2812_refresh+0x224>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d1f8      	bne.n	8002968 <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer2, TIM_FLAG_UPDATE);
 8002976:	4b39      	ldr	r3, [pc, #228]	; (8002a5c <ws2812_refresh+0x224>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0201 	mvn.w	r2, #1
 800297e:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	3301      	adds	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2be0      	cmp	r3, #224	; 0xe0
 800298a:	ddec      	ble.n	8002966 <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer2);
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <ws2812_refresh+0x224>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	f241 1311 	movw	r3, #4369	; 0x1111
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10f      	bne.n	80029bc <ws2812_refresh+0x184>
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <ws2812_refresh+0x224>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	f240 4344 	movw	r3, #1092	; 0x444
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <ws2812_refresh+0x184>
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <ws2812_refresh+0x224>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <ws2812_refresh+0x224>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 80029bc:	6838      	ldr	r0, [r7, #0]
 80029be:	f7ff fdbf 	bl	8002540 <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer2, __HAL_TIM_GET_AUTORELOAD(&htimer2) - 10);
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <ws2812_refresh+0x224>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <ws2812_refresh+0x224>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3a0a      	subs	r2, #10
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <ws2812_refresh+0x228>)
 80029d2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80029d6:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer2);
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <ws2812_refresh+0x224>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <ws2812_refresh+0x224>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_ISR_TCIF5 | DMA_ISR_HTIF5))) {
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <ws2812_refresh+0x228>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <ws2812_refresh+0x1c4>
            cycles++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
            continue;
 80029fa:	e027      	b.n	8002a4c <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 80029fc:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <ws2812_refresh+0x21c>)
 80029fe:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_ISR_TCIF5)
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <ws2812_refresh+0x228>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3310      	adds	r3, #16
 8002a10:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <ws2812_refresh+0x228>)
 8002a14:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002a18:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e00e      	b.n	8002a3e <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6979      	ldr	r1, [r7, #20]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fe51 	bl	80026d4 <fill_dma_buffer>
            pos++;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3301      	adds	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b07      	cmp	r3, #7
 8002a42:	dded      	ble.n	8002a20 <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dc0b      	bgt.n	8002a64 <ws2812_refresh+0x22c>
    while(1) {
 8002a4c:	e7cc      	b.n	80029e8 <ws2812_refresh+0x1b0>
 8002a4e:	bf00      	nop
 8002a50:	200008d4 	.word	0x200008d4
 8002a54:	200008d8 	.word	0x200008d8
 8002a58:	08009d20 	.word	0x08009d20
 8002a5c:	20001e54 	.word	0x20001e54
 8002a60:	40020000 	.word	0x40020000
            break;
 8002a64:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer2);
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <ws2812_refresh+0x2a0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <ws2812_refresh+0x25e>
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <ws2812_refresh+0x2a0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	f240 4344 	movw	r3, #1092	; 0x444
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <ws2812_refresh+0x25e>
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <ws2812_refresh+0x2a0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <ws2812_refresh+0x2a0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <ws2812_refresh+0x2a4>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim2_update);
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <ws2812_refresh+0x2a8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <ws2812_refresh+0x2a8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <ws2812_refresh+0x2ac>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <ws2812_refresh+0x2ac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <ws2812_refresh+0x2b0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <ws2812_refresh+0x2b0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20001e54 	.word	0x20001e54
 8002adc:	200008d4 	.word	0x200008d4
 8002ae0:	20001e10 	.word	0x20001e10
 8002ae4:	20001dcc 	.word	0x20001dcc
 8002ae8:	20001d88 	.word	0x20001d88

08002aec <ws2812_init>:

void ws2812_init()
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <ws2812_init+0x48>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <ws2812_init+0x48>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6153      	str	r3, [r2, #20]
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <ws2812_init+0x48>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	200c      	movs	r0, #12
 8002b10:	f000 fcfd 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	200f      	movs	r0, #15
 8002b1a:	f000 fcf8 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2100      	movs	r1, #0
 8002b22:	2011      	movs	r0, #17
 8002b24:	f000 fcf3 	bl	800350e <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8002b28:	f7ff fca4 	bl	8002474 <ws2812_timer2_init>
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000

08002b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b3a:	e003      	b.n	8002b44 <LoopCopyDataInit>

08002b3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b42:	3104      	adds	r1, #4

08002b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b44:	480a      	ldr	r0, [pc, #40]	; (8002b70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b4c:	d3f6      	bcc.n	8002b3c <CopyDataInit>
  ldr r2, =_sbss
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b50:	e002      	b.n	8002b58 <LoopFillZerobss>

08002b52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b54:	f842 3b04 	str.w	r3, [r2], #4

08002b58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b5c:	d3f9      	bcc.n	8002b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b5e:	f7ff fc83 	bl	8002468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b62:	f006 fb4d 	bl	8009200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b66:	f7fe fa29 	bl	8000fbc <main>
  bx lr
 8002b6a:	4770      	bx	lr
  ldr r3, =_sidata
 8002b6c:	08009e78 	.word	0x08009e78
  ldr r0, =_sdata
 8002b70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b74:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002b78:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8002b7c:	20001ee4 	.word	0x20001ee4

08002b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC1_2_IRQHandler>
	...

08002b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_Init+0x28>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_Init+0x28>)
 8002b8e:	f043 0310 	orr.w	r3, r3, #16
 8002b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b94:	2003      	movs	r0, #3
 8002b96:	f000 fcaf 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7ff fb82 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba0:	f7ff f964 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40022000 	.word	0x40022000

08002bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_IncTick+0x1c>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_IncTick+0x20>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <HAL_IncTick+0x20>)
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	2000001c 	.word	0x2000001c
 8002bd0:	20001e9c 	.word	0x20001e9c

08002bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <HAL_GetTick+0x10>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	20001e9c 	.word	0x20001e9c

08002be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c00:	d005      	beq.n	8002c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_Delay+0x40>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0e:	bf00      	nop
 8002c10:	f7ff ffe0 	bl	8002bd4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d8f7      	bhi.n	8002c10 <HAL_Delay+0x28>
  {
  }
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	2000001c 	.word	0x2000001c

08002c2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0be      	b.n	8002dcc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff f936 	bl	8001edc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 faf7 	bl	8003264 <ADC_ConversionStop_Disable>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 8099 	bne.w	8002dba <HAL_ADC_Init+0x18e>
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 8095 	bne.w	8002dba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c98:	f023 0302 	bic.w	r3, r3, #2
 8002c9c:	f043 0202 	orr.w	r2, r3, #2
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7b1b      	ldrb	r3, [r3, #12]
 8002cb2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cb4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc4:	d003      	beq.n	8002cce <HAL_ADC_Init+0xa2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_ADC_Init+0xa8>
 8002cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd2:	e000      	b.n	8002cd6 <HAL_ADC_Init+0xaa>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7d1b      	ldrb	r3, [r3, #20]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d119      	bne.n	8002d18 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7b1b      	ldrb	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	035a      	lsls	r2, r3, #13
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e00b      	b.n	8002d18 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_ADC_Init+0x1a8>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d48:	d003      	beq.n	8002d52 <HAL_ADC_Init+0x126>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d104      	bne.n	8002d5c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	051b      	lsls	r3, r3, #20
 8002d5a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_ADC_Init+0x1ac>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10b      	bne.n	8002d98 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d96:	e018      	b.n	8002dca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	f023 0312 	bic.w	r3, r3, #18
 8002da0:	f043 0210 	orr.w	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002db8:	e007      	b.n	8002dca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f043 0210 	orr.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	ffe1f7fd 	.word	0xffe1f7fd
 8002dd8:	ff1f0efe 	.word	0xff1f0efe

08002ddc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a64      	ldr	r2, [pc, #400]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d004      	beq.n	8002e00 <HAL_ADC_Start_DMA+0x24>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <HAL_ADC_Start_DMA+0x1ac>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d106      	bne.n	8002e0e <HAL_ADC_Start_DMA+0x32>
 8002e00:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 80b3 	bne.w	8002f74 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_Start_DMA+0x40>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e0ae      	b.n	8002f7a <HAL_ADC_Start_DMA+0x19e>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f9cb 	bl	80031c0 <ADC_Enable>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 809a 	bne.w	8002f6a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a4e      	ldr	r2, [pc, #312]	; (8002f88 <HAL_ADC_Start_DMA+0x1ac>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d105      	bne.n	8002e60 <HAL_ADC_Start_DMA+0x84>
 8002e54:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d115      	bne.n	8002e8c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d026      	beq.n	8002ec8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e8a:	e01d      	b.n	8002ec8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_ADC_Start_DMA+0xd0>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <HAL_ADC_Start_DMA+0x1ac>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0xec>
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_ADC_Start_DMA+0x1a8>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f023 0206 	bic.w	r2, r3, #6
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ee0:	e002      	b.n	8002ee8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <HAL_ADC_Start_DMA+0x1b0>)
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_ADC_Start_DMA+0x1b4>)
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <HAL_ADC_Start_DMA+0x1b8>)
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0202 	mvn.w	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f20:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a18      	ldr	r0, [r3, #32]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	334c      	adds	r3, #76	; 0x4c
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f000 fbb3 	bl	800369c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f44:	d108      	bne.n	8002f58 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f54:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f56:	e00f      	b.n	8002f78 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f66:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f68:	e006      	b.n	8002f78 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002f72:	e001      	b.n	8002f78 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40012400 	.word	0x40012400
 8002f88:	40012800 	.word	0x40012800
 8002f8c:	080032d9 	.word	0x080032d9
 8002f90:	08003355 	.word	0x08003355
 8002f94:	08003371 	.word	0x08003371

08002f98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x20>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e0dc      	b.n	80031aa <HAL_ADC_ConfigChannel+0x1da>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d81c      	bhi.n	800303a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	3b05      	subs	r3, #5
 8003012:	221f      	movs	r2, #31
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	4019      	ands	r1, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b05      	subs	r3, #5
 800302c:	fa00 f203 	lsl.w	r2, r0, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	635a      	str	r2, [r3, #52]	; 0x34
 8003038:	e03c      	b.n	80030b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d81c      	bhi.n	800307c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	3b23      	subs	r3, #35	; 0x23
 8003054:	221f      	movs	r2, #31
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	4019      	ands	r1, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b23      	subs	r3, #35	; 0x23
 800306e:	fa00 f203 	lsl.w	r2, r0, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
 800307a:	e01b      	b.n	80030b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	3b41      	subs	r3, #65	; 0x41
 800308e:	221f      	movs	r2, #31
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	4019      	ands	r1, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b41      	subs	r3, #65	; 0x41
 80030a8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b09      	cmp	r3, #9
 80030ba:	d91c      	bls.n	80030f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68d9      	ldr	r1, [r3, #12]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	3b1e      	subs	r3, #30
 80030ce:	2207      	movs	r2, #7
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	4019      	ands	r1, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6898      	ldr	r0, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	3b1e      	subs	r3, #30
 80030e8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	e019      	b.n	800312a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6919      	ldr	r1, [r3, #16]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	2207      	movs	r2, #7
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	4019      	ands	r1, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6898      	ldr	r0, [r3, #8]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	fa00 f203 	lsl.w	r2, r0, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d003      	beq.n	800313a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003136:	2b11      	cmp	r3, #17
 8003138:	d132      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d125      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d126      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003160:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b10      	cmp	r3, #16
 8003168:	d11a      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a13      	ldr	r2, [pc, #76]	; (80031bc <HAL_ADC_ConfigChannel+0x1ec>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9a      	lsrs	r2, r3, #18
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003180:	e002      	b.n	8003188 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3b01      	subs	r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f9      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x1b2>
 800318e:	e007      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40012400 	.word	0x40012400
 80031b8:	20000014 	.word	0x20000014
 80031bc:	431bde83 	.word	0x431bde83

080031c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d039      	beq.n	8003252 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <ADC_Enable+0x9c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <ADC_Enable+0xa0>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9b      	lsrs	r3, r3, #18
 80031fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031fc:	e002      	b.n	8003204 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3b01      	subs	r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f9      	bne.n	80031fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800320a:	f7ff fce3 	bl	8002bd4 <HAL_GetTick>
 800320e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003210:	e018      	b.n	8003244 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003212:	f7ff fcdf 	bl	8002bd4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d911      	bls.n	8003244 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	f043 0210 	orr.w	r2, r3, #16
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e007      	b.n	8003254 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d1df      	bne.n	8003212 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000014 	.word	0x20000014
 8003260:	431bde83 	.word	0x431bde83

08003264 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d127      	bne.n	80032ce <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328e:	f7ff fca1 	bl	8002bd4 <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003294:	e014      	b.n	80032c0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003296:	f7ff fc9d 	bl	8002bd4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d90d      	bls.n	80032c0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	f043 0210 	orr.w	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d0e3      	beq.n	8003296 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d127      	bne.n	8003342 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003308:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800330c:	d115      	bne.n	800333a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003312:	2b00      	cmp	r3, #0
 8003314:	d111      	bne.n	800333a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fe2c 	bl	8002f98 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003340:	e004      	b.n	800334c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff fe21 	bl	8002faa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff fe10 	bl	8002fbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db0b      	blt.n	8003432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4906      	ldr	r1, [pc, #24]	; (800343c <__NVIC_EnableIRQ+0x34>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2001      	movs	r0, #1
 800342a:	fa00 f202 	lsl.w	r2, r0, r2
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	; (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
         );
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff4f 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff64 	bl	80033ec <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ffb2 	bl	8003494 <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff81 	bl	8003440 <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff57 	bl	8003408 <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e043      	b.n	8003602 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_DMA_Init+0xa8>)
 8003582:	4413      	add	r3, r2
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_DMA_Init+0xac>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	009a      	lsls	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <HAL_DMA_Init+0xb0>)
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	bffdfff8 	.word	0xbffdfff8
 8003610:	cccccccd 	.word	0xcccccccd
 8003614:	40020000 	.word	0x40020000

08003618 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_DMA_Start+0x20>
 8003634:	2302      	movs	r3, #2
 8003636:	e02d      	b.n	8003694 <HAL_DMA_Start+0x7c>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003646:	2b01      	cmp	r3, #1
 8003648:	d11d      	bne.n	8003686 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f9f0 	bl	8003a54 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e005      	b.n	8003692 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 800368e:	2302      	movs	r3, #2
 8003690:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8003692:	7dfb      	ldrb	r3, [r7, #23]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_DMA_Start_IT+0x20>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e04a      	b.n	8003752 <HAL_DMA_Start_IT+0xb6>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d13a      	bne.n	8003744 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f9ae 	bl	8003a54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 020e 	orr.w	r2, r2, #14
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e00f      	b.n	8003732 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0204 	bic.w	r2, r2, #4
 8003720:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 020a 	orr.w	r2, r2, #10
 8003730:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e005      	b.n	8003750 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800374c:	2302      	movs	r3, #2
 800374e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800376e:	2b02      	cmp	r3, #2
 8003770:	d005      	beq.n	800377e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
 800377c:	e051      	b.n	8003822 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 020e 	bic.w	r2, r2, #14
 800378c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a22      	ldr	r2, [pc, #136]	; (800382c <HAL_DMA_Abort_IT+0xd0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d029      	beq.n	80037fc <HAL_DMA_Abort_IT+0xa0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a20      	ldr	r2, [pc, #128]	; (8003830 <HAL_DMA_Abort_IT+0xd4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d022      	beq.n	80037f8 <HAL_DMA_Abort_IT+0x9c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_DMA_Abort_IT+0xd8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d01a      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x96>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_DMA_Abort_IT+0xdc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d012      	beq.n	80037ec <HAL_DMA_Abort_IT+0x90>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <HAL_DMA_Abort_IT+0xe0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00a      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x8a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_DMA_Abort_IT+0xe4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d102      	bne.n	80037e0 <HAL_DMA_Abort_IT+0x84>
 80037da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037de:	e00e      	b.n	80037fe <HAL_DMA_Abort_IT+0xa2>
 80037e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037e4:	e00b      	b.n	80037fe <HAL_DMA_Abort_IT+0xa2>
 80037e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ea:	e008      	b.n	80037fe <HAL_DMA_Abort_IT+0xa2>
 80037ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f0:	e005      	b.n	80037fe <HAL_DMA_Abort_IT+0xa2>
 80037f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f6:	e002      	b.n	80037fe <HAL_DMA_Abort_IT+0xa2>
 80037f8:	2310      	movs	r3, #16
 80037fa:	e000      	b.n	80037fe <HAL_DMA_Abort_IT+0xa2>
 80037fc:	2301      	movs	r3, #1
 80037fe:	4a11      	ldr	r2, [pc, #68]	; (8003844 <HAL_DMA_Abort_IT+0xe8>)
 8003800:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
    } 
  }
  return status;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40020008 	.word	0x40020008
 8003830:	4002001c 	.word	0x4002001c
 8003834:	40020030 	.word	0x40020030
 8003838:	40020044 	.word	0x40020044
 800383c:	40020058 	.word	0x40020058
 8003840:	4002006c 	.word	0x4002006c
 8003844:	40020000 	.word	0x40020000

08003848 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	2204      	movs	r2, #4
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d04f      	beq.n	8003910 <HAL_DMA_IRQHandler+0xc8>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d04a      	beq.n	8003910 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a66      	ldr	r2, [pc, #408]	; (8003a38 <HAL_DMA_IRQHandler+0x1f0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d029      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xae>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a65      	ldr	r2, [pc, #404]	; (8003a3c <HAL_DMA_IRQHandler+0x1f4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xaa>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a63      	ldr	r2, [pc, #396]	; (8003a40 <HAL_DMA_IRQHandler+0x1f8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01a      	beq.n	80038ec <HAL_DMA_IRQHandler+0xa4>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a62      	ldr	r2, [pc, #392]	; (8003a44 <HAL_DMA_IRQHandler+0x1fc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d012      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x9e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a60      	ldr	r2, [pc, #384]	; (8003a48 <HAL_DMA_IRQHandler+0x200>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00a      	beq.n	80038e0 <HAL_DMA_IRQHandler+0x98>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5f      	ldr	r2, [pc, #380]	; (8003a4c <HAL_DMA_IRQHandler+0x204>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d102      	bne.n	80038da <HAL_DMA_IRQHandler+0x92>
 80038d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038d8:	e00e      	b.n	80038f8 <HAL_DMA_IRQHandler+0xb0>
 80038da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038de:	e00b      	b.n	80038f8 <HAL_DMA_IRQHandler+0xb0>
 80038e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038e4:	e008      	b.n	80038f8 <HAL_DMA_IRQHandler+0xb0>
 80038e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038ea:	e005      	b.n	80038f8 <HAL_DMA_IRQHandler+0xb0>
 80038ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f0:	e002      	b.n	80038f8 <HAL_DMA_IRQHandler+0xb0>
 80038f2:	2340      	movs	r3, #64	; 0x40
 80038f4:	e000      	b.n	80038f8 <HAL_DMA_IRQHandler+0xb0>
 80038f6:	2304      	movs	r3, #4
 80038f8:	4a55      	ldr	r2, [pc, #340]	; (8003a50 <HAL_DMA_IRQHandler+0x208>)
 80038fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8094 	beq.w	8003a2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800390e:	e08e      	b.n	8003a2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2202      	movs	r2, #2
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d056      	beq.n	80039ce <HAL_DMA_IRQHandler+0x186>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d051      	beq.n	80039ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 020a 	bic.w	r2, r2, #10
 8003946:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a38      	ldr	r2, [pc, #224]	; (8003a38 <HAL_DMA_IRQHandler+0x1f0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d029      	beq.n	80039ae <HAL_DMA_IRQHandler+0x166>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a37      	ldr	r2, [pc, #220]	; (8003a3c <HAL_DMA_IRQHandler+0x1f4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <HAL_DMA_IRQHandler+0x162>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a35      	ldr	r2, [pc, #212]	; (8003a40 <HAL_DMA_IRQHandler+0x1f8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01a      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x15c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a34      	ldr	r2, [pc, #208]	; (8003a44 <HAL_DMA_IRQHandler+0x1fc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d012      	beq.n	800399e <HAL_DMA_IRQHandler+0x156>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a32      	ldr	r2, [pc, #200]	; (8003a48 <HAL_DMA_IRQHandler+0x200>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00a      	beq.n	8003998 <HAL_DMA_IRQHandler+0x150>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a31      	ldr	r2, [pc, #196]	; (8003a4c <HAL_DMA_IRQHandler+0x204>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d102      	bne.n	8003992 <HAL_DMA_IRQHandler+0x14a>
 800398c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003990:	e00e      	b.n	80039b0 <HAL_DMA_IRQHandler+0x168>
 8003992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003996:	e00b      	b.n	80039b0 <HAL_DMA_IRQHandler+0x168>
 8003998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800399c:	e008      	b.n	80039b0 <HAL_DMA_IRQHandler+0x168>
 800399e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039a2:	e005      	b.n	80039b0 <HAL_DMA_IRQHandler+0x168>
 80039a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039a8:	e002      	b.n	80039b0 <HAL_DMA_IRQHandler+0x168>
 80039aa:	2320      	movs	r3, #32
 80039ac:	e000      	b.n	80039b0 <HAL_DMA_IRQHandler+0x168>
 80039ae:	2302      	movs	r3, #2
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <HAL_DMA_IRQHandler+0x208>)
 80039b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d034      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039cc:	e02f      	b.n	8003a2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2208      	movs	r2, #8
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d028      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x1e8>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d023      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 020e 	bic.w	r2, r2, #14
 80039f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	2101      	movs	r1, #1
 8003a02:	fa01 f202 	lsl.w	r2, r1, r2
 8003a06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
    }
  }
  return;
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
}
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40020008 	.word	0x40020008
 8003a3c:	4002001c 	.word	0x4002001c
 8003a40:	40020030 	.word	0x40020030
 8003a44:	40020044 	.word	0x40020044
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	4002006c 	.word	0x4002006c
 8003a50:	40020000 	.word	0x40020000

08003a54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d108      	bne.n	8003a94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a92:	e007      	b.n	8003aa4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b08b      	sub	sp, #44	; 0x2c
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac2:	e127      	b.n	8003d14 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	f040 8116 	bne.w	8003d0e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d034      	beq.n	8003b54 <HAL_GPIO_Init+0xa4>
 8003aea:	2b12      	cmp	r3, #18
 8003aec:	d80d      	bhi.n	8003b0a <HAL_GPIO_Init+0x5a>
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d02b      	beq.n	8003b4a <HAL_GPIO_Init+0x9a>
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d804      	bhi.n	8003b00 <HAL_GPIO_Init+0x50>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d031      	beq.n	8003b5e <HAL_GPIO_Init+0xae>
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d01c      	beq.n	8003b38 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003afe:	e048      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d043      	beq.n	8003b8c <HAL_GPIO_Init+0xdc>
 8003b04:	2b11      	cmp	r3, #17
 8003b06:	d01b      	beq.n	8003b40 <HAL_GPIO_Init+0x90>
          break;
 8003b08:	e043      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b0a:	4a89      	ldr	r2, [pc, #548]	; (8003d30 <HAL_GPIO_Init+0x280>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d026      	beq.n	8003b5e <HAL_GPIO_Init+0xae>
 8003b10:	4a87      	ldr	r2, [pc, #540]	; (8003d30 <HAL_GPIO_Init+0x280>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d806      	bhi.n	8003b24 <HAL_GPIO_Init+0x74>
 8003b16:	4a87      	ldr	r2, [pc, #540]	; (8003d34 <HAL_GPIO_Init+0x284>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d020      	beq.n	8003b5e <HAL_GPIO_Init+0xae>
 8003b1c:	4a86      	ldr	r2, [pc, #536]	; (8003d38 <HAL_GPIO_Init+0x288>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_GPIO_Init+0xae>
          break;
 8003b22:	e036      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b24:	4a85      	ldr	r2, [pc, #532]	; (8003d3c <HAL_GPIO_Init+0x28c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0xae>
 8003b2a:	4a85      	ldr	r2, [pc, #532]	; (8003d40 <HAL_GPIO_Init+0x290>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d016      	beq.n	8003b5e <HAL_GPIO_Init+0xae>
 8003b30:	4a84      	ldr	r2, [pc, #528]	; (8003d44 <HAL_GPIO_Init+0x294>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_GPIO_Init+0xae>
          break;
 8003b36:	e02c      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	623b      	str	r3, [r7, #32]
          break;
 8003b3e:	e028      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	3304      	adds	r3, #4
 8003b46:	623b      	str	r3, [r7, #32]
          break;
 8003b48:	e023      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	623b      	str	r3, [r7, #32]
          break;
 8003b52:	e01e      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	623b      	str	r3, [r7, #32]
          break;
 8003b5c:	e019      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b66:	2304      	movs	r3, #4
 8003b68:	623b      	str	r3, [r7, #32]
          break;
 8003b6a:	e012      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b74:	2308      	movs	r3, #8
 8003b76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	611a      	str	r2, [r3, #16]
          break;
 8003b7e:	e008      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b80:	2308      	movs	r3, #8
 8003b82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	615a      	str	r2, [r3, #20]
          break;
 8003b8a:	e002      	b.n	8003b92 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	623b      	str	r3, [r7, #32]
          break;
 8003b90:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2bff      	cmp	r3, #255	; 0xff
 8003b96:	d801      	bhi.n	8003b9c <HAL_GPIO_Init+0xec>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	e001      	b.n	8003ba0 <HAL_GPIO_Init+0xf0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2bff      	cmp	r3, #255	; 0xff
 8003ba6:	d802      	bhi.n	8003bae <HAL_GPIO_Init+0xfe>
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_Init+0x104>
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	3b08      	subs	r3, #8
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	210f      	movs	r1, #15
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	6a39      	ldr	r1, [r7, #32]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8096 	beq.w	8003d0e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003be2:	4b59      	ldr	r3, [pc, #356]	; (8003d48 <HAL_GPIO_Init+0x298>)
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	4a58      	ldr	r2, [pc, #352]	; (8003d48 <HAL_GPIO_Init+0x298>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6193      	str	r3, [r2, #24]
 8003bee:	4b56      	ldr	r3, [pc, #344]	; (8003d48 <HAL_GPIO_Init+0x298>)
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bfa:	4a54      	ldr	r2, [pc, #336]	; (8003d4c <HAL_GPIO_Init+0x29c>)
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3302      	adds	r3, #2
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4b      	ldr	r2, [pc, #300]	; (8003d50 <HAL_GPIO_Init+0x2a0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_Init+0x19e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4a      	ldr	r2, [pc, #296]	; (8003d54 <HAL_GPIO_Init+0x2a4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00d      	beq.n	8003c4a <HAL_GPIO_Init+0x19a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a49      	ldr	r2, [pc, #292]	; (8003d58 <HAL_GPIO_Init+0x2a8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <HAL_GPIO_Init+0x196>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a48      	ldr	r2, [pc, #288]	; (8003d5c <HAL_GPIO_Init+0x2ac>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_GPIO_Init+0x192>
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e006      	b.n	8003c50 <HAL_GPIO_Init+0x1a0>
 8003c42:	2304      	movs	r3, #4
 8003c44:	e004      	b.n	8003c50 <HAL_GPIO_Init+0x1a0>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e002      	b.n	8003c50 <HAL_GPIO_Init+0x1a0>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_GPIO_Init+0x1a0>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c52:	f002 0203 	and.w	r2, r2, #3
 8003c56:	0092      	lsls	r2, r2, #2
 8003c58:	4093      	lsls	r3, r2
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c60:	493a      	ldr	r1, [pc, #232]	; (8003d4c <HAL_GPIO_Init+0x29c>)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	3302      	adds	r3, #2
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c7a:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4938      	ldr	r1, [pc, #224]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
 8003c86:	e006      	b.n	8003c96 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c88:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	4933      	ldr	r1, [pc, #204]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d006      	beq.n	8003cb0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ca2:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	492e      	ldr	r1, [pc, #184]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
 8003cae:	e006      	b.n	8003cbe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	4929      	ldr	r1, [pc, #164]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cca:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	4924      	ldr	r1, [pc, #144]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
 8003cd6:	e006      	b.n	8003ce6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cd8:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	491f      	ldr	r1, [pc, #124]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	491a      	ldr	r1, [pc, #104]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60cb      	str	r3, [r1, #12]
 8003cfe:	e006      	b.n	8003d0e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	4915      	ldr	r1, [pc, #84]	; (8003d60 <HAL_GPIO_Init+0x2b0>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	3301      	adds	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f47f aed0 	bne.w	8003ac4 <HAL_GPIO_Init+0x14>
  }
}
 8003d24:	bf00      	nop
 8003d26:	372c      	adds	r7, #44	; 0x2c
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	10210000 	.word	0x10210000
 8003d34:	10110000 	.word	0x10110000
 8003d38:	10120000 	.word	0x10120000
 8003d3c:	10310000 	.word	0x10310000
 8003d40:	10320000 	.word	0x10320000
 8003d44:	10220000 	.word	0x10220000
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40010800 	.word	0x40010800
 8003d54:	40010c00 	.word	0x40010c00
 8003d58:	40011000 	.word	0x40011000
 8003d5c:	40011400 	.word	0x40011400
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
 8003d70:	4613      	mov	r3, r2
 8003d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d74:	787b      	ldrb	r3, [r7, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d80:	e003      	b.n	8003d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	041a      	lsls	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	611a      	str	r2, [r3, #16]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e26c      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8087 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db4:	4b92      	ldr	r3, [pc, #584]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d00c      	beq.n	8003dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dc0:	4b8f      	ldr	r3, [pc, #572]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d112      	bne.n	8003df2 <HAL_RCC_OscConfig+0x5e>
 8003dcc:	4b8c      	ldr	r3, [pc, #560]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d10b      	bne.n	8003df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dda:	4b89      	ldr	r3, [pc, #548]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d06c      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x12c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d168      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e246      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x76>
 8003dfc:	4b80      	ldr	r3, [pc, #512]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a7f      	ldr	r2, [pc, #508]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	e02e      	b.n	8003e68 <HAL_RCC_OscConfig+0xd4>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x98>
 8003e12:	4b7b      	ldr	r3, [pc, #492]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a7a      	ldr	r2, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b78      	ldr	r3, [pc, #480]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a77      	ldr	r2, [pc, #476]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xd4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0xbc>
 8003e36:	4b72      	ldr	r3, [pc, #456]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a71      	ldr	r2, [pc, #452]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b6f      	ldr	r3, [pc, #444]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a6e      	ldr	r2, [pc, #440]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xd4>
 8003e50:	4b6b      	ldr	r3, [pc, #428]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6a      	ldr	r2, [pc, #424]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a67      	ldr	r2, [pc, #412]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe feb0 	bl	8002bd4 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe feac 	bl	8002bd4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1fa      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b5d      	ldr	r3, [pc, #372]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xe4>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe fe9c 	bl	8002bd4 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fe98 	bl	8002bd4 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1e6      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b53      	ldr	r3, [pc, #332]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x10c>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ece:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x18c>
 8003ee6:	4b46      	ldr	r3, [pc, #280]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	4b43      	ldr	r3, [pc, #268]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x176>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e1ba      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	4b3d      	ldr	r3, [pc, #244]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4939      	ldr	r1, [pc, #228]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	e03a      	b.n	8003f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f28:	4b36      	ldr	r3, [pc, #216]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fe fe51 	bl	8002bd4 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fe fe4d 	bl	8002bd4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e19b      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f48:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4927      	ldr	r1, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e015      	b.n	8003f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6a:	4b26      	ldr	r3, [pc, #152]	; (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fe fe30 	bl	8002bd4 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f78:	f7fe fe2c 	bl	8002bd4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e17a      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d03a      	beq.n	8004018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d019      	beq.n	8003fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b17      	ldr	r3, [pc, #92]	; (8004008 <HAL_RCC_OscConfig+0x274>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb0:	f7fe fe10 	bl	8002bd4 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fe fe0c 	bl	8002bd4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e15a      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f000 fb0a 	bl	80045f0 <RCC_Delay>
 8003fdc:	e01c      	b.n	8004018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <HAL_RCC_OscConfig+0x274>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe4:	f7fe fdf6 	bl	8002bd4 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fea:	e00f      	b.n	800400c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fec:	f7fe fdf2 	bl	8002bd4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d908      	bls.n	800400c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e140      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	42420000 	.word	0x42420000
 8004008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	4b9e      	ldr	r3, [pc, #632]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e9      	bne.n	8003fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a6 	beq.w	8004172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402a:	4b97      	ldr	r3, [pc, #604]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10d      	bne.n	8004052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	4b94      	ldr	r3, [pc, #592]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	4a93      	ldr	r2, [pc, #588]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004040:	61d3      	str	r3, [r2, #28]
 8004042:	4b91      	ldr	r3, [pc, #580]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004052:	4b8e      	ldr	r3, [pc, #568]	; (800428c <HAL_RCC_OscConfig+0x4f8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d118      	bne.n	8004090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405e:	4b8b      	ldr	r3, [pc, #556]	; (800428c <HAL_RCC_OscConfig+0x4f8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a8a      	ldr	r2, [pc, #552]	; (800428c <HAL_RCC_OscConfig+0x4f8>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406a:	f7fe fdb3 	bl	8002bd4 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004072:	f7fe fdaf 	bl	8002bd4 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b64      	cmp	r3, #100	; 0x64
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0fd      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x4f8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d106      	bne.n	80040a6 <HAL_RCC_OscConfig+0x312>
 8004098:	4b7b      	ldr	r3, [pc, #492]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4a7a      	ldr	r2, [pc, #488]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6213      	str	r3, [r2, #32]
 80040a4:	e02d      	b.n	8004102 <HAL_RCC_OscConfig+0x36e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x334>
 80040ae:	4b76      	ldr	r3, [pc, #472]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a75      	ldr	r2, [pc, #468]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6213      	str	r3, [r2, #32]
 80040ba:	4b73      	ldr	r3, [pc, #460]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a72      	ldr	r2, [pc, #456]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	6213      	str	r3, [r2, #32]
 80040c6:	e01c      	b.n	8004102 <HAL_RCC_OscConfig+0x36e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	d10c      	bne.n	80040ea <HAL_RCC_OscConfig+0x356>
 80040d0:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4a6c      	ldr	r2, [pc, #432]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	6213      	str	r3, [r2, #32]
 80040dc:	4b6a      	ldr	r3, [pc, #424]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4a69      	ldr	r2, [pc, #420]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6213      	str	r3, [r2, #32]
 80040e8:	e00b      	b.n	8004102 <HAL_RCC_OscConfig+0x36e>
 80040ea:	4b67      	ldr	r3, [pc, #412]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4a66      	ldr	r2, [pc, #408]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	6213      	str	r3, [r2, #32]
 80040f6:	4b64      	ldr	r3, [pc, #400]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	4a63      	ldr	r2, [pc, #396]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80040fc:	f023 0304 	bic.w	r3, r3, #4
 8004100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d015      	beq.n	8004136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410a:	f7fe fd63 	bl	8002bd4 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	e00a      	b.n	8004128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fe fd5f 	bl	8002bd4 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e0ab      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004128:	4b57      	ldr	r3, [pc, #348]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ee      	beq.n	8004112 <HAL_RCC_OscConfig+0x37e>
 8004134:	e014      	b.n	8004160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7fe fd4d 	bl	8002bd4 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fe fd49 	bl	8002bd4 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e095      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004154:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ee      	bne.n	800413e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004166:	4b48      	ldr	r3, [pc, #288]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	4a47      	ldr	r2, [pc, #284]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800416c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004170:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8081 	beq.w	800427e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800417c:	4b42      	ldr	r3, [pc, #264]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b08      	cmp	r3, #8
 8004186:	d061      	beq.n	800424c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d146      	bne.n	800421e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004190:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <HAL_RCC_OscConfig+0x4fc>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004196:	f7fe fd1d 	bl	8002bd4 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419e:	f7fe fd19 	bl	8002bd4 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e067      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c4:	d108      	bne.n	80041d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041c6:	4b30      	ldr	r3, [pc, #192]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	492d      	ldr	r1, [pc, #180]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a19      	ldr	r1, [r3, #32]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	430b      	orrs	r3, r1
 80041ea:	4927      	ldr	r1, [pc, #156]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f0:	4b27      	ldr	r3, [pc, #156]	; (8004290 <HAL_RCC_OscConfig+0x4fc>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fe fced 	bl	8002bd4 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fe fce9 	bl	8002bd4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e037      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x46a>
 800421c:	e02f      	b.n	800427e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421e:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <HAL_RCC_OscConfig+0x4fc>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe fcd6 	bl	8002bd4 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fe fcd2 	bl	8002bd4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e020      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x498>
 800424a:	e018      	b.n	800427e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e013      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_OscConfig+0x4f4>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	429a      	cmp	r2, r3
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d001      	beq.n	800427e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000
 800428c:	40007000 	.word	0x40007000
 8004290:	42420060 	.word	0x42420060

08004294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0d0      	b.n	800444a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a8:	4b6a      	ldr	r3, [pc, #424]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d910      	bls.n	80042d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b67      	ldr	r3, [pc, #412]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 0207 	bic.w	r2, r3, #7
 80042be:	4965      	ldr	r1, [pc, #404]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b63      	ldr	r3, [pc, #396]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0b8      	b.n	800444a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d020      	beq.n	8004326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f0:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a58      	ldr	r2, [pc, #352]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004308:	4b53      	ldr	r3, [pc, #332]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4a52      	ldr	r2, [pc, #328]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004314:	4b50      	ldr	r3, [pc, #320]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	494d      	ldr	r1, [pc, #308]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d040      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d115      	bne.n	8004372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e07f      	b.n	800444a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d107      	bne.n	8004362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004352:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e073      	b.n	800444a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e06b      	b.n	800444a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004372:	4b39      	ldr	r3, [pc, #228]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4936      	ldr	r1, [pc, #216]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004384:	f7fe fc26 	bl	8002bd4 <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438c:	f7fe fc22 	bl	8002bd4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e053      	b.n	800444a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 020c 	and.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1eb      	bne.n	800438c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043b4:	4b27      	ldr	r3, [pc, #156]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d210      	bcs.n	80043e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 0207 	bic.w	r2, r3, #7
 80043ca:	4922      	ldr	r1, [pc, #136]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d2:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e032      	b.n	800444a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4916      	ldr	r1, [pc, #88]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800440e:	4b12      	ldr	r3, [pc, #72]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	490e      	ldr	r1, [pc, #56]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004422:	f000 f821 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 8004426:	4601      	mov	r1, r0
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	5cd3      	ldrb	r3, [r2, r3]
 8004436:	fa21 f303 	lsr.w	r3, r1, r3
 800443a:	4a09      	ldr	r2, [pc, #36]	; (8004460 <HAL_RCC_ClockConfig+0x1cc>)
 800443c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_RCC_ClockConfig+0x1d0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd ff2e 	bl	80022a4 <HAL_InitTick>

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40022000 	.word	0x40022000
 8004458:	40021000 	.word	0x40021000
 800445c:	08009d08 	.word	0x08009d08
 8004460:	20000014 	.word	0x20000014
 8004464:	20000018 	.word	0x20000018

08004468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004468:	b490      	push	{r4, r7}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800446e:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004470:	1d3c      	adds	r4, r7, #4
 8004472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004478:	4b28      	ldr	r3, [pc, #160]	; (800451c <HAL_RCC_GetSysClockFreq+0xb4>)
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	2300      	movs	r3, #0
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004492:	4b23      	ldr	r3, [pc, #140]	; (8004520 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d002      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x40>
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x46>
 80044a6:	e02d      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044aa:	623b      	str	r3, [r7, #32]
      break;
 80044ac:	e02d      	b.n	800450a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	0c9b      	lsrs	r3, r3, #18
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044ba:	4413      	add	r3, r2
 80044bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0c5b      	lsrs	r3, r3, #17
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044da:	4413      	add	r3, r2
 80044dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044e6:	fb02 f203 	mul.w	r2, r2, r3
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	e004      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	623b      	str	r3, [r7, #32]
      break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004506:	623b      	str	r3, [r7, #32]
      break;
 8004508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450a:	6a3b      	ldr	r3, [r7, #32]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3728      	adds	r7, #40	; 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bc90      	pop	{r4, r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	08009cd8 	.word	0x08009cd8
 800451c:	08009ce8 	.word	0x08009ce8
 8004520:	40021000 	.word	0x40021000
 8004524:	007a1200 	.word	0x007a1200
 8004528:	003d0900 	.word	0x003d0900

0800452c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004530:	4b02      	ldr	r3, [pc, #8]	; (800453c <HAL_RCC_GetHCLKFreq+0x10>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	20000014 	.word	0x20000014

08004540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004544:	f7ff fff2 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004548:	4601      	mov	r1, r0
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4a03      	ldr	r2, [pc, #12]	; (8004564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004556:	5cd3      	ldrb	r3, [r2, r3]
 8004558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	08009d18 	.word	0x08009d18

08004568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800456c:	f7ff ffde 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004570:	4601      	mov	r1, r0
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	0adb      	lsrs	r3, r3, #11
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4a03      	ldr	r2, [pc, #12]	; (800458c <HAL_RCC_GetPCLK2Freq+0x24>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	08009d18 	.word	0x08009d18

08004590 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	220f      	movs	r2, #15
 800459e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_RCC_GetClockConfig+0x58>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0203 	and.w	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_RCC_GetClockConfig+0x58>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_GetClockConfig+0x58>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_RCC_GetClockConfig+0x58>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_GetClockConfig+0x5c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0207 	and.w	r2, r3, #7
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40022000 	.word	0x40022000

080045f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <RCC_Delay+0x34>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <RCC_Delay+0x38>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	0a5b      	lsrs	r3, r3, #9
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800460c:	bf00      	nop
  }
  while (Delay --);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	60fa      	str	r2, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f9      	bne.n	800460c <RCC_Delay+0x1c>
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000014 	.word	0x20000014
 8004628:	10624dd3 	.word	0x10624dd3

0800462c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d07d      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464c:	4b4f      	ldr	r3, [pc, #316]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10d      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004658:	4b4c      	ldr	r3, [pc, #304]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4a4b      	ldr	r2, [pc, #300]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004662:	61d3      	str	r3, [r2, #28]
 8004664:	4b49      	ldr	r3, [pc, #292]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	4b46      	ldr	r3, [pc, #280]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d118      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a42      	ldr	r2, [pc, #264]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468c:	f7fe faa2 	bl	8002bd4 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004692:	e008      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004694:	f7fe fa9e 	bl	8002bd4 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e06d      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a6:	4b3a      	ldr	r3, [pc, #232]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b2:	4b36      	ldr	r3, [pc, #216]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d02e      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d027      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d0:	4b2e      	ldr	r3, [pc, #184]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046da:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046e0:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046e6:	4a29      	ldr	r2, [pc, #164]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d014      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f6:	f7fe fa6d 	bl	8002bd4 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fe fa69 	bl	8002bd4 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e036      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ee      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4917      	ldr	r1, [pc, #92]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	4313      	orrs	r3, r2
 8004730:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d105      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004738:	4b14      	ldr	r3, [pc, #80]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	4a13      	ldr	r2, [pc, #76]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004742:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004750:	4b0e      	ldr	r3, [pc, #56]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	490b      	ldr	r1, [pc, #44]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475e:	4313      	orrs	r3, r2
 8004760:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4904      	ldr	r1, [pc, #16]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477c:	4313      	orrs	r3, r2
 800477e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
 8004790:	40007000 	.word	0x40007000
 8004794:	42420440 	.word	0x42420440

08004798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e041      	b.n	800482e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd fbf4 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f000 fc66 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e032      	b.n	80048b6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_TIM_Base_Start+0x88>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_TIM_Base_Start+0x48>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d009      	beq.n	8004880 <HAL_TIM_Base_Start+0x48>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <HAL_TIM_Base_Start+0x8c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_TIM_Base_Start+0x48>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <HAL_TIM_Base_Start+0x90>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d111      	bne.n	80048a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d010      	beq.n	80048b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	e007      	b.n	80048b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800

080048cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d001      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e03a      	b.n	800495a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_TIM_Base_Start_IT+0x98>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00e      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x58>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d009      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x58>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <HAL_TIM_Base_Start_IT+0x9c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x58>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a13      	ldr	r2, [pc, #76]	; (800496c <HAL_TIM_Base_Start_IT+0xa0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d111      	bne.n	8004948 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d010      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0201 	orr.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004946:	e007      	b.n	8004958 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800

08004970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e041      	b.n	8004a06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f839 	bl	8004a0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 fb7a 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <HAL_TIM_PWM_Start+0x24>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e022      	b.n	8004a8a <HAL_TIM_PWM_Start+0x6a>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d109      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x3e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	e015      	b.n	8004a8a <HAL_TIM_PWM_Start+0x6a>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d109      	bne.n	8004a78 <HAL_TIM_PWM_Start+0x58>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e008      	b.n	8004a8a <HAL_TIM_PWM_Start+0x6a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e05e      	b.n	8004b50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0x82>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa0:	e013      	b.n	8004aca <HAL_TIM_PWM_Start+0xaa>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x92>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab0:	e00b      	b.n	8004aca <HAL_TIM_PWM_Start+0xaa>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0xa2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac0:	e003      	b.n	8004aca <HAL_TIM_PWM_Start+0xaa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fd68 	bl	80055a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <HAL_TIM_PWM_Start+0x138>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d107      	bne.n	8004af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <HAL_TIM_PWM_Start+0x138>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00e      	beq.n	8004b1a <HAL_TIM_PWM_Start+0xfa>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d009      	beq.n	8004b1a <HAL_TIM_PWM_Start+0xfa>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <HAL_TIM_PWM_Start+0x13c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_TIM_PWM_Start+0xfa>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <HAL_TIM_PWM_Start+0x140>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d111      	bne.n	8004b3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b06      	cmp	r3, #6
 8004b2a:	d010      	beq.n	8004b4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	e007      	b.n	8004b4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0202 	mvn.w	r2, #2
 8004b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa62 	bl	8005070 <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa55 	bl	800505e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa64 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0204 	mvn.w	r2, #4
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa38 	bl	8005070 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa2b 	bl	800505e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fa3a 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d122      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d11b      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0208 	mvn.w	r2, #8
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fa0e 	bl	8005070 <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa01 	bl	800505e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fa10 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d122      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d11b      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0210 	mvn.w	r2, #16
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2208      	movs	r2, #8
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f9e4 	bl	8005070 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9d7 	bl	800505e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f9e6 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10e      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d107      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0201 	mvn.w	r2, #1
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd f8aa 	bl	8001e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fd26 	bl	8005760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f9aa 	bl	8005094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d10e      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0220 	mvn.w	r2, #32
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fcf1 	bl	800574e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0ac      	b.n	8004ee8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	f200 809f 	bhi.w	8004edc <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004edd 	.word	0x08004edd
 8004dac:	08004edd 	.word	0x08004edd
 8004db0:	08004edd 	.word	0x08004edd
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08004edd 	.word	0x08004edd
 8004dbc:	08004edd 	.word	0x08004edd
 8004dc0:	08004edd 	.word	0x08004edd
 8004dc4:	08004e5b 	.word	0x08004e5b
 8004dc8:	08004edd 	.word	0x08004edd
 8004dcc:	08004edd 	.word	0x08004edd
 8004dd0:	08004edd 	.word	0x08004edd
 8004dd4:	08004e9b 	.word	0x08004e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f9c4 	bl	800516c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0208 	orr.w	r2, r2, #8
 8004df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0204 	bic.w	r2, r2, #4
 8004e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	619a      	str	r2, [r3, #24]
      break;
 8004e16:	e062      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa0a 	bl	8005238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	021a      	lsls	r2, r3, #8
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	619a      	str	r2, [r3, #24]
      break;
 8004e58:	e041      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fa53 	bl	800530c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0208 	orr.w	r2, r2, #8
 8004e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0204 	bic.w	r2, r2, #4
 8004e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	61da      	str	r2, [r3, #28]
      break;
 8004e98:	e021      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fa9d 	bl	80053e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	021a      	lsls	r2, r3, #8
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	61da      	str	r2, [r3, #28]
      break;
 8004eda:	e000      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_ConfigClockSource+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e0a6      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x166>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d067      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0x120>
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d80b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x6c>
 8004f44:	2b10      	cmp	r3, #16
 8004f46:	d073      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0x140>
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d802      	bhi.n	8004f52 <HAL_TIM_ConfigClockSource+0x62>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d06f      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f50:	e078      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d06c      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0x140>
 8004f56:	2b30      	cmp	r3, #48	; 0x30
 8004f58:	d06a      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f5a:	e073      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f5c:	2b70      	cmp	r3, #112	; 0x70
 8004f5e:	d00d      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0x8c>
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d804      	bhi.n	8004f6e <HAL_TIM_ConfigClockSource+0x7e>
 8004f64:	2b50      	cmp	r3, #80	; 0x50
 8004f66:	d033      	beq.n	8004fd0 <HAL_TIM_ConfigClockSource+0xe0>
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d041      	beq.n	8004ff0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f6c:	e06a      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d066      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x152>
 8004f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f78:	d017      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f7a:	e063      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6899      	ldr	r1, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f000 faed 	bl	800556a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	609a      	str	r2, [r3, #8]
      break;
 8004fa8:	e04c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6899      	ldr	r1, [r3, #8]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f000 fad6 	bl	800556a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fcc:	609a      	str	r2, [r3, #8]
      break;
 8004fce:	e039      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f000 fa4d 	bl	800547c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2150      	movs	r1, #80	; 0x50
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 faa4 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004fee:	e029      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f000 fa6b 	bl	80054d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2160      	movs	r1, #96	; 0x60
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fa94 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 800500e:	e019      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	461a      	mov	r2, r3
 800501e:	f000 fa2d 	bl	800547c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2140      	movs	r1, #64	; 0x40
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fa84 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 800502e:	e009      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 fa7b 	bl	8005536 <TIM_ITRx_SetConfig>
        break;
 8005040:	e000      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
	...

080050a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a29      	ldr	r2, [pc, #164]	; (8005160 <TIM_Base_SetConfig+0xb8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_Base_SetConfig+0x30>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0x30>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a26      	ldr	r2, [pc, #152]	; (8005164 <TIM_Base_SetConfig+0xbc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0x30>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a25      	ldr	r2, [pc, #148]	; (8005168 <TIM_Base_SetConfig+0xc0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d108      	bne.n	80050ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <TIM_Base_SetConfig+0xb8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0x62>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0x62>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a19      	ldr	r2, [pc, #100]	; (8005164 <TIM_Base_SetConfig+0xbc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0x62>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <TIM_Base_SetConfig+0xc0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a07      	ldr	r2, [pc, #28]	; (8005160 <TIM_Base_SetConfig+0xb8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	615a      	str	r2, [r3, #20]
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr
 8005160:	40012c00 	.word	0x40012c00
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800

0800516c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0201 	bic.w	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f023 0302 	bic.w	r3, r3, #2
 80051b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <TIM_OC1_SetConfig+0xc8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10c      	bne.n	80051e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0308 	bic.w	r3, r3, #8
 80051ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 0304 	bic.w	r3, r3, #4
 80051e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a13      	ldr	r2, [pc, #76]	; (8005234 <TIM_OC1_SetConfig+0xc8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d111      	bne.n	800520e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40012c00 	.word	0x40012c00

08005238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0210 	bic.w	r2, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0320 	bic.w	r3, r3, #32
 8005282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <TIM_OC2_SetConfig+0xd0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d10d      	bne.n	80052b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800529e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a14      	ldr	r2, [pc, #80]	; (8005308 <TIM_OC2_SetConfig+0xd0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d113      	bne.n	80052e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr
 8005308:	40012c00 	.word	0x40012c00

0800530c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <TIM_OC3_SetConfig+0xd0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d10d      	bne.n	8005386 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a14      	ldr	r2, [pc, #80]	; (80053dc <TIM_OC3_SetConfig+0xd0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d113      	bne.n	80053b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800539c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	621a      	str	r2, [r3, #32]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40012c00 	.word	0x40012c00

080053e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800542a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	031b      	lsls	r3, r3, #12
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0f      	ldr	r2, [pc, #60]	; (8005478 <TIM_OC4_SetConfig+0x98>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d109      	bne.n	8005454 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	019b      	lsls	r3, r3, #6
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	40012c00 	.word	0x40012c00

0800547c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f023 0201 	bic.w	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 030a 	bic.w	r3, r3, #10
 80054b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f023 0210 	bic.w	r2, r3, #16
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005502:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	031b      	lsls	r3, r3, #12
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	621a      	str	r2, [r3, #32]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	f043 0307 	orr.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800556a:	b480      	push	{r7}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005584:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	021a      	lsls	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	431a      	orrs	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4313      	orrs	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	2201      	movs	r2, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1a      	ldr	r2, [r3, #32]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	401a      	ands	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	431a      	orrs	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e046      	b.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00e      	beq.n	800566a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005654:	d009      	beq.n	800566a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a12      	ldr	r2, [pc, #72]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a10      	ldr	r2, [pc, #64]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d10c      	bne.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	4313      	orrs	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800

080056ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e03d      	b.n	8005744 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e03f      	b.n	8005804 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fc fd2f 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2224      	movs	r2, #36	; 0x24
 80057a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fb82 	bl	8005ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b20      	cmp	r3, #32
 800582a:	d17c      	bne.n	8005926 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_UART_Transmit+0x2c>
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e075      	b.n	8005928 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_UART_Transmit+0x3e>
 8005846:	2302      	movs	r3, #2
 8005848:	e06e      	b.n	8005928 <HAL_UART_Transmit+0x11c>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2221      	movs	r2, #33	; 0x21
 800585c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005860:	f7fd f9b8 	bl	8002bd4 <HAL_GetTick>
 8005864:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	88fa      	ldrh	r2, [r7, #6]
 800586a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d108      	bne.n	800588e <HAL_UART_Transmit+0x82>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	e003      	b.n	8005896 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800589e:	e02a      	b.n	80058f6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f9a6 	bl	8005bfc <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e036      	b.n	8005928 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	3302      	adds	r3, #2
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e007      	b.n	80058e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	781a      	ldrb	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	3301      	adds	r3, #1
 80058e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1cf      	bne.n	80058a0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2200      	movs	r2, #0
 8005908:	2140      	movs	r1, #64	; 0x40
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f976 	bl	8005bfc <UART_WaitOnFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e006      	b.n	8005928 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
  }
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b20      	cmp	r3, #32
 8005948:	d140      	bne.n	80059cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_UART_Receive_IT+0x26>
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e039      	b.n	80059ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_UART_Receive_IT+0x38>
 8005964:	2302      	movs	r3, #2
 8005966:	e032      	b.n	80059ce <HAL_UART_Receive_IT+0x9e>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2222      	movs	r2, #34	; 0x22
 800598c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0220 	orr.w	r2, r2, #32
 80059c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80059cc:	2302      	movs	r3, #2
  }
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10d      	bne.n	8005a2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_UART_IRQHandler+0x52>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f9cc 	bl	8005dc0 <UART_Receive_IT>
      return;
 8005a28:	e0d1      	b.n	8005bce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80b0 	beq.w	8005b92 <HAL_UART_IRQHandler+0x1ba>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d105      	bne.n	8005a48 <HAL_UART_IRQHandler+0x70>
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80a5 	beq.w	8005b92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_UART_IRQHandler+0x90>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	f043 0201 	orr.w	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_UART_IRQHandler+0xb0>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a80:	f043 0202 	orr.w	r2, r3, #2
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xd0>
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa0:	f043 0204 	orr.w	r2, r3, #4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00f      	beq.n	8005ad2 <HAL_UART_IRQHandler+0xfa>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <HAL_UART_IRQHandler+0xee>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	f043 0208 	orr.w	r2, r3, #8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d078      	beq.n	8005bcc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <HAL_UART_IRQHandler+0x11c>
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f966 	bl	8005dc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <HAL_UART_IRQHandler+0x144>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d031      	beq.n	8005b80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f8b7 	bl	8005c90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d023      	beq.n	8005b78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d013      	beq.n	8005b70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	4a21      	ldr	r2, [pc, #132]	; (8005bd4 <HAL_UART_IRQHandler+0x1fc>)
 8005b4e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fd fe01 	bl	800375c <HAL_DMA_Abort_IT>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d016      	beq.n	8005b8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6e:	e00e      	b.n	8005b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f83a 	bl	8005bea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b76:	e00a      	b.n	8005b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f836 	bl	8005bea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7e:	e006      	b.n	8005b8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f832 	bl	8005bea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005b8c:	e01e      	b.n	8005bcc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8e:	bf00      	nop
    return;
 8005b90:	e01c      	b.n	8005bcc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_UART_IRQHandler+0x1d6>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8a3 	bl	8005cf2 <UART_Transmit_IT>
    return;
 8005bac:	e00f      	b.n	8005bce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <HAL_UART_IRQHandler+0x1f6>
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8e4 	bl	8005d90 <UART_EndTransmit_IT>
    return;
 8005bc8:	bf00      	nop
 8005bca:	e000      	b.n	8005bce <HAL_UART_IRQHandler+0x1f6>
    return;
 8005bcc:	bf00      	nop
  }
}
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	08005ccb 	.word	0x08005ccb

08005bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0c:	e02c      	b.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c14:	d028      	beq.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c1c:	f7fc ffda 	bl	8002bd4 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d21d      	bcs.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e00f      	b.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4013      	ands	r3, r2
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d0c3      	beq.n	8005c0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ca6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff ff80 	bl	8005bea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b21      	cmp	r3, #33	; 0x21
 8005d04:	d13e      	bne.n	8005d84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0e:	d114      	bne.n	8005d3a <UART_Transmit_IT+0x48>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d110      	bne.n	8005d3a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	1c9a      	adds	r2, r3, #2
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]
 8005d38:	e008      	b.n	8005d4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6211      	str	r1, [r2, #32]
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10f      	bne.n	8005d80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff ff11 	bl	8005bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b22      	cmp	r3, #34	; 0x22
 8005dd2:	d170      	bne.n	8005eb6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ddc:	d117      	bne.n	8005e0e <UART_Receive_IT+0x4e>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d113      	bne.n	8005e0e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	1c9a      	adds	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e0c:	e026      	b.n	8005e5c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e20:	d007      	beq.n	8005e32 <UART_Receive_IT+0x72>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <UART_Receive_IT+0x80>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	e008      	b.n	8005e52 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d120      	bne.n	8005eb2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0220 	bic.w	r2, r2, #32
 8005e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fa fe7b 	bl	8000ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e002      	b.n	8005eb8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005efa:	f023 030c 	bic.w	r3, r3, #12
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	430b      	orrs	r3, r1
 8005f06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2c      	ldr	r2, [pc, #176]	; (8005fd4 <UART_SetConfig+0x114>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d103      	bne.n	8005f30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f28:	f7fe fb1e 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	e002      	b.n	8005f36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f30:	f7fe fb06 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8005f34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009a      	lsls	r2, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <UART_SetConfig+0x118>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	0119      	lsls	r1, r3, #4
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009a      	lsls	r2, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <UART_SetConfig+0x118>)
 8005f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2064      	movs	r0, #100	; 0x64
 8005f76:	fb00 f303 	mul.w	r3, r0, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	3332      	adds	r3, #50	; 0x32
 8005f80:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <UART_SetConfig+0x118>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f8c:	4419      	add	r1, r3
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009a      	lsls	r2, r3, #2
 8005f98:	441a      	add	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <UART_SetConfig+0x118>)
 8005fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	2064      	movs	r0, #100	; 0x64
 8005fae:	fb00 f303 	mul.w	r3, r0, r3
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	3332      	adds	r3, #50	; 0x32
 8005fb8:	4a07      	ldr	r2, [pc, #28]	; (8005fd8 <UART_SetConfig+0x118>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	440a      	add	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	51eb851f 	.word	0x51eb851f

08005fdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fee:	2b84      	cmp	r3, #132	; 0x84
 8005ff0:	d005      	beq.n	8005ffe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3303      	adds	r3, #3
 8005ffc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr

0800600a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006010:	f3ef 8305 	mrs	r3, IPSR
 8006014:	607b      	str	r3, [r7, #4]
  return(result);
 8006016:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2db      	uxtb	r3, r3
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006030:	f001 fb32 	bl	8007698 <vTaskStartScheduler>
  
  return osOK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	bd80      	pop	{r7, pc}

0800603a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800603a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603c:	b089      	sub	sp, #36	; 0x24
 800603e:	af04      	add	r7, sp, #16
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d020      	beq.n	800608e <osThreadCreate+0x54>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01c      	beq.n	800608e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685c      	ldr	r4, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681d      	ldr	r5, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691e      	ldr	r6, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ffb8 	bl	8005fdc <makeFreeRtosPriority>
 800606c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006076:	9202      	str	r2, [sp, #8]
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	9100      	str	r1, [sp, #0]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	4632      	mov	r2, r6
 8006080:	4629      	mov	r1, r5
 8006082:	4620      	mov	r0, r4
 8006084:	f001 f94e 	bl	8007324 <xTaskCreateStatic>
 8006088:	4603      	mov	r3, r0
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	e01c      	b.n	80060c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685c      	ldr	r4, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800609a:	b29e      	uxth	r6, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff ff9a 	bl	8005fdc <makeFreeRtosPriority>
 80060a8:	4602      	mov	r2, r0
 80060aa:	f107 030c 	add.w	r3, r7, #12
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	9200      	str	r2, [sp, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	4632      	mov	r2, r6
 80060b6:	4629      	mov	r1, r5
 80060b8:	4620      	mov	r0, r4
 80060ba:	f001 f98c 	bl	80073d6 <xTaskCreate>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d001      	beq.n	80060c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e000      	b.n	80060ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80060c8:	68fb      	ldr	r3, [r7, #12]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <osDelay+0x16>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e000      	b.n	80060ea <osDelay+0x18>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 faa0 	bl	8007630 <vTaskDelay>
  
  return osOK;
 80060f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	460b      	mov	r3, r1
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d013      	beq.n	800613a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8006112:	7afb      	ldrb	r3, [r7, #11]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <osTimerCreate+0x20>
 8006118:	2101      	movs	r1, #1
 800611a:	e000      	b.n	800611e <osTimerCreate+0x22>
 800611c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8006126:	9201      	str	r2, [sp, #4]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	460a      	mov	r2, r1
 800612e:	2101      	movs	r1, #1
 8006130:	480b      	ldr	r0, [pc, #44]	; (8006160 <osTimerCreate+0x64>)
 8006132:	f002 f994 	bl	800845e <xTimerCreateStatic>
 8006136:	4603      	mov	r3, r0
 8006138:	e00e      	b.n	8006158 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <osTimerCreate+0x48>
 8006140:	2201      	movs	r2, #1
 8006142:	e000      	b.n	8006146 <osTimerCreate+0x4a>
 8006144:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2101      	movs	r1, #1
 8006150:	4803      	ldr	r0, [pc, #12]	; (8006160 <osTimerCreate+0x64>)
 8006152:	f002 f963 	bl	800841c <xTimerCreate>
 8006156:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	08009cec 	.word	0x08009cec

08006164 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af02      	add	r7, sp, #8
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <osTimerStart+0x20>
    ticks = 1;
 8006180:	2301      	movs	r3, #1
 8006182:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006184:	f7ff ff41 	bl	800600a <inHandlerMode>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01b      	beq.n	80061c6 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800618e:	f107 020c 	add.w	r2, r7, #12
 8006192:	2300      	movs	r3, #0
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	2109      	movs	r1, #9
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f002 f9cb 	bl	8008538 <xTimerGenericCommand>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d002      	beq.n	80061ae <osTimerStart+0x4a>
    {
      result = osErrorOS;
 80061a8:	23ff      	movs	r3, #255	; 0xff
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e018      	b.n	80061e0 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d015      	beq.n	80061e0 <osTimerStart+0x7c>
 80061b4:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <osTimerStart+0x88>)
 80061b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	e00c      	b.n	80061e0 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80061c6:	2300      	movs	r3, #0
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	2104      	movs	r1, #4
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f002 f9b1 	bl	8008538 <xTimerGenericCommand>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d001      	beq.n	80061e0 <osTimerStart+0x7c>
      result = osErrorOS;
 80061dc:	23ff      	movs	r3, #255	; 0xff
 80061de:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80061e0:	697b      	ldr	r3, [r7, #20]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d10b      	bne.n	8006220 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	2303      	movs	r3, #3
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	2200      	movs	r2, #0
 8006214:	2100      	movs	r1, #0
 8006216:	2001      	movs	r0, #1
 8006218:	f000 f9ba 	bl	8006590 <xQueueGenericCreateStatic>
 800621c:	4603      	mov	r3, r0
 800621e:	e016      	b.n	800624e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	e014      	b.n	800624e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d110      	bne.n	800624c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800622a:	2203      	movs	r2, #3
 800622c:	2100      	movs	r1, #0
 800622e:	2001      	movs	r0, #1
 8006230:	f000 fa20 	bl	8006674 <xQueueGenericCreate>
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <osSemaphoreCreate+0x58>
 800623c:	2300      	movs	r3, #0
 800623e:	2200      	movs	r2, #0
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 fa72 	bl	800672c <xQueueGenericSend>
      return sema;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	e000      	b.n	800624e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800624c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	e03a      	b.n	80062e6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800627a:	d103      	bne.n	8006284 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	e009      	b.n	8006298 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d006      	beq.n	8006298 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <osSemaphoreWait+0x40>
      ticks = 1;
 8006294:	2301      	movs	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006298:	f7ff feb7 	bl	800600a <inHandlerMode>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d017      	beq.n	80062d2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80062a2:	f107 0308 	add.w	r3, r7, #8
 80062a6:	461a      	mov	r2, r3
 80062a8:	2100      	movs	r1, #0
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fe3a 	bl	8006f24 <xQueueReceiveFromISR>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d001      	beq.n	80062ba <osSemaphoreWait+0x62>
      return osErrorOS;
 80062b6:	23ff      	movs	r3, #255	; 0xff
 80062b8:	e015      	b.n	80062e6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d011      	beq.n	80062e4 <osSemaphoreWait+0x8c>
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <osSemaphoreWait+0x98>)
 80062c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	e008      	b.n	80062e4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fd1d 	bl	8006d14 <xQueueSemaphoreTake>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80062e0:	23ff      	movs	r3, #255	; 0xff
 80062e2:	e000      	b.n	80062e6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	e000ed04 	.word	0xe000ed04

080062f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006304:	f7ff fe81 	bl	800600a <inHandlerMode>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d016      	beq.n	800633c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800630e:	f107 0308 	add.w	r3, r7, #8
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fb97 	bl	8006a48 <xQueueGiveFromISR>
 800631a:	4603      	mov	r3, r0
 800631c:	2b01      	cmp	r3, #1
 800631e:	d001      	beq.n	8006324 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006320:	23ff      	movs	r3, #255	; 0xff
 8006322:	e017      	b.n	8006354 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d013      	beq.n	8006352 <osSemaphoreRelease+0x5e>
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <osSemaphoreRelease+0x68>)
 800632c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	e00a      	b.n	8006352 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800633c:	2300      	movs	r3, #0
 800633e:	2200      	movs	r2, #0
 8006340:	2100      	movs	r1, #0
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f9f2 	bl	800672c <xQueueGenericSend>
 8006348:	4603      	mov	r3, r0
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800634e:	23ff      	movs	r3, #255	; 0xff
 8006350:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006352:	68fb      	ldr	r3, [r7, #12]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f103 0208 	add.w	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f103 0208 	add.w	r2, r3, #8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f103 0208 	add.w	r2, r3, #8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr

0800639e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr

080063b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006412:	d103      	bne.n	800641c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	e00c      	b.n	8006436 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3308      	adds	r3, #8
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	e002      	b.n	800642a <vListInsert+0x2e>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d2f6      	bcs.n	8006424 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	601a      	str	r2, [r3, #0]
}
 8006462:	bf00      	nop
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr

0800646c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6892      	ldr	r2, [r2, #8]
 8006482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6852      	ldr	r2, [r2, #4]
 800648c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d103      	bne.n	80064a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	1e5a      	subs	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
	...

080064c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	e7fe      	b.n	80064e6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80064e8:	f002 fbb6 	bl	8008c58 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	68f9      	ldr	r1, [r7, #12]
 80064f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	441a      	add	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006518:	3b01      	subs	r3, #1
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800651e:	fb01 f303 	mul.w	r3, r1, r3
 8006522:	441a      	add	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	22ff      	movs	r2, #255	; 0xff
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	22ff      	movs	r2, #255	; 0xff
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d114      	bne.n	8006568 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01a      	beq.n	800657c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3310      	adds	r3, #16
 800654a:	4618      	mov	r0, r3
 800654c:	f001 fb24 	bl	8007b98 <xTaskRemoveFromEventList>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d012      	beq.n	800657c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <xQueueGenericReset+0xcc>)
 8006558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	e009      	b.n	800657c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3310      	adds	r3, #16
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fef7 	bl	8006360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3324      	adds	r3, #36	; 0x24
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fef2 	bl	8006360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800657c:	f002 fb9a 	bl	8008cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006580:	2301      	movs	r3, #1
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	e000ed04 	.word	0xe000ed04

08006590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08e      	sub	sp, #56	; 0x38
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <xQueueGenericCreateStatic+0x28>
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b6:	e7fe      	b.n	80065b6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d109      	bne.n	80065d2 <xQueueGenericCreateStatic+0x42>
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	e7fe      	b.n	80065d0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <xQueueGenericCreateStatic+0x4e>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <xQueueGenericCreateStatic+0x52>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <xQueueGenericCreateStatic+0x54>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <xQueueGenericCreateStatic+0x6c>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	e7fe      	b.n	80065fa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <xQueueGenericCreateStatic+0x78>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <xQueueGenericCreateStatic+0x7c>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <xQueueGenericCreateStatic+0x7e>
 800660c:	2300      	movs	r3, #0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <xQueueGenericCreateStatic+0x96>
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e7fe      	b.n	8006624 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006626:	2348      	movs	r3, #72	; 0x48
 8006628:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b48      	cmp	r3, #72	; 0x48
 800662e:	d009      	beq.n	8006644 <xQueueGenericCreateStatic+0xb4>
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	e7fe      	b.n	8006642 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00d      	beq.n	800666a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006656:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	4613      	mov	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f842 	bl	80066ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800666c:	4618      	mov	r0, r3
 800666e:	3730      	adds	r7, #48	; 0x30
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <xQueueGenericCreate+0x28>
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	e7fe      	b.n	800669a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	e004      	b.n	80066b2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	fb02 f303 	mul.w	r3, r2, r3
 80066b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	3348      	adds	r3, #72	; 0x48
 80066b6:	4618      	mov	r0, r3
 80066b8:	f002 fbc4 	bl	8008e44 <pvPortMalloc>
 80066bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00f      	beq.n	80066e4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	3348      	adds	r3, #72	; 0x48
 80066c8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066d2:	79fa      	ldrb	r2, [r7, #7]
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f805 	bl	80066ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80066e4:	69bb      	ldr	r3, [r7, #24]
	}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
 80066fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e002      	b.n	8006710 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800671c:	2101      	movs	r1, #1
 800671e:	69b8      	ldr	r0, [r7, #24]
 8006720:	f7ff fece 	bl	80064c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08e      	sub	sp, #56	; 0x38
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800673a:	2300      	movs	r3, #0
 800673c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <xQueueGenericSend+0x30>
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
 800675a:	e7fe      	b.n	800675a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d103      	bne.n	800676a <xQueueGenericSend+0x3e>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <xQueueGenericSend+0x42>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <xQueueGenericSend+0x44>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d109      	bne.n	8006788 <xQueueGenericSend+0x5c>
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
 8006786:	e7fe      	b.n	8006786 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d103      	bne.n	8006796 <xQueueGenericSend+0x6a>
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <xQueueGenericSend+0x6e>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <xQueueGenericSend+0x70>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <xQueueGenericSend+0x88>
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	623b      	str	r3, [r7, #32]
 80067b2:	e7fe      	b.n	80067b2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b4:	f001 fbaa 	bl	8007f0c <xTaskGetSchedulerState>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <xQueueGenericSend+0x98>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <xQueueGenericSend+0x9c>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <xQueueGenericSend+0x9e>
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <xQueueGenericSend+0xb6>
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	e7fe      	b.n	80067e0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067e2:	f002 fa39 	bl	8008c58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <xQueueGenericSend+0xcc>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d129      	bne.n	800684c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067fe:	f000 fc25 	bl	800704c <prvCopyDataToQueue>
 8006802:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d010      	beq.n	800682e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	3324      	adds	r3, #36	; 0x24
 8006810:	4618      	mov	r0, r3
 8006812:	f001 f9c1 	bl	8007b98 <xTaskRemoveFromEventList>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d013      	beq.n	8006844 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800681c:	4b3f      	ldr	r3, [pc, #252]	; (800691c <xQueueGenericSend+0x1f0>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	e00a      	b.n	8006844 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006834:	4b39      	ldr	r3, [pc, #228]	; (800691c <xQueueGenericSend+0x1f0>)
 8006836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006844:	f002 fa36 	bl	8008cb4 <vPortExitCritical>
				return pdPASS;
 8006848:	2301      	movs	r3, #1
 800684a:	e063      	b.n	8006914 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006852:	f002 fa2f 	bl	8008cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006856:	2300      	movs	r3, #0
 8006858:	e05c      	b.n	8006914 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006860:	f107 0314 	add.w	r3, r7, #20
 8006864:	4618      	mov	r0, r3
 8006866:	f001 f9f9 	bl	8007c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800686a:	2301      	movs	r3, #1
 800686c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800686e:	f002 fa21 	bl	8008cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006872:	f000 ff75 	bl	8007760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006876:	f002 f9ef 	bl	8008c58 <vPortEnterCritical>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006880:	b25b      	sxtb	r3, r3
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006886:	d103      	bne.n	8006890 <xQueueGenericSend+0x164>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006896:	b25b      	sxtb	r3, r3
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800689c:	d103      	bne.n	80068a6 <xQueueGenericSend+0x17a>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a6:	f002 fa05 	bl	8008cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068aa:	1d3a      	adds	r2, r7, #4
 80068ac:	f107 0314 	add.w	r3, r7, #20
 80068b0:	4611      	mov	r1, r2
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 f9e8 	bl	8007c88 <xTaskCheckForTimeOut>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d124      	bne.n	8006908 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068c0:	f000 fcbc 	bl	800723c <prvIsQueueFull>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d018      	beq.n	80068fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	3310      	adds	r3, #16
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 f912 	bl	8007afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068da:	f000 fc47 	bl	800716c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068de:	f000 ff4d 	bl	800777c <xTaskResumeAll>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f af7c 	bne.w	80067e2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80068ea:	4b0c      	ldr	r3, [pc, #48]	; (800691c <xQueueGenericSend+0x1f0>)
 80068ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	e772      	b.n	80067e2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068fe:	f000 fc35 	bl	800716c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006902:	f000 ff3b 	bl	800777c <xTaskResumeAll>
 8006906:	e76c      	b.n	80067e2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800690a:	f000 fc2f 	bl	800716c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800690e:	f000 ff35 	bl	800777c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006912:	2300      	movs	r3, #0
		}
	}
}
 8006914:	4618      	mov	r0, r3
 8006916:	3738      	adds	r7, #56	; 0x38
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	e000ed04 	.word	0xe000ed04

08006920 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08e      	sub	sp, #56	; 0x38
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <xQueueGenericSendFromISR+0x2c>
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
 800694a:	e7fe      	b.n	800694a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <xQueueGenericSendFromISR+0x3a>
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <xQueueGenericSendFromISR+0x3e>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <xQueueGenericSendFromISR+0x40>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <xQueueGenericSendFromISR+0x58>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	e7fe      	b.n	8006976 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d103      	bne.n	8006986 <xQueueGenericSendFromISR+0x66>
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <xQueueGenericSendFromISR+0x6a>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xQueueGenericSendFromISR+0x6c>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d109      	bne.n	80069a4 <xQueueGenericSendFromISR+0x84>
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e7fe      	b.n	80069a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069a4:	f002 fa12 	bl	8008dcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069a8:	f3ef 8211 	mrs	r2, BASEPRI
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61ba      	str	r2, [r7, #24]
 80069be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <xQueueGenericSendFromISR+0xb6>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d12c      	bne.n	8006a30 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069e6:	f000 fb31 	bl	800704c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f2:	d112      	bne.n	8006a1a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d016      	beq.n	8006a2a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	3324      	adds	r3, #36	; 0x24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 f8c9 	bl	8007b98 <xTaskRemoveFromEventList>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00e      	beq.n	8006a2a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e007      	b.n	8006a2a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a1e:	3301      	adds	r3, #1
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	b25a      	sxtb	r2, r3
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a2e:	e001      	b.n	8006a34 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	637b      	str	r3, [r7, #52]	; 0x34
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3738      	adds	r7, #56	; 0x38
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08e      	sub	sp, #56	; 0x38
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	623b      	str	r3, [r7, #32]
 8006a6e:	e7fe      	b.n	8006a6e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <xQueueGiveFromISR+0x44>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	e7fe      	b.n	8006a8a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d103      	bne.n	8006a9c <xQueueGiveFromISR+0x54>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <xQueueGiveFromISR+0x58>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <xQueueGiveFromISR+0x5a>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <xQueueGiveFromISR+0x72>
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006aba:	f002 f987 	bl	8008dcc <vPortValidateInterruptPriority>
	__asm volatile
 8006abe:	f3ef 8211 	mrs	r2, BASEPRI
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	617a      	str	r2, [r7, #20]
 8006ad4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ad6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d22b      	bcs.n	8006b42 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006afc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b04:	d112      	bne.n	8006b2c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d016      	beq.n	8006b3c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	3324      	adds	r3, #36	; 0x24
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 f840 	bl	8007b98 <xTaskRemoveFromEventList>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00e      	beq.n	8006b3c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2201      	movs	r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e007      	b.n	8006b3c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b30:	3301      	adds	r3, #1
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	b25a      	sxtb	r2, r3
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b40:	e001      	b.n	8006b46 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3738      	adds	r7, #56	; 0x38
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <xQueueReceive+0x2e>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	623b      	str	r3, [r7, #32]
 8006b88:	e7fe      	b.n	8006b88 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <xQueueReceive+0x3c>
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <xQueueReceive+0x40>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <xQueueReceive+0x42>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <xQueueReceive+0x5a>
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb6:	f001 f9a9 	bl	8007f0c <xTaskGetSchedulerState>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <xQueueReceive+0x6a>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <xQueueReceive+0x6e>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <xQueueReceive+0x70>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <xQueueReceive+0x88>
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	e7fe      	b.n	8006be2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006be4:	f002 f838 	bl	8008c58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01f      	beq.n	8006c34 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf8:	f000 fa92 	bl	8007120 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	1e5a      	subs	r2, r3, #1
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00f      	beq.n	8006c2c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	3310      	adds	r3, #16
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 ffc1 	bl	8007b98 <xTaskRemoveFromEventList>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d007      	beq.n	8006c2c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c1c:	4b3c      	ldr	r3, [pc, #240]	; (8006d10 <xQueueReceive+0x1b4>)
 8006c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c2c:	f002 f842 	bl	8008cb4 <vPortExitCritical>
				return pdPASS;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e069      	b.n	8006d08 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d103      	bne.n	8006c42 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c3a:	f002 f83b 	bl	8008cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e062      	b.n	8006d08 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d106      	bne.n	8006c56 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c48:	f107 0310 	add.w	r3, r7, #16
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 f805 	bl	8007c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c52:	2301      	movs	r3, #1
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c56:	f002 f82d 	bl	8008cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c5a:	f000 fd81 	bl	8007760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c5e:	f001 fffb 	bl	8008c58 <vPortEnterCritical>
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c68:	b25b      	sxtb	r3, r3
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c6e:	d103      	bne.n	8006c78 <xQueueReceive+0x11c>
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c7e:	b25b      	sxtb	r3, r3
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c84:	d103      	bne.n	8006c8e <xQueueReceive+0x132>
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c8e:	f002 f811 	bl	8008cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c92:	1d3a      	adds	r2, r7, #4
 8006c94:	f107 0310 	add.w	r3, r7, #16
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fff4 	bl	8007c88 <xTaskCheckForTimeOut>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d123      	bne.n	8006cee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca8:	f000 fab2 	bl	8007210 <prvIsQueueEmpty>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d017      	beq.n	8006ce2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	3324      	adds	r3, #36	; 0x24
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 ff1e 	bl	8007afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc2:	f000 fa53 	bl	800716c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cc6:	f000 fd59 	bl	800777c <xTaskResumeAll>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d189      	bne.n	8006be4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <xQueueReceive+0x1b4>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	e780      	b.n	8006be4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce4:	f000 fa42 	bl	800716c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ce8:	f000 fd48 	bl	800777c <xTaskResumeAll>
 8006cec:	e77a      	b.n	8006be4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf0:	f000 fa3c 	bl	800716c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cf4:	f000 fd42 	bl	800777c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfa:	f000 fa89 	bl	8007210 <prvIsQueueEmpty>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f43f af6f 	beq.w	8006be4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3730      	adds	r7, #48	; 0x30
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08e      	sub	sp, #56	; 0x38
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d109      	bne.n	8006d44 <xQueueSemaphoreTake+0x30>
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	623b      	str	r3, [r7, #32]
 8006d42:	e7fe      	b.n	8006d42 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <xQueueSemaphoreTake+0x4c>
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	e7fe      	b.n	8006d5e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d60:	f001 f8d4 	bl	8007f0c <xTaskGetSchedulerState>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <xQueueSemaphoreTake+0x5c>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <xQueueSemaphoreTake+0x60>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <xQueueSemaphoreTake+0x62>
 8006d74:	2300      	movs	r3, #0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <xQueueSemaphoreTake+0x7a>
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	e7fe      	b.n	8006d8c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d8e:	f001 ff63 	bl	8008c58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d024      	beq.n	8006de8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	1e5a      	subs	r2, r3, #1
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006dae:	f001 fa73 	bl	8008298 <pvTaskIncrementMutexHeldCount>
 8006db2:	4602      	mov	r2, r0
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00f      	beq.n	8006de0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	3310      	adds	r3, #16
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fee7 	bl	8007b98 <xTaskRemoveFromEventList>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dd0:	4b53      	ldr	r3, [pc, #332]	; (8006f20 <xQueueSemaphoreTake+0x20c>)
 8006dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006de0:	f001 ff68 	bl	8008cb4 <vPortExitCritical>
				return pdPASS;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e096      	b.n	8006f16 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d110      	bne.n	8006e10 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d009      	beq.n	8006e08 <xQueueSemaphoreTake+0xf4>
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	e7fe      	b.n	8006e06 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e08:	f001 ff54 	bl	8008cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e082      	b.n	8006f16 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e16:	f107 030c 	add.w	r3, r7, #12
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 ff1e 	bl	8007c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e20:	2301      	movs	r3, #1
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e24:	f001 ff46 	bl	8008cb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e28:	f000 fc9a 	bl	8007760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e2c:	f001 ff14 	bl	8008c58 <vPortEnterCritical>
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e36:	b25b      	sxtb	r3, r3
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e3c:	d103      	bne.n	8006e46 <xQueueSemaphoreTake+0x132>
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e52:	d103      	bne.n	8006e5c <xQueueSemaphoreTake+0x148>
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e5c:	f001 ff2a 	bl	8008cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e60:	463a      	mov	r2, r7
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 ff0d 	bl	8007c88 <xTaskCheckForTimeOut>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d132      	bne.n	8006eda <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e76:	f000 f9cb 	bl	8007210 <prvIsQueueEmpty>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d026      	beq.n	8006ece <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006e88:	f001 fee6 	bl	8008c58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f001 f859 	bl	8007f48 <xTaskPriorityInherit>
 8006e96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006e98:	f001 ff0c 	bl	8008cb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	3324      	adds	r3, #36	; 0x24
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fe29 	bl	8007afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eac:	f000 f95e 	bl	800716c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eb0:	f000 fc64 	bl	800777c <xTaskResumeAll>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f47f af69 	bne.w	8006d8e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006ebc:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <xQueueSemaphoreTake+0x20c>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	e75f      	b.n	8006d8e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ece:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ed0:	f000 f94c 	bl	800716c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ed4:	f000 fc52 	bl	800777c <xTaskResumeAll>
 8006ed8:	e759      	b.n	8006d8e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006edc:	f000 f946 	bl	800716c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ee0:	f000 fc4c 	bl	800777c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ee6:	f000 f993 	bl	8007210 <prvIsQueueEmpty>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f43f af4e 	beq.w	8006d8e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00d      	beq.n	8006f14 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006ef8:	f001 feae 	bl	8008c58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006efe:	f000 f88e 	bl	800701e <prvGetDisinheritPriorityAfterTimeout>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f926 	bl	800815c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f10:	f001 fed0 	bl	8008cb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3738      	adds	r7, #56	; 0x38
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08e      	sub	sp, #56	; 0x38
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <xQueueReceiveFromISR+0x2a>
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	623b      	str	r3, [r7, #32]
 8006f4c:	e7fe      	b.n	8006f4c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <xQueueReceiveFromISR+0x38>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <xQueueReceiveFromISR+0x3c>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <xQueueReceiveFromISR+0x3e>
 8006f60:	2300      	movs	r3, #0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <xQueueReceiveFromISR+0x56>
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	e7fe      	b.n	8006f78 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f7a:	f001 ff27 	bl	8008dcc <vPortValidateInterruptPriority>
	__asm volatile
 8006f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	61ba      	str	r2, [r7, #24]
 8006f94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d02f      	beq.n	8007006 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb4:	f000 f8b4 	bl	8007120 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	1e5a      	subs	r2, r3, #1
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc8:	d112      	bne.n	8006ff0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d016      	beq.n	8007000 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	3310      	adds	r3, #16
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fdde 	bl	8007b98 <xTaskRemoveFromEventList>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e007      	b.n	8007000 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	b25a      	sxtb	r2, r3
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007000:	2301      	movs	r3, #1
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	e001      	b.n	800700a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007006:	2300      	movs	r3, #0
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007016:	4618      	mov	r0, r3
 8007018:	3738      	adds	r7, #56	; 0x38
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d006      	beq.n	800703c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1c3 0307 	rsb	r3, r3, #7
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	e001      	b.n	8007040 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007040:	68fb      	ldr	r3, [r7, #12]
	}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	bc80      	pop	{r7}
 800704a:	4770      	bx	lr

0800704c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10d      	bne.n	8007086 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d14d      	bne.n	800710e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 ffec 	bl	8008054 <xTaskPriorityDisinherit>
 800707c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	605a      	str	r2, [r3, #4]
 8007084:	e043      	b.n	800710e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d119      	bne.n	80070c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6898      	ldr	r0, [r3, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	461a      	mov	r2, r3
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	f002 f8d6 	bl	8009248 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	441a      	add	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d32b      	bcc.n	800710e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	609a      	str	r2, [r3, #8]
 80070be:	e026      	b.n	800710e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68d8      	ldr	r0, [r3, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	461a      	mov	r2, r3
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	f002 f8bc 	bl	8009248 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	425b      	negs	r3, r3
 80070da:	441a      	add	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d207      	bcs.n	80070fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f4:	425b      	negs	r3, r3
 80070f6:	441a      	add	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d105      	bne.n	800710e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	3b01      	subs	r3, #1
 800710c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007116:	697b      	ldr	r3, [r7, #20]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d018      	beq.n	8007164 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	441a      	add	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	429a      	cmp	r2, r3
 800714a:	d303      	bcc.n	8007154 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68d9      	ldr	r1, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	461a      	mov	r2, r3
 800715e:	6838      	ldr	r0, [r7, #0]
 8007160:	f002 f872 	bl	8009248 <memcpy>
	}
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007174:	f001 fd70 	bl	8008c58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800717e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007180:	e011      	b.n	80071a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d012      	beq.n	80071b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3324      	adds	r3, #36	; 0x24
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fd02 	bl	8007b98 <xTaskRemoveFromEventList>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800719a:	f000 fdd5 	bl	8007d48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dce9      	bgt.n	8007182 <prvUnlockQueue+0x16>
 80071ae:	e000      	b.n	80071b2 <prvUnlockQueue+0x46>
					break;
 80071b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071ba:	f001 fd7b 	bl	8008cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071be:	f001 fd4b 	bl	8008c58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071ca:	e011      	b.n	80071f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d012      	beq.n	80071fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3310      	adds	r3, #16
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fcdd 	bl	8007b98 <xTaskRemoveFromEventList>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071e4:	f000 fdb0 	bl	8007d48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dce9      	bgt.n	80071cc <prvUnlockQueue+0x60>
 80071f8:	e000      	b.n	80071fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	22ff      	movs	r2, #255	; 0xff
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007204:	f001 fd56 	bl	8008cb4 <vPortExitCritical>
}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007218:	f001 fd1e 	bl	8008c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007224:	2301      	movs	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e001      	b.n	800722e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800722e:	f001 fd41 	bl	8008cb4 <vPortExitCritical>

	return xReturn;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007244:	f001 fd08 	bl	8008c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007250:	429a      	cmp	r2, r3
 8007252:	d102      	bne.n	800725a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	e001      	b.n	800725e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800725e:	f001 fd29 	bl	8008cb4 <vPortExitCritical>

	return xReturn;
 8007262:	68fb      	ldr	r3, [r7, #12]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	e014      	b.n	80072a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800727c:	4a0e      	ldr	r2, [pc, #56]	; (80072b8 <vQueueAddToRegistry+0x4c>)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007288:	490b      	ldr	r1, [pc, #44]	; (80072b8 <vQueueAddToRegistry+0x4c>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <vQueueAddToRegistry+0x4c>)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800729e:	e005      	b.n	80072ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	d9e7      	bls.n	800727c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20001ea0 	.word	0x20001ea0

080072bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072cc:	f001 fcc4 	bl	8008c58 <vPortEnterCritical>
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072dc:	d103      	bne.n	80072e6 <vQueueWaitForMessageRestricted+0x2a>
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ec:	b25b      	sxtb	r3, r3
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072f2:	d103      	bne.n	80072fc <vQueueWaitForMessageRestricted+0x40>
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072fc:	f001 fcda 	bl	8008cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	d106      	bne.n	8007316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fc17 	bl	8007b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007316:	6978      	ldr	r0, [r7, #20]
 8007318:	f7ff ff28 	bl	800716c <prvUnlockQueue>
	}
 800731c:	bf00      	nop
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08e      	sub	sp, #56	; 0x38
 8007328:	af04      	add	r7, sp, #16
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	2b00      	cmp	r3, #0
 8007336:	d109      	bne.n	800734c <xTaskCreateStatic+0x28>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	e7fe      	b.n	800734a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <xTaskCreateStatic+0x42>
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	e7fe      	b.n	8007364 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007366:	2354      	movs	r3, #84	; 0x54
 8007368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b54      	cmp	r3, #84	; 0x54
 800736e:	d009      	beq.n	8007384 <xTaskCreateStatic+0x60>
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e7fe      	b.n	8007382 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01e      	beq.n	80073c8 <xTaskCreateStatic+0xa4>
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01b      	beq.n	80073c8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007398:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2202      	movs	r2, #2
 800739e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073a2:	2300      	movs	r3, #0
 80073a4:	9303      	str	r3, [sp, #12]
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	f107 0314 	add.w	r3, r7, #20
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 f850 	bl	8007460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073c2:	f000 f8cb 	bl	800755c <prvAddNewTaskToReadyList>
 80073c6:	e001      	b.n	80073cc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073cc:	697b      	ldr	r3, [r7, #20]
	}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b08c      	sub	sp, #48	; 0x30
 80073da:	af04      	add	r7, sp, #16
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fd2a 	bl	8008e44 <pvPortMalloc>
 80073f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073f8:	2054      	movs	r0, #84	; 0x54
 80073fa:	f001 fd23 	bl	8008e44 <pvPortMalloc>
 80073fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	631a      	str	r2, [r3, #48]	; 0x30
 800740c:	e005      	b.n	800741a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800740e:	6978      	ldr	r0, [r7, #20]
 8007410:	f001 fdda 	bl	8008fc8 <vPortFree>
 8007414:	e001      	b.n	800741a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d017      	beq.n	8007450 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	2300      	movs	r3, #0
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	9302      	str	r3, [sp, #8]
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f80e 	bl	8007460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007444:	69f8      	ldr	r0, [r7, #28]
 8007446:	f000 f889 	bl	800755c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800744a:	2301      	movs	r3, #1
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	e002      	b.n	8007456 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007454:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007456:	69bb      	ldr	r3, [r7, #24]
	}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007478:	3b01      	subs	r3, #1
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	f023 0307 	bic.w	r3, r3, #7
 8007486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <prvInitialiseNewTask+0x46>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e7fe      	b.n	80074a4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	e012      	b.n	80074d2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	7819      	ldrb	r1, [r3, #0]
 80074b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	3334      	adds	r3, #52	; 0x34
 80074bc:	460a      	mov	r2, r1
 80074be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d006      	beq.n	80074da <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	3301      	adds	r3, #1
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	2b0f      	cmp	r3, #15
 80074d6:	d9e9      	bls.n	80074ac <prvInitialiseNewTask+0x4c>
 80074d8:	e000      	b.n	80074dc <prvInitialiseNewTask+0x7c>
		{
			break;
 80074da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	2b06      	cmp	r3, #6
 80074e8:	d901      	bls.n	80074ee <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074ea:	2306      	movs	r3, #6
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2200      	movs	r2, #0
 80074fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	3304      	adds	r3, #4
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe ff4a 	bl	800639e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	3318      	adds	r3, #24
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe ff45 	bl	800639e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007518:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	f1c3 0207 	rsb	r2, r3, #7
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007528:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	2200      	movs	r2, #0
 800752e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	69b8      	ldr	r0, [r7, #24]
 800753e:	f001 faa3 	bl	8008a88 <pxPortInitialiseStack>
 8007542:	4602      	mov	r2, r0
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007552:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007554:	bf00      	nop
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007564:	f001 fb78 	bl	8008c58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007568:	4b2a      	ldr	r3, [pc, #168]	; (8007614 <prvAddNewTaskToReadyList+0xb8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	4a29      	ldr	r2, [pc, #164]	; (8007614 <prvAddNewTaskToReadyList+0xb8>)
 8007570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007572:	4b29      	ldr	r3, [pc, #164]	; (8007618 <prvAddNewTaskToReadyList+0xbc>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800757a:	4a27      	ldr	r2, [pc, #156]	; (8007618 <prvAddNewTaskToReadyList+0xbc>)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007580:	4b24      	ldr	r3, [pc, #144]	; (8007614 <prvAddNewTaskToReadyList+0xb8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d110      	bne.n	80075aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007588:	f000 fc02 	bl	8007d90 <prvInitialiseTaskLists>
 800758c:	e00d      	b.n	80075aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800758e:	4b23      	ldr	r3, [pc, #140]	; (800761c <prvAddNewTaskToReadyList+0xc0>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007596:	4b20      	ldr	r3, [pc, #128]	; (8007618 <prvAddNewTaskToReadyList+0xbc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d802      	bhi.n	80075aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075a4:	4a1c      	ldr	r2, [pc, #112]	; (8007618 <prvAddNewTaskToReadyList+0xbc>)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075aa:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <prvAddNewTaskToReadyList+0xc4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <prvAddNewTaskToReadyList+0xc4>)
 80075b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	2201      	movs	r2, #1
 80075ba:	409a      	lsls	r2, r3
 80075bc:	4b19      	ldr	r3, [pc, #100]	; (8007624 <prvAddNewTaskToReadyList+0xc8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	4a18      	ldr	r2, [pc, #96]	; (8007624 <prvAddNewTaskToReadyList+0xc8>)
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4a15      	ldr	r2, [pc, #84]	; (8007628 <prvAddNewTaskToReadyList+0xcc>)
 80075d4:	441a      	add	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3304      	adds	r3, #4
 80075da:	4619      	mov	r1, r3
 80075dc:	4610      	mov	r0, r2
 80075de:	f7fe feea 	bl	80063b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075e2:	f001 fb67 	bl	8008cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075e6:	4b0d      	ldr	r3, [pc, #52]	; (800761c <prvAddNewTaskToReadyList+0xc0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00e      	beq.n	800760c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075ee:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <prvAddNewTaskToReadyList+0xbc>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d207      	bcs.n	800760c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075fc:	4b0b      	ldr	r3, [pc, #44]	; (800762c <prvAddNewTaskToReadyList+0xd0>)
 80075fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800760c:	bf00      	nop
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	200009f8 	.word	0x200009f8
 8007618:	200008f8 	.word	0x200008f8
 800761c:	20000a04 	.word	0x20000a04
 8007620:	20000a14 	.word	0x20000a14
 8007624:	20000a00 	.word	0x20000a00
 8007628:	200008fc 	.word	0x200008fc
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d016      	beq.n	8007670 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007642:	4b13      	ldr	r3, [pc, #76]	; (8007690 <vTaskDelay+0x60>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <vTaskDelay+0x2e>
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	60bb      	str	r3, [r7, #8]
 800765c:	e7fe      	b.n	800765c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800765e:	f000 f87f 	bl	8007760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fe2b 	bl	80082c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800766a:	f000 f887 	bl	800777c <xTaskResumeAll>
 800766e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d107      	bne.n	8007686 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <vTaskDelay+0x64>)
 8007678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000a20 	.word	0x20000a20
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	; 0x28
 800769c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076a6:	463a      	mov	r2, r7
 80076a8:	1d39      	adds	r1, r7, #4
 80076aa:	f107 0308 	add.w	r3, r7, #8
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7f9 f94c 	bl	800094c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	9202      	str	r2, [sp, #8]
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	2300      	movs	r3, #0
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	2300      	movs	r3, #0
 80076c4:	460a      	mov	r2, r1
 80076c6:	4920      	ldr	r1, [pc, #128]	; (8007748 <vTaskStartScheduler+0xb0>)
 80076c8:	4820      	ldr	r0, [pc, #128]	; (800774c <vTaskStartScheduler+0xb4>)
 80076ca:	f7ff fe2b 	bl	8007324 <xTaskCreateStatic>
 80076ce:	4602      	mov	r2, r0
 80076d0:	4b1f      	ldr	r3, [pc, #124]	; (8007750 <vTaskStartScheduler+0xb8>)
 80076d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076d4:	4b1e      	ldr	r3, [pc, #120]	; (8007750 <vTaskStartScheduler+0xb8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076dc:	2301      	movs	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	e001      	b.n	80076e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d102      	bne.n	80076f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076ec:	f000 fe4e 	bl	800838c <xTimerCreateTimerTask>
 80076f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d115      	bne.n	8007724 <vTaskStartScheduler+0x8c>
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <vTaskStartScheduler+0xbc>)
 800770c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007710:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007712:	4b11      	ldr	r3, [pc, #68]	; (8007758 <vTaskStartScheduler+0xc0>)
 8007714:	2201      	movs	r2, #1
 8007716:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007718:	4b10      	ldr	r3, [pc, #64]	; (800775c <vTaskStartScheduler+0xc4>)
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800771e:	f001 fa2b 	bl	8008b78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007722:	e00d      	b.n	8007740 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800772a:	d109      	bne.n	8007740 <vTaskStartScheduler+0xa8>
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	e7fe      	b.n	800773e <vTaskStartScheduler+0xa6>
}
 8007740:	bf00      	nop
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	08009cf0 	.word	0x08009cf0
 800774c:	08007d61 	.word	0x08007d61
 8007750:	20000a1c 	.word	0x20000a1c
 8007754:	20000a18 	.word	0x20000a18
 8007758:	20000a04 	.word	0x20000a04
 800775c:	200009fc 	.word	0x200009fc

08007760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <vTaskSuspendAll+0x18>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	4a03      	ldr	r2, [pc, #12]	; (8007778 <vTaskSuspendAll+0x18>)
 800776c:	6013      	str	r3, [r2, #0]
}
 800776e:	bf00      	nop
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20000a20 	.word	0x20000a20

0800777c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007786:	2300      	movs	r3, #0
 8007788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800778a:	4b41      	ldr	r3, [pc, #260]	; (8007890 <xTaskResumeAll+0x114>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <xTaskResumeAll+0x2a>
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	e7fe      	b.n	80077a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077a6:	f001 fa57 	bl	8008c58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077aa:	4b39      	ldr	r3, [pc, #228]	; (8007890 <xTaskResumeAll+0x114>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	4a37      	ldr	r2, [pc, #220]	; (8007890 <xTaskResumeAll+0x114>)
 80077b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077b4:	4b36      	ldr	r3, [pc, #216]	; (8007890 <xTaskResumeAll+0x114>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d161      	bne.n	8007880 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077bc:	4b35      	ldr	r3, [pc, #212]	; (8007894 <xTaskResumeAll+0x118>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d05d      	beq.n	8007880 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077c4:	e02e      	b.n	8007824 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80077c6:	4b34      	ldr	r3, [pc, #208]	; (8007898 <xTaskResumeAll+0x11c>)
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3318      	adds	r3, #24
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fe4a 	bl	800646c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3304      	adds	r3, #4
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fe45 	bl	800646c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	2201      	movs	r2, #1
 80077e8:	409a      	lsls	r2, r3
 80077ea:	4b2c      	ldr	r3, [pc, #176]	; (800789c <xTaskResumeAll+0x120>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	4a2a      	ldr	r2, [pc, #168]	; (800789c <xTaskResumeAll+0x120>)
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4a27      	ldr	r2, [pc, #156]	; (80078a0 <xTaskResumeAll+0x124>)
 8007802:	441a      	add	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7fe fdd3 	bl	80063b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007814:	4b23      	ldr	r3, [pc, #140]	; (80078a4 <xTaskResumeAll+0x128>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	429a      	cmp	r2, r3
 800781c:	d302      	bcc.n	8007824 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800781e:	4b22      	ldr	r3, [pc, #136]	; (80078a8 <xTaskResumeAll+0x12c>)
 8007820:	2201      	movs	r2, #1
 8007822:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007824:	4b1c      	ldr	r3, [pc, #112]	; (8007898 <xTaskResumeAll+0x11c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1cc      	bne.n	80077c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007832:	f000 fb47 	bl	8007ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007836:	4b1d      	ldr	r3, [pc, #116]	; (80078ac <xTaskResumeAll+0x130>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d010      	beq.n	8007864 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007842:	f000 f845 	bl	80078d0 <xTaskIncrementTick>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800784c:	4b16      	ldr	r3, [pc, #88]	; (80078a8 <xTaskResumeAll+0x12c>)
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3b01      	subs	r3, #1
 8007856:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1f1      	bne.n	8007842 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <xTaskResumeAll+0x130>)
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007864:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <xTaskResumeAll+0x12c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d009      	beq.n	8007880 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800786c:	2301      	movs	r3, #1
 800786e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007870:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <xTaskResumeAll+0x134>)
 8007872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007880:	f001 fa18 	bl	8008cb4 <vPortExitCritical>

	return xAlreadyYielded;
 8007884:	68bb      	ldr	r3, [r7, #8]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000a20 	.word	0x20000a20
 8007894:	200009f8 	.word	0x200009f8
 8007898:	200009b8 	.word	0x200009b8
 800789c:	20000a00 	.word	0x20000a00
 80078a0:	200008fc 	.word	0x200008fc
 80078a4:	200008f8 	.word	0x200008f8
 80078a8:	20000a0c 	.word	0x20000a0c
 80078ac:	20000a08 	.word	0x20000a08
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078ba:	4b04      	ldr	r3, [pc, #16]	; (80078cc <xTaskGetTickCount+0x18>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078c0:	687b      	ldr	r3, [r7, #4]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr
 80078cc:	200009fc 	.word	0x200009fc

080078d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078da:	4b50      	ldr	r3, [pc, #320]	; (8007a1c <xTaskIncrementTick+0x14c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 808c 	bne.w	80079fc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078e4:	4b4e      	ldr	r3, [pc, #312]	; (8007a20 <xTaskIncrementTick+0x150>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078ec:	4a4c      	ldr	r2, [pc, #304]	; (8007a20 <xTaskIncrementTick+0x150>)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11f      	bne.n	8007938 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80078f8:	4b4a      	ldr	r3, [pc, #296]	; (8007a24 <xTaskIncrementTick+0x154>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <xTaskIncrementTick+0x46>
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	e7fe      	b.n	8007914 <xTaskIncrementTick+0x44>
 8007916:	4b43      	ldr	r3, [pc, #268]	; (8007a24 <xTaskIncrementTick+0x154>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	4b42      	ldr	r3, [pc, #264]	; (8007a28 <xTaskIncrementTick+0x158>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a40      	ldr	r2, [pc, #256]	; (8007a24 <xTaskIncrementTick+0x154>)
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	4a40      	ldr	r2, [pc, #256]	; (8007a28 <xTaskIncrementTick+0x158>)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	4b40      	ldr	r3, [pc, #256]	; (8007a2c <xTaskIncrementTick+0x15c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3301      	adds	r3, #1
 8007930:	4a3e      	ldr	r2, [pc, #248]	; (8007a2c <xTaskIncrementTick+0x15c>)
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	f000 fac6 	bl	8007ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007938:	4b3d      	ldr	r3, [pc, #244]	; (8007a30 <xTaskIncrementTick+0x160>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	429a      	cmp	r2, r3
 8007940:	d34d      	bcc.n	80079de <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007942:	4b38      	ldr	r3, [pc, #224]	; (8007a24 <xTaskIncrementTick+0x154>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <xTaskIncrementTick+0x80>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <xTaskIncrementTick+0x82>
 8007950:	2300      	movs	r3, #0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d004      	beq.n	8007960 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007956:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <xTaskIncrementTick+0x160>)
 8007958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800795c:	601a      	str	r2, [r3, #0]
					break;
 800795e:	e03e      	b.n	80079de <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007960:	4b30      	ldr	r3, [pc, #192]	; (8007a24 <xTaskIncrementTick+0x154>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	429a      	cmp	r2, r3
 8007976:	d203      	bcs.n	8007980 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007978:	4a2d      	ldr	r2, [pc, #180]	; (8007a30 <xTaskIncrementTick+0x160>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6013      	str	r3, [r2, #0]
						break;
 800797e:	e02e      	b.n	80079de <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fd71 	bl	800646c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3318      	adds	r3, #24
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fd68 	bl	800646c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	2201      	movs	r2, #1
 80079a2:	409a      	lsls	r2, r3
 80079a4:	4b23      	ldr	r3, [pc, #140]	; (8007a34 <xTaskIncrementTick+0x164>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <xTaskIncrementTick+0x164>)
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <xTaskIncrementTick+0x168>)
 80079bc:	441a      	add	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f7fe fcf6 	bl	80063b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ce:	4b1b      	ldr	r3, [pc, #108]	; (8007a3c <xTaskIncrementTick+0x16c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d3b4      	bcc.n	8007942 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80079d8:	2301      	movs	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079dc:	e7b1      	b.n	8007942 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079de:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <xTaskIncrementTick+0x16c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e4:	4914      	ldr	r1, [pc, #80]	; (8007a38 <xTaskIncrementTick+0x168>)
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d907      	bls.n	8007a06 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e004      	b.n	8007a06 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079fc:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <xTaskIncrementTick+0x170>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	4a0f      	ldr	r2, [pc, #60]	; (8007a40 <xTaskIncrementTick+0x170>)
 8007a04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xTaskIncrementTick+0x174>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a12:	697b      	ldr	r3, [r7, #20]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000a20 	.word	0x20000a20
 8007a20:	200009fc 	.word	0x200009fc
 8007a24:	200009b0 	.word	0x200009b0
 8007a28:	200009b4 	.word	0x200009b4
 8007a2c:	20000a10 	.word	0x20000a10
 8007a30:	20000a18 	.word	0x20000a18
 8007a34:	20000a00 	.word	0x20000a00
 8007a38:	200008fc 	.word	0x200008fc
 8007a3c:	200008f8 	.word	0x200008f8
 8007a40:	20000a08 	.word	0x20000a08
 8007a44:	20000a0c 	.word	0x20000a0c

08007a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a4e:	4b26      	ldr	r3, [pc, #152]	; (8007ae8 <vTaskSwitchContext+0xa0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a56:	4b25      	ldr	r3, [pc, #148]	; (8007aec <vTaskSwitchContext+0xa4>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a5c:	e03e      	b.n	8007adc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007a5e:	4b23      	ldr	r3, [pc, #140]	; (8007aec <vTaskSwitchContext+0xa4>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a64:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <vTaskSwitchContext+0xa8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	fab3 f383 	clz	r3, r3
 8007a70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	f1c3 031f 	rsb	r3, r3, #31
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	491e      	ldr	r1, [pc, #120]	; (8007af4 <vTaskSwitchContext+0xac>)
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	440b      	add	r3, r1
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
 8007aa0:	e7fe      	b.n	8007aa0 <vTaskSwitchContext+0x58>
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4a11      	ldr	r2, [pc, #68]	; (8007af4 <vTaskSwitchContext+0xac>)
 8007aae:	4413      	add	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	605a      	str	r2, [r3, #4]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d104      	bne.n	8007ad2 <vTaskSwitchContext+0x8a>
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	4a07      	ldr	r2, [pc, #28]	; (8007af8 <vTaskSwitchContext+0xb0>)
 8007ada:	6013      	str	r3, [r2, #0]
}
 8007adc:	bf00      	nop
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	20000a20 	.word	0x20000a20
 8007aec:	20000a0c 	.word	0x20000a0c
 8007af0:	20000a00 	.word	0x20000a00
 8007af4:	200008fc 	.word	0x200008fc
 8007af8:	200008f8 	.word	0x200008f8

08007afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d109      	bne.n	8007b20 <vTaskPlaceOnEventList+0x24>
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	e7fe      	b.n	8007b1e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <vTaskPlaceOnEventList+0x44>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3318      	adds	r3, #24
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fe fc67 	bl	80063fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b2e:	2101      	movs	r1, #1
 8007b30:	6838      	ldr	r0, [r7, #0]
 8007b32:	f000 fbc5 	bl	80082c0 <prvAddCurrentTaskToDelayedList>
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	200008f8 	.word	0x200008f8

08007b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <vTaskPlaceOnEventListRestricted+0x26>
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	e7fe      	b.n	8007b68 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <vTaskPlaceOnEventListRestricted+0x50>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3318      	adds	r3, #24
 8007b70:	4619      	mov	r1, r3
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f7fe fc1f 	bl	80063b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	68b8      	ldr	r0, [r7, #8]
 8007b88:	f000 fb9a 	bl	80082c0 <prvAddCurrentTaskToDelayedList>
	}
 8007b8c:	bf00      	nop
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	200008f8 	.word	0x200008f8

08007b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <xTaskRemoveFromEventList+0x2a>
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e7fe      	b.n	8007bc0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fc50 	bl	800646c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bcc:	4b1d      	ldr	r3, [pc, #116]	; (8007c44 <xTaskRemoveFromEventList+0xac>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11c      	bne.n	8007c0e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fc47 	bl	800646c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	2201      	movs	r2, #1
 8007be4:	409a      	lsls	r2, r3
 8007be6:	4b18      	ldr	r3, [pc, #96]	; (8007c48 <xTaskRemoveFromEventList+0xb0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	4a16      	ldr	r2, [pc, #88]	; (8007c48 <xTaskRemoveFromEventList+0xb0>)
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <xTaskRemoveFromEventList+0xb4>)
 8007bfe:	441a      	add	r2, r3
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	3304      	adds	r3, #4
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f7fe fbd5 	bl	80063b6 <vListInsertEnd>
 8007c0c:	e005      	b.n	8007c1a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	3318      	adds	r3, #24
 8007c12:	4619      	mov	r1, r3
 8007c14:	480e      	ldr	r0, [pc, #56]	; (8007c50 <xTaskRemoveFromEventList+0xb8>)
 8007c16:	f7fe fbce 	bl	80063b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <xTaskRemoveFromEventList+0xbc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d905      	bls.n	8007c34 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <xTaskRemoveFromEventList+0xc0>)
 8007c2e:	2201      	movs	r2, #1
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e001      	b.n	8007c38 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c38:	697b      	ldr	r3, [r7, #20]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000a20 	.word	0x20000a20
 8007c48:	20000a00 	.word	0x20000a00
 8007c4c:	200008fc 	.word	0x200008fc
 8007c50:	200009b8 	.word	0x200009b8
 8007c54:	200008f8 	.word	0x200008f8
 8007c58:	20000a0c 	.word	0x20000a0c

08007c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c64:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <vTaskInternalSetTimeOutState+0x24>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <vTaskInternalSetTimeOutState+0x28>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	605a      	str	r2, [r3, #4]
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bc80      	pop	{r7}
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000a10 	.word	0x20000a10
 8007c84:	200009fc 	.word	0x200009fc

08007c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d109      	bne.n	8007cac <xTaskCheckForTimeOut+0x24>
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	613b      	str	r3, [r7, #16]
 8007caa:	e7fe      	b.n	8007caa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d109      	bne.n	8007cc6 <xTaskCheckForTimeOut+0x3e>
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e7fe      	b.n	8007cc4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007cc6:	f000 ffc7 	bl	8008c58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cca:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <xTaskCheckForTimeOut+0xb8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce2:	d102      	bne.n	8007cea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]
 8007ce8:	e023      	b.n	8007d32 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <xTaskCheckForTimeOut+0xbc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d007      	beq.n	8007d06 <xTaskCheckForTimeOut+0x7e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e015      	b.n	8007d32 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d20b      	bcs.n	8007d28 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff9d 	bl	8007c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	e004      	b.n	8007d32 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d32:	f000 ffbf 	bl	8008cb4 <vPortExitCritical>

	return xReturn;
 8007d36:	69fb      	ldr	r3, [r7, #28]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200009fc 	.word	0x200009fc
 8007d44:	20000a10 	.word	0x20000a10

08007d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d4c:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <vTaskMissedYield+0x14>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
}
 8007d52:	bf00      	nop
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc80      	pop	{r7}
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20000a0c 	.word	0x20000a0c

08007d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d68:	f000 f852 	bl	8007e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <prvIdleTask+0x28>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d9f9      	bls.n	8007d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <prvIdleTask+0x2c>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d84:	e7f0      	b.n	8007d68 <prvIdleTask+0x8>
 8007d86:	bf00      	nop
 8007d88:	200008fc 	.word	0x200008fc
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	e00c      	b.n	8007db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <prvInitialiseTaskLists+0x60>)
 8007da8:	4413      	add	r3, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fad8 	bl	8006360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3301      	adds	r3, #1
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b06      	cmp	r3, #6
 8007dba:	d9ef      	bls.n	8007d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dbc:	480d      	ldr	r0, [pc, #52]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dbe:	f7fe facf 	bl	8006360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dc2:	480d      	ldr	r0, [pc, #52]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007dc4:	f7fe facc 	bl	8006360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dc8:	480c      	ldr	r0, [pc, #48]	; (8007dfc <prvInitialiseTaskLists+0x6c>)
 8007dca:	f7fe fac9 	bl	8006360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dce:	480c      	ldr	r0, [pc, #48]	; (8007e00 <prvInitialiseTaskLists+0x70>)
 8007dd0:	f7fe fac6 	bl	8006360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dd4:	480b      	ldr	r0, [pc, #44]	; (8007e04 <prvInitialiseTaskLists+0x74>)
 8007dd6:	f7fe fac3 	bl	8006360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <prvInitialiseTaskLists+0x78>)
 8007ddc:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <prvInitialiseTaskLists+0x7c>)
 8007de2:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007de4:	601a      	str	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	200008fc 	.word	0x200008fc
 8007df4:	20000988 	.word	0x20000988
 8007df8:	2000099c 	.word	0x2000099c
 8007dfc:	200009b8 	.word	0x200009b8
 8007e00:	200009cc 	.word	0x200009cc
 8007e04:	200009e4 	.word	0x200009e4
 8007e08:	200009b0 	.word	0x200009b0
 8007e0c:	200009b4 	.word	0x200009b4

08007e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e16:	e019      	b.n	8007e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e18:	f000 ff1e 	bl	8008c58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <prvCheckTasksWaitingTermination+0x4c>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fb1f 	bl	800646c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <prvCheckTasksWaitingTermination+0x50>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	4a0a      	ldr	r2, [pc, #40]	; (8007e60 <prvCheckTasksWaitingTermination+0x50>)
 8007e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e42:	f000 ff37 	bl	8008cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f80e 	bl	8007e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e4c:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e1      	bne.n	8007e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	200009cc 	.word	0x200009cc
 8007e60:	200009f8 	.word	0x200009f8
 8007e64:	200009e0 	.word	0x200009e0

08007e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d108      	bne.n	8007e8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 f8a2 	bl	8008fc8 <vPortFree>
				vPortFree( pxTCB );
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 f89f 	bl	8008fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e8a:	e017      	b.n	8007ebc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d103      	bne.n	8007e9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 f896 	bl	8008fc8 <vPortFree>
	}
 8007e9c:	e00e      	b.n	8007ebc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d009      	beq.n	8007ebc <prvDeleteTCB+0x54>
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	e7fe      	b.n	8007eba <prvDeleteTCB+0x52>
	}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eca:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <prvResetNextTaskUnblockTime+0x40>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <prvResetNextTaskUnblockTime+0x14>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e000      	b.n	8007eda <prvResetNextTaskUnblockTime+0x16>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ede:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <prvResetNextTaskUnblockTime+0x44>)
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ee4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ee6:	e008      	b.n	8007efa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ee8:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <prvResetNextTaskUnblockTime+0x40>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4a04      	ldr	r2, [pc, #16]	; (8007f08 <prvResetNextTaskUnblockTime+0x44>)
 8007ef8:	6013      	str	r3, [r2, #0]
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bc80      	pop	{r7}
 8007f02:	4770      	bx	lr
 8007f04:	200009b0 	.word	0x200009b0
 8007f08:	20000a18 	.word	0x20000a18

08007f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f12:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <xTaskGetSchedulerState+0x34>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	e008      	b.n	8007f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f20:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <xTaskGetSchedulerState+0x38>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	e001      	b.n	8007f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f32:	687b      	ldr	r3, [r7, #4]
	}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000a04 	.word	0x20000a04
 8007f44:	20000a20 	.word	0x20000a20

08007f48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d06e      	beq.n	800803c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f62:	4b39      	ldr	r3, [pc, #228]	; (8008048 <xTaskPriorityInherit+0x100>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d25e      	bcs.n	800802a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db06      	blt.n	8007f82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f74:	4b34      	ldr	r3, [pc, #208]	; (8008048 <xTaskPriorityInherit+0x100>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	f1c3 0207 	rsb	r2, r3, #7
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6959      	ldr	r1, [r3, #20]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4a2e      	ldr	r2, [pc, #184]	; (800804c <xTaskPriorityInherit+0x104>)
 8007f94:	4413      	add	r3, r2
 8007f96:	4299      	cmp	r1, r3
 8007f98:	d101      	bne.n	8007f9e <xTaskPriorityInherit+0x56>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <xTaskPriorityInherit+0x58>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d03a      	beq.n	800801a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fa5f 	bl	800646c <uxListRemove>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d115      	bne.n	8007fe0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb8:	4924      	ldr	r1, [pc, #144]	; (800804c <xTaskPriorityInherit+0x104>)
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <xTaskPriorityInherit+0x98>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	2201      	movs	r2, #1
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	43da      	mvns	r2, r3
 8007fd6:	4b1e      	ldr	r3, [pc, #120]	; (8008050 <xTaskPriorityInherit+0x108>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	4a1c      	ldr	r2, [pc, #112]	; (8008050 <xTaskPriorityInherit+0x108>)
 8007fde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fe0:	4b19      	ldr	r3, [pc, #100]	; (8008048 <xTaskPriorityInherit+0x100>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	2201      	movs	r2, #1
 8007ff0:	409a      	lsls	r2, r3
 8007ff2:	4b17      	ldr	r3, [pc, #92]	; (8008050 <xTaskPriorityInherit+0x108>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	4a15      	ldr	r2, [pc, #84]	; (8008050 <xTaskPriorityInherit+0x108>)
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4a10      	ldr	r2, [pc, #64]	; (800804c <xTaskPriorityInherit+0x104>)
 800800a:	441a      	add	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	3304      	adds	r3, #4
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7fe f9cf 	bl	80063b6 <vListInsertEnd>
 8008018:	e004      	b.n	8008024 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <xTaskPriorityInherit+0x100>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008024:	2301      	movs	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	e008      	b.n	800803c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <xTaskPriorityInherit+0x100>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	429a      	cmp	r2, r3
 8008036:	d201      	bcs.n	800803c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008038:	2301      	movs	r3, #1
 800803a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800803c:	68fb      	ldr	r3, [r7, #12]
	}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	200008f8 	.word	0x200008f8
 800804c:	200008fc 	.word	0x200008fc
 8008050:	20000a00 	.word	0x20000a00

08008054 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d06c      	beq.n	8008144 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800806a:	4b39      	ldr	r3, [pc, #228]	; (8008150 <xTaskPriorityDisinherit+0xfc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	429a      	cmp	r2, r3
 8008072:	d009      	beq.n	8008088 <xTaskPriorityDisinherit+0x34>
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e7fe      	b.n	8008086 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <xTaskPriorityDisinherit+0x50>
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	60bb      	str	r3, [r7, #8]
 80080a2:	e7fe      	b.n	80080a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d044      	beq.n	8008144 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d140      	bne.n	8008144 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	3304      	adds	r3, #4
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe f9d0 	bl	800646c <uxListRemove>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d115      	bne.n	80080fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d6:	491f      	ldr	r1, [pc, #124]	; (8008154 <xTaskPriorityDisinherit+0x100>)
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <xTaskPriorityDisinherit+0xaa>
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	2201      	movs	r2, #1
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	43da      	mvns	r2, r3
 80080f4:	4b18      	ldr	r3, [pc, #96]	; (8008158 <xTaskPriorityDisinherit+0x104>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4013      	ands	r3, r2
 80080fa:	4a17      	ldr	r2, [pc, #92]	; (8008158 <xTaskPriorityDisinherit+0x104>)
 80080fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	f1c3 0207 	rsb	r2, r3, #7
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	2201      	movs	r2, #1
 8008118:	409a      	lsls	r2, r3
 800811a:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <xTaskPriorityDisinherit+0x104>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4313      	orrs	r3, r2
 8008120:	4a0d      	ldr	r2, [pc, #52]	; (8008158 <xTaskPriorityDisinherit+0x104>)
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4a08      	ldr	r2, [pc, #32]	; (8008154 <xTaskPriorityDisinherit+0x100>)
 8008132:	441a      	add	r2, r3
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	3304      	adds	r3, #4
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fe f93b 	bl	80063b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008140:	2301      	movs	r3, #1
 8008142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008144:	697b      	ldr	r3, [r7, #20]
	}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200008f8 	.word	0x200008f8
 8008154:	200008fc 	.word	0x200008fc
 8008158:	20000a00 	.word	0x20000a00

0800815c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800816a:	2301      	movs	r3, #1
 800816c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 8086 	beq.w	8008282 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e7fe      	b.n	8008190 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d902      	bls.n	80081a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	61fb      	str	r3, [r7, #28]
 80081a0:	e002      	b.n	80081a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d067      	beq.n	8008282 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d162      	bne.n	8008282 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081bc:	4b33      	ldr	r3, [pc, #204]	; (800828c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d109      	bne.n	80081da <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80081c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	60bb      	str	r3, [r7, #8]
 80081d8:	e7fe      	b.n	80081d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	db04      	blt.n	80081f8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	f1c3 0207 	rsb	r2, r3, #7
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	6959      	ldr	r1, [r3, #20]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4a22      	ldr	r2, [pc, #136]	; (8008290 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008208:	4413      	add	r3, r2
 800820a:	4299      	cmp	r1, r3
 800820c:	d101      	bne.n	8008212 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800820e:	2301      	movs	r3, #1
 8008210:	e000      	b.n	8008214 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008212:	2300      	movs	r3, #0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d034      	beq.n	8008282 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	3304      	adds	r3, #4
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe f925 	bl	800646c <uxListRemove>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d115      	bne.n	8008254 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822c:	4918      	ldr	r1, [pc, #96]	; (8008290 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	440b      	add	r3, r1
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	2201      	movs	r2, #1
 8008244:	fa02 f303 	lsl.w	r3, r2, r3
 8008248:	43da      	mvns	r2, r3
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4013      	ands	r3, r2
 8008250:	4a10      	ldr	r2, [pc, #64]	; (8008294 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008252:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	2201      	movs	r2, #1
 800825a:	409a      	lsls	r2, r3
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4313      	orrs	r3, r2
 8008262:	4a0c      	ldr	r2, [pc, #48]	; (8008294 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4a07      	ldr	r2, [pc, #28]	; (8008290 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008274:	441a      	add	r2, r3
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	3304      	adds	r3, #4
 800827a:	4619      	mov	r1, r3
 800827c:	4610      	mov	r0, r2
 800827e:	f7fe f89a 	bl	80063b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008282:	bf00      	nop
 8008284:	3720      	adds	r7, #32
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	200008f8 	.word	0x200008f8
 8008290:	200008fc 	.word	0x200008fc
 8008294:	20000a00 	.word	0x20000a00

08008298 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800829c:	4b07      	ldr	r3, [pc, #28]	; (80082bc <pvTaskIncrementMutexHeldCount+0x24>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <pvTaskIncrementMutexHeldCount+0x24>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082aa:	3201      	adds	r2, #1
 80082ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80082ae:	4b03      	ldr	r3, [pc, #12]	; (80082bc <pvTaskIncrementMutexHeldCount+0x24>)
 80082b0:	681b      	ldr	r3, [r3, #0]
	}
 80082b2:	4618      	mov	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	200008f8 	.word	0x200008f8

080082c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082ca:	4b29      	ldr	r3, [pc, #164]	; (8008370 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d0:	4b28      	ldr	r3, [pc, #160]	; (8008374 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3304      	adds	r3, #4
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe f8c8 	bl	800646c <uxListRemove>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10b      	bne.n	80082fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80082e2:	4b24      	ldr	r3, [pc, #144]	; (8008374 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	2201      	movs	r2, #1
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	43da      	mvns	r2, r3
 80082f0:	4b21      	ldr	r3, [pc, #132]	; (8008378 <prvAddCurrentTaskToDelayedList+0xb8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4013      	ands	r3, r2
 80082f6:	4a20      	ldr	r2, [pc, #128]	; (8008378 <prvAddCurrentTaskToDelayedList+0xb8>)
 80082f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008300:	d10a      	bne.n	8008318 <prvAddCurrentTaskToDelayedList+0x58>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008308:	4b1a      	ldr	r3, [pc, #104]	; (8008374 <prvAddCurrentTaskToDelayedList+0xb4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	481a      	ldr	r0, [pc, #104]	; (800837c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008312:	f7fe f850 	bl	80063b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008316:	e026      	b.n	8008366 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4413      	add	r3, r2
 800831e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008320:	4b14      	ldr	r3, [pc, #80]	; (8008374 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	429a      	cmp	r2, r3
 800832e:	d209      	bcs.n	8008344 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008330:	4b13      	ldr	r3, [pc, #76]	; (8008380 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3304      	adds	r3, #4
 800833a:	4619      	mov	r1, r3
 800833c:	4610      	mov	r0, r2
 800833e:	f7fe f85d 	bl	80063fc <vListInsert>
}
 8008342:	e010      	b.n	8008366 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008344:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <prvAddCurrentTaskToDelayedList+0xb4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fe f853 	bl	80063fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	429a      	cmp	r2, r3
 800835e:	d202      	bcs.n	8008366 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008360:	4a09      	ldr	r2, [pc, #36]	; (8008388 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	6013      	str	r3, [r2, #0]
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200009fc 	.word	0x200009fc
 8008374:	200008f8 	.word	0x200008f8
 8008378:	20000a00 	.word	0x20000a00
 800837c:	200009e4 	.word	0x200009e4
 8008380:	200009b4 	.word	0x200009b4
 8008384:	200009b0 	.word	0x200009b0
 8008388:	20000a18 	.word	0x20000a18

0800838c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08a      	sub	sp, #40	; 0x28
 8008390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008396:	f000 fb37 	bl	8008a08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800839a:	4b1c      	ldr	r3, [pc, #112]	; (800840c <xTimerCreateTimerTask+0x80>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d021      	beq.n	80083e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083aa:	1d3a      	adds	r2, r7, #4
 80083ac:	f107 0108 	add.w	r1, r7, #8
 80083b0:	f107 030c 	add.w	r3, r7, #12
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7f8 fae1 	bl	800097c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	9202      	str	r2, [sp, #8]
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	2305      	movs	r3, #5
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	2300      	movs	r3, #0
 80083ca:	460a      	mov	r2, r1
 80083cc:	4910      	ldr	r1, [pc, #64]	; (8008410 <xTimerCreateTimerTask+0x84>)
 80083ce:	4811      	ldr	r0, [pc, #68]	; (8008414 <xTimerCreateTimerTask+0x88>)
 80083d0:	f7fe ffa8 	bl	8007324 <xTaskCreateStatic>
 80083d4:	4602      	mov	r2, r0
 80083d6:	4b10      	ldr	r3, [pc, #64]	; (8008418 <xTimerCreateTimerTask+0x8c>)
 80083d8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083da:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <xTimerCreateTimerTask+0x8c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083e2:	2301      	movs	r3, #1
 80083e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d109      	bne.n	8008400 <xTimerCreateTimerTask+0x74>
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	613b      	str	r3, [r7, #16]
 80083fe:	e7fe      	b.n	80083fe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008400:	697b      	ldr	r3, [r7, #20]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000a54 	.word	0x20000a54
 8008410:	08009cf8 	.word	0x08009cf8
 8008414:	08008651 	.word	0x08008651
 8008418:	20000a58 	.word	0x20000a58

0800841c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800842a:	202c      	movs	r0, #44	; 0x2c
 800842c:	f000 fd0a 	bl	8008e44 <pvPortMalloc>
 8008430:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00d      	beq.n	8008454 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f844 	bl	80084d4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008454:	697b      	ldr	r3, [r7, #20]
	}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800845e:	b580      	push	{r7, lr}
 8008460:	b08a      	sub	sp, #40	; 0x28
 8008462:	af02      	add	r7, sp, #8
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800846c:	232c      	movs	r3, #44	; 0x2c
 800846e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b2c      	cmp	r3, #44	; 0x2c
 8008474:	d009      	beq.n	800848a <xTimerCreateStatic+0x2c>
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	61bb      	str	r3, [r7, #24]
 8008488:	e7fe      	b.n	8008488 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d109      	bne.n	80084a4 <xTimerCreateStatic+0x46>
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	e7fe      	b.n	80084a2 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00d      	beq.n	80084ca <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 f809 	bl	80084d4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80084ca:	69fb      	ldr	r3, [r7, #28]
	}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <prvInitialiseNewTimer+0x28>
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	617b      	str	r3, [r7, #20]
 80084fa:	e7fe      	b.n	80084fa <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d015      	beq.n	800852e <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008502:	f000 fa81 	bl	8008a08 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	6a3a      	ldr	r2, [r7, #32]
 8008522:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	3304      	adds	r3, #4
 8008528:	4618      	mov	r0, r3
 800852a:	f7fd ff38 	bl	800639e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800852e:	bf00      	nop
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	; 0x28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008546:	2300      	movs	r3, #0
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d109      	bne.n	8008564 <xTimerGenericCommand+0x2c>
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	623b      	str	r3, [r7, #32]
 8008562:	e7fe      	b.n	8008562 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008564:	4b19      	ldr	r3, [pc, #100]	; (80085cc <xTimerGenericCommand+0x94>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d02a      	beq.n	80085c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b05      	cmp	r3, #5
 800857c:	dc18      	bgt.n	80085b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800857e:	f7ff fcc5 	bl	8007f0c <xTaskGetSchedulerState>
 8008582:	4603      	mov	r3, r0
 8008584:	2b02      	cmp	r3, #2
 8008586:	d109      	bne.n	800859c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008588:	4b10      	ldr	r3, [pc, #64]	; (80085cc <xTimerGenericCommand+0x94>)
 800858a:	6818      	ldr	r0, [r3, #0]
 800858c:	f107 0114 	add.w	r1, r7, #20
 8008590:	2300      	movs	r3, #0
 8008592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008594:	f7fe f8ca 	bl	800672c <xQueueGenericSend>
 8008598:	6278      	str	r0, [r7, #36]	; 0x24
 800859a:	e012      	b.n	80085c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800859c:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <xTimerGenericCommand+0x94>)
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	f107 0114 	add.w	r1, r7, #20
 80085a4:	2300      	movs	r3, #0
 80085a6:	2200      	movs	r2, #0
 80085a8:	f7fe f8c0 	bl	800672c <xQueueGenericSend>
 80085ac:	6278      	str	r0, [r7, #36]	; 0x24
 80085ae:	e008      	b.n	80085c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085b0:	4b06      	ldr	r3, [pc, #24]	; (80085cc <xTimerGenericCommand+0x94>)
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	f107 0114 	add.w	r1, r7, #20
 80085b8:	2300      	movs	r3, #0
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	f7fe f9b0 	bl	8006920 <xQueueGenericSendFromISR>
 80085c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3728      	adds	r7, #40	; 0x28
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20000a54 	.word	0x20000a54

080085d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085da:	4b1c      	ldr	r3, [pc, #112]	; (800864c <prvProcessExpiredTimer+0x7c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd ff3f 	bl	800646c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d121      	bne.n	800863a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	18d1      	adds	r1, r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	6978      	ldr	r0, [r7, #20]
 8008604:	f000 f8c8 	bl	8008798 <prvInsertTimerInActiveList>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d015      	beq.n	800863a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800860e:	2300      	movs	r3, #0
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	2100      	movs	r1, #0
 8008618:	6978      	ldr	r0, [r7, #20]
 800861a:	f7ff ff8d 	bl	8008538 <xTimerGenericCommand>
 800861e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d109      	bne.n	800863a <prvProcessExpiredTimer+0x6a>
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e7fe      	b.n	8008638 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	6978      	ldr	r0, [r7, #20]
 8008640:	4798      	blx	r3
}
 8008642:	bf00      	nop
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000a4c 	.word	0x20000a4c

08008650 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008658:	f107 0308 	add.w	r3, r7, #8
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f857 	bl	8008710 <prvGetNextExpireTime>
 8008662:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f803 	bl	8008674 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800866e:	f000 f8d5 	bl	800881c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008672:	e7f1      	b.n	8008658 <prvTimerTask+0x8>

08008674 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800867e:	f7ff f86f 	bl	8007760 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f866 	bl	8008758 <prvSampleTimeNow>
 800868c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d130      	bne.n	80086f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <prvProcessTimerOrBlockTask+0x3c>
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d806      	bhi.n	80086b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086a2:	f7ff f86b 	bl	800777c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff ff91 	bl	80085d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086ae:	e024      	b.n	80086fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d008      	beq.n	80086c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086b6:	4b13      	ldr	r3, [pc, #76]	; (8008704 <prvProcessTimerOrBlockTask+0x90>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bf0c      	ite	eq
 80086c0:	2301      	moveq	r3, #1
 80086c2:	2300      	movne	r3, #0
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086c8:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <prvProcessTimerOrBlockTask+0x94>)
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	4619      	mov	r1, r3
 80086d6:	f7fe fdf1 	bl	80072bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086da:	f7ff f84f 	bl	800777c <xTaskResumeAll>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <prvProcessTimerOrBlockTask+0x98>)
 80086e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	f3bf 8f6f 	isb	sy
}
 80086f4:	e001      	b.n	80086fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086f6:	f7ff f841 	bl	800777c <xTaskResumeAll>
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000a50 	.word	0x20000a50
 8008708:	20000a54 	.word	0x20000a54
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008718:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <prvGetNextExpireTime+0x44>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	bf0c      	ite	eq
 8008722:	2301      	moveq	r3, #1
 8008724:	2300      	movne	r3, #0
 8008726:	b2db      	uxtb	r3, r3
 8008728:	461a      	mov	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d105      	bne.n	8008742 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008736:	4b07      	ldr	r3, [pc, #28]	; (8008754 <prvGetNextExpireTime+0x44>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e001      	b.n	8008746 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008746:	68fb      	ldr	r3, [r7, #12]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000a4c 	.word	0x20000a4c

08008758 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008760:	f7ff f8a8 	bl	80078b4 <xTaskGetTickCount>
 8008764:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008766:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <prvSampleTimeNow+0x3c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	429a      	cmp	r2, r3
 800876e:	d205      	bcs.n	800877c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008770:	f000 f8ea 	bl	8008948 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	e002      	b.n	8008782 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008782:	4a04      	ldr	r2, [pc, #16]	; (8008794 <prvSampleTimeNow+0x3c>)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008788:	68fb      	ldr	r3, [r7, #12]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000a5c 	.word	0x20000a5c

08008798 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087a6:	2300      	movs	r3, #0
 80087a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d812      	bhi.n	80087e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	1ad2      	subs	r2, r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d302      	bcc.n	80087d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087cc:	2301      	movs	r3, #1
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	e01b      	b.n	800880a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087d2:	4b10      	ldr	r3, [pc, #64]	; (8008814 <prvInsertTimerInActiveList+0x7c>)
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3304      	adds	r3, #4
 80087da:	4619      	mov	r1, r3
 80087dc:	4610      	mov	r0, r2
 80087de:	f7fd fe0d 	bl	80063fc <vListInsert>
 80087e2:	e012      	b.n	800880a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d206      	bcs.n	80087fa <prvInsertTimerInActiveList+0x62>
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d302      	bcc.n	80087fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e007      	b.n	800880a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087fa:	4b07      	ldr	r3, [pc, #28]	; (8008818 <prvInsertTimerInActiveList+0x80>)
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3304      	adds	r3, #4
 8008802:	4619      	mov	r1, r3
 8008804:	4610      	mov	r0, r2
 8008806:	f7fd fdf9 	bl	80063fc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800880a:	697b      	ldr	r3, [r7, #20]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20000a50 	.word	0x20000a50
 8008818:	20000a4c 	.word	0x20000a4c

0800881c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08c      	sub	sp, #48	; 0x30
 8008820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008822:	e07f      	b.n	8008924 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	db7b      	blt.n	8008922 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	3304      	adds	r3, #4
 800883a:	4618      	mov	r0, r3
 800883c:	f7fd fe16 	bl	800646c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008840:	1d3b      	adds	r3, r7, #4
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff ff88 	bl	8008758 <prvSampleTimeNow>
 8008848:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b09      	cmp	r3, #9
 800884e:	d869      	bhi.n	8008924 <prvProcessReceivedCommands+0x108>
 8008850:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <prvProcessReceivedCommands+0x3c>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	08008881 	.word	0x08008881
 800885c:	08008881 	.word	0x08008881
 8008860:	08008881 	.word	0x08008881
 8008864:	08008925 	.word	0x08008925
 8008868:	080088db 	.word	0x080088db
 800886c:	08008911 	.word	0x08008911
 8008870:	08008881 	.word	0x08008881
 8008874:	08008881 	.word	0x08008881
 8008878:	08008925 	.word	0x08008925
 800887c:	080088db 	.word	0x080088db
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	18d1      	adds	r1, r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a3a      	ldr	r2, [r7, #32]
 800888c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800888e:	f7ff ff83 	bl	8008798 <prvInsertTimerInActiveList>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d045      	beq.n	8008924 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800889e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d13d      	bne.n	8008924 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	441a      	add	r2, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	2100      	movs	r1, #0
 80088b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088ba:	f7ff fe3d 	bl	8008538 <xTimerGenericCommand>
 80088be:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d12e      	bne.n	8008924 <prvProcessReceivedCommands+0x108>
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	61bb      	str	r3, [r7, #24]
 80088d8:	e7fe      	b.n	80088d8 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <prvProcessReceivedCommands+0xe0>
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e7fe      	b.n	80088fa <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	699a      	ldr	r2, [r3, #24]
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	18d1      	adds	r1, r2, r3
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	6a3a      	ldr	r2, [r7, #32]
 8008908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800890a:	f7ff ff45 	bl	8008798 <prvInsertTimerInActiveList>
					break;
 800890e:	e009      	b.n	8008924 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800891a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800891c:	f000 fb54 	bl	8008fc8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008920:	e000      	b.n	8008924 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008922:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008924:	4b07      	ldr	r3, [pc, #28]	; (8008944 <prvProcessReceivedCommands+0x128>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f107 0108 	add.w	r1, r7, #8
 800892c:	2200      	movs	r2, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe f914 	bl	8006b5c <xQueueReceive>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	f47f af74 	bne.w	8008824 <prvProcessReceivedCommands+0x8>
	}
}
 800893c:	bf00      	nop
 800893e:	3728      	adds	r7, #40	; 0x28
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20000a54 	.word	0x20000a54

08008948 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800894e:	e044      	b.n	80089da <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008950:	4b2b      	ldr	r3, [pc, #172]	; (8008a00 <prvSwitchTimerLists+0xb8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800895a:	4b29      	ldr	r3, [pc, #164]	; (8008a00 <prvSwitchTimerLists+0xb8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3304      	adds	r3, #4
 8008968:	4618      	mov	r0, r3
 800896a:	f7fd fd7f 	bl	800646c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d12d      	bne.n	80089da <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	4413      	add	r3, r2
 8008986:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	429a      	cmp	r2, r3
 800898e:	d90e      	bls.n	80089ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800899c:	4b18      	ldr	r3, [pc, #96]	; (8008a00 <prvSwitchTimerLists+0xb8>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f7fd fd28 	bl	80063fc <vListInsert>
 80089ac:	e015      	b.n	80089da <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089ae:	2300      	movs	r3, #0
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	2300      	movs	r3, #0
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	2100      	movs	r1, #0
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f7ff fdbd 	bl	8008538 <xTimerGenericCommand>
 80089be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <prvSwitchTimerLists+0x92>
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	e7fe      	b.n	80089d8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <prvSwitchTimerLists+0xb8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1b5      	bne.n	8008950 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089e4:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <prvSwitchTimerLists+0xb8>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089ea:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <prvSwitchTimerLists+0xbc>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a04      	ldr	r2, [pc, #16]	; (8008a00 <prvSwitchTimerLists+0xb8>)
 80089f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089f2:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <prvSwitchTimerLists+0xbc>)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	6013      	str	r3, [r2, #0]
}
 80089f8:	bf00      	nop
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20000a4c 	.word	0x20000a4c
 8008a04:	20000a50 	.word	0x20000a50

08008a08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a0e:	f000 f923 	bl	8008c58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <prvCheckForValidListAndQueue+0x60>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d120      	bne.n	8008a5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a1a:	4814      	ldr	r0, [pc, #80]	; (8008a6c <prvCheckForValidListAndQueue+0x64>)
 8008a1c:	f7fd fca0 	bl	8006360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a20:	4813      	ldr	r0, [pc, #76]	; (8008a70 <prvCheckForValidListAndQueue+0x68>)
 8008a22:	f7fd fc9d 	bl	8006360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a26:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <prvCheckForValidListAndQueue+0x6c>)
 8008a28:	4a10      	ldr	r2, [pc, #64]	; (8008a6c <prvCheckForValidListAndQueue+0x64>)
 8008a2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a2c:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <prvCheckForValidListAndQueue+0x70>)
 8008a2e:	4a10      	ldr	r2, [pc, #64]	; (8008a70 <prvCheckForValidListAndQueue+0x68>)
 8008a30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a32:	2300      	movs	r3, #0
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <prvCheckForValidListAndQueue+0x74>)
 8008a38:	4a11      	ldr	r2, [pc, #68]	; (8008a80 <prvCheckForValidListAndQueue+0x78>)
 8008a3a:	210c      	movs	r1, #12
 8008a3c:	200a      	movs	r0, #10
 8008a3e:	f7fd fda7 	bl	8006590 <xQueueGenericCreateStatic>
 8008a42:	4602      	mov	r2, r0
 8008a44:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <prvCheckForValidListAndQueue+0x60>)
 8008a46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a48:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <prvCheckForValidListAndQueue+0x60>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d005      	beq.n	8008a5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a50:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <prvCheckForValidListAndQueue+0x60>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	490b      	ldr	r1, [pc, #44]	; (8008a84 <prvCheckForValidListAndQueue+0x7c>)
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fc08 	bl	800726c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a5c:	f000 f92a 	bl	8008cb4 <vPortExitCritical>
}
 8008a60:	bf00      	nop
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000a54 	.word	0x20000a54
 8008a6c:	20000a24 	.word	0x20000a24
 8008a70:	20000a38 	.word	0x20000a38
 8008a74:	20000a4c 	.word	0x20000a4c
 8008a78:	20000a50 	.word	0x20000a50
 8008a7c:	20000ad8 	.word	0x20000ad8
 8008a80:	20000a60 	.word	0x20000a60
 8008a84:	08009d00 	.word	0x08009d00

08008a88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3b04      	subs	r3, #4
 8008a98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3b04      	subs	r3, #4
 8008aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f023 0201 	bic.w	r2, r3, #1
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b04      	subs	r3, #4
 8008ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ab8:	4a08      	ldr	r2, [pc, #32]	; (8008adc <pxPortInitialiseStack+0x54>)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3b14      	subs	r3, #20
 8008ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3b20      	subs	r3, #32
 8008ace:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr
 8008adc:	08008ae1 	.word	0x08008ae1

08008ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008aea:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <prvTaskExitError+0x4c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af2:	d009      	beq.n	8008b08 <prvTaskExitError+0x28>
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	e7fe      	b.n	8008b06 <prvTaskExitError+0x26>
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b1a:	bf00      	nop
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0fc      	beq.n	8008b1c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b22:	bf00      	nop
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr
 8008b2c:	20000020 	.word	0x20000020

08008b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <pxCurrentTCBConst2>)
 8008b32:	6819      	ldr	r1, [r3, #0]
 8008b34:	6808      	ldr	r0, [r1, #0]
 8008b36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b3a:	f380 8809 	msr	PSP, r0
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f04f 0000 	mov.w	r0, #0
 8008b46:	f380 8811 	msr	BASEPRI, r0
 8008b4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008b4e:	4770      	bx	lr

08008b50 <pxCurrentTCBConst2>:
 8008b50:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop

08008b58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008b58:	4806      	ldr	r0, [pc, #24]	; (8008b74 <prvPortStartFirstTask+0x1c>)
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	6800      	ldr	r0, [r0, #0]
 8008b5e:	f380 8808 	msr	MSP, r0
 8008b62:	b662      	cpsie	i
 8008b64:	b661      	cpsie	f
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	df00      	svc	0
 8008b70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b72:	bf00      	nop
 8008b74:	e000ed08 	.word	0xe000ed08

08008b78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b7e:	4b31      	ldr	r3, [pc, #196]	; (8008c44 <xPortStartScheduler+0xcc>)
 8008b80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	22ff      	movs	r2, #255	; 0xff
 8008b8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	4b29      	ldr	r3, [pc, #164]	; (8008c48 <xPortStartScheduler+0xd0>)
 8008ba4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ba6:	4b29      	ldr	r3, [pc, #164]	; (8008c4c <xPortStartScheduler+0xd4>)
 8008ba8:	2207      	movs	r2, #7
 8008baa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bac:	e009      	b.n	8008bc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008bae:	4b27      	ldr	r3, [pc, #156]	; (8008c4c <xPortStartScheduler+0xd4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	4a25      	ldr	r2, [pc, #148]	; (8008c4c <xPortStartScheduler+0xd4>)
 8008bb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bca:	2b80      	cmp	r3, #128	; 0x80
 8008bcc:	d0ef      	beq.n	8008bae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bce:	4b1f      	ldr	r3, [pc, #124]	; (8008c4c <xPortStartScheduler+0xd4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f1c3 0307 	rsb	r3, r3, #7
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d009      	beq.n	8008bee <xPortStartScheduler+0x76>
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	60bb      	str	r3, [r7, #8]
 8008bec:	e7fe      	b.n	8008bec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bee:	4b17      	ldr	r3, [pc, #92]	; (8008c4c <xPortStartScheduler+0xd4>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <xPortStartScheduler+0xd4>)
 8008bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bf8:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <xPortStartScheduler+0xd4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c00:	4a12      	ldr	r2, [pc, #72]	; (8008c4c <xPortStartScheduler+0xd4>)
 8008c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c0c:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <xPortStartScheduler+0xd8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a0f      	ldr	r2, [pc, #60]	; (8008c50 <xPortStartScheduler+0xd8>)
 8008c12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c18:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <xPortStartScheduler+0xd8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a0c      	ldr	r2, [pc, #48]	; (8008c50 <xPortStartScheduler+0xd8>)
 8008c1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c24:	f000 f8b0 	bl	8008d88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <xPortStartScheduler+0xdc>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c2e:	f7ff ff93 	bl	8008b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c32:	f7fe ff09 	bl	8007a48 <vTaskSwitchContext>
	prvTaskExitError();
 8008c36:	f7ff ff53 	bl	8008ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	e000e400 	.word	0xe000e400
 8008c48:	20000b20 	.word	0x20000b20
 8008c4c:	20000b24 	.word	0x20000b24
 8008c50:	e000ed20 	.word	0xe000ed20
 8008c54:	20000020 	.word	0x20000020

08008c58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c70:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <vPortEnterCritical+0x54>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3301      	adds	r3, #1
 8008c76:	4a0d      	ldr	r2, [pc, #52]	; (8008cac <vPortEnterCritical+0x54>)
 8008c78:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <vPortEnterCritical+0x54>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d10e      	bne.n	8008ca0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c82:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <vPortEnterCritical+0x58>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d009      	beq.n	8008ca0 <vPortEnterCritical+0x48>
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	e7fe      	b.n	8008c9e <vPortEnterCritical+0x46>
	}
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bc80      	pop	{r7}
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000020 	.word	0x20000020
 8008cb0:	e000ed04 	.word	0xe000ed04

08008cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cba:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <vPortExitCritical+0x48>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d109      	bne.n	8008cd6 <vPortExitCritical+0x22>
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	607b      	str	r3, [r7, #4]
 8008cd4:	e7fe      	b.n	8008cd4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008cd6:	4b09      	ldr	r3, [pc, #36]	; (8008cfc <vPortExitCritical+0x48>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	4a07      	ldr	r2, [pc, #28]	; (8008cfc <vPortExitCritical+0x48>)
 8008cde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ce0:	4b06      	ldr	r3, [pc, #24]	; (8008cfc <vPortExitCritical+0x48>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <vPortExitCritical+0x3e>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr
 8008cfc:	20000020 	.word	0x20000020

08008d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d00:	f3ef 8009 	mrs	r0, PSP
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <pxCurrentTCBConst>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d10:	6010      	str	r0, [r2, #0]
 8008d12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008d16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d1a:	f380 8811 	msr	BASEPRI, r0
 8008d1e:	f7fe fe93 	bl	8007a48 <vTaskSwitchContext>
 8008d22:	f04f 0000 	mov.w	r0, #0
 8008d26:	f380 8811 	msr	BASEPRI, r0
 8008d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008d2e:	6819      	ldr	r1, [r3, #0]
 8008d30:	6808      	ldr	r0, [r1, #0]
 8008d32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d36:	f380 8809 	msr	PSP, r0
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	4770      	bx	lr

08008d40 <pxCurrentTCBConst>:
 8008d40:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d60:	f7fe fdb6 	bl	80078d0 <xTaskIncrementTick>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d6a:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <SysTick_Handler+0x3c>)
 8008d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	2300      	movs	r3, #0
 8008d74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <vPortSetupTimerInterrupt+0x30>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d92:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <vPortSetupTimerInterrupt+0x34>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d98:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <vPortSetupTimerInterrupt+0x38>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <vPortSetupTimerInterrupt+0x3c>)
 8008d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008da2:	099b      	lsrs	r3, r3, #6
 8008da4:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <vPortSetupTimerInterrupt+0x40>)
 8008da6:	3b01      	subs	r3, #1
 8008da8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008daa:	4b03      	ldr	r3, [pc, #12]	; (8008db8 <vPortSetupTimerInterrupt+0x30>)
 8008dac:	2207      	movs	r2, #7
 8008dae:	601a      	str	r2, [r3, #0]
}
 8008db0:	bf00      	nop
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bc80      	pop	{r7}
 8008db6:	4770      	bx	lr
 8008db8:	e000e010 	.word	0xe000e010
 8008dbc:	e000e018 	.word	0xe000e018
 8008dc0:	20000014 	.word	0x20000014
 8008dc4:	10624dd3 	.word	0x10624dd3
 8008dc8:	e000e014 	.word	0xe000e014

08008dcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dd2:	f3ef 8305 	mrs	r3, IPSR
 8008dd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b0f      	cmp	r3, #15
 8008ddc:	d913      	bls.n	8008e06 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dde:	4a15      	ldr	r2, [pc, #84]	; (8008e34 <vPortValidateInterruptPriority+0x68>)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008de8:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <vPortValidateInterruptPriority+0x6c>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	7afa      	ldrb	r2, [r7, #11]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d209      	bcs.n	8008e06 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	607b      	str	r3, [r7, #4]
 8008e04:	e7fe      	b.n	8008e04 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e06:	4b0d      	ldr	r3, [pc, #52]	; (8008e3c <vPortValidateInterruptPriority+0x70>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e0e:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <vPortValidateInterruptPriority+0x74>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d909      	bls.n	8008e2a <vPortValidateInterruptPriority+0x5e>
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	603b      	str	r3, [r7, #0]
 8008e28:	e7fe      	b.n	8008e28 <vPortValidateInterruptPriority+0x5c>
	}
 8008e2a:	bf00      	nop
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr
 8008e34:	e000e3f0 	.word	0xe000e3f0
 8008e38:	20000b20 	.word	0x20000b20
 8008e3c:	e000ed0c 	.word	0xe000ed0c
 8008e40:	20000b24 	.word	0x20000b24

08008e44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	; 0x28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e50:	f7fe fc86 	bl	8007760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e54:	4b57      	ldr	r3, [pc, #348]	; (8008fb4 <pvPortMalloc+0x170>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e5c:	f000 f90c 	bl	8009078 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e60:	4b55      	ldr	r3, [pc, #340]	; (8008fb8 <pvPortMalloc+0x174>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4013      	ands	r3, r2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f040 808c 	bne.w	8008f86 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01c      	beq.n	8008eae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008e74:	2208      	movs	r2, #8
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4413      	add	r3, r2
 8008e7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d013      	beq.n	8008eae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f023 0307 	bic.w	r3, r3, #7
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <pvPortMalloc+0x6a>
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e7fe      	b.n	8008eac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d068      	beq.n	8008f86 <pvPortMalloc+0x142>
 8008eb4:	4b41      	ldr	r3, [pc, #260]	; (8008fbc <pvPortMalloc+0x178>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d863      	bhi.n	8008f86 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ebe:	4b40      	ldr	r3, [pc, #256]	; (8008fc0 <pvPortMalloc+0x17c>)
 8008ec0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ec2:	4b3f      	ldr	r3, [pc, #252]	; (8008fc0 <pvPortMalloc+0x17c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ec8:	e004      	b.n	8008ed4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d903      	bls.n	8008ee6 <pvPortMalloc+0xa2>
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1f1      	bne.n	8008eca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ee6:	4b33      	ldr	r3, [pc, #204]	; (8008fb4 <pvPortMalloc+0x170>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d04a      	beq.n	8008f86 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2208      	movs	r2, #8
 8008ef6:	4413      	add	r3, r2
 8008ef8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	1ad2      	subs	r2, r2, r3
 8008f0a:	2308      	movs	r3, #8
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d91e      	bls.n	8008f50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4413      	add	r3, r2
 8008f18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d009      	beq.n	8008f38 <pvPortMalloc+0xf4>
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	613b      	str	r3, [r7, #16]
 8008f36:	e7fe      	b.n	8008f36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f4a:	69b8      	ldr	r0, [r7, #24]
 8008f4c:	f000 f8f6 	bl	800913c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f50:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <pvPortMalloc+0x178>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	4a18      	ldr	r2, [pc, #96]	; (8008fbc <pvPortMalloc+0x178>)
 8008f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f5e:	4b17      	ldr	r3, [pc, #92]	; (8008fbc <pvPortMalloc+0x178>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4b18      	ldr	r3, [pc, #96]	; (8008fc4 <pvPortMalloc+0x180>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d203      	bcs.n	8008f72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f6a:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <pvPortMalloc+0x178>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a15      	ldr	r2, [pc, #84]	; (8008fc4 <pvPortMalloc+0x180>)
 8008f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <pvPortMalloc+0x174>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f86:	f7fe fbf9 	bl	800777c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d009      	beq.n	8008fa8 <pvPortMalloc+0x164>
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e7fe      	b.n	8008fa6 <pvPortMalloc+0x162>
	return pvReturn;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3728      	adds	r7, #40	; 0x28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20001730 	.word	0x20001730
 8008fb8:	2000173c 	.word	0x2000173c
 8008fbc:	20001734 	.word	0x20001734
 8008fc0:	20001728 	.word	0x20001728
 8008fc4:	20001738 	.word	0x20001738

08008fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d046      	beq.n	8009068 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fda:	2308      	movs	r3, #8
 8008fdc:	425b      	negs	r3, r3
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	4b20      	ldr	r3, [pc, #128]	; (8009070 <vPortFree+0xa8>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d109      	bne.n	800900a <vPortFree+0x42>
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e7fe      	b.n	8009008 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d009      	beq.n	8009026 <vPortFree+0x5e>
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	60bb      	str	r3, [r7, #8]
 8009024:	e7fe      	b.n	8009024 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	4b11      	ldr	r3, [pc, #68]	; (8009070 <vPortFree+0xa8>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4013      	ands	r3, r2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d019      	beq.n	8009068 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d115      	bne.n	8009068 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <vPortFree+0xa8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	43db      	mvns	r3, r3
 8009046:	401a      	ands	r2, r3
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800904c:	f7fe fb88 	bl	8007760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	4b07      	ldr	r3, [pc, #28]	; (8009074 <vPortFree+0xac>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4413      	add	r3, r2
 800905a:	4a06      	ldr	r2, [pc, #24]	; (8009074 <vPortFree+0xac>)
 800905c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905e:	6938      	ldr	r0, [r7, #16]
 8009060:	f000 f86c 	bl	800913c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009064:	f7fe fb8a 	bl	800777c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009068:	bf00      	nop
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	2000173c 	.word	0x2000173c
 8009074:	20001734 	.word	0x20001734

08009078 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800907e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009082:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009084:	4b27      	ldr	r3, [pc, #156]	; (8009124 <prvHeapInit+0xac>)
 8009086:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00c      	beq.n	80090ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3307      	adds	r3, #7
 8009096:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0307 	bic.w	r3, r3, #7
 800909e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	4a1f      	ldr	r2, [pc, #124]	; (8009124 <prvHeapInit+0xac>)
 80090a8:	4413      	add	r3, r2
 80090aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090b0:	4a1d      	ldr	r2, [pc, #116]	; (8009128 <prvHeapInit+0xb0>)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090b6:	4b1c      	ldr	r3, [pc, #112]	; (8009128 <prvHeapInit+0xb0>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	4413      	add	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090c4:	2208      	movs	r2, #8
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0307 	bic.w	r3, r3, #7
 80090d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4a15      	ldr	r2, [pc, #84]	; (800912c <prvHeapInit+0xb4>)
 80090d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090da:	4b14      	ldr	r3, [pc, #80]	; (800912c <prvHeapInit+0xb4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2200      	movs	r2, #0
 80090e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090e2:	4b12      	ldr	r3, [pc, #72]	; (800912c <prvHeapInit+0xb4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	1ad2      	subs	r2, r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090f8:	4b0c      	ldr	r3, [pc, #48]	; (800912c <prvHeapInit+0xb4>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <prvHeapInit+0xb8>)
 8009106:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4a09      	ldr	r2, [pc, #36]	; (8009134 <prvHeapInit+0xbc>)
 800910e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009110:	4b09      	ldr	r3, [pc, #36]	; (8009138 <prvHeapInit+0xc0>)
 8009112:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009116:	601a      	str	r2, [r3, #0]
}
 8009118:	bf00      	nop
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20000b28 	.word	0x20000b28
 8009128:	20001728 	.word	0x20001728
 800912c:	20001730 	.word	0x20001730
 8009130:	20001738 	.word	0x20001738
 8009134:	20001734 	.word	0x20001734
 8009138:	2000173c 	.word	0x2000173c

0800913c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009144:	4b27      	ldr	r3, [pc, #156]	; (80091e4 <prvInsertBlockIntoFreeList+0xa8>)
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e002      	b.n	8009150 <prvInsertBlockIntoFreeList+0x14>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	429a      	cmp	r2, r3
 8009158:	d8f7      	bhi.n	800914a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	4413      	add	r3, r2
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d108      	bne.n	800917e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	441a      	add	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	429a      	cmp	r2, r3
 8009190:	d118      	bne.n	80091c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <prvInsertBlockIntoFreeList+0xac>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d00d      	beq.n	80091ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	441a      	add	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e008      	b.n	80091cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091ba:	4b0b      	ldr	r3, [pc, #44]	; (80091e8 <prvInsertBlockIntoFreeList+0xac>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	e003      	b.n	80091cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d002      	beq.n	80091da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	bc80      	pop	{r7}
 80091e2:	4770      	bx	lr
 80091e4:	20001728 	.word	0x20001728
 80091e8:	20001730 	.word	0x20001730

080091ec <atoi>:
 80091ec:	220a      	movs	r2, #10
 80091ee:	2100      	movs	r1, #0
 80091f0:	f000 b8da 	b.w	80093a8 <strtol>

080091f4 <__errno>:
 80091f4:	4b01      	ldr	r3, [pc, #4]	; (80091fc <__errno+0x8>)
 80091f6:	6818      	ldr	r0, [r3, #0]
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	20000024 	.word	0x20000024

08009200 <__libc_init_array>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	2500      	movs	r5, #0
 8009204:	4e0c      	ldr	r6, [pc, #48]	; (8009238 <__libc_init_array+0x38>)
 8009206:	4c0d      	ldr	r4, [pc, #52]	; (800923c <__libc_init_array+0x3c>)
 8009208:	1ba4      	subs	r4, r4, r6
 800920a:	10a4      	asrs	r4, r4, #2
 800920c:	42a5      	cmp	r5, r4
 800920e:	d109      	bne.n	8009224 <__libc_init_array+0x24>
 8009210:	f000 fcea 	bl	8009be8 <_init>
 8009214:	2500      	movs	r5, #0
 8009216:	4e0a      	ldr	r6, [pc, #40]	; (8009240 <__libc_init_array+0x40>)
 8009218:	4c0a      	ldr	r4, [pc, #40]	; (8009244 <__libc_init_array+0x44>)
 800921a:	1ba4      	subs	r4, r4, r6
 800921c:	10a4      	asrs	r4, r4, #2
 800921e:	42a5      	cmp	r5, r4
 8009220:	d105      	bne.n	800922e <__libc_init_array+0x2e>
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009228:	4798      	blx	r3
 800922a:	3501      	adds	r5, #1
 800922c:	e7ee      	b.n	800920c <__libc_init_array+0xc>
 800922e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009232:	4798      	blx	r3
 8009234:	3501      	adds	r5, #1
 8009236:	e7f2      	b.n	800921e <__libc_init_array+0x1e>
 8009238:	08009e70 	.word	0x08009e70
 800923c:	08009e70 	.word	0x08009e70
 8009240:	08009e70 	.word	0x08009e70
 8009244:	08009e74 	.word	0x08009e74

08009248 <memcpy>:
 8009248:	b510      	push	{r4, lr}
 800924a:	1e43      	subs	r3, r0, #1
 800924c:	440a      	add	r2, r1
 800924e:	4291      	cmp	r1, r2
 8009250:	d100      	bne.n	8009254 <memcpy+0xc>
 8009252:	bd10      	pop	{r4, pc}
 8009254:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800925c:	e7f7      	b.n	800924e <memcpy+0x6>

0800925e <memset>:
 800925e:	4603      	mov	r3, r0
 8009260:	4402      	add	r2, r0
 8009262:	4293      	cmp	r3, r2
 8009264:	d100      	bne.n	8009268 <memset+0xa>
 8009266:	4770      	bx	lr
 8009268:	f803 1b01 	strb.w	r1, [r3], #1
 800926c:	e7f9      	b.n	8009262 <memset+0x4>
	...

08009270 <siprintf>:
 8009270:	b40e      	push	{r1, r2, r3}
 8009272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009276:	b500      	push	{lr}
 8009278:	b09c      	sub	sp, #112	; 0x70
 800927a:	ab1d      	add	r3, sp, #116	; 0x74
 800927c:	9002      	str	r0, [sp, #8]
 800927e:	9006      	str	r0, [sp, #24]
 8009280:	9107      	str	r1, [sp, #28]
 8009282:	9104      	str	r1, [sp, #16]
 8009284:	4808      	ldr	r0, [pc, #32]	; (80092a8 <siprintf+0x38>)
 8009286:	4909      	ldr	r1, [pc, #36]	; (80092ac <siprintf+0x3c>)
 8009288:	f853 2b04 	ldr.w	r2, [r3], #4
 800928c:	9105      	str	r1, [sp, #20]
 800928e:	6800      	ldr	r0, [r0, #0]
 8009290:	a902      	add	r1, sp, #8
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	f000 f90e 	bl	80094b4 <_svfiprintf_r>
 8009298:	2200      	movs	r2, #0
 800929a:	9b02      	ldr	r3, [sp, #8]
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	b01c      	add	sp, #112	; 0x70
 80092a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092a4:	b003      	add	sp, #12
 80092a6:	4770      	bx	lr
 80092a8:	20000024 	.word	0x20000024
 80092ac:	ffff0208 	.word	0xffff0208

080092b0 <_strtol_l.isra.0>:
 80092b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b4:	4680      	mov	r8, r0
 80092b6:	4689      	mov	r9, r1
 80092b8:	4692      	mov	sl, r2
 80092ba:	461e      	mov	r6, r3
 80092bc:	460f      	mov	r7, r1
 80092be:	463d      	mov	r5, r7
 80092c0:	9808      	ldr	r0, [sp, #32]
 80092c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092c6:	f000 f885 	bl	80093d4 <__locale_ctype_ptr_l>
 80092ca:	4420      	add	r0, r4
 80092cc:	7843      	ldrb	r3, [r0, #1]
 80092ce:	f013 0308 	ands.w	r3, r3, #8
 80092d2:	d132      	bne.n	800933a <_strtol_l.isra.0+0x8a>
 80092d4:	2c2d      	cmp	r4, #45	; 0x2d
 80092d6:	d132      	bne.n	800933e <_strtol_l.isra.0+0x8e>
 80092d8:	2201      	movs	r2, #1
 80092da:	787c      	ldrb	r4, [r7, #1]
 80092dc:	1cbd      	adds	r5, r7, #2
 80092de:	2e00      	cmp	r6, #0
 80092e0:	d05d      	beq.n	800939e <_strtol_l.isra.0+0xee>
 80092e2:	2e10      	cmp	r6, #16
 80092e4:	d109      	bne.n	80092fa <_strtol_l.isra.0+0x4a>
 80092e6:	2c30      	cmp	r4, #48	; 0x30
 80092e8:	d107      	bne.n	80092fa <_strtol_l.isra.0+0x4a>
 80092ea:	782b      	ldrb	r3, [r5, #0]
 80092ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092f0:	2b58      	cmp	r3, #88	; 0x58
 80092f2:	d14f      	bne.n	8009394 <_strtol_l.isra.0+0xe4>
 80092f4:	2610      	movs	r6, #16
 80092f6:	786c      	ldrb	r4, [r5, #1]
 80092f8:	3502      	adds	r5, #2
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	bf14      	ite	ne
 80092fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009302:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009306:	2700      	movs	r7, #0
 8009308:	fbb1 fcf6 	udiv	ip, r1, r6
 800930c:	4638      	mov	r0, r7
 800930e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009312:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009316:	2b09      	cmp	r3, #9
 8009318:	d817      	bhi.n	800934a <_strtol_l.isra.0+0x9a>
 800931a:	461c      	mov	r4, r3
 800931c:	42a6      	cmp	r6, r4
 800931e:	dd23      	ble.n	8009368 <_strtol_l.isra.0+0xb8>
 8009320:	1c7b      	adds	r3, r7, #1
 8009322:	d007      	beq.n	8009334 <_strtol_l.isra.0+0x84>
 8009324:	4584      	cmp	ip, r0
 8009326:	d31c      	bcc.n	8009362 <_strtol_l.isra.0+0xb2>
 8009328:	d101      	bne.n	800932e <_strtol_l.isra.0+0x7e>
 800932a:	45a6      	cmp	lr, r4
 800932c:	db19      	blt.n	8009362 <_strtol_l.isra.0+0xb2>
 800932e:	2701      	movs	r7, #1
 8009330:	fb00 4006 	mla	r0, r0, r6, r4
 8009334:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009338:	e7eb      	b.n	8009312 <_strtol_l.isra.0+0x62>
 800933a:	462f      	mov	r7, r5
 800933c:	e7bf      	b.n	80092be <_strtol_l.isra.0+0xe>
 800933e:	2c2b      	cmp	r4, #43	; 0x2b
 8009340:	bf04      	itt	eq
 8009342:	1cbd      	addeq	r5, r7, #2
 8009344:	787c      	ldrbeq	r4, [r7, #1]
 8009346:	461a      	mov	r2, r3
 8009348:	e7c9      	b.n	80092de <_strtol_l.isra.0+0x2e>
 800934a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800934e:	2b19      	cmp	r3, #25
 8009350:	d801      	bhi.n	8009356 <_strtol_l.isra.0+0xa6>
 8009352:	3c37      	subs	r4, #55	; 0x37
 8009354:	e7e2      	b.n	800931c <_strtol_l.isra.0+0x6c>
 8009356:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800935a:	2b19      	cmp	r3, #25
 800935c:	d804      	bhi.n	8009368 <_strtol_l.isra.0+0xb8>
 800935e:	3c57      	subs	r4, #87	; 0x57
 8009360:	e7dc      	b.n	800931c <_strtol_l.isra.0+0x6c>
 8009362:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009366:	e7e5      	b.n	8009334 <_strtol_l.isra.0+0x84>
 8009368:	1c7b      	adds	r3, r7, #1
 800936a:	d108      	bne.n	800937e <_strtol_l.isra.0+0xce>
 800936c:	2322      	movs	r3, #34	; 0x22
 800936e:	4608      	mov	r0, r1
 8009370:	f8c8 3000 	str.w	r3, [r8]
 8009374:	f1ba 0f00 	cmp.w	sl, #0
 8009378:	d107      	bne.n	800938a <_strtol_l.isra.0+0xda>
 800937a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800937e:	b102      	cbz	r2, 8009382 <_strtol_l.isra.0+0xd2>
 8009380:	4240      	negs	r0, r0
 8009382:	f1ba 0f00 	cmp.w	sl, #0
 8009386:	d0f8      	beq.n	800937a <_strtol_l.isra.0+0xca>
 8009388:	b10f      	cbz	r7, 800938e <_strtol_l.isra.0+0xde>
 800938a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800938e:	f8ca 9000 	str.w	r9, [sl]
 8009392:	e7f2      	b.n	800937a <_strtol_l.isra.0+0xca>
 8009394:	2430      	movs	r4, #48	; 0x30
 8009396:	2e00      	cmp	r6, #0
 8009398:	d1af      	bne.n	80092fa <_strtol_l.isra.0+0x4a>
 800939a:	2608      	movs	r6, #8
 800939c:	e7ad      	b.n	80092fa <_strtol_l.isra.0+0x4a>
 800939e:	2c30      	cmp	r4, #48	; 0x30
 80093a0:	d0a3      	beq.n	80092ea <_strtol_l.isra.0+0x3a>
 80093a2:	260a      	movs	r6, #10
 80093a4:	e7a9      	b.n	80092fa <_strtol_l.isra.0+0x4a>
	...

080093a8 <strtol>:
 80093a8:	4b08      	ldr	r3, [pc, #32]	; (80093cc <strtol+0x24>)
 80093aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ac:	681c      	ldr	r4, [r3, #0]
 80093ae:	4d08      	ldr	r5, [pc, #32]	; (80093d0 <strtol+0x28>)
 80093b0:	6a23      	ldr	r3, [r4, #32]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bf08      	it	eq
 80093b6:	462b      	moveq	r3, r5
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	4613      	mov	r3, r2
 80093bc:	460a      	mov	r2, r1
 80093be:	4601      	mov	r1, r0
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7ff ff75 	bl	80092b0 <_strtol_l.isra.0>
 80093c6:	b003      	add	sp, #12
 80093c8:	bd30      	pop	{r4, r5, pc}
 80093ca:	bf00      	nop
 80093cc:	20000024 	.word	0x20000024
 80093d0:	20000088 	.word	0x20000088

080093d4 <__locale_ctype_ptr_l>:
 80093d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80093d8:	4770      	bx	lr

080093da <__ascii_mbtowc>:
 80093da:	b082      	sub	sp, #8
 80093dc:	b901      	cbnz	r1, 80093e0 <__ascii_mbtowc+0x6>
 80093de:	a901      	add	r1, sp, #4
 80093e0:	b142      	cbz	r2, 80093f4 <__ascii_mbtowc+0x1a>
 80093e2:	b14b      	cbz	r3, 80093f8 <__ascii_mbtowc+0x1e>
 80093e4:	7813      	ldrb	r3, [r2, #0]
 80093e6:	600b      	str	r3, [r1, #0]
 80093e8:	7812      	ldrb	r2, [r2, #0]
 80093ea:	1c10      	adds	r0, r2, #0
 80093ec:	bf18      	it	ne
 80093ee:	2001      	movne	r0, #1
 80093f0:	b002      	add	sp, #8
 80093f2:	4770      	bx	lr
 80093f4:	4610      	mov	r0, r2
 80093f6:	e7fb      	b.n	80093f0 <__ascii_mbtowc+0x16>
 80093f8:	f06f 0001 	mvn.w	r0, #1
 80093fc:	e7f8      	b.n	80093f0 <__ascii_mbtowc+0x16>

080093fe <__ssputs_r>:
 80093fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009402:	688e      	ldr	r6, [r1, #8]
 8009404:	4682      	mov	sl, r0
 8009406:	429e      	cmp	r6, r3
 8009408:	460c      	mov	r4, r1
 800940a:	4690      	mov	r8, r2
 800940c:	4699      	mov	r9, r3
 800940e:	d837      	bhi.n	8009480 <__ssputs_r+0x82>
 8009410:	898a      	ldrh	r2, [r1, #12]
 8009412:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009416:	d031      	beq.n	800947c <__ssputs_r+0x7e>
 8009418:	2302      	movs	r3, #2
 800941a:	6825      	ldr	r5, [r4, #0]
 800941c:	6909      	ldr	r1, [r1, #16]
 800941e:	1a6f      	subs	r7, r5, r1
 8009420:	6965      	ldr	r5, [r4, #20]
 8009422:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009426:	fb95 f5f3 	sdiv	r5, r5, r3
 800942a:	f109 0301 	add.w	r3, r9, #1
 800942e:	443b      	add	r3, r7
 8009430:	429d      	cmp	r5, r3
 8009432:	bf38      	it	cc
 8009434:	461d      	movcc	r5, r3
 8009436:	0553      	lsls	r3, r2, #21
 8009438:	d530      	bpl.n	800949c <__ssputs_r+0x9e>
 800943a:	4629      	mov	r1, r5
 800943c:	f000 fb3a 	bl	8009ab4 <_malloc_r>
 8009440:	4606      	mov	r6, r0
 8009442:	b950      	cbnz	r0, 800945a <__ssputs_r+0x5c>
 8009444:	230c      	movs	r3, #12
 8009446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800944a:	f8ca 3000 	str.w	r3, [sl]
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009454:	81a3      	strh	r3, [r4, #12]
 8009456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945a:	463a      	mov	r2, r7
 800945c:	6921      	ldr	r1, [r4, #16]
 800945e:	f7ff fef3 	bl	8009248 <memcpy>
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	6126      	str	r6, [r4, #16]
 8009470:	443e      	add	r6, r7
 8009472:	6026      	str	r6, [r4, #0]
 8009474:	464e      	mov	r6, r9
 8009476:	6165      	str	r5, [r4, #20]
 8009478:	1bed      	subs	r5, r5, r7
 800947a:	60a5      	str	r5, [r4, #8]
 800947c:	454e      	cmp	r6, r9
 800947e:	d900      	bls.n	8009482 <__ssputs_r+0x84>
 8009480:	464e      	mov	r6, r9
 8009482:	4632      	mov	r2, r6
 8009484:	4641      	mov	r1, r8
 8009486:	6820      	ldr	r0, [r4, #0]
 8009488:	f000 faaf 	bl	80099ea <memmove>
 800948c:	68a3      	ldr	r3, [r4, #8]
 800948e:	2000      	movs	r0, #0
 8009490:	1b9b      	subs	r3, r3, r6
 8009492:	60a3      	str	r3, [r4, #8]
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	441e      	add	r6, r3
 8009498:	6026      	str	r6, [r4, #0]
 800949a:	e7dc      	b.n	8009456 <__ssputs_r+0x58>
 800949c:	462a      	mov	r2, r5
 800949e:	f000 fb63 	bl	8009b68 <_realloc_r>
 80094a2:	4606      	mov	r6, r0
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d1e2      	bne.n	800946e <__ssputs_r+0x70>
 80094a8:	6921      	ldr	r1, [r4, #16]
 80094aa:	4650      	mov	r0, sl
 80094ac:	f000 fab6 	bl	8009a1c <_free_r>
 80094b0:	e7c8      	b.n	8009444 <__ssputs_r+0x46>
	...

080094b4 <_svfiprintf_r>:
 80094b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	461d      	mov	r5, r3
 80094ba:	898b      	ldrh	r3, [r1, #12]
 80094bc:	b09d      	sub	sp, #116	; 0x74
 80094be:	061f      	lsls	r7, r3, #24
 80094c0:	4680      	mov	r8, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	4616      	mov	r6, r2
 80094c6:	d50f      	bpl.n	80094e8 <_svfiprintf_r+0x34>
 80094c8:	690b      	ldr	r3, [r1, #16]
 80094ca:	b96b      	cbnz	r3, 80094e8 <_svfiprintf_r+0x34>
 80094cc:	2140      	movs	r1, #64	; 0x40
 80094ce:	f000 faf1 	bl	8009ab4 <_malloc_r>
 80094d2:	6020      	str	r0, [r4, #0]
 80094d4:	6120      	str	r0, [r4, #16]
 80094d6:	b928      	cbnz	r0, 80094e4 <_svfiprintf_r+0x30>
 80094d8:	230c      	movs	r3, #12
 80094da:	f8c8 3000 	str.w	r3, [r8]
 80094de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094e2:	e0c8      	b.n	8009676 <_svfiprintf_r+0x1c2>
 80094e4:	2340      	movs	r3, #64	; 0x40
 80094e6:	6163      	str	r3, [r4, #20]
 80094e8:	2300      	movs	r3, #0
 80094ea:	9309      	str	r3, [sp, #36]	; 0x24
 80094ec:	2320      	movs	r3, #32
 80094ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094f2:	2330      	movs	r3, #48	; 0x30
 80094f4:	f04f 0b01 	mov.w	fp, #1
 80094f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094fc:	9503      	str	r5, [sp, #12]
 80094fe:	4637      	mov	r7, r6
 8009500:	463d      	mov	r5, r7
 8009502:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009506:	b10b      	cbz	r3, 800950c <_svfiprintf_r+0x58>
 8009508:	2b25      	cmp	r3, #37	; 0x25
 800950a:	d13e      	bne.n	800958a <_svfiprintf_r+0xd6>
 800950c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009510:	d00b      	beq.n	800952a <_svfiprintf_r+0x76>
 8009512:	4653      	mov	r3, sl
 8009514:	4632      	mov	r2, r6
 8009516:	4621      	mov	r1, r4
 8009518:	4640      	mov	r0, r8
 800951a:	f7ff ff70 	bl	80093fe <__ssputs_r>
 800951e:	3001      	adds	r0, #1
 8009520:	f000 80a4 	beq.w	800966c <_svfiprintf_r+0x1b8>
 8009524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009526:	4453      	add	r3, sl
 8009528:	9309      	str	r3, [sp, #36]	; 0x24
 800952a:	783b      	ldrb	r3, [r7, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 809d 	beq.w	800966c <_svfiprintf_r+0x1b8>
 8009532:	2300      	movs	r3, #0
 8009534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	9307      	str	r3, [sp, #28]
 8009540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009544:	931a      	str	r3, [sp, #104]	; 0x68
 8009546:	462f      	mov	r7, r5
 8009548:	2205      	movs	r2, #5
 800954a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800954e:	4850      	ldr	r0, [pc, #320]	; (8009690 <_svfiprintf_r+0x1dc>)
 8009550:	f000 fa3d 	bl	80099ce <memchr>
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	b9d0      	cbnz	r0, 800958e <_svfiprintf_r+0xda>
 8009558:	06d9      	lsls	r1, r3, #27
 800955a:	bf44      	itt	mi
 800955c:	2220      	movmi	r2, #32
 800955e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009562:	071a      	lsls	r2, r3, #28
 8009564:	bf44      	itt	mi
 8009566:	222b      	movmi	r2, #43	; 0x2b
 8009568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800956c:	782a      	ldrb	r2, [r5, #0]
 800956e:	2a2a      	cmp	r2, #42	; 0x2a
 8009570:	d015      	beq.n	800959e <_svfiprintf_r+0xea>
 8009572:	462f      	mov	r7, r5
 8009574:	2000      	movs	r0, #0
 8009576:	250a      	movs	r5, #10
 8009578:	9a07      	ldr	r2, [sp, #28]
 800957a:	4639      	mov	r1, r7
 800957c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009580:	3b30      	subs	r3, #48	; 0x30
 8009582:	2b09      	cmp	r3, #9
 8009584:	d94d      	bls.n	8009622 <_svfiprintf_r+0x16e>
 8009586:	b1b8      	cbz	r0, 80095b8 <_svfiprintf_r+0x104>
 8009588:	e00f      	b.n	80095aa <_svfiprintf_r+0xf6>
 800958a:	462f      	mov	r7, r5
 800958c:	e7b8      	b.n	8009500 <_svfiprintf_r+0x4c>
 800958e:	4a40      	ldr	r2, [pc, #256]	; (8009690 <_svfiprintf_r+0x1dc>)
 8009590:	463d      	mov	r5, r7
 8009592:	1a80      	subs	r0, r0, r2
 8009594:	fa0b f000 	lsl.w	r0, fp, r0
 8009598:	4318      	orrs	r0, r3
 800959a:	9004      	str	r0, [sp, #16]
 800959c:	e7d3      	b.n	8009546 <_svfiprintf_r+0x92>
 800959e:	9a03      	ldr	r2, [sp, #12]
 80095a0:	1d11      	adds	r1, r2, #4
 80095a2:	6812      	ldr	r2, [r2, #0]
 80095a4:	9103      	str	r1, [sp, #12]
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	db01      	blt.n	80095ae <_svfiprintf_r+0xfa>
 80095aa:	9207      	str	r2, [sp, #28]
 80095ac:	e004      	b.n	80095b8 <_svfiprintf_r+0x104>
 80095ae:	4252      	negs	r2, r2
 80095b0:	f043 0302 	orr.w	r3, r3, #2
 80095b4:	9207      	str	r2, [sp, #28]
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	783b      	ldrb	r3, [r7, #0]
 80095ba:	2b2e      	cmp	r3, #46	; 0x2e
 80095bc:	d10c      	bne.n	80095d8 <_svfiprintf_r+0x124>
 80095be:	787b      	ldrb	r3, [r7, #1]
 80095c0:	2b2a      	cmp	r3, #42	; 0x2a
 80095c2:	d133      	bne.n	800962c <_svfiprintf_r+0x178>
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	3702      	adds	r7, #2
 80095c8:	1d1a      	adds	r2, r3, #4
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	9203      	str	r2, [sp, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bfb8      	it	lt
 80095d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095d6:	9305      	str	r3, [sp, #20]
 80095d8:	4d2e      	ldr	r5, [pc, #184]	; (8009694 <_svfiprintf_r+0x1e0>)
 80095da:	2203      	movs	r2, #3
 80095dc:	7839      	ldrb	r1, [r7, #0]
 80095de:	4628      	mov	r0, r5
 80095e0:	f000 f9f5 	bl	80099ce <memchr>
 80095e4:	b138      	cbz	r0, 80095f6 <_svfiprintf_r+0x142>
 80095e6:	2340      	movs	r3, #64	; 0x40
 80095e8:	1b40      	subs	r0, r0, r5
 80095ea:	fa03 f000 	lsl.w	r0, r3, r0
 80095ee:	9b04      	ldr	r3, [sp, #16]
 80095f0:	3701      	adds	r7, #1
 80095f2:	4303      	orrs	r3, r0
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	7839      	ldrb	r1, [r7, #0]
 80095f8:	2206      	movs	r2, #6
 80095fa:	4827      	ldr	r0, [pc, #156]	; (8009698 <_svfiprintf_r+0x1e4>)
 80095fc:	1c7e      	adds	r6, r7, #1
 80095fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009602:	f000 f9e4 	bl	80099ce <memchr>
 8009606:	2800      	cmp	r0, #0
 8009608:	d038      	beq.n	800967c <_svfiprintf_r+0x1c8>
 800960a:	4b24      	ldr	r3, [pc, #144]	; (800969c <_svfiprintf_r+0x1e8>)
 800960c:	bb13      	cbnz	r3, 8009654 <_svfiprintf_r+0x1a0>
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	3307      	adds	r3, #7
 8009612:	f023 0307 	bic.w	r3, r3, #7
 8009616:	3308      	adds	r3, #8
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961c:	444b      	add	r3, r9
 800961e:	9309      	str	r3, [sp, #36]	; 0x24
 8009620:	e76d      	b.n	80094fe <_svfiprintf_r+0x4a>
 8009622:	fb05 3202 	mla	r2, r5, r2, r3
 8009626:	2001      	movs	r0, #1
 8009628:	460f      	mov	r7, r1
 800962a:	e7a6      	b.n	800957a <_svfiprintf_r+0xc6>
 800962c:	2300      	movs	r3, #0
 800962e:	250a      	movs	r5, #10
 8009630:	4619      	mov	r1, r3
 8009632:	3701      	adds	r7, #1
 8009634:	9305      	str	r3, [sp, #20]
 8009636:	4638      	mov	r0, r7
 8009638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800963c:	3a30      	subs	r2, #48	; 0x30
 800963e:	2a09      	cmp	r2, #9
 8009640:	d903      	bls.n	800964a <_svfiprintf_r+0x196>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0c8      	beq.n	80095d8 <_svfiprintf_r+0x124>
 8009646:	9105      	str	r1, [sp, #20]
 8009648:	e7c6      	b.n	80095d8 <_svfiprintf_r+0x124>
 800964a:	fb05 2101 	mla	r1, r5, r1, r2
 800964e:	2301      	movs	r3, #1
 8009650:	4607      	mov	r7, r0
 8009652:	e7f0      	b.n	8009636 <_svfiprintf_r+0x182>
 8009654:	ab03      	add	r3, sp, #12
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4622      	mov	r2, r4
 800965a:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <_svfiprintf_r+0x1ec>)
 800965c:	a904      	add	r1, sp, #16
 800965e:	4640      	mov	r0, r8
 8009660:	f3af 8000 	nop.w
 8009664:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009668:	4681      	mov	r9, r0
 800966a:	d1d6      	bne.n	800961a <_svfiprintf_r+0x166>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	065b      	lsls	r3, r3, #25
 8009670:	f53f af35 	bmi.w	80094de <_svfiprintf_r+0x2a>
 8009674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009676:	b01d      	add	sp, #116	; 0x74
 8009678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967c:	ab03      	add	r3, sp, #12
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4622      	mov	r2, r4
 8009682:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <_svfiprintf_r+0x1ec>)
 8009684:	a904      	add	r1, sp, #16
 8009686:	4640      	mov	r0, r8
 8009688:	f000 f882 	bl	8009790 <_printf_i>
 800968c:	e7ea      	b.n	8009664 <_svfiprintf_r+0x1b0>
 800968e:	bf00      	nop
 8009690:	08009d3a 	.word	0x08009d3a
 8009694:	08009d40 	.word	0x08009d40
 8009698:	08009d44 	.word	0x08009d44
 800969c:	00000000 	.word	0x00000000
 80096a0:	080093ff 	.word	0x080093ff

080096a4 <_printf_common>:
 80096a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	4691      	mov	r9, r2
 80096aa:	461f      	mov	r7, r3
 80096ac:	688a      	ldr	r2, [r1, #8]
 80096ae:	690b      	ldr	r3, [r1, #16]
 80096b0:	4606      	mov	r6, r0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bfb8      	it	lt
 80096b6:	4613      	movlt	r3, r2
 80096b8:	f8c9 3000 	str.w	r3, [r9]
 80096bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096c0:	460c      	mov	r4, r1
 80096c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096c6:	b112      	cbz	r2, 80096ce <_printf_common+0x2a>
 80096c8:	3301      	adds	r3, #1
 80096ca:	f8c9 3000 	str.w	r3, [r9]
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	0699      	lsls	r1, r3, #26
 80096d2:	bf42      	ittt	mi
 80096d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096d8:	3302      	addmi	r3, #2
 80096da:	f8c9 3000 	strmi.w	r3, [r9]
 80096de:	6825      	ldr	r5, [r4, #0]
 80096e0:	f015 0506 	ands.w	r5, r5, #6
 80096e4:	d107      	bne.n	80096f6 <_printf_common+0x52>
 80096e6:	f104 0a19 	add.w	sl, r4, #25
 80096ea:	68e3      	ldr	r3, [r4, #12]
 80096ec:	f8d9 2000 	ldr.w	r2, [r9]
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	42ab      	cmp	r3, r5
 80096f4:	dc29      	bgt.n	800974a <_printf_common+0xa6>
 80096f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	3300      	adds	r3, #0
 80096fe:	bf18      	it	ne
 8009700:	2301      	movne	r3, #1
 8009702:	0692      	lsls	r2, r2, #26
 8009704:	d42e      	bmi.n	8009764 <_printf_common+0xc0>
 8009706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800970a:	4639      	mov	r1, r7
 800970c:	4630      	mov	r0, r6
 800970e:	47c0      	blx	r8
 8009710:	3001      	adds	r0, #1
 8009712:	d021      	beq.n	8009758 <_printf_common+0xb4>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	68e5      	ldr	r5, [r4, #12]
 8009718:	f003 0306 	and.w	r3, r3, #6
 800971c:	2b04      	cmp	r3, #4
 800971e:	bf18      	it	ne
 8009720:	2500      	movne	r5, #0
 8009722:	f8d9 2000 	ldr.w	r2, [r9]
 8009726:	f04f 0900 	mov.w	r9, #0
 800972a:	bf08      	it	eq
 800972c:	1aad      	subeq	r5, r5, r2
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	6922      	ldr	r2, [r4, #16]
 8009732:	bf08      	it	eq
 8009734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009738:	4293      	cmp	r3, r2
 800973a:	bfc4      	itt	gt
 800973c:	1a9b      	subgt	r3, r3, r2
 800973e:	18ed      	addgt	r5, r5, r3
 8009740:	341a      	adds	r4, #26
 8009742:	454d      	cmp	r5, r9
 8009744:	d11a      	bne.n	800977c <_printf_common+0xd8>
 8009746:	2000      	movs	r0, #0
 8009748:	e008      	b.n	800975c <_printf_common+0xb8>
 800974a:	2301      	movs	r3, #1
 800974c:	4652      	mov	r2, sl
 800974e:	4639      	mov	r1, r7
 8009750:	4630      	mov	r0, r6
 8009752:	47c0      	blx	r8
 8009754:	3001      	adds	r0, #1
 8009756:	d103      	bne.n	8009760 <_printf_common+0xbc>
 8009758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800975c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009760:	3501      	adds	r5, #1
 8009762:	e7c2      	b.n	80096ea <_printf_common+0x46>
 8009764:	2030      	movs	r0, #48	; 0x30
 8009766:	18e1      	adds	r1, r4, r3
 8009768:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009772:	4422      	add	r2, r4
 8009774:	3302      	adds	r3, #2
 8009776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800977a:	e7c4      	b.n	8009706 <_printf_common+0x62>
 800977c:	2301      	movs	r3, #1
 800977e:	4622      	mov	r2, r4
 8009780:	4639      	mov	r1, r7
 8009782:	4630      	mov	r0, r6
 8009784:	47c0      	blx	r8
 8009786:	3001      	adds	r0, #1
 8009788:	d0e6      	beq.n	8009758 <_printf_common+0xb4>
 800978a:	f109 0901 	add.w	r9, r9, #1
 800978e:	e7d8      	b.n	8009742 <_printf_common+0x9e>

08009790 <_printf_i>:
 8009790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009794:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009798:	460c      	mov	r4, r1
 800979a:	7e09      	ldrb	r1, [r1, #24]
 800979c:	b085      	sub	sp, #20
 800979e:	296e      	cmp	r1, #110	; 0x6e
 80097a0:	4617      	mov	r7, r2
 80097a2:	4606      	mov	r6, r0
 80097a4:	4698      	mov	r8, r3
 80097a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097a8:	f000 80b3 	beq.w	8009912 <_printf_i+0x182>
 80097ac:	d822      	bhi.n	80097f4 <_printf_i+0x64>
 80097ae:	2963      	cmp	r1, #99	; 0x63
 80097b0:	d036      	beq.n	8009820 <_printf_i+0x90>
 80097b2:	d80a      	bhi.n	80097ca <_printf_i+0x3a>
 80097b4:	2900      	cmp	r1, #0
 80097b6:	f000 80b9 	beq.w	800992c <_printf_i+0x19c>
 80097ba:	2958      	cmp	r1, #88	; 0x58
 80097bc:	f000 8083 	beq.w	80098c6 <_printf_i+0x136>
 80097c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80097c8:	e032      	b.n	8009830 <_printf_i+0xa0>
 80097ca:	2964      	cmp	r1, #100	; 0x64
 80097cc:	d001      	beq.n	80097d2 <_printf_i+0x42>
 80097ce:	2969      	cmp	r1, #105	; 0x69
 80097d0:	d1f6      	bne.n	80097c0 <_printf_i+0x30>
 80097d2:	6820      	ldr	r0, [r4, #0]
 80097d4:	6813      	ldr	r3, [r2, #0]
 80097d6:	0605      	lsls	r5, r0, #24
 80097d8:	f103 0104 	add.w	r1, r3, #4
 80097dc:	d52a      	bpl.n	8009834 <_printf_i+0xa4>
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6011      	str	r1, [r2, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	da03      	bge.n	80097ee <_printf_i+0x5e>
 80097e6:	222d      	movs	r2, #45	; 0x2d
 80097e8:	425b      	negs	r3, r3
 80097ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097ee:	486f      	ldr	r0, [pc, #444]	; (80099ac <_printf_i+0x21c>)
 80097f0:	220a      	movs	r2, #10
 80097f2:	e039      	b.n	8009868 <_printf_i+0xd8>
 80097f4:	2973      	cmp	r1, #115	; 0x73
 80097f6:	f000 809d 	beq.w	8009934 <_printf_i+0x1a4>
 80097fa:	d808      	bhi.n	800980e <_printf_i+0x7e>
 80097fc:	296f      	cmp	r1, #111	; 0x6f
 80097fe:	d020      	beq.n	8009842 <_printf_i+0xb2>
 8009800:	2970      	cmp	r1, #112	; 0x70
 8009802:	d1dd      	bne.n	80097c0 <_printf_i+0x30>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	f043 0320 	orr.w	r3, r3, #32
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	e003      	b.n	8009816 <_printf_i+0x86>
 800980e:	2975      	cmp	r1, #117	; 0x75
 8009810:	d017      	beq.n	8009842 <_printf_i+0xb2>
 8009812:	2978      	cmp	r1, #120	; 0x78
 8009814:	d1d4      	bne.n	80097c0 <_printf_i+0x30>
 8009816:	2378      	movs	r3, #120	; 0x78
 8009818:	4865      	ldr	r0, [pc, #404]	; (80099b0 <_printf_i+0x220>)
 800981a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800981e:	e055      	b.n	80098cc <_printf_i+0x13c>
 8009820:	6813      	ldr	r3, [r2, #0]
 8009822:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009826:	1d19      	adds	r1, r3, #4
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6011      	str	r1, [r2, #0]
 800982c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009830:	2301      	movs	r3, #1
 8009832:	e08c      	b.n	800994e <_printf_i+0x1be>
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800983a:	6011      	str	r1, [r2, #0]
 800983c:	bf18      	it	ne
 800983e:	b21b      	sxthne	r3, r3
 8009840:	e7cf      	b.n	80097e2 <_printf_i+0x52>
 8009842:	6813      	ldr	r3, [r2, #0]
 8009844:	6825      	ldr	r5, [r4, #0]
 8009846:	1d18      	adds	r0, r3, #4
 8009848:	6010      	str	r0, [r2, #0]
 800984a:	0628      	lsls	r0, r5, #24
 800984c:	d501      	bpl.n	8009852 <_printf_i+0xc2>
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	e002      	b.n	8009858 <_printf_i+0xc8>
 8009852:	0668      	lsls	r0, r5, #25
 8009854:	d5fb      	bpl.n	800984e <_printf_i+0xbe>
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	296f      	cmp	r1, #111	; 0x6f
 800985a:	bf14      	ite	ne
 800985c:	220a      	movne	r2, #10
 800985e:	2208      	moveq	r2, #8
 8009860:	4852      	ldr	r0, [pc, #328]	; (80099ac <_printf_i+0x21c>)
 8009862:	2100      	movs	r1, #0
 8009864:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009868:	6865      	ldr	r5, [r4, #4]
 800986a:	2d00      	cmp	r5, #0
 800986c:	60a5      	str	r5, [r4, #8]
 800986e:	f2c0 8095 	blt.w	800999c <_printf_i+0x20c>
 8009872:	6821      	ldr	r1, [r4, #0]
 8009874:	f021 0104 	bic.w	r1, r1, #4
 8009878:	6021      	str	r1, [r4, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d13d      	bne.n	80098fa <_printf_i+0x16a>
 800987e:	2d00      	cmp	r5, #0
 8009880:	f040 808e 	bne.w	80099a0 <_printf_i+0x210>
 8009884:	4665      	mov	r5, ip
 8009886:	2a08      	cmp	r2, #8
 8009888:	d10b      	bne.n	80098a2 <_printf_i+0x112>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	07db      	lsls	r3, r3, #31
 800988e:	d508      	bpl.n	80098a2 <_printf_i+0x112>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	429a      	cmp	r2, r3
 8009896:	bfde      	ittt	le
 8009898:	2330      	movle	r3, #48	; 0x30
 800989a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800989e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80098a2:	ebac 0305 	sub.w	r3, ip, r5
 80098a6:	6123      	str	r3, [r4, #16]
 80098a8:	f8cd 8000 	str.w	r8, [sp]
 80098ac:	463b      	mov	r3, r7
 80098ae:	aa03      	add	r2, sp, #12
 80098b0:	4621      	mov	r1, r4
 80098b2:	4630      	mov	r0, r6
 80098b4:	f7ff fef6 	bl	80096a4 <_printf_common>
 80098b8:	3001      	adds	r0, #1
 80098ba:	d14d      	bne.n	8009958 <_printf_i+0x1c8>
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098c0:	b005      	add	sp, #20
 80098c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098c6:	4839      	ldr	r0, [pc, #228]	; (80099ac <_printf_i+0x21c>)
 80098c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098cc:	6813      	ldr	r3, [r2, #0]
 80098ce:	6821      	ldr	r1, [r4, #0]
 80098d0:	1d1d      	adds	r5, r3, #4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6015      	str	r5, [r2, #0]
 80098d6:	060a      	lsls	r2, r1, #24
 80098d8:	d50b      	bpl.n	80098f2 <_printf_i+0x162>
 80098da:	07ca      	lsls	r2, r1, #31
 80098dc:	bf44      	itt	mi
 80098de:	f041 0120 	orrmi.w	r1, r1, #32
 80098e2:	6021      	strmi	r1, [r4, #0]
 80098e4:	b91b      	cbnz	r3, 80098ee <_printf_i+0x15e>
 80098e6:	6822      	ldr	r2, [r4, #0]
 80098e8:	f022 0220 	bic.w	r2, r2, #32
 80098ec:	6022      	str	r2, [r4, #0]
 80098ee:	2210      	movs	r2, #16
 80098f0:	e7b7      	b.n	8009862 <_printf_i+0xd2>
 80098f2:	064d      	lsls	r5, r1, #25
 80098f4:	bf48      	it	mi
 80098f6:	b29b      	uxthmi	r3, r3
 80098f8:	e7ef      	b.n	80098da <_printf_i+0x14a>
 80098fa:	4665      	mov	r5, ip
 80098fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009900:	fb02 3311 	mls	r3, r2, r1, r3
 8009904:	5cc3      	ldrb	r3, [r0, r3]
 8009906:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800990a:	460b      	mov	r3, r1
 800990c:	2900      	cmp	r1, #0
 800990e:	d1f5      	bne.n	80098fc <_printf_i+0x16c>
 8009910:	e7b9      	b.n	8009886 <_printf_i+0xf6>
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	6825      	ldr	r5, [r4, #0]
 8009916:	1d18      	adds	r0, r3, #4
 8009918:	6961      	ldr	r1, [r4, #20]
 800991a:	6010      	str	r0, [r2, #0]
 800991c:	0628      	lsls	r0, r5, #24
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	d501      	bpl.n	8009926 <_printf_i+0x196>
 8009922:	6019      	str	r1, [r3, #0]
 8009924:	e002      	b.n	800992c <_printf_i+0x19c>
 8009926:	066a      	lsls	r2, r5, #25
 8009928:	d5fb      	bpl.n	8009922 <_printf_i+0x192>
 800992a:	8019      	strh	r1, [r3, #0]
 800992c:	2300      	movs	r3, #0
 800992e:	4665      	mov	r5, ip
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	e7b9      	b.n	80098a8 <_printf_i+0x118>
 8009934:	6813      	ldr	r3, [r2, #0]
 8009936:	1d19      	adds	r1, r3, #4
 8009938:	6011      	str	r1, [r2, #0]
 800993a:	681d      	ldr	r5, [r3, #0]
 800993c:	6862      	ldr	r2, [r4, #4]
 800993e:	2100      	movs	r1, #0
 8009940:	4628      	mov	r0, r5
 8009942:	f000 f844 	bl	80099ce <memchr>
 8009946:	b108      	cbz	r0, 800994c <_printf_i+0x1bc>
 8009948:	1b40      	subs	r0, r0, r5
 800994a:	6060      	str	r0, [r4, #4]
 800994c:	6863      	ldr	r3, [r4, #4]
 800994e:	6123      	str	r3, [r4, #16]
 8009950:	2300      	movs	r3, #0
 8009952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009956:	e7a7      	b.n	80098a8 <_printf_i+0x118>
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	462a      	mov	r2, r5
 800995c:	4639      	mov	r1, r7
 800995e:	4630      	mov	r0, r6
 8009960:	47c0      	blx	r8
 8009962:	3001      	adds	r0, #1
 8009964:	d0aa      	beq.n	80098bc <_printf_i+0x12c>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	079b      	lsls	r3, r3, #30
 800996a:	d413      	bmi.n	8009994 <_printf_i+0x204>
 800996c:	68e0      	ldr	r0, [r4, #12]
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	4298      	cmp	r0, r3
 8009972:	bfb8      	it	lt
 8009974:	4618      	movlt	r0, r3
 8009976:	e7a3      	b.n	80098c0 <_printf_i+0x130>
 8009978:	2301      	movs	r3, #1
 800997a:	464a      	mov	r2, r9
 800997c:	4639      	mov	r1, r7
 800997e:	4630      	mov	r0, r6
 8009980:	47c0      	blx	r8
 8009982:	3001      	adds	r0, #1
 8009984:	d09a      	beq.n	80098bc <_printf_i+0x12c>
 8009986:	3501      	adds	r5, #1
 8009988:	68e3      	ldr	r3, [r4, #12]
 800998a:	9a03      	ldr	r2, [sp, #12]
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	42ab      	cmp	r3, r5
 8009990:	dcf2      	bgt.n	8009978 <_printf_i+0x1e8>
 8009992:	e7eb      	b.n	800996c <_printf_i+0x1dc>
 8009994:	2500      	movs	r5, #0
 8009996:	f104 0919 	add.w	r9, r4, #25
 800999a:	e7f5      	b.n	8009988 <_printf_i+0x1f8>
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1ac      	bne.n	80098fa <_printf_i+0x16a>
 80099a0:	7803      	ldrb	r3, [r0, #0]
 80099a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099aa:	e76c      	b.n	8009886 <_printf_i+0xf6>
 80099ac:	08009d4b 	.word	0x08009d4b
 80099b0:	08009d5c 	.word	0x08009d5c

080099b4 <__ascii_wctomb>:
 80099b4:	b149      	cbz	r1, 80099ca <__ascii_wctomb+0x16>
 80099b6:	2aff      	cmp	r2, #255	; 0xff
 80099b8:	bf8b      	itete	hi
 80099ba:	238a      	movhi	r3, #138	; 0x8a
 80099bc:	700a      	strbls	r2, [r1, #0]
 80099be:	6003      	strhi	r3, [r0, #0]
 80099c0:	2001      	movls	r0, #1
 80099c2:	bf88      	it	hi
 80099c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80099c8:	4770      	bx	lr
 80099ca:	4608      	mov	r0, r1
 80099cc:	4770      	bx	lr

080099ce <memchr>:
 80099ce:	b510      	push	{r4, lr}
 80099d0:	b2c9      	uxtb	r1, r1
 80099d2:	4402      	add	r2, r0
 80099d4:	4290      	cmp	r0, r2
 80099d6:	4603      	mov	r3, r0
 80099d8:	d101      	bne.n	80099de <memchr+0x10>
 80099da:	2300      	movs	r3, #0
 80099dc:	e003      	b.n	80099e6 <memchr+0x18>
 80099de:	781c      	ldrb	r4, [r3, #0]
 80099e0:	3001      	adds	r0, #1
 80099e2:	428c      	cmp	r4, r1
 80099e4:	d1f6      	bne.n	80099d4 <memchr+0x6>
 80099e6:	4618      	mov	r0, r3
 80099e8:	bd10      	pop	{r4, pc}

080099ea <memmove>:
 80099ea:	4288      	cmp	r0, r1
 80099ec:	b510      	push	{r4, lr}
 80099ee:	eb01 0302 	add.w	r3, r1, r2
 80099f2:	d807      	bhi.n	8009a04 <memmove+0x1a>
 80099f4:	1e42      	subs	r2, r0, #1
 80099f6:	4299      	cmp	r1, r3
 80099f8:	d00a      	beq.n	8009a10 <memmove+0x26>
 80099fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009a02:	e7f8      	b.n	80099f6 <memmove+0xc>
 8009a04:	4283      	cmp	r3, r0
 8009a06:	d9f5      	bls.n	80099f4 <memmove+0xa>
 8009a08:	1881      	adds	r1, r0, r2
 8009a0a:	1ad2      	subs	r2, r2, r3
 8009a0c:	42d3      	cmn	r3, r2
 8009a0e:	d100      	bne.n	8009a12 <memmove+0x28>
 8009a10:	bd10      	pop	{r4, pc}
 8009a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a16:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009a1a:	e7f7      	b.n	8009a0c <memmove+0x22>

08009a1c <_free_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4605      	mov	r5, r0
 8009a20:	2900      	cmp	r1, #0
 8009a22:	d043      	beq.n	8009aac <_free_r+0x90>
 8009a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a28:	1f0c      	subs	r4, r1, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bfb8      	it	lt
 8009a2e:	18e4      	addlt	r4, r4, r3
 8009a30:	f000 f8d0 	bl	8009bd4 <__malloc_lock>
 8009a34:	4a1e      	ldr	r2, [pc, #120]	; (8009ab0 <_free_r+0x94>)
 8009a36:	6813      	ldr	r3, [r2, #0]
 8009a38:	4610      	mov	r0, r2
 8009a3a:	b933      	cbnz	r3, 8009a4a <_free_r+0x2e>
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	6014      	str	r4, [r2, #0]
 8009a40:	4628      	mov	r0, r5
 8009a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a46:	f000 b8c6 	b.w	8009bd6 <__malloc_unlock>
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	d90b      	bls.n	8009a66 <_free_r+0x4a>
 8009a4e:	6821      	ldr	r1, [r4, #0]
 8009a50:	1862      	adds	r2, r4, r1
 8009a52:	4293      	cmp	r3, r2
 8009a54:	bf01      	itttt	eq
 8009a56:	681a      	ldreq	r2, [r3, #0]
 8009a58:	685b      	ldreq	r3, [r3, #4]
 8009a5a:	1852      	addeq	r2, r2, r1
 8009a5c:	6022      	streq	r2, [r4, #0]
 8009a5e:	6063      	str	r3, [r4, #4]
 8009a60:	6004      	str	r4, [r0, #0]
 8009a62:	e7ed      	b.n	8009a40 <_free_r+0x24>
 8009a64:	4613      	mov	r3, r2
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	b10a      	cbz	r2, 8009a6e <_free_r+0x52>
 8009a6a:	42a2      	cmp	r2, r4
 8009a6c:	d9fa      	bls.n	8009a64 <_free_r+0x48>
 8009a6e:	6819      	ldr	r1, [r3, #0]
 8009a70:	1858      	adds	r0, r3, r1
 8009a72:	42a0      	cmp	r0, r4
 8009a74:	d10b      	bne.n	8009a8e <_free_r+0x72>
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	4401      	add	r1, r0
 8009a7a:	1858      	adds	r0, r3, r1
 8009a7c:	4282      	cmp	r2, r0
 8009a7e:	6019      	str	r1, [r3, #0]
 8009a80:	d1de      	bne.n	8009a40 <_free_r+0x24>
 8009a82:	6810      	ldr	r0, [r2, #0]
 8009a84:	6852      	ldr	r2, [r2, #4]
 8009a86:	4401      	add	r1, r0
 8009a88:	6019      	str	r1, [r3, #0]
 8009a8a:	605a      	str	r2, [r3, #4]
 8009a8c:	e7d8      	b.n	8009a40 <_free_r+0x24>
 8009a8e:	d902      	bls.n	8009a96 <_free_r+0x7a>
 8009a90:	230c      	movs	r3, #12
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	e7d4      	b.n	8009a40 <_free_r+0x24>
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	1821      	adds	r1, r4, r0
 8009a9a:	428a      	cmp	r2, r1
 8009a9c:	bf01      	itttt	eq
 8009a9e:	6811      	ldreq	r1, [r2, #0]
 8009aa0:	6852      	ldreq	r2, [r2, #4]
 8009aa2:	1809      	addeq	r1, r1, r0
 8009aa4:	6021      	streq	r1, [r4, #0]
 8009aa6:	6062      	str	r2, [r4, #4]
 8009aa8:	605c      	str	r4, [r3, #4]
 8009aaa:	e7c9      	b.n	8009a40 <_free_r+0x24>
 8009aac:	bd38      	pop	{r3, r4, r5, pc}
 8009aae:	bf00      	nop
 8009ab0:	20001740 	.word	0x20001740

08009ab4 <_malloc_r>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	1ccd      	adds	r5, r1, #3
 8009ab8:	f025 0503 	bic.w	r5, r5, #3
 8009abc:	3508      	adds	r5, #8
 8009abe:	2d0c      	cmp	r5, #12
 8009ac0:	bf38      	it	cc
 8009ac2:	250c      	movcc	r5, #12
 8009ac4:	2d00      	cmp	r5, #0
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	db01      	blt.n	8009ace <_malloc_r+0x1a>
 8009aca:	42a9      	cmp	r1, r5
 8009acc:	d903      	bls.n	8009ad6 <_malloc_r+0x22>
 8009ace:	230c      	movs	r3, #12
 8009ad0:	6033      	str	r3, [r6, #0]
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	bd70      	pop	{r4, r5, r6, pc}
 8009ad6:	f000 f87d 	bl	8009bd4 <__malloc_lock>
 8009ada:	4a21      	ldr	r2, [pc, #132]	; (8009b60 <_malloc_r+0xac>)
 8009adc:	6814      	ldr	r4, [r2, #0]
 8009ade:	4621      	mov	r1, r4
 8009ae0:	b991      	cbnz	r1, 8009b08 <_malloc_r+0x54>
 8009ae2:	4c20      	ldr	r4, [pc, #128]	; (8009b64 <_malloc_r+0xb0>)
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	b91b      	cbnz	r3, 8009af0 <_malloc_r+0x3c>
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f000 f863 	bl	8009bb4 <_sbrk_r>
 8009aee:	6020      	str	r0, [r4, #0]
 8009af0:	4629      	mov	r1, r5
 8009af2:	4630      	mov	r0, r6
 8009af4:	f000 f85e 	bl	8009bb4 <_sbrk_r>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d124      	bne.n	8009b46 <_malloc_r+0x92>
 8009afc:	230c      	movs	r3, #12
 8009afe:	4630      	mov	r0, r6
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	f000 f868 	bl	8009bd6 <__malloc_unlock>
 8009b06:	e7e4      	b.n	8009ad2 <_malloc_r+0x1e>
 8009b08:	680b      	ldr	r3, [r1, #0]
 8009b0a:	1b5b      	subs	r3, r3, r5
 8009b0c:	d418      	bmi.n	8009b40 <_malloc_r+0x8c>
 8009b0e:	2b0b      	cmp	r3, #11
 8009b10:	d90f      	bls.n	8009b32 <_malloc_r+0x7e>
 8009b12:	600b      	str	r3, [r1, #0]
 8009b14:	18cc      	adds	r4, r1, r3
 8009b16:	50cd      	str	r5, [r1, r3]
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 f85c 	bl	8009bd6 <__malloc_unlock>
 8009b1e:	f104 000b 	add.w	r0, r4, #11
 8009b22:	1d23      	adds	r3, r4, #4
 8009b24:	f020 0007 	bic.w	r0, r0, #7
 8009b28:	1ac3      	subs	r3, r0, r3
 8009b2a:	d0d3      	beq.n	8009ad4 <_malloc_r+0x20>
 8009b2c:	425a      	negs	r2, r3
 8009b2e:	50e2      	str	r2, [r4, r3]
 8009b30:	e7d0      	b.n	8009ad4 <_malloc_r+0x20>
 8009b32:	684b      	ldr	r3, [r1, #4]
 8009b34:	428c      	cmp	r4, r1
 8009b36:	bf16      	itet	ne
 8009b38:	6063      	strne	r3, [r4, #4]
 8009b3a:	6013      	streq	r3, [r2, #0]
 8009b3c:	460c      	movne	r4, r1
 8009b3e:	e7eb      	b.n	8009b18 <_malloc_r+0x64>
 8009b40:	460c      	mov	r4, r1
 8009b42:	6849      	ldr	r1, [r1, #4]
 8009b44:	e7cc      	b.n	8009ae0 <_malloc_r+0x2c>
 8009b46:	1cc4      	adds	r4, r0, #3
 8009b48:	f024 0403 	bic.w	r4, r4, #3
 8009b4c:	42a0      	cmp	r0, r4
 8009b4e:	d005      	beq.n	8009b5c <_malloc_r+0xa8>
 8009b50:	1a21      	subs	r1, r4, r0
 8009b52:	4630      	mov	r0, r6
 8009b54:	f000 f82e 	bl	8009bb4 <_sbrk_r>
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d0cf      	beq.n	8009afc <_malloc_r+0x48>
 8009b5c:	6025      	str	r5, [r4, #0]
 8009b5e:	e7db      	b.n	8009b18 <_malloc_r+0x64>
 8009b60:	20001740 	.word	0x20001740
 8009b64:	20001744 	.word	0x20001744

08009b68 <_realloc_r>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	4607      	mov	r7, r0
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	460e      	mov	r6, r1
 8009b70:	b921      	cbnz	r1, 8009b7c <_realloc_r+0x14>
 8009b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b76:	4611      	mov	r1, r2
 8009b78:	f7ff bf9c 	b.w	8009ab4 <_malloc_r>
 8009b7c:	b922      	cbnz	r2, 8009b88 <_realloc_r+0x20>
 8009b7e:	f7ff ff4d 	bl	8009a1c <_free_r>
 8009b82:	4625      	mov	r5, r4
 8009b84:	4628      	mov	r0, r5
 8009b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b88:	f000 f826 	bl	8009bd8 <_malloc_usable_size_r>
 8009b8c:	42a0      	cmp	r0, r4
 8009b8e:	d20f      	bcs.n	8009bb0 <_realloc_r+0x48>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4638      	mov	r0, r7
 8009b94:	f7ff ff8e 	bl	8009ab4 <_malloc_r>
 8009b98:	4605      	mov	r5, r0
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d0f2      	beq.n	8009b84 <_realloc_r+0x1c>
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	f7ff fb51 	bl	8009248 <memcpy>
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f7ff ff37 	bl	8009a1c <_free_r>
 8009bae:	e7e9      	b.n	8009b84 <_realloc_r+0x1c>
 8009bb0:	4635      	mov	r5, r6
 8009bb2:	e7e7      	b.n	8009b84 <_realloc_r+0x1c>

08009bb4 <_sbrk_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4c05      	ldr	r4, [pc, #20]	; (8009bd0 <_sbrk_r+0x1c>)
 8009bba:	4605      	mov	r5, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	f7f8 fc1c 	bl	80023fc <_sbrk>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d102      	bne.n	8009bce <_sbrk_r+0x1a>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	b103      	cbz	r3, 8009bce <_sbrk_r+0x1a>
 8009bcc:	602b      	str	r3, [r5, #0]
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	20001ee0 	.word	0x20001ee0

08009bd4 <__malloc_lock>:
 8009bd4:	4770      	bx	lr

08009bd6 <__malloc_unlock>:
 8009bd6:	4770      	bx	lr

08009bd8 <_malloc_usable_size_r>:
 8009bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bdc:	1f18      	subs	r0, r3, #4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfbc      	itt	lt
 8009be2:	580b      	ldrlt	r3, [r1, r0]
 8009be4:	18c0      	addlt	r0, r0, r3
 8009be6:	4770      	bx	lr

08009be8 <_init>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	bf00      	nop
 8009bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bee:	bc08      	pop	{r3}
 8009bf0:	469e      	mov	lr, r3
 8009bf2:	4770      	bx	lr

08009bf4 <_fini>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	bf00      	nop
 8009bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfa:	bc08      	pop	{r3}
 8009bfc:	469e      	mov	lr, r3
 8009bfe:	4770      	bx	lr
