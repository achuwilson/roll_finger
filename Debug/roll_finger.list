
roll_finger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000074  0800515c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800515c  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcfd  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020af  00000000  00000000  0002dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00030bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184cd  00000000  00000000  000318b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1c7  00000000  00000000  00049d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ebae  00000000  00000000  00054f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3af2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  000e3b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005010 	.word	0x08005010

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005010 	.word	0x08005010

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <lightupLED>:
    }*/

}

void lightupLED(struct pixel *framebuffer)
{
 800015c:	b480      	push	{r7}
 800015e:	b087      	sub	sp, #28
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000164:	2300      	movs	r3, #0
 8000166:	617b      	str	r3, [r7, #20]
 8000168:	e01a      	b.n	80001a0 <lightupLED+0x44>
	{
		framebuffer[i].r=0;
 800016a:	697a      	ldr	r2, [r7, #20]
 800016c:	4613      	mov	r3, r2
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	4413      	add	r3, r2
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	4413      	add	r3, r2
 8000176:	2200      	movs	r2, #0
 8000178:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 800017a:	697a      	ldr	r2, [r7, #20]
 800017c:	4613      	mov	r3, r2
 800017e:	005b      	lsls	r3, r3, #1
 8000180:	4413      	add	r3, r2
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 800018a:	697a      	ldr	r2, [r7, #20]
 800018c:	4613      	mov	r3, r2
 800018e:	005b      	lsls	r3, r3, #1
 8000190:	4413      	add	r3, r2
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	22ff      	movs	r2, #255	; 0xff
 8000198:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	3301      	adds	r3, #1
 800019e:	617b      	str	r3, [r7, #20]
 80001a0:	697b      	ldr	r3, [r7, #20]
 80001a2:	2b04      	cmp	r3, #4
 80001a4:	dde1      	ble.n	800016a <lightupLED+0xe>
	}
	for(int i=5;i<12;i++)
 80001a6:	2305      	movs	r3, #5
 80001a8:	613b      	str	r3, [r7, #16]
 80001aa:	e01a      	b.n	80001e2 <lightupLED+0x86>
	{
		framebuffer[i].r=0;
 80001ac:	693a      	ldr	r2, [r7, #16]
 80001ae:	4613      	mov	r3, r2
 80001b0:	005b      	lsls	r3, r3, #1
 80001b2:	4413      	add	r3, r2
 80001b4:	687a      	ldr	r2, [r7, #4]
 80001b6:	4413      	add	r3, r2
 80001b8:	2200      	movs	r2, #0
 80001ba:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	4613      	mov	r3, r2
 80001c0:	005b      	lsls	r3, r3, #1
 80001c2:	4413      	add	r3, r2
 80001c4:	687a      	ldr	r2, [r7, #4]
 80001c6:	4413      	add	r3, r2
 80001c8:	22ff      	movs	r2, #255	; 0xff
 80001ca:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 80001cc:	693a      	ldr	r2, [r7, #16]
 80001ce:	4613      	mov	r3, r2
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	4413      	add	r3, r2
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	4413      	add	r3, r2
 80001d8:	2200      	movs	r2, #0
 80001da:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	3301      	adds	r3, #1
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	693b      	ldr	r3, [r7, #16]
 80001e4:	2b0b      	cmp	r3, #11
 80001e6:	dde1      	ble.n	80001ac <lightupLED+0x50>
	}
	for(int i=12;i<17;i++)
 80001e8:	230c      	movs	r3, #12
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e01a      	b.n	8000224 <lightupLED+0xc8>
	{
		framebuffer[i].r=50;
 80001ee:	68fa      	ldr	r2, [r7, #12]
 80001f0:	4613      	mov	r3, r2
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	4413      	add	r3, r2
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	2232      	movs	r2, #50	; 0x32
 80001fc:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=50;
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	4613      	mov	r3, r2
 8000202:	005b      	lsls	r3, r3, #1
 8000204:	4413      	add	r3, r2
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	2232      	movs	r2, #50	; 0x32
 800020c:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=50;
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	4613      	mov	r3, r2
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	4413      	add	r3, r2
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	2232      	movs	r2, #50	; 0x32
 800021c:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<17;i++)
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	2b10      	cmp	r3, #16
 8000228:	dde1      	ble.n	80001ee <lightupLED+0x92>
	}
	for(int i=17;i<24;i++)
 800022a:	2311      	movs	r3, #17
 800022c:	60bb      	str	r3, [r7, #8]
 800022e:	e01a      	b.n	8000266 <lightupLED+0x10a>
	{
		framebuffer[i].r=255;
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	4613      	mov	r3, r2
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	4413      	add	r3, r2
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	4413      	add	r3, r2
 800023c:	22ff      	movs	r2, #255	; 0xff
 800023e:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	4613      	mov	r3, r2
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	4413      	add	r3, r2
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000250:	68ba      	ldr	r2, [r7, #8]
 8000252:	4613      	mov	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4413      	add	r3, r2
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	4413      	add	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	709a      	strb	r2, [r3, #2]
	for(int i=17;i<24;i++)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	3301      	adds	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	2b17      	cmp	r3, #23
 800026a:	dde1      	ble.n	8000230 <lightupLED+0xd4>
	}
}
 800026c:	bf00      	nop
 800026e:	371c      	adds	r7, #28
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr

08000276 <lightupLED2>:
void lightupLED2(struct pixel *framebuffer)
{
 8000276:	b480      	push	{r7}
 8000278:	b087      	sub	sp, #28
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
 8000282:	e01a      	b.n	80002ba <lightupLED2+0x44>
	{
		framebuffer[i].r=0;
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	4613      	mov	r3, r2
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	4413      	add	r3, r2
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	2200      	movs	r2, #0
 8000292:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	4413      	add	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4613      	mov	r3, r2
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	4413      	add	r3, r2
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4413      	add	r3, r2
 80002b0:	22ff      	movs	r2, #255	; 0xff
 80002b2:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	3301      	adds	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	dde1      	ble.n	8000284 <lightupLED2+0xe>
	}
	for(int i=5;i<12;i++)
 80002c0:	2305      	movs	r3, #5
 80002c2:	613b      	str	r3, [r7, #16]
 80002c4:	e01a      	b.n	80002fc <lightupLED2+0x86>
	{
		framebuffer[i].r=0;
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	4613      	mov	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	4413      	add	r3, r2
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	4413      	add	r3, r2
 80002d2:	2200      	movs	r2, #0
 80002d4:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 80002d6:	693a      	ldr	r2, [r7, #16]
 80002d8:	4613      	mov	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4413      	add	r3, r2
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	22ff      	movs	r2, #255	; 0xff
 80002e4:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 80002e6:	693a      	ldr	r2, [r7, #16]
 80002e8:	4613      	mov	r3, r2
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	4413      	add	r3, r2
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	2200      	movs	r2, #0
 80002f4:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	3301      	adds	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	2b0b      	cmp	r3, #11
 8000300:	dde1      	ble.n	80002c6 <lightupLED2+0x50>
	}
	for(int i=12;i<19;i++)
 8000302:	230c      	movs	r3, #12
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	e01a      	b.n	800033e <lightupLED2+0xc8>
	{
		framebuffer[i].r=255;
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	4613      	mov	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	4413      	add	r3, r2
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4413      	add	r3, r2
 8000314:	22ff      	movs	r2, #255	; 0xff
 8000316:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000318:	68fa      	ldr	r2, [r7, #12]
 800031a:	4613      	mov	r3, r2
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4413      	add	r3, r2
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	4413      	add	r3, r2
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4613      	mov	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4413      	add	r3, r2
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	4413      	add	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<19;i++)
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	3301      	adds	r3, #1
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	2b12      	cmp	r3, #18
 8000342:	dde1      	ble.n	8000308 <lightupLED2+0x92>
	}
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
	...

08000350 <open>:
{
	HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
}

void open()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2110      	movs	r1, #16
 8000358:	4813      	ldr	r0, [pc, #76]	; (80003a8 <open+0x58>)
 800035a:	f002 fbef 	bl	8002b3c <HAL_GPIO_WritePin>
		    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2108      	movs	r1, #8
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <open+0x58>)
 8000364:	f002 fbea 	bl	8002b3c <HAL_GPIO_WritePin>
		    		 HAL_Delay(100);
 8000368:	2064      	movs	r0, #100	; 0x64
 800036a:	f001 fafb 	bl	8001964 <HAL_Delay>
		    		 while(adc_value[2]<forcethres)
 800036e:	bf00      	nop
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <open+0x5c>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <open+0x60>)
 8000376:	6812      	ldr	r2, [r2, #0]
 8000378:	4293      	cmp	r3, r2
 800037a:	d3f9      	bcc.n	8000370 <open+0x20>
		    		 {
	   		  		  }
	         	  	HAL_Delay(30);
 800037c:	201e      	movs	r0, #30
 800037e:	f001 faf1 	bl	8001964 <HAL_Delay>
		    	  	while(adc_value[2]<forcethres)
 8000382:	bf00      	nop
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <open+0x5c>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <open+0x60>)
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	4293      	cmp	r3, r2
 800038e:	d3f9      	bcc.n	8000384 <open+0x34>
		      		  {
	 		  		  }
		    	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2110      	movs	r1, #16
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <open+0x58>)
 8000396:	f002 fbd1 	bl	8002b3c <HAL_GPIO_WritePin>
		    	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2108      	movs	r1, #8
 800039e:	4802      	ldr	r0, [pc, #8]	; (80003a8 <open+0x58>)
 80003a0:	f002 fbcc 	bl	8002b3c <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	20000190 	.word	0x20000190
 80003b0:	20000000 	.word	0x20000000

080003b4 <close>:

void close()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2108      	movs	r1, #8
 80003bc:	4813      	ldr	r0, [pc, #76]	; (800040c <close+0x58>)
 80003be:	f002 fbbd 	bl	8002b3c <HAL_GPIO_WritePin>
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2110      	movs	r1, #16
 80003c6:	4811      	ldr	r0, [pc, #68]	; (800040c <close+0x58>)
 80003c8:	f002 fbb8 	bl	8002b3c <HAL_GPIO_WritePin>
		    		  HAL_Delay(100);
 80003cc:	2064      	movs	r0, #100	; 0x64
 80003ce:	f001 fac9 	bl	8001964 <HAL_Delay>
		    		  while(adc_value[2]<forcethres)
 80003d2:	bf00      	nop
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <close+0x5c>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <close+0x60>)
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	4293      	cmp	r3, r2
 80003de:	d3f9      	bcc.n	80003d4 <close+0x20>
		    		  {
		    		  }
		    		  HAL_Delay(30);
 80003e0:	201e      	movs	r0, #30
 80003e2:	f001 fabf 	bl	8001964 <HAL_Delay>
		    		  while(adc_value[2]<forcethres)
 80003e6:	bf00      	nop
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <close+0x5c>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4a09      	ldr	r2, [pc, #36]	; (8000414 <close+0x60>)
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d3f9      	bcc.n	80003e8 <close+0x34>
		    		  {
		    		  }
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <close+0x58>)
 80003fa:	f002 fb9f 	bl	8002b3c <HAL_GPIO_WritePin>
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2108      	movs	r1, #8
 8000402:	4802      	ldr	r0, [pc, #8]	; (800040c <close+0x58>)
 8000404:	f002 fb9a 	bl	8002b3c <HAL_GPIO_WritePin>

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010c00 	.word	0x40010c00
 8000410:	20000190 	.word	0x20000190
 8000414:	20000000 	.word	0x20000000

08000418 <ir_led_on>:

void ir_led_on()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	2120      	movs	r1, #32
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <ir_led_on+0x14>)
 8000422:	f002 fb8b 	bl	8002b3c <HAL_GPIO_WritePin>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010c00 	.word	0x40010c00

08000430 <ir_led_off>:

void ir_led_off()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2120      	movs	r1, #32
 8000438:	4802      	ldr	r0, [pc, #8]	; (8000444 <ir_led_off+0x14>)
 800043a:	f002 fb7f 	bl	8002b3c <HAL_GPIO_WritePin>

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40010c00 	.word	0x40010c00

08000448 <set_mux_fl>:

void set_mux_fl(value)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]


HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, value & 0b0001);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	b2db      	uxtb	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000460:	4813      	ldr	r0, [pc, #76]	; (80004b0 <set_mux_fl+0x68>)
 8000462:	f002 fb6b 	bl	8002b3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value & 0b0010);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	f003 0302 	and.w	r3, r3, #2
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	480e      	ldr	r0, [pc, #56]	; (80004b0 <set_mux_fl+0x68>)
 8000478:	f002 fb60 	bl	8002b3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, value & 0b0100);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	b2db      	uxtb	r3, r3
 8000486:	461a      	mov	r2, r3
 8000488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048c:	4808      	ldr	r0, [pc, #32]	; (80004b0 <set_mux_fl+0x68>)
 800048e:	f002 fb55 	bl	8002b3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, value & 0b1000);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	f003 0308 	and.w	r3, r3, #8
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004a2:	4803      	ldr	r0, [pc, #12]	; (80004b0 <set_mux_fl+0x68>)
 80004a4:	f002 fb4a 	bl	8002b3c <HAL_GPIO_WritePin>
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <set_mux_fr>:
void set_mux_fr(value)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, value & 0b0001);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004cc:	4813      	ldr	r0, [pc, #76]	; (800051c <set_mux_fr+0x68>)
 80004ce:	f002 fb35 	bl	8002b3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, value & 0b0010);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e2:	480e      	ldr	r0, [pc, #56]	; (800051c <set_mux_fr+0x68>)
 80004e4:	f002 fb2a 	bl	8002b3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value & 0b0100);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <set_mux_fr+0x6c>)
 80004fa:	f002 fb1f 	bl	8002b3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value & 0b1000);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <set_mux_fr+0x6c>)
 8000510:	f002 fb14 	bl	8002b3c <HAL_GPIO_WritePin>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40010c00 	.word	0x40010c00
 8000520:	40010800 	.word	0x40010800

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	b0d5      	sub	sp, #340	; 0x154
 8000528:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f001 f9b9 	bl	80018a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f9a1 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 fb71 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000536:	f000 fb39 	bl	8000bac <MX_DMA_Init>
  MX_USART1_UART_Init();
 800053a:	f000 fb0d 	bl	8000b58 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800053e:	f000 f9f5 	bl	800092c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000542:	f000 fa8b 	bl	8000a5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //start ADC conversations
  HAL_ADC_Start_DMA(&hadc1, adc_value, 7);
 8000546:	2207      	movs	r2, #7
 8000548:	49bf      	ldr	r1, [pc, #764]	; (8000848 <main+0x324>)
 800054a:	48c0      	ldr	r0, [pc, #768]	; (800084c <main+0x328>)
 800054c:	f001 fb04 	bl	8001b58 <HAL_ADC_Start_DMA>
  float MSG[50];// = {'\0'};
  long X = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  char buffer[30];

  // IR proximity sensors
  int num_irsensors = 10;
 8000556:	230a      	movs	r3, #10
 8000558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  int irdata_fl[num_irsensors];
 800055c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8000560:	1e43      	subs	r3, r0, #1
 8000562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000566:	4603      	mov	r3, r0
 8000568:	4619      	mov	r1, r3
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	f04f 0300 	mov.w	r3, #0
 8000572:	f04f 0400 	mov.w	r4, #0
 8000576:	0154      	lsls	r4, r2, #5
 8000578:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800057c:	014b      	lsls	r3, r1, #5
 800057e:	4603      	mov	r3, r0
 8000580:	4619      	mov	r1, r3
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	f04f 0400 	mov.w	r4, #0
 800058e:	0154      	lsls	r4, r2, #5
 8000590:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000594:	014b      	lsls	r3, r1, #5
 8000596:	4603      	mov	r3, r0
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	3303      	adds	r3, #3
 800059c:	3307      	adds	r3, #7
 800059e:	08db      	lsrs	r3, r3, #3
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	ebad 0d03 	sub.w	sp, sp, r3
 80005a6:	ab06      	add	r3, sp, #24
 80005a8:	3303      	adds	r3, #3
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int irdata_fr[num_irsensors];
 80005b2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80005b6:	1e43      	subs	r3, r0, #1
 80005b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80005bc:	4603      	mov	r3, r0
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 0200 	mov.w	r2, #0
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	f04f 0400 	mov.w	r4, #0
 80005cc:	0154      	lsls	r4, r2, #5
 80005ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80005d2:	014b      	lsls	r3, r1, #5
 80005d4:	4603      	mov	r3, r0
 80005d6:	4619      	mov	r1, r3
 80005d8:	f04f 0200 	mov.w	r2, #0
 80005dc:	f04f 0300 	mov.w	r3, #0
 80005e0:	f04f 0400 	mov.w	r4, #0
 80005e4:	0154      	lsls	r4, r2, #5
 80005e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80005ea:	014b      	lsls	r3, r1, #5
 80005ec:	4603      	mov	r3, r0
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	3303      	adds	r3, #3
 80005f2:	3307      	adds	r3, #7
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	ebad 0d03 	sub.w	sp, sp, r3
 80005fc:	ab06      	add	r3, sp, #24
 80005fe:	3303      	adds	r3, #3
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  int temp;

  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

      int ch, animation_state = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800060e:	b662      	cpsie	i

      __enable_irq();
      HAL_Delay(200);
 8000610:	20c8      	movs	r0, #200	; 0xc8
 8000612:	f001 f9a7 	bl	8001964 <HAL_Delay>
              led_channels[i].framebuffer = channel_framebuffers[i];
              led_channels[i].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
          }
          */
      //channel 0
      led_channels[0].framebuffer = channel_framebuffers[0];
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4a8d      	ldr	r2, [pc, #564]	; (8000850 <main+0x32c>)
 800061c:	601a      	str	r2, [r3, #0]
      led_channels[0].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	2248      	movs	r2, #72	; 0x48
 8000624:	605a      	str	r2, [r3, #4]

      //channel1
      led_channels[1].framebuffer = channel_framebuffers[1];
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4a8a      	ldr	r2, [pc, #552]	; (8000854 <main+0x330>)
 800062c:	609a      	str	r2, [r3, #8]
      led_channels[1].length = FRAMEBUFFER2_SIZE * sizeof(struct pixel);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	2239      	movs	r2, #57	; 0x39
 8000634:	60da      	str	r2, [r3, #12]

      HAL_Delay(200);
 8000636:	20c8      	movs	r0, #200	; 0xc8
 8000638:	f001 f994 	bl	8001964 <HAL_Delay>
          ws2812_init();
 800063c:	f001 f8e4 	bl	8001808 <ws2812_init>
          HAL_Delay(200);
 8000640:	20c8      	movs	r0, #200	; 0xc8
 8000642:	f001 f98f 	bl	8001964 <HAL_Delay>

       sprintf(MSG, "INIT \r\n ");
 8000646:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800064a:	4a83      	ldr	r2, [pc, #524]	; (8000858 <main+0x334>)
 800064c:	ca07      	ldmia	r2, {r0, r1, r2}
 800064e:	c303      	stmia	r3!, {r0, r1}
 8000650:	701a      	strb	r2, [r3, #0]
      	  HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 8000652:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fd78 	bl	800014c <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000664:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000668:	487c      	ldr	r0, [pc, #496]	; (800085c <main+0x338>)
 800066a:	f003 fc9a 	bl	8003fa2 <HAL_UART_Transmit>


  sprintf(MSG, "INIT 2\r\n ");
 800066e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000672:	4a7b      	ldr	r2, [pc, #492]	; (8000860 <main+0x33c>)
 8000674:	ca07      	ldmia	r2, {r0, r1, r2}
 8000676:	c303      	stmia	r3!, {r0, r1}
 8000678:	801a      	strh	r2, [r3, #0]
   	  HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 800067a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fd64 	bl	800014c <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800068c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000690:	4872      	ldr	r0, [pc, #456]	; (800085c <main+0x338>)
 8000692:	f003 fc86 	bl	8003fa2 <HAL_UART_Transmit>

   //	make_pretty_colors(channel_framebuffers[0], 0,0);
   	lightupLED(channel_framebuffers[0]);
 8000696:	486e      	ldr	r0, [pc, #440]	; (8000850 <main+0x32c>)
 8000698:	f7ff fd60 	bl	800015c <lightupLED>
	lightupLED2(channel_framebuffers[1]);
 800069c:	486d      	ldr	r0, [pc, #436]	; (8000854 <main+0x330>)
 800069e:	f7ff fdea 	bl	8000276 <lightupLED2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a2:	b672      	cpsid	i

   		         // animation_state++;

   		          __disable_irq();
   		       //HAL_Delay(200);
   		          ws2812_refresh(led_channels, GPIOB);
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	496e      	ldr	r1, [pc, #440]	; (8000864 <main+0x340>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 ff52 	bl	8001554 <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 80006b0:	b662      	cpsie	i
	  //adc_value = HAL_ADC_GetValue (&hadc1);
	 // HAL_ADC_Start (&hadc1);
	 // HAL_ADC_PollForConversion (&hadc1, 1000);
	  //	  value2 = HAL_ADC_GetValue (&hadc1);

	  for(int i=0;i<num_irsensors;i++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80006b8:	e044      	b.n	8000744 <main+0x220>
	  {
		  // set IR off
		  ir_led_off();
 80006ba:	f7ff feb9 	bl	8000430 <ir_led_off>

		  // select mux channel
		  set_mux_fl(i);
 80006be:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80006c2:	f7ff fec1 	bl	8000448 <set_mux_fl>
		  set_mux_fr(i);
 80006c6:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80006ca:	f7ff fef3 	bl	80004b4 <set_mux_fr>

		  //small delay
		  HAL_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f001 f948 	bl	8001964 <HAL_Delay>

		  // get initial readings
		  data_fl_noise = adc_value[0];
 80006d4:	4b5c      	ldr	r3, [pc, #368]	; (8000848 <main+0x324>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		  data_fr_noise = adc_value[1];
 80006dc:	4b5a      	ldr	r3, [pc, #360]	; (8000848 <main+0x324>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

		  // set IR on
		  ir_led_on();
 80006e4:	f7ff fe98 	bl	8000418 <ir_led_on>
		  //small delay
		  HAL_Delay(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f001 f93b 	bl	8001964 <HAL_Delay>

		  // get second readings
		  data_fl = adc_value[0];
 80006ee:	4b56      	ldr	r3, [pc, #344]	; (8000848 <main+0x324>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		  data_fr = adc_value[1];
 80006f6:	4b54      	ldr	r3, [pc, #336]	; (8000848 <main+0x324>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		  //calculate the real value and set it in ir_data array
		  data_fl_real = -1*(data_fl - data_fl_noise);
 80006fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		  data_fr_real = -1*(data_fr - data_fr_noise);
 800070c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		  irdata_fl[i] = data_fl_real;
 800071a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800071e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000722:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8000726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  irdata_fr[i] = data_fr_real;
 800072a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800072e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000732:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(int i=0;i<num_irsensors;i++)
 800073a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800073e:	3301      	adds	r3, #1
 8000740:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000744:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800074c:	429a      	cmp	r2, r3
 800074e:	dbb4      	blt.n	80006ba <main+0x196>
	  // set ir led on
	 // ir_led_on();
	  // set the selection ports


	  HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f001 f907 	bl	8001964 <HAL_Delay>
	 //sprintf(MSG, "Data = %d \t %d  \t %d %d  \t%d  \t%d \t%d \t \r\n ",adc_value[0],adc_value[1], adc_value[2], adc_value[3], adc_value[4], adc_value[5], adc_value[6]);
	  //sprintf(MSG, "Data = %d \t %d  \t %d \t %d  \t%d  \t%d \t%d \t \r\n ",irdata_fl[0],irdata_fl[1], irdata_fl[2], irdata_fl[3], irdata_fl[4], irdata_fl[5], irdata_fl[6]);
	  sprintf(MSG, "Data = %d \t %d  \t %d \t %d  \t%d  \t%d \t%d \t \r\n ",irdata_fr[0],irdata_fr[1], irdata_fr[2], irdata_fr[3], irdata_fr[4], irdata_fr[5], irdata_fr[6]);
 8000756:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800075a:	681e      	ldr	r6, [r3, #0]
 800075c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800076e:	68d2      	ldr	r2, [r2, #12]
 8000770:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8000774:	6909      	ldr	r1, [r1, #16]
 8000776:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800077a:	6940      	ldr	r0, [r0, #20]
 800077c:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 8000780:	69a4      	ldr	r4, [r4, #24]
 8000782:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000786:	9404      	str	r4, [sp, #16]
 8000788:	9003      	str	r0, [sp, #12]
 800078a:	9102      	str	r1, [sp, #8]
 800078c:	9201      	str	r2, [sp, #4]
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4632      	mov	r2, r6
 8000794:	4934      	ldr	r1, [pc, #208]	; (8000868 <main+0x344>)
 8000796:	4628      	mov	r0, r5
 8000798:	f004 f828 	bl	80047ec <siprintf>
	  //sprintf(MSG, "Hello Dudes! COUNT = %d \r\n ",X);
	 HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 800079c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fcd3 	bl	800014c <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007ae:	f44f 7316 	mov.w	r3, #600	; 0x258
 80007b2:	482a      	ldr	r0, [pc, #168]	; (800085c <main+0x338>)
 80007b4:	f003 fbf5 	bl	8003fa2 <HAL_UART_Transmit>
	  		  		  {

	  		  		  }

	  	*/
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	482b      	ldr	r0, [pc, #172]	; (800086c <main+0x348>)
 80007c0:	f002 f9bc 	bl	8002b3c <HAL_GPIO_WritePin>
	    if(RX1_Char == 'c') //close
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <main+0x34c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b63      	cmp	r3, #99	; 0x63
 80007ca:	d10a      	bne.n	80007e2 <main+0x2be>
	    {
	    		close();
 80007cc:	f7ff fdf2 	bl	80003b4 <close>

	    		  HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4927      	ldr	r1, [pc, #156]	; (8000870 <main+0x34c>)
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <main+0x338>)
 80007d6:	f003 fc76 	bl	80040c6 <HAL_UART_Receive_IT>
	    		  RX1_Char = 0x00;
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <main+0x34c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	e767      	b.n	80006b2 <main+0x18e>
	    }
	    else if(RX1_Char == 'o') //open
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <main+0x34c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b6f      	cmp	r3, #111	; 0x6f
 80007e8:	d10a      	bne.n	8000800 <main+0x2dc>
	    {
	    		open();
 80007ea:	f7ff fdb1 	bl	8000350 <open>

	    	    HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 80007ee:	2201      	movs	r2, #1
 80007f0:	491f      	ldr	r1, [pc, #124]	; (8000870 <main+0x34c>)
 80007f2:	481a      	ldr	r0, [pc, #104]	; (800085c <main+0x338>)
 80007f4:	f003 fc67 	bl	80040c6 <HAL_UART_Receive_IT>
	    	    RX1_Char = 0x00;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <main+0x34c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e758      	b.n	80006b2 <main+0x18e>
	    }
	    else if(RX1_Char == 'b')  //brake
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <main+0x34c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b62      	cmp	r3, #98	; 0x62
 8000806:	d115      	bne.n	8000834 <main+0x310>
	    	    {
	    	    	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2110      	movs	r1, #16
 800080c:	4815      	ldr	r0, [pc, #84]	; (8000864 <main+0x340>)
 800080e:	f002 f995 	bl	8002b3c <HAL_GPIO_WritePin>
	    	    		  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	4813      	ldr	r0, [pc, #76]	; (8000864 <main+0x340>)
 8000818:	f002 f990 	bl	8002b3c <HAL_GPIO_WritePin>
	    	    		  	  HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	; 0x64
 800081e:	f001 f8a1 	bl	8001964 <HAL_Delay>

	    	    		  	HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	4912      	ldr	r1, [pc, #72]	; (8000870 <main+0x34c>)
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <main+0x338>)
 8000828:	f003 fc4d 	bl	80040c6 <HAL_UART_Receive_IT>
	    	    		  	RX1_Char = 0x00;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <main+0x34c>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	e73e      	b.n	80006b2 <main+0x18e>

	    	    }
	    else
	    {	//clear buffer by reading out
	    	HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	490e      	ldr	r1, [pc, #56]	; (8000870 <main+0x34c>)
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <main+0x338>)
 800083a:	f003 fc44 	bl	80040c6 <HAL_UART_Receive_IT>
	    		    	    		  	RX1_Char = 0x00;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <main+0x34c>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<num_irsensors;i++)
 8000844:	e735      	b.n	80006b2 <main+0x18e>
 8000846:	bf00      	nop
 8000848:	20000190 	.word	0x20000190
 800084c:	200001ac 	.word	0x200001ac
 8000850:	200002a8 	.word	0x200002a8
 8000854:	200002f0 	.word	0x200002f0
 8000858:	08005028 	.word	0x08005028
 800085c:	200001dc 	.word	0x200001dc
 8000860:	08005034 	.word	0x08005034
 8000864:	40010c00 	.word	0x40010c00
 8000868:	08005040 	.word	0x08005040
 800086c:	40010800 	.word	0x40010800
 8000870:	20000090 	.word	0x20000090

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087e:	2228      	movs	r2, #40	; 0x28
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f003 ffaa 	bl	80047dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b2:	2301      	movs	r3, #1
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80008c0:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 f94e 	bl	8002b6c <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008d6:	f000 fa25 	bl	8000d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fbb8 	bl	800306c <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000902:	f000 fa0f 	bl	8000d24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000906:	2302      	movs	r3, #2
 8000908:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800090a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800090e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fd46 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800091e:	f000 fa01 	bl	8000d24 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	; 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800093c:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <MX_ADC1_Init+0x128>)
 800093e:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <MX_ADC1_Init+0x12c>)
 8000940:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000942:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <MX_ADC1_Init+0x128>)
 8000944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000948:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800094a:	4b42      	ldr	r3, [pc, #264]	; (8000a54 <MX_ADC1_Init+0x128>)
 800094c:	2201      	movs	r2, #1
 800094e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000950:	4b40      	ldr	r3, [pc, #256]	; (8000a54 <MX_ADC1_Init+0x128>)
 8000952:	2200      	movs	r2, #0
 8000954:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000956:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <MX_ADC1_Init+0x128>)
 8000958:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800095c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <MX_ADC1_Init+0x128>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <MX_ADC1_Init+0x128>)
 8000966:	2207      	movs	r2, #7
 8000968:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096a:	483a      	ldr	r0, [pc, #232]	; (8000a54 <MX_ADC1_Init+0x128>)
 800096c:	f001 f81c 	bl	80019a8 <HAL_ADC_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000976:	f000 f9d5 	bl	8000d24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097e:	2301      	movs	r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000982:	2304      	movs	r3, #4
 8000984:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4832      	ldr	r0, [pc, #200]	; (8000a54 <MX_ADC1_Init+0x128>)
 800098c:	f001 f9de 	bl	8001d4c <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f9c5 	bl	8000d24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800099a:	2301      	movs	r3, #1
 800099c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800099e:	2302      	movs	r3, #2
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	482b      	ldr	r0, [pc, #172]	; (8000a54 <MX_ADC1_Init+0x128>)
 80009a8:	f001 f9d0 	bl	8001d4c <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80009b2:	f000 f9b7 	bl	8000d24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009ba:	2303      	movs	r3, #3
 80009bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80009be:	2305      	movs	r3, #5
 80009c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	4823      	ldr	r0, [pc, #140]	; (8000a54 <MX_ADC1_Init+0x128>)
 80009c8:	f001 f9c0 	bl	8001d4c <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009d2:	f000 f9a7 	bl	8000d24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009d6:	2303      	movs	r3, #3
 80009d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009da:	2304      	movs	r3, #4
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80009de:	2304      	movs	r3, #4
 80009e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	481b      	ldr	r0, [pc, #108]	; (8000a54 <MX_ADC1_Init+0x128>)
 80009e8:	f001 f9b0 	bl	8001d4c <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80009f2:	f000 f997 	bl	8000d24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009f6:	2304      	movs	r3, #4
 80009f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009fa:	2305      	movs	r3, #5
 80009fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <MX_ADC1_Init+0x128>)
 8000a04:	f001 f9a2 	bl	8001d4c <HAL_ADC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000a0e:	f000 f989 	bl	8000d24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a12:	2307      	movs	r3, #7
 8000a14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a16:	2306      	movs	r3, #6
 8000a18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_ADC1_Init+0x128>)
 8000a20:	f001 f994 	bl	8001d4c <HAL_ADC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000a2a:	f000 f97b 	bl	8000d24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a2e:	2306      	movs	r3, #6
 8000a30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_ADC1_Init+0x128>)
 8000a3c:	f001 f986 	bl	8001d4c <HAL_ADC_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000a46:	f000 f96d 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200001ac 	.word	0x200001ac
 8000a58:	40012400 	.word	0x40012400

08000a5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08e      	sub	sp, #56	; 0x38
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a8c:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab4:	4827      	ldr	r0, [pc, #156]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000ab6:	f002 fd2b 	bl	8003510 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ac0:	f000 f930 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4820      	ldr	r0, [pc, #128]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000ad2:	f002 fe83 	bl	80037dc <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000adc:	f000 f922 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ae0:	481c      	ldr	r0, [pc, #112]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000ae2:	f002 fd64 	bl	80035ae <HAL_TIM_PWM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000aec:	f000 f91a 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4619      	mov	r1, r3
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000b00:	f003 f9a4 	bl	8003e4c <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b0a:	f000 f90b 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0e:	2360      	movs	r3, #96	; 0x60
 8000b10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	4619      	mov	r1, r3
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000b26:	f002 fd9b 	bl	8003660 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b30:	f000 f8f8 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2204      	movs	r2, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_TIM2_Init+0xf8>)
 8000b3c:	f002 fd90 	bl	8003660 <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000b46:	f000 f8ed 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3738      	adds	r7, #56	; 0x38
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000260 	.word	0x20000260

08000b58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART1_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART1_UART_Init+0x4c>)
 8000b90:	f003 f9ba 	bl	8003f08 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f8c3 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200001dc 	.word	0x200001dc
 8000ba8:	40013800 	.word	0x40013800

08000bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_DMA_Init+0x68>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <MX_DMA_Init+0x68>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_DMA_Init+0x68>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	200b      	movs	r0, #11
 8000bd0:	f001 fb7d 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bd4:	200b      	movs	r0, #11
 8000bd6:	f001 fb96 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	200c      	movs	r0, #12
 8000be0:	f001 fb75 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000be4:	200c      	movs	r0, #12
 8000be6:	f001 fb8e 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f001 fb6d 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bf4:	200f      	movs	r0, #15
 8000bf6:	f001 fb86 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2011      	movs	r0, #17
 8000c00:	f001 fb65 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c04:	2011      	movs	r0, #17
 8000c06:	f001 fb7e 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a38      	ldr	r2, [pc, #224]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a2c      	ldr	r2, [pc, #176]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c92:	4821      	ldr	r0, [pc, #132]	; (8000d18 <MX_GPIO_Init+0x100>)
 8000c94:	f001 ff52 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f64f 413b 	movw	r1, #64571	; 0xfc3b
 8000c9e:	481f      	ldr	r0, [pc, #124]	; (8000d1c <MX_GPIO_Init+0x104>)
 8000ca0:	f001 ff4c 	bl	8002b3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000caa:	481d      	ldr	r0, [pc, #116]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000cac:	f001 ff46 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4813      	ldr	r0, [pc, #76]	; (8000d18 <MX_GPIO_Init+0x100>)
 8000cca:	f001 fddd 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000cce:	f64f 433b 	movw	r3, #64571	; 0xfc3b
 8000cd2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_GPIO_Init+0x104>)
 8000ce8:	f001 fdce 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000cec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000cf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4619      	mov	r1, r3
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000d06:	f001 fdbf 	bl	8002888 <HAL_GPIO_Init>

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40010800 	.word	0x40010800

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_MspInit+0x60>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_MspInit+0x60>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000

08000d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <HAL_ADC_MspInit+0xbc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d149      	bne.n	8000e48 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <HAL_ADC_MspInit+0xc0>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a26      	ldr	r2, [pc, #152]	; (8000e54 <HAL_ADC_MspInit+0xc0>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <HAL_ADC_MspInit+0xc0>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_ADC_MspInit+0xc0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <HAL_ADC_MspInit+0xc0>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <HAL_ADC_MspInit+0xc0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000de4:	23ff      	movs	r3, #255	; 0xff
 8000de6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de8:	2303      	movs	r3, #3
 8000dea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	4819      	ldr	r0, [pc, #100]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000df4:	f001 fd48 	bl	8002888 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000dfa:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_ADC_MspInit+0xcc>)
 8000dfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e22:	2220      	movs	r2, #32
 8000e24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e2e:	f001 fa85 	bl	800233c <HAL_DMA_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e38:	f7ff ff74 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e40:	621a      	str	r2, [r3, #32]
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40012400 	.word	0x40012400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	2000021c 	.word	0x2000021c
 8000e60:	40020008 	.word	0x40020008

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	f040 808d 	bne.w	8000f92 <HAL_TIM_Base_MspInit+0x12e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <HAL_TIM_Base_MspInit+0x138>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	4a47      	ldr	r2, [pc, #284]	; (8000f9c <HAL_TIM_Base_MspInit+0x138>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	61d3      	str	r3, [r2, #28]
 8000e84:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <HAL_TIM_Base_MspInit+0x138>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000e92:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <HAL_TIM_Base_MspInit+0x140>)
 8000e94:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000e98:	2210      	movs	r2, #16
 8000e9a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000eba:	2220      	movs	r2, #32
 8000ebc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000ec0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ec4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000ec6:	4836      	ldr	r0, [pc, #216]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000ec8:	f001 fa38 	bl	800233c <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000ed2:	f7ff ff27 	bl	8000d24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
 8000edc:	4a30      	ldr	r2, [pc, #192]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a2e      	ldr	r2, [pc, #184]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <HAL_TIM_Base_MspInit+0x13c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000ef0:	4a2e      	ldr	r2, [pc, #184]	; (8000fac <HAL_TIM_Base_MspInit+0x148>)
 8000ef2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f14:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000f18:	2220      	movs	r2, #32
 8000f1a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000f1e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000f24:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000f26:	f001 fa09 	bl	800233c <HAL_DMA_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8000f30:	f7ff fef8 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_TIM_Base_MspInit+0x144>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_TIM_Base_MspInit+0x150>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f48:	2210      	movs	r2, #16
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5e:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f70:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f78:	f001 f9e0 	bl	800233c <HAL_DMA_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_TIM_Base_MspInit+0x122>
    {
      Error_Handler();
 8000f82:	f7ff fecf 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f8a:	621a      	str	r2, [r3, #32]
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_TIM_Base_MspInit+0x14c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	2000014c 	.word	0x2000014c
 8000fa4:	40020080 	.word	0x40020080
 8000fa8:	200000c4 	.word	0x200000c4
 8000fac:	40020058 	.word	0x40020058
 8000fb0:	20000108 	.word	0x20000108
 8000fb4:	4002001c 	.word	0x4002001c

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_UART_MspInit+0x9c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d139      	bne.n	800104c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_UART_MspInit+0xa0>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_UART_MspInit+0xa0>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_UART_MspInit+0xa0>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_UART_MspInit+0xa0>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_UART_MspInit+0xa0>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_UART_MspInit+0xa0>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4619      	mov	r1, r3
 800101c:	480f      	ldr	r0, [pc, #60]	; (800105c <HAL_UART_MspInit+0xa4>)
 800101e:	f001 fc33 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001026:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4619      	mov	r1, r3
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <HAL_UART_MspInit+0xa4>)
 8001038:	f001 fc26 	bl	8002888 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2025      	movs	r0, #37	; 0x25
 8001042:	f001 f944 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001046:	2025      	movs	r0, #37	; 0x25
 8001048:	f001 f95d 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40013800 	.word	0x40013800
 8001058:	40021000 	.word	0x40021000
 800105c:	40010800 	.word	0x40010800

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <HardFault_Handler+0x4>

08001072 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <MemManage_Handler+0x4>

08001078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <BusFault_Handler+0x4>

0800107e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <UsageFault_Handler+0x4>

08001084 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 fc3e 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Channel1_IRQHandler+0x10>)
 80010ba:	f001 fab1 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000021c 	.word	0x2000021c

080010c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <DMA1_Channel2_IRQHandler+0x10>)
 80010ce:	f001 faa7 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000108 	.word	0x20000108

080010dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA1_Channel5_IRQHandler+0x10>)
 80010e2:	f001 fa9d 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000c4 	.word	0x200000c4

080010f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Channel7_IRQHandler+0x10>)
 80010f6:	f001 fa93 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000014c 	.word	0x2000014c

08001104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART1_IRQHandler+0x10>)
 800110a:	f003 f831 	bl	8004170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001dc 	.word	0x200001dc

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f003 fb1e 	bl	8004788 <__errno>
 800114c:	4602      	mov	r2, r0
 800114e:	230c      	movs	r3, #12
 8001150:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20005000 	.word	0x20005000
 8001178:	00000400 	.word	0x00000400
 800117c:	20000094 	.word	0x20000094
 8001180:	20000458 	.word	0x20000458

08001184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <ws2812_timer2_init>:
    WS2812_CH14_GPIO,
    WS2812_CH15_GPIO
};

static void ws2812_timer2_init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	619a      	str	r2, [r3, #24]

    htimer2.Instance = TIM2;
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <ws2812_timer2_init+0xc8>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
    htimer2.Init.Prescaler = 0;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <ws2812_timer2_init+0xc8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <ws2812_timer2_init+0xc8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <ws2812_timer2_init+0xc8>)
 80011d6:	2246      	movs	r2, #70	; 0x46
 80011d8:	60da      	str	r2, [r3, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <ws2812_timer2_init+0xc8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <ws2812_timer2_init+0xc8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer2);
 80011e6:	481c      	ldr	r0, [pc, #112]	; (8001258 <ws2812_timer2_init+0xc8>)
 80011e8:	f002 f992 	bl	8003510 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <ws2812_timer2_init+0xc8>)
 80011fa:	f002 faef 	bl	80037dc <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <ws2812_timer2_init+0xc8>)
 8001200:	f002 f9d5 	bl	80035ae <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4619      	mov	r1, r3
 8001212:	4811      	ldr	r0, [pc, #68]	; (8001258 <ws2812_timer2_init+0xc8>)
 8001214:	f002 fe1a 	bl	8003e4c <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 800121c:	2316      	movs	r3, #22
 800121e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <ws2812_timer2_init+0xc8>)
 8001230:	f002 fa16 	bl	8003660 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001234:	2360      	movs	r3, #96	; 0x60
 8001236:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8001238:	232c      	movs	r3, #44	; 0x2c
 800123a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2204      	movs	r2, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <ws2812_timer2_init+0xc8>)
 800124c:	f002 fa08 	bl	8003660 <HAL_TIM_PWM_ConfigChannel>
}
 8001250:	bf00      	nop
 8001252:	3738      	adds	r7, #56	; 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000404 	.word	0x20000404

0800125c <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001264:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <ws2812_dma_start+0x13c>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <ws2812_dma_start+0x13c>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	61d3      	str	r3, [r2, #28]
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <ws2812_dma_start+0x13c>)
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_update.Instance = DMA1_Channel2;
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <ws2812_dma_start+0x140>)
 800127e:	4a48      	ldr	r2, [pc, #288]	; (80013a0 <ws2812_dma_start+0x144>)
 8001280:	601a      	str	r2, [r3, #0]
    hdma_tim2_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001282:	4b46      	ldr	r3, [pc, #280]	; (800139c <ws2812_dma_start+0x140>)
 8001284:	2210      	movs	r2, #16
 8001286:	605a      	str	r2, [r3, #4]
    hdma_tim2_update.Init.PeriphInc = DMA_PINC_DISABLE;
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <ws2812_dma_start+0x140>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
    hdma_tim2_update.Init.MemInc = DMA_MINC_DISABLE;
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <ws2812_dma_start+0x140>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
    hdma_tim2_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001294:	4b41      	ldr	r3, [pc, #260]	; (800139c <ws2812_dma_start+0x140>)
 8001296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129a:	611a      	str	r2, [r3, #16]
    hdma_tim2_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <ws2812_dma_start+0x140>)
 800129e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a2:	615a      	str	r2, [r3, #20]
    hdma_tim2_update.Init.Mode = DMA_CIRCULAR;
 80012a4:	4b3d      	ldr	r3, [pc, #244]	; (800139c <ws2812_dma_start+0x140>)
 80012a6:	2220      	movs	r2, #32
 80012a8:	619a      	str	r2, [r3, #24]
    hdma_tim2_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <ws2812_dma_start+0x140>)
 80012ac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80012b0:	61da      	str	r2, [r3, #28]

    /* TIM2_CH1 Init */
    hdma_tim2_pwm_ch1.Instance = DMA1_Channel5;
 80012b2:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <ws2812_dma_start+0x148>)
 80012b4:	4a3c      	ldr	r2, [pc, #240]	; (80013a8 <ws2812_dma_start+0x14c>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b8:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <ws2812_dma_start+0x148>)
 80012ba:	2210      	movs	r2, #16
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <ws2812_dma_start+0x148>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <ws2812_dma_start+0x148>)
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <ws2812_dma_start+0x148>)
 80012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <ws2812_dma_start+0x148>)
 80012d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch1.Init.Mode = DMA_CIRCULAR;
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <ws2812_dma_start+0x148>)
 80012dc:	2220      	movs	r2, #32
 80012de:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <ws2812_dma_start+0x148>)
 80012e2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80012e6:	61da      	str	r2, [r3, #28]

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_pwm_ch2.Instance = DMA1_Channel7;
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <ws2812_dma_start+0x150>)
 80012ea:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <ws2812_dma_start+0x154>)
 80012ec:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ee:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <ws2812_dma_start+0x150>)
 80012f0:	2210      	movs	r2, #16
 80012f2:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <ws2812_dma_start+0x150>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch2.Init.MemInc = DMA_MINC_DISABLE;
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <ws2812_dma_start+0x150>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <ws2812_dma_start+0x150>)
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <ws2812_dma_start+0x150>)
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch2.Init.Mode = DMA_CIRCULAR;
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <ws2812_dma_start+0x150>)
 8001312:	2220      	movs	r2, #32
 8001314:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <ws2812_dma_start+0x150>)
 8001318:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800131c:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim2_update);
 800131e:	481f      	ldr	r0, [pc, #124]	; (800139c <ws2812_dma_start+0x140>)
 8001320:	f001 f80c 	bl	800233c <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch1);
 8001324:	481f      	ldr	r0, [pc, #124]	; (80013a4 <ws2812_dma_start+0x148>)
 8001326:	f001 f809 	bl	800233c <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch2);
 800132a:	4820      	ldr	r0, [pc, #128]	; (80013ac <ws2812_dma_start+0x150>)
 800132c:	f001 f806 	bl	800233c <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim2_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 8001330:	4920      	ldr	r1, [pc, #128]	; (80013b4 <ws2812_dma_start+0x158>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3310      	adds	r3, #16
 8001336:	461a      	mov	r2, r3
 8001338:	2310      	movs	r3, #16
 800133a:	4818      	ldr	r0, [pc, #96]	; (800139c <ws2812_dma_start+0x140>)
 800133c:	f001 f858 	bl	80023f0 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_pwm_ch1, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 8001340:	491d      	ldr	r1, [pc, #116]	; (80013b8 <ws2812_dma_start+0x15c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3314      	adds	r3, #20
 8001346:	461a      	mov	r2, r3
 8001348:	2310      	movs	r3, #16
 800134a:	4816      	ldr	r0, [pc, #88]	; (80013a4 <ws2812_dma_start+0x148>)
 800134c:	f001 f850 	bl	80023f0 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim2_pwm_ch2, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 8001350:	4918      	ldr	r1, [pc, #96]	; (80013b4 <ws2812_dma_start+0x158>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3314      	adds	r3, #20
 8001356:	461a      	mov	r2, r3
 8001358:	2310      	movs	r3, #16
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <ws2812_dma_start+0x150>)
 800135c:	f001 f848 	bl	80023f0 <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <ws2812_dma_start+0x160>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <ws2812_dma_start+0x160>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800136e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC1);
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <ws2812_dma_start+0x160>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <ws2812_dma_start+0x160>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800137e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC2);
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <ws2812_dma_start+0x160>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <ws2812_dma_start+0x160>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800138e:	60da      	str	r2, [r3, #12]
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	200003c0 	.word	0x200003c0
 80013a0:	4002001c 	.word	0x4002001c
 80013a4:	2000037c 	.word	0x2000037c
 80013a8:	40020058 	.word	0x40020058
 80013ac:	20000338 	.word	0x20000338
 80013b0:	40020080 	.word	0x40020080
 80013b4:	20000098 	.word	0x20000098
 80013b8:	2000009c 	.word	0x2000009c
 80013bc:	20000404 	.word	0x20000404

080013c0 <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
    /* If all channels are the same length, we can skip the 'pos' range check, and speed up our
     * inner loop *substantially*
     */

    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	da07      	bge.n	80013e4 <get_channel_byte+0x24>
        return channel->framebuffer[pos] ^ 0xff;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	43db      	mvns	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	e000      	b.n	80013e6 <get_channel_byte+0x26>

    return 0xff;
 80013e4:	23ff      	movs	r3, #255	; 0xff
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 80013f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f4:	b087      	sub	sp, #28
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	f04f 0b00 	mov.w	fp, #0
 8001406:	2600      	movs	r6, #0
 8001408:	2500      	movs	r5, #0
 800140a:	2400      	movs	r4, #0
 800140c:	f04f 0a00 	mov.w	sl, #0
 8001410:	f04f 0900 	mov.w	r9, #0
 8001414:	f04f 0800 	mov.w	r8, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffd0 	bl	80013c0 <get_channel_byte>
 8001420:	4603      	mov	r3, r0
 8001422:	75fb      	strb	r3, [r7, #23]
 8001424:	7df8      	ldrb	r0, [r7, #23]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	469e      	mov	lr, r3
 800142a:	46dc      	mov	ip, fp
 800142c:	4651      	mov	r1, sl
 800142e:	464a      	mov	r2, r9
 8001430:	4643      	mov	r3, r8
 8001432:	4680      	mov	r8, r0
 8001434:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 8001438:	f360 0e00 	bfi	lr, r0, #0, #1
 800143c:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8001440:	f360 0c00 	bfi	ip, r0, #0, #1
 8001444:	f3c8 1040 	ubfx	r0, r8, #5, #1
 8001448:	f360 0600 	bfi	r6, r0, #0, #1
 800144c:	f3c8 1000 	ubfx	r0, r8, #4, #1
 8001450:	f360 0500 	bfi	r5, r0, #0, #1
 8001454:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 8001458:	f360 0400 	bfi	r4, r0, #0, #1
 800145c:	f3c8 0080 	ubfx	r0, r8, #2, #1
 8001460:	f360 0100 	bfi	r1, r0, #0, #1
 8001464:	f3c8 0040 	ubfx	r0, r8, #1, #1
 8001468:	f360 0200 	bfi	r2, r0, #0, #1
 800146c:	f3c8 0000 	ubfx	r0, r8, #0, #1
 8001470:	f360 0300 	bfi	r3, r0, #0, #1
 8001474:	fa1f f08e 	uxth.w	r0, lr
 8001478:	6038      	str	r0, [r7, #0]
 800147a:	fa1f fb8c 	uxth.w	fp, ip
 800147e:	b2b6      	uxth	r6, r6
 8001480:	b2ad      	uxth	r5, r5
 8001482:	b2a4      	uxth	r4, r4
 8001484:	fa1f fa81 	uxth.w	sl, r1
 8001488:	fa1f f982 	uxth.w	r9, r2
 800148c:	fa1f f883 	uxth.w	r8, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3308      	adds	r3, #8
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff92 	bl	80013c0 <get_channel_byte>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	4618      	mov	r0, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	469e      	mov	lr, r3
 80014a8:	46dc      	mov	ip, fp
 80014aa:	4651      	mov	r1, sl
 80014ac:	464a      	mov	r2, r9
 80014ae:	4643      	mov	r3, r8
 80014b0:	4680      	mov	r8, r0
 80014b2:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 80014b6:	f360 0e41 	bfi	lr, r0, #1, #1
 80014ba:	f3c8 1080 	ubfx	r0, r8, #6, #1
 80014be:	f360 0c41 	bfi	ip, r0, #1, #1
 80014c2:	f3c8 1040 	ubfx	r0, r8, #5, #1
 80014c6:	f360 0641 	bfi	r6, r0, #1, #1
 80014ca:	f3c8 1000 	ubfx	r0, r8, #4, #1
 80014ce:	f360 0541 	bfi	r5, r0, #1, #1
 80014d2:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 80014d6:	f360 0441 	bfi	r4, r0, #1, #1
 80014da:	f3c8 0080 	ubfx	r0, r8, #2, #1
 80014de:	f360 0141 	bfi	r1, r0, #1, #1
 80014e2:	f3c8 0040 	ubfx	r0, r8, #1, #1
 80014e6:	f360 0241 	bfi	r2, r0, #1, #1
 80014ea:	f3c8 0000 	ubfx	r0, r8, #0, #1
 80014ee:	f360 0341 	bfi	r3, r0, #1, #1
 80014f2:	fa1f f08e 	uxth.w	r0, lr
 80014f6:	fa1f fb8c 	uxth.w	fp, ip
 80014fa:	b2b6      	uxth	r6, r6
 80014fc:	b2ad      	uxth	r5, r5
 80014fe:	b2a4      	uxth	r4, r4
 8001500:	fa1f fa81 	uxth.w	sl, r1
 8001504:	fa1f f982 	uxth.w	r9, r2
 8001508:	fa1f f883 	uxth.w	r8, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4602      	mov	r2, r0
 8001510:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3302      	adds	r3, #2
 8001516:	465a      	mov	r2, fp
 8001518:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3304      	adds	r3, #4
 800151e:	4632      	mov	r2, r6
 8001520:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3306      	adds	r3, #6
 8001526:	462a      	mov	r2, r5
 8001528:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3308      	adds	r3, #8
 800152e:	4622      	mov	r2, r4
 8001530:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	330a      	adds	r3, #10
 8001536:	4652      	mov	r2, sl
 8001538:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	330c      	adds	r3, #12
 800153e:	464a      	mov	r2, r9
 8001540:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	330e      	adds	r3, #14
 8001546:	4642      	mov	r2, r8
 8001548:	801a      	strh	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001554 <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 800156a:	4b80      	ldr	r3, [pc, #512]	; (800176c <ws2812_refresh+0x218>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	e00e      	b.n	8001594 <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4a7d      	ldr	r2, [pc, #500]	; (8001770 <ws2812_refresh+0x21c>)
 800157c:	4413      	add	r3, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6979      	ldr	r1, [r7, #20]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff34 	bl	80013f0 <fill_dma_buffer>
        pos++;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3301      	adds	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	3308      	adds	r3, #8
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	dded      	ble.n	8001576 <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	e027      	b.n	80015f0 <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	da05      	bge.n	80015bc <ws2812_refresh+0x68>
            max_length = channels[i].length;
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00f      	beq.n	80015ea <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 80015ca:	4a6a      	ldr	r2, [pc, #424]	; (8001774 <ws2812_refresh+0x220>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2301      	movs	r3, #1
 80015d6:	4093      	lsls	r3, r2
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4b64      	ldr	r3, [pc, #400]	; (800176c <ws2812_refresh+0x218>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b61      	ldr	r3, [pc, #388]	; (800176c <ws2812_refresh+0x218>)
 80015e8:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	3301      	adds	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	ddd4      	ble.n	80015a0 <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	3302      	adds	r3, #2
 80015fa:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	3303      	adds	r3, #3
 8001600:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8001602:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <ws2812_refresh+0x224>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <ws2812_refresh+0x224>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC1);
 8001612:	4b59      	ldr	r3, [pc, #356]	; (8001778 <ws2812_refresh+0x224>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <ws2812_refresh+0x224>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001620:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC2);
 8001622:	4b55      	ldr	r3, [pc, #340]	; (8001778 <ws2812_refresh+0x224>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <ws2812_refresh+0x224>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001630:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer2);
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <ws2812_refresh+0x224>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	f241 1311 	movw	r3, #4369	; 0x1111
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10f      	bne.n	8001662 <ws2812_refresh+0x10e>
 8001642:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <ws2812_refresh+0x224>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a1a      	ldr	r2, [r3, #32]
 8001648:	f240 4344 	movw	r3, #1092	; 0x444
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d107      	bne.n	8001662 <ws2812_refresh+0x10e>
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <ws2812_refresh+0x224>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <ws2812_refresh+0x224>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <ws2812_refresh+0x218>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer2);
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <ws2812_refresh+0x224>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <ws2812_refresh+0x224>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	e00f      	b.n	80016a2 <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer2, TIM_FLAG_UPDATE));
 8001682:	bf00      	nop
 8001684:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <ws2812_refresh+0x224>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b01      	cmp	r3, #1
 8001690:	d1f8      	bne.n	8001684 <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer2, TIM_FLAG_UPDATE);
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <ws2812_refresh+0x224>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f06f 0201 	mvn.w	r2, #1
 800169a:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	3301      	adds	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2be0      	cmp	r3, #224	; 0xe0
 80016a6:	ddec      	ble.n	8001682 <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer2);
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <ws2812_refresh+0x224>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10f      	bne.n	80016d8 <ws2812_refresh+0x184>
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <ws2812_refresh+0x224>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a1a      	ldr	r2, [r3, #32]
 80016be:	f240 4344 	movw	r3, #1092	; 0x444
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d107      	bne.n	80016d8 <ws2812_refresh+0x184>
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <ws2812_refresh+0x224>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <ws2812_refresh+0x224>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f7ff fdbf 	bl	800125c <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer2, __HAL_TIM_GET_AUTORELOAD(&htimer2) - 10);
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <ws2812_refresh+0x224>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <ws2812_refresh+0x224>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3a0a      	subs	r2, #10
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 80016ec:	4b23      	ldr	r3, [pc, #140]	; (800177c <ws2812_refresh+0x228>)
 80016ee:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80016f2:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer2);
 80016f4:	4b20      	ldr	r3, [pc, #128]	; (8001778 <ws2812_refresh+0x224>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <ws2812_refresh+0x224>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_ISR_TCIF5 | DMA_ISR_HTIF5))) {
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <ws2812_refresh+0x228>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d103      	bne.n	8001718 <ws2812_refresh+0x1c4>
            cycles++;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	3301      	adds	r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
            continue;
 8001716:	e027      	b.n	8001768 <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <ws2812_refresh+0x21c>)
 800171a:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_ISR_TCIF5)
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <ws2812_refresh+0x228>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3310      	adds	r3, #16
 800172c:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <ws2812_refresh+0x228>)
 8001730:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001734:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	e00e      	b.n	800175a <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6979      	ldr	r1, [r7, #20]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fe51 	bl	80013f0 <fill_dma_buffer>
            pos++;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	3308      	adds	r3, #8
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b07      	cmp	r3, #7
 800175e:	dded      	ble.n	800173c <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	dc0b      	bgt.n	8001780 <ws2812_refresh+0x22c>
    while(1) {
 8001768:	e7cc      	b.n	8001704 <ws2812_refresh+0x1b0>
 800176a:	bf00      	nop
 800176c:	20000098 	.word	0x20000098
 8001770:	2000009c 	.word	0x2000009c
 8001774:	0800509c 	.word	0x0800509c
 8001778:	20000404 	.word	0x20000404
 800177c:	40020000 	.word	0x40020000
            break;
 8001780:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer2);
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <ws2812_refresh+0x2a0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	f241 1311 	movw	r3, #4369	; 0x1111
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <ws2812_refresh+0x25e>
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <ws2812_refresh+0x2a0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	f240 4344 	movw	r3, #1092	; 0x444
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <ws2812_refresh+0x25e>
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <ws2812_refresh+0x2a0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <ws2812_refresh+0x2a0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <ws2812_refresh+0x2a4>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim2_update);
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <ws2812_refresh+0x2a8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <ws2812_refresh+0x2a8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <ws2812_refresh+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <ws2812_refresh+0x2ac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <ws2812_refresh+0x2b0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <ws2812_refresh+0x2b0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000404 	.word	0x20000404
 80017f8:	20000098 	.word	0x20000098
 80017fc:	200003c0 	.word	0x200003c0
 8001800:	2000037c 	.word	0x2000037c
 8001804:	20000338 	.word	0x20000338

08001808 <ws2812_init>:

void ws2812_init()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <ws2812_init+0x48>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <ws2812_init+0x48>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6153      	str	r3, [r2, #20]
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <ws2812_init+0x48>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	200c      	movs	r0, #12
 800182c:	f000 fd4f 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	200f      	movs	r0, #15
 8001836:	f000 fd4a 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2011      	movs	r0, #17
 8001840:	f000 fd45 	bl	80022ce <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001844:	f7ff fca4 	bl	8001190 <ws2812_timer2_init>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000

08001854 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001854:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001856:	e003      	b.n	8001860 <LoopCopyDataInit>

08001858 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800185a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800185c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800185e:	3104      	adds	r1, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001860:	480a      	ldr	r0, [pc, #40]	; (800188c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001864:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001866:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001868:	d3f6      	bcc.n	8001858 <CopyDataInit>
  ldr r2, =_sbss
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800186c:	e002      	b.n	8001874 <LoopFillZerobss>

0800186e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001870:	f842 3b04 	str.w	r3, [r2], #4

08001874 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001876:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001878:	d3f9      	bcc.n	800186e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800187a:	f7ff fc83 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f002 ff89 	bl	8004794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001882:	f7fe fe4f 	bl	8000524 <main>
  bx lr
 8001886:	4770      	bx	lr
  ldr r3, =_sidata
 8001888:	080050e8 	.word	0x080050e8
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001890:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001894:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001898:	20000454 	.word	0x20000454

0800189c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC1_2_IRQHandler>
	...

080018a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x28>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x28>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 fd01 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fa38 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40022000 	.word	0x40022000

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fd19 	bl	8002322 <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f000 fce1 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000004 	.word	0x20000004
 8001924:	2000000c 	.word	0x2000000c
 8001928:	20000008 	.word	0x20000008

0800192c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_IncTick+0x1c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_IncTick+0x20>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a03      	ldr	r2, [pc, #12]	; (800194c <HAL_IncTick+0x20>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	2000000c 	.word	0x2000000c
 800194c:	2000044c 	.word	0x2000044c

08001950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <HAL_GetTick+0x10>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	2000044c 	.word	0x2000044c

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fff0 	bl	8001950 <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_Delay+0x40>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffe0 	bl	8001950 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000000c 	.word	0x2000000c

080019a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0be      	b.n	8001b48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff f9d4 	bl	8000d94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 faf7 	bl	8001fe0 <ADC_ConversionStop_Disable>
 80019f2:	4603      	mov	r3, r0
 80019f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 8099 	bne.w	8001b36 <HAL_ADC_Init+0x18e>
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8095 	bne.w	8001b36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a14:	f023 0302 	bic.w	r3, r3, #2
 8001a18:	f043 0202 	orr.w	r2, r3, #2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7b1b      	ldrb	r3, [r3, #12]
 8001a2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a40:	d003      	beq.n	8001a4a <HAL_ADC_Init+0xa2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d102      	bne.n	8001a50 <HAL_ADC_Init+0xa8>
 8001a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4e:	e000      	b.n	8001a52 <HAL_ADC_Init+0xaa>
 8001a50:	2300      	movs	r3, #0
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7d1b      	ldrb	r3, [r3, #20]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d119      	bne.n	8001a94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7b1b      	ldrb	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	035a      	lsls	r2, r3, #13
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e00b      	b.n	8001a94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f043 0220 	orr.w	r2, r3, #32
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <HAL_ADC_Init+0x1a8>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac4:	d003      	beq.n	8001ace <HAL_ADC_Init+0x126>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d104      	bne.n	8001ad8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	051b      	lsls	r3, r3, #20
 8001ad6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_ADC_Init+0x1ac>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d10b      	bne.n	8001b14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b12:	e018      	b.n	8001b46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f023 0312 	bic.w	r3, r3, #18
 8001b1c:	f043 0210 	orr.w	r2, r3, #16
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b34:	e007      	b.n	8001b46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	f043 0210 	orr.w	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	ffe1f7fd 	.word	0xffe1f7fd
 8001b54:	ff1f0efe 	.word	0xff1f0efe

08001b58 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a64      	ldr	r2, [pc, #400]	; (8001d00 <HAL_ADC_Start_DMA+0x1a8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d004      	beq.n	8001b7c <HAL_ADC_Start_DMA+0x24>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a63      	ldr	r2, [pc, #396]	; (8001d04 <HAL_ADC_Start_DMA+0x1ac>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d106      	bne.n	8001b8a <HAL_ADC_Start_DMA+0x32>
 8001b7c:	4b60      	ldr	r3, [pc, #384]	; (8001d00 <HAL_ADC_Start_DMA+0x1a8>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 80b3 	bne.w	8001cf0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_Start_DMA+0x40>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e0ae      	b.n	8001cf6 <HAL_ADC_Start_DMA+0x19e>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 f9cb 	bl	8001f3c <ADC_Enable>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 809a 	bne.w	8001ce6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a4e      	ldr	r2, [pc, #312]	; (8001d04 <HAL_ADC_Start_DMA+0x1ac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_Start_DMA+0x84>
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <HAL_ADC_Start_DMA+0x1a8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d115      	bne.n	8001c08 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d026      	beq.n	8001c44 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c06:	e01d      	b.n	8001c44 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a39      	ldr	r2, [pc, #228]	; (8001d00 <HAL_ADC_Start_DMA+0x1a8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d004      	beq.n	8001c28 <HAL_ADC_Start_DMA+0xd0>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_ADC_Start_DMA+0x1ac>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10d      	bne.n	8001c44 <HAL_ADC_Start_DMA+0xec>
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_ADC_Start_DMA+0x1a8>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	f023 0206 	bic.w	r2, r3, #6
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c5c:	e002      	b.n	8001c64 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_ADC_Start_DMA+0x1b0>)
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <HAL_ADC_Start_DMA+0x1b4>)
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_ADC_Start_DMA+0x1b8>)
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0202 	mvn.w	r2, #2
 8001c8c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a18      	ldr	r0, [r3, #32]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	334c      	adds	r3, #76	; 0x4c
 8001ca8:	4619      	mov	r1, r3
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f000 fbe1 	bl	8002474 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cbc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cc0:	d108      	bne.n	8001cd4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001cd0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cd2:	e00f      	b.n	8001cf4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ce2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ce4:	e006      	b.n	8001cf4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001cee:	e001      	b.n	8001cf4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40012400 	.word	0x40012400
 8001d04:	40012800 	.word	0x40012800
 8001d08:	08002055 	.word	0x08002055
 8001d0c:	080020d1 	.word	0x080020d1
 8001d10:	080020ed 	.word	0x080020ed

08001d14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x20>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e0dc      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x1da>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d81c      	bhi.n	8001db6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b05      	subs	r3, #5
 8001d8e:	221f      	movs	r2, #31
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4019      	ands	r1, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3b05      	subs	r3, #5
 8001da8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
 8001db4:	e03c      	b.n	8001e30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d81c      	bhi.n	8001df8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b23      	subs	r3, #35	; 0x23
 8001dd0:	221f      	movs	r2, #31
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	4019      	ands	r1, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b23      	subs	r3, #35	; 0x23
 8001dea:	fa00 f203 	lsl.w	r2, r0, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
 8001df6:	e01b      	b.n	8001e30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b41      	subs	r3, #65	; 0x41
 8001e0a:	221f      	movs	r2, #31
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4019      	ands	r1, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	3b41      	subs	r3, #65	; 0x41
 8001e24:	fa00 f203 	lsl.w	r2, r0, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d91c      	bls.n	8001e72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4019      	ands	r1, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6898      	ldr	r0, [r3, #8]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	3b1e      	subs	r3, #30
 8001e64:	fa00 f203 	lsl.w	r2, r0, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	e019      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6919      	ldr	r1, [r3, #16]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	2207      	movs	r2, #7
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	4019      	ands	r1, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6898      	ldr	r0, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d003      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eb2:	2b11      	cmp	r3, #17
 8001eb4:	d132      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d125      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d126      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001edc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d11a      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <HAL_ADC_ConfigChannel+0x1ec>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	0c9a      	lsrs	r2, r3, #18
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001efc:	e002      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f9      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x1b2>
 8001f0a:	e007      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40012400 	.word	0x40012400
 8001f34:	20000004 	.word	0x20000004
 8001f38:	431bde83 	.word	0x431bde83

08001f3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d039      	beq.n	8001fce <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <ADC_Enable+0x9c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <ADC_Enable+0xa0>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9b      	lsrs	r3, r3, #18
 8001f76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f78:	e002      	b.n	8001f80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f9      	bne.n	8001f7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f86:	f7ff fce3 	bl	8001950 <HAL_GetTick>
 8001f8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f8c:	e018      	b.n	8001fc0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f8e:	f7ff fcdf 	bl	8001950 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d911      	bls.n	8001fc0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f043 0210 	orr.w	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e007      	b.n	8001fd0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d1df      	bne.n	8001f8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	431bde83 	.word	0x431bde83

08001fe0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d127      	bne.n	800204a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800200a:	f7ff fca1 	bl	8001950 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002010:	e014      	b.n	800203c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002012:	f7ff fc9d 	bl	8001950 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d90d      	bls.n	800203c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	f043 0210 	orr.w	r2, r3, #16
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e007      	b.n	800204c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d0e3      	beq.n	8002012 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800206a:	2b00      	cmp	r3, #0
 800206c:	d127      	bne.n	80020be <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002084:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002088:	d115      	bne.n	80020b6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208e:	2b00      	cmp	r3, #0
 8002090:	d111      	bne.n	80020b6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7ff fe2c 	bl	8001d14 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020bc:	e004      	b.n	80020c8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fe21 	bl	8001d26 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f043 0204 	orr.w	r2, r3, #4
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff fe10 	bl	8001d38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4906      	ldr	r1, [pc, #24]	; (80021b8 <__NVIC_EnableIRQ+0x34>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002298:	f7ff ff90 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff2d 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff42 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff90 	bl	8002210 <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5f 	bl	80021bc <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff35 	bl	8002184 <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e043      	b.n	80023da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_DMA_Init+0xa8>)
 800235a:	4413      	add	r3, r2
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_DMA_Init+0xac>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_DMA_Init+0xb0>)
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002386:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800238a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	bffdfff8 	.word	0xbffdfff8
 80023e8:	cccccccd 	.word	0xcccccccd
 80023ec:	40020000 	.word	0x40020000

080023f0 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_DMA_Start+0x20>
 800240c:	2302      	movs	r3, #2
 800240e:	e02d      	b.n	800246c <HAL_DMA_Start+0x7c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800241e:	2b01      	cmp	r3, #1
 8002420:	d11d      	bne.n	800245e <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9f0 	bl	800282c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	e005      	b.n	800246a <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8002466:	2302      	movs	r3, #2
 8002468:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 800246a:	7dfb      	ldrb	r3, [r7, #23]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_DMA_Start_IT+0x20>
 8002490:	2302      	movs	r3, #2
 8002492:	e04a      	b.n	800252a <HAL_DMA_Start_IT+0xb6>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d13a      	bne.n	800251c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f9ae 	bl	800282c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 020e 	orr.w	r2, r2, #14
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e00f      	b.n	800250a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0204 	bic.w	r2, r2, #4
 80024f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 020a 	orr.w	r2, r2, #10
 8002508:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e005      	b.n	8002528 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002524:	2302      	movs	r3, #2
 8002526:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002528:	7dfb      	ldrb	r3, [r7, #23]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002546:	2b02      	cmp	r3, #2
 8002548:	d005      	beq.n	8002556 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2204      	movs	r2, #4
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e051      	b.n	80025fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 020e 	bic.w	r2, r2, #14
 8002564:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_DMA_Abort_IT+0xd0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d029      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xa0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_DMA_Abort_IT+0xd4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d022      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x9c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_DMA_Abort_IT+0xd8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d01a      	beq.n	80025ca <HAL_DMA_Abort_IT+0x96>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_DMA_Abort_IT+0xdc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d012      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x90>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_DMA_Abort_IT+0xe0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00a      	beq.n	80025be <HAL_DMA_Abort_IT+0x8a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_DMA_Abort_IT+0xe4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d102      	bne.n	80025b8 <HAL_DMA_Abort_IT+0x84>
 80025b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025b6:	e00e      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025bc:	e00b      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025c2:	e008      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	e005      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ce:	e002      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025d0:	2310      	movs	r3, #16
 80025d2:	e000      	b.n	80025d6 <HAL_DMA_Abort_IT+0xa2>
 80025d4:	2301      	movs	r3, #1
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_DMA_Abort_IT+0xe8>)
 80025d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
    } 
  }
  return status;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40020008 	.word	0x40020008
 8002608:	4002001c 	.word	0x4002001c
 800260c:	40020030 	.word	0x40020030
 8002610:	40020044 	.word	0x40020044
 8002614:	40020058 	.word	0x40020058
 8002618:	4002006c 	.word	0x4002006c
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2204      	movs	r2, #4
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d04f      	beq.n	80026e8 <HAL_DMA_IRQHandler+0xc8>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04a      	beq.n	80026e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a66      	ldr	r2, [pc, #408]	; (8002810 <HAL_DMA_IRQHandler+0x1f0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d029      	beq.n	80026ce <HAL_DMA_IRQHandler+0xae>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a65      	ldr	r2, [pc, #404]	; (8002814 <HAL_DMA_IRQHandler+0x1f4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_DMA_IRQHandler+0xaa>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a63      	ldr	r2, [pc, #396]	; (8002818 <HAL_DMA_IRQHandler+0x1f8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01a      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xa4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a62      	ldr	r2, [pc, #392]	; (800281c <HAL_DMA_IRQHandler+0x1fc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d012      	beq.n	80026be <HAL_DMA_IRQHandler+0x9e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a60      	ldr	r2, [pc, #384]	; (8002820 <HAL_DMA_IRQHandler+0x200>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00a      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x98>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5f      	ldr	r2, [pc, #380]	; (8002824 <HAL_DMA_IRQHandler+0x204>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d102      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x92>
 80026ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026b0:	e00e      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026b6:	e00b      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026bc:	e008      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026c2:	e005      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c8:	e002      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026ca:	2340      	movs	r3, #64	; 0x40
 80026cc:	e000      	b.n	80026d0 <HAL_DMA_IRQHandler+0xb0>
 80026ce:	2304      	movs	r3, #4
 80026d0:	4a55      	ldr	r2, [pc, #340]	; (8002828 <HAL_DMA_IRQHandler+0x208>)
 80026d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8094 	beq.w	8002806 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026e6:	e08e      	b.n	8002806 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	2202      	movs	r2, #2
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d056      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x186>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d051      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 020a 	bic.w	r2, r2, #10
 800271e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a38      	ldr	r2, [pc, #224]	; (8002810 <HAL_DMA_IRQHandler+0x1f0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d029      	beq.n	8002786 <HAL_DMA_IRQHandler+0x166>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a37      	ldr	r2, [pc, #220]	; (8002814 <HAL_DMA_IRQHandler+0x1f4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <HAL_DMA_IRQHandler+0x162>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a35      	ldr	r2, [pc, #212]	; (8002818 <HAL_DMA_IRQHandler+0x1f8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01a      	beq.n	800277c <HAL_DMA_IRQHandler+0x15c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a34      	ldr	r2, [pc, #208]	; (800281c <HAL_DMA_IRQHandler+0x1fc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0x156>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a32      	ldr	r2, [pc, #200]	; (8002820 <HAL_DMA_IRQHandler+0x200>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x150>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a31      	ldr	r2, [pc, #196]	; (8002824 <HAL_DMA_IRQHandler+0x204>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d102      	bne.n	800276a <HAL_DMA_IRQHandler+0x14a>
 8002764:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002768:	e00e      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 800276a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276e:	e00b      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 8002770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002774:	e008      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 8002776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800277a:	e005      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 800277c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002780:	e002      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 8002782:	2320      	movs	r3, #32
 8002784:	e000      	b.n	8002788 <HAL_DMA_IRQHandler+0x168>
 8002786:	2302      	movs	r3, #2
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <HAL_DMA_IRQHandler+0x208>)
 800278a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	2b00      	cmp	r3, #0
 800279a:	d034      	beq.n	8002806 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027a4:	e02f      	b.n	8002806 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2208      	movs	r2, #8
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d028      	beq.n	8002808 <HAL_DMA_IRQHandler+0x1e8>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 020e 	bic.w	r2, r2, #14
 80027ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
    }
  }
  return;
 8002806:	bf00      	nop
 8002808:	bf00      	nop
}
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40020008 	.word	0x40020008
 8002814:	4002001c 	.word	0x4002001c
 8002818:	40020030 	.word	0x40020030
 800281c:	40020044 	.word	0x40020044
 8002820:	40020058 	.word	0x40020058
 8002824:	4002006c 	.word	0x4002006c
 8002828:	40020000 	.word	0x40020000

0800282c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	2101      	movs	r1, #1
 8002844:	fa01 f202 	lsl.w	r2, r1, r2
 8002848:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b10      	cmp	r3, #16
 8002858:	d108      	bne.n	800286c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800286a:	e007      	b.n	800287c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	60da      	str	r2, [r3, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b08b      	sub	sp, #44	; 0x2c
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289a:	e127      	b.n	8002aec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800289c:	2201      	movs	r2, #1
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	f040 8116 	bne.w	8002ae6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b12      	cmp	r3, #18
 80028c0:	d034      	beq.n	800292c <HAL_GPIO_Init+0xa4>
 80028c2:	2b12      	cmp	r3, #18
 80028c4:	d80d      	bhi.n	80028e2 <HAL_GPIO_Init+0x5a>
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d02b      	beq.n	8002922 <HAL_GPIO_Init+0x9a>
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d804      	bhi.n	80028d8 <HAL_GPIO_Init+0x50>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d031      	beq.n	8002936 <HAL_GPIO_Init+0xae>
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d01c      	beq.n	8002910 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028d6:	e048      	b.n	800296a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d043      	beq.n	8002964 <HAL_GPIO_Init+0xdc>
 80028dc:	2b11      	cmp	r3, #17
 80028de:	d01b      	beq.n	8002918 <HAL_GPIO_Init+0x90>
          break;
 80028e0:	e043      	b.n	800296a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028e2:	4a89      	ldr	r2, [pc, #548]	; (8002b08 <HAL_GPIO_Init+0x280>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d026      	beq.n	8002936 <HAL_GPIO_Init+0xae>
 80028e8:	4a87      	ldr	r2, [pc, #540]	; (8002b08 <HAL_GPIO_Init+0x280>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d806      	bhi.n	80028fc <HAL_GPIO_Init+0x74>
 80028ee:	4a87      	ldr	r2, [pc, #540]	; (8002b0c <HAL_GPIO_Init+0x284>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d020      	beq.n	8002936 <HAL_GPIO_Init+0xae>
 80028f4:	4a86      	ldr	r2, [pc, #536]	; (8002b10 <HAL_GPIO_Init+0x288>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01d      	beq.n	8002936 <HAL_GPIO_Init+0xae>
          break;
 80028fa:	e036      	b.n	800296a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028fc:	4a85      	ldr	r2, [pc, #532]	; (8002b14 <HAL_GPIO_Init+0x28c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d019      	beq.n	8002936 <HAL_GPIO_Init+0xae>
 8002902:	4a85      	ldr	r2, [pc, #532]	; (8002b18 <HAL_GPIO_Init+0x290>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d016      	beq.n	8002936 <HAL_GPIO_Init+0xae>
 8002908:	4a84      	ldr	r2, [pc, #528]	; (8002b1c <HAL_GPIO_Init+0x294>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0xae>
          break;
 800290e:	e02c      	b.n	800296a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	623b      	str	r3, [r7, #32]
          break;
 8002916:	e028      	b.n	800296a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	3304      	adds	r3, #4
 800291e:	623b      	str	r3, [r7, #32]
          break;
 8002920:	e023      	b.n	800296a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	3308      	adds	r3, #8
 8002928:	623b      	str	r3, [r7, #32]
          break;
 800292a:	e01e      	b.n	800296a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	330c      	adds	r3, #12
 8002932:	623b      	str	r3, [r7, #32]
          break;
 8002934:	e019      	b.n	800296a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800293e:	2304      	movs	r3, #4
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e012      	b.n	800296a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800294c:	2308      	movs	r3, #8
 800294e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	611a      	str	r2, [r3, #16]
          break;
 8002956:	e008      	b.n	800296a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002958:	2308      	movs	r3, #8
 800295a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	615a      	str	r2, [r3, #20]
          break;
 8002962:	e002      	b.n	800296a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2bff      	cmp	r3, #255	; 0xff
 800296e:	d801      	bhi.n	8002974 <HAL_GPIO_Init+0xec>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	e001      	b.n	8002978 <HAL_GPIO_Init+0xf0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2bff      	cmp	r3, #255	; 0xff
 800297e:	d802      	bhi.n	8002986 <HAL_GPIO_Init+0xfe>
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	e002      	b.n	800298c <HAL_GPIO_Init+0x104>
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	3b08      	subs	r3, #8
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	210f      	movs	r1, #15
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	401a      	ands	r2, r3
 800299e:	6a39      	ldr	r1, [r7, #32]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	431a      	orrs	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8096 	beq.w	8002ae6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029ba:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_GPIO_Init+0x298>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_GPIO_Init+0x298>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6193      	str	r3, [r2, #24]
 80029c6:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <HAL_GPIO_Init+0x298>)
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029d2:	4a54      	ldr	r2, [pc, #336]	; (8002b24 <HAL_GPIO_Init+0x29c>)
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_GPIO_Init+0x2a0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x19e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_GPIO_Init+0x2a4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x19a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a49      	ldr	r2, [pc, #292]	; (8002b30 <HAL_GPIO_Init+0x2a8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x196>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a48      	ldr	r2, [pc, #288]	; (8002b34 <HAL_GPIO_Init+0x2ac>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x192>
 8002a16:	2303      	movs	r3, #3
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x1a0>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x1a0>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x1a0>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x1a0>
 8002a26:	2300      	movs	r3, #0
 8002a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a38:	493a      	ldr	r1, [pc, #232]	; (8002b24 <HAL_GPIO_Init+0x29c>)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4938      	ldr	r1, [pc, #224]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
 8002a5e:	e006      	b.n	8002a6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a60:	4b35      	ldr	r3, [pc, #212]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	4933      	ldr	r1, [pc, #204]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	492e      	ldr	r1, [pc, #184]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
 8002a86:	e006      	b.n	8002a96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	4929      	ldr	r1, [pc, #164]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aa2:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	4924      	ldr	r1, [pc, #144]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
 8002aae:	e006      	b.n	8002abe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab0:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	491f      	ldr	r1, [pc, #124]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	491a      	ldr	r1, [pc, #104]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60cb      	str	r3, [r1, #12]
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4915      	ldr	r1, [pc, #84]	; (8002b38 <HAL_GPIO_Init+0x2b0>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	3301      	adds	r3, #1
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f47f aed0 	bne.w	800289c <HAL_GPIO_Init+0x14>
  }
}
 8002afc:	bf00      	nop
 8002afe:	372c      	adds	r7, #44	; 0x2c
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	10210000 	.word	0x10210000
 8002b0c:	10110000 	.word	0x10110000
 8002b10:	10120000 	.word	0x10120000
 8002b14:	10310000 	.word	0x10310000
 8002b18:	10320000 	.word	0x10320000
 8002b1c:	10220000 	.word	0x10220000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40010800 	.word	0x40010800
 8002b2c:	40010c00 	.word	0x40010c00
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e26c      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8087 	beq.w	8002c9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8c:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d00c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b98:	4b8f      	ldr	r3, [pc, #572]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d112      	bne.n	8002bca <HAL_RCC_OscConfig+0x5e>
 8002ba4:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d10b      	bne.n	8002bca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	4b89      	ldr	r3, [pc, #548]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d06c      	beq.n	8002c98 <HAL_RCC_OscConfig+0x12c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d168      	bne.n	8002c98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e246      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x76>
 8002bd4:	4b80      	ldr	r3, [pc, #512]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a7f      	ldr	r2, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e02e      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x98>
 8002bea:	4b7b      	ldr	r3, [pc, #492]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7a      	ldr	r2, [pc, #488]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a77      	ldr	r2, [pc, #476]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0xbc>
 8002c0e:	4b72      	ldr	r3, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a71      	ldr	r2, [pc, #452]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002c28:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6a      	ldr	r2, [pc, #424]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a67      	ldr	r2, [pc, #412]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fe82 	bl	8001950 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fe7e 	bl	8001950 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1fa      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe4>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe fe6e 	bl	8001950 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fe6a 	bl	8001950 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1e6      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x10c>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d063      	beq.n	8002d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cb2:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x18c>
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x176>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1ba      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4939      	ldr	r1, [pc, #228]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e03a      	b.n	8002d6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x270>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fe fe23 	bl	8001950 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fe1f 	bl	8001950 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e19b      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4927      	ldr	r1, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
 8002d40:	e015      	b.n	8002d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_RCC_OscConfig+0x270>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fe02 	bl	8001950 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fe fdfe 	bl	8001950 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e17a      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d03a      	beq.n	8002df0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d019      	beq.n	8002db6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_RCC_OscConfig+0x274>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe fde2 	bl	8001950 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fdde 	bl	8001950 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e15a      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dae:	2001      	movs	r0, #1
 8002db0:	f000 fada 	bl	8003368 <RCC_Delay>
 8002db4:	e01c      	b.n	8002df0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_RCC_OscConfig+0x274>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fdc8 	bl	8001950 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc2:	e00f      	b.n	8002de4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fdc4 	bl	8001950 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d908      	bls.n	8002de4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e140      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	42420000 	.word	0x42420000
 8002de0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e9      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a6 	beq.w	8002f4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e02:	4b97      	ldr	r3, [pc, #604]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10d      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b94      	ldr	r3, [pc, #592]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a93      	ldr	r2, [pc, #588]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	61d3      	str	r3, [r2, #28]
 8002e1a:	4b91      	ldr	r3, [pc, #580]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b8e      	ldr	r3, [pc, #568]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b8b      	ldr	r3, [pc, #556]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a8a      	ldr	r2, [pc, #552]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fd85 	bl	8001950 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fe fd81 	bl	8001950 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b64      	cmp	r3, #100	; 0x64
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0fd      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b81      	ldr	r3, [pc, #516]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x312>
 8002e70:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	e02d      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x334>
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a75      	ldr	r2, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6213      	str	r3, [r2, #32]
 8002e92:	4b73      	ldr	r3, [pc, #460]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a72      	ldr	r2, [pc, #456]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	e01c      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x356>
 8002ea8:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4a6c      	ldr	r2, [pc, #432]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a66      	ldr	r2, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	4b64      	ldr	r3, [pc, #400]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a63      	ldr	r2, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fd35 	bl	8001950 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe fd31 	bl	8001950 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0ab      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ee      	beq.n	8002eea <HAL_RCC_OscConfig+0x37e>
 8002f0c:	e014      	b.n	8002f38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fd1f 	bl	8001950 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe fd1b 	bl	8001950 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e095      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ee      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a47      	ldr	r2, [pc, #284]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8081 	beq.w	8003056 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f54:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d061      	beq.n	8003024 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d146      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fcef 	bl	8001950 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe fceb 	bl	8001950 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e067      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d108      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	492d      	ldr	r1, [pc, #180]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a19      	ldr	r1, [r3, #32]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	4927      	ldr	r1, [pc, #156]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe fcbf 	bl	8001950 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe fcbb 	bl	8001950 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e037      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x46a>
 8002ff4:	e02f      	b.n	8003056 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fca8 	bl	8001950 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fca4 	bl	8001950 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e020      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x498>
 8003022:	e018      	b.n	8003056 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e013      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	429a      	cmp	r2, r3
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	42420060 	.word	0x42420060

0800306c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0d0      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d910      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b67      	ldr	r3, [pc, #412]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	4965      	ldr	r1, [pc, #404]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0b8      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b50      	ldr	r3, [pc, #320]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	494d      	ldr	r1, [pc, #308]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d040      	beq.n	800318c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d115      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e07f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e073      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e06b      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314a:	4b39      	ldr	r3, [pc, #228]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f023 0203 	bic.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4936      	ldr	r1, [pc, #216]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800315c:	f7fe fbf8 	bl	8001950 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	e00a      	b.n	800317a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f7fe fbf4 	bl	8001950 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e053      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 020c 	and.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d1eb      	bne.n	8003164 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d210      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4922      	ldr	r1, [pc, #136]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e032      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4916      	ldr	r1, [pc, #88]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031fa:	f000 f821 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031fe:	4601      	mov	r1, r0
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	5cd3      	ldrb	r3, [r2, r3]
 800320e:	fa21 f303 	lsr.w	r3, r1, r3
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1cc>)
 8003214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1d0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fb56 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40022000 	.word	0x40022000
 8003230:	40021000 	.word	0x40021000
 8003234:	08005084 	.word	0x08005084
 8003238:	20000004 	.word	0x20000004
 800323c:	20000008 	.word	0x20000008

08003240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b490      	push	{r4, r7}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003246:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003248:	1d3c      	adds	r4, r7, #4
 800324a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800324c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	2300      	movs	r3, #0
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b04      	cmp	r3, #4
 8003278:	d002      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x40>
 800327a:	2b08      	cmp	r3, #8
 800327c:	d003      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x46>
 800327e:	e02d      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003280:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003282:	623b      	str	r3, [r7, #32]
      break;
 8003284:	e02d      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	0c9b      	lsrs	r3, r3, #18
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003292:	4413      	add	r3, r2
 8003294:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003298:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	0c5b      	lsrs	r3, r3, #17
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80032be:	fb02 f203 	mul.w	r2, r2, r3
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	e004      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	623b      	str	r3, [r7, #32]
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80032de:	623b      	str	r3, [r7, #32]
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6a3b      	ldr	r3, [r7, #32]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc90      	pop	{r4, r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	08005070 	.word	0x08005070
 80032f4:	08005080 	.word	0x08005080
 80032f8:	40021000 	.word	0x40021000
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	003d0900 	.word	0x003d0900

08003304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003308:	4b02      	ldr	r3, [pc, #8]	; (8003314 <HAL_RCC_GetHCLKFreq+0x10>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	20000004 	.word	0x20000004

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff2 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003320:	4601      	mov	r1, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4a03      	ldr	r2, [pc, #12]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	08005094 	.word	0x08005094

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffde 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003348:	4601      	mov	r1, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	0adb      	lsrs	r3, r3, #11
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4a03      	ldr	r2, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	08005094 	.word	0x08005094

08003368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <RCC_Delay+0x34>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <RCC_Delay+0x38>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0a5b      	lsrs	r3, r3, #9
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003384:	bf00      	nop
  }
  while (Delay --);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e5a      	subs	r2, r3, #1
 800338a:	60fa      	str	r2, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f9      	bne.n	8003384 <RCC_Delay+0x1c>
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000004 	.word	0x20000004
 80033a0:	10624dd3 	.word	0x10624dd3

080033a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d07d      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c4:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4a4b      	ldr	r2, [pc, #300]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	61d3      	str	r3, [r2, #28]
 80033dc:	4b49      	ldr	r3, [pc, #292]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d118      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a42      	ldr	r2, [pc, #264]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003404:	f7fe faa4 	bl	8001950 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	e008      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7fe faa0 	bl	8001950 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e06d      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003432:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	429a      	cmp	r2, r3
 8003446:	d027      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003448:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003450:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003452:	4b2e      	ldr	r3, [pc, #184]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003458:	4b2c      	ldr	r3, [pc, #176]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800345e:	4a29      	ldr	r2, [pc, #164]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d014      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe fa6f 	bl	8001950 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fe fa6b 	bl	8001950 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	; 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e036      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ee      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4917      	ldr	r1, [pc, #92]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a13      	ldr	r2, [pc, #76]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	490b      	ldr	r1, [pc, #44]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4904      	ldr	r1, [pc, #16]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	42420440 	.word	0x42420440

08003510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e041      	b.n	80035a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fc94 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 f9fc 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e041      	b.n	8003644 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f839 	bl	800364c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f000 f9ad 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
	...

08003660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003676:	2302      	movs	r3, #2
 8003678:	e0ac      	b.n	80037d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	f200 809f 	bhi.w	80037c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080037c9 	.word	0x080037c9
 8003698:	080037c9 	.word	0x080037c9
 800369c:	080037c9 	.word	0x080037c9
 80036a0:	08003705 	.word	0x08003705
 80036a4:	080037c9 	.word	0x080037c9
 80036a8:	080037c9 	.word	0x080037c9
 80036ac:	080037c9 	.word	0x080037c9
 80036b0:	08003747 	.word	0x08003747
 80036b4:	080037c9 	.word	0x080037c9
 80036b8:	080037c9 	.word	0x080037c9
 80036bc:	080037c9 	.word	0x080037c9
 80036c0:	08003787 	.word	0x08003787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f9a0 	bl	8003a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0208 	orr.w	r2, r2, #8
 80036de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0204 	bic.w	r2, r2, #4
 80036ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6999      	ldr	r1, [r3, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	619a      	str	r2, [r3, #24]
      break;
 8003702:	e062      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f9e6 	bl	8003adc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6999      	ldr	r1, [r3, #24]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	021a      	lsls	r2, r3, #8
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	619a      	str	r2, [r3, #24]
      break;
 8003744:	e041      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fa2f 	bl	8003bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0208 	orr.w	r2, r2, #8
 8003760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0204 	bic.w	r2, r2, #4
 8003770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69d9      	ldr	r1, [r3, #28]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	61da      	str	r2, [r3, #28]
      break;
 8003784:	e021      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fa79 	bl	8003c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69d9      	ldr	r1, [r3, #28]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	021a      	lsls	r2, r3, #8
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	61da      	str	r2, [r3, #28]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80037c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_TIM_ConfigClockSource+0x18>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e0a6      	b.n	8003942 <HAL_TIM_ConfigClockSource+0x166>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d067      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0x120>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d80b      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x6c>
 8003830:	2b10      	cmp	r3, #16
 8003832:	d073      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x140>
 8003834:	2b10      	cmp	r3, #16
 8003836:	d802      	bhi.n	800383e <HAL_TIM_ConfigClockSource+0x62>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d06f      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800383c:	e078      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800383e:	2b20      	cmp	r3, #32
 8003840:	d06c      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x140>
 8003842:	2b30      	cmp	r3, #48	; 0x30
 8003844:	d06a      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003846:	e073      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003848:	2b70      	cmp	r3, #112	; 0x70
 800384a:	d00d      	beq.n	8003868 <HAL_TIM_ConfigClockSource+0x8c>
 800384c:	2b70      	cmp	r3, #112	; 0x70
 800384e:	d804      	bhi.n	800385a <HAL_TIM_ConfigClockSource+0x7e>
 8003850:	2b50      	cmp	r3, #80	; 0x50
 8003852:	d033      	beq.n	80038bc <HAL_TIM_ConfigClockSource+0xe0>
 8003854:	2b60      	cmp	r3, #96	; 0x60
 8003856:	d041      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003858:	e06a      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385e:	d066      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x152>
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d017      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003866:	e063      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f000 fac9 	bl	8003e0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800388a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e04c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f000 fab2 	bl	8003e0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b8:	609a      	str	r2, [r3, #8]
      break;
 80038ba:	e039      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f000 fa29 	bl	8003d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2150      	movs	r1, #80	; 0x50
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fa80 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 80038da:	e029      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	461a      	mov	r2, r3
 80038ea:	f000 fa47 	bl	8003d7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2160      	movs	r1, #96	; 0x60
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fa70 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 80038fa:	e019      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	461a      	mov	r2, r3
 800390a:	f000 fa09 	bl	8003d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2140      	movs	r1, #64	; 0x40
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fa60 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 800391a:	e009      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 fa57 	bl	8003dda <TIM_ITRx_SetConfig>
        break;
 800392c:	e000      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800392e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <TIM_Base_SetConfig+0xb8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00b      	beq.n	800397c <TIM_Base_SetConfig+0x30>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d007      	beq.n	800397c <TIM_Base_SetConfig+0x30>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <TIM_Base_SetConfig+0xbc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0x30>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <TIM_Base_SetConfig+0xc0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d108      	bne.n	800398e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <TIM_Base_SetConfig+0xb8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00b      	beq.n	80039ae <TIM_Base_SetConfig+0x62>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399c:	d007      	beq.n	80039ae <TIM_Base_SetConfig+0x62>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <TIM_Base_SetConfig+0xbc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_Base_SetConfig+0x62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <TIM_Base_SetConfig+0xc0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <TIM_Base_SetConfig+0xb8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40000800 	.word	0x40000800

08003a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f023 0201 	bic.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f023 0302 	bic.w	r3, r3, #2
 8003a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <TIM_OC1_SetConfig+0xc8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10c      	bne.n	8003a86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0308 	bic.w	r3, r3, #8
 8003a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <TIM_OC1_SetConfig+0xc8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d111      	bne.n	8003ab2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40012c00 	.word	0x40012c00

08003adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0210 	bic.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0320 	bic.w	r3, r3, #32
 8003b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <TIM_OC2_SetConfig+0xd0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10d      	bne.n	8003b58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a14      	ldr	r2, [pc, #80]	; (8003bac <TIM_OC2_SetConfig+0xd0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d113      	bne.n	8003b88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	40012c00 	.word	0x40012c00

08003bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <TIM_OC3_SetConfig+0xd0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10d      	bne.n	8003c2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <TIM_OC3_SetConfig+0xd0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d113      	bne.n	8003c5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	621a      	str	r2, [r3, #32]
}
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40012c00 	.word	0x40012c00

08003c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <TIM_OC4_SetConfig+0x98>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d109      	bne.n	8003cf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 030a 	bic.w	r3, r3, #10
 8003d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f023 0210 	bic.w	r2, r3, #16
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	031b      	lsls	r3, r3, #12
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	621a      	str	r2, [r3, #32]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f043 0307 	orr.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	021a      	lsls	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e046      	b.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d009      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800

08003f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e03f      	b.n	8003f9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd f842 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fb8d 	bl	800466c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b08a      	sub	sp, #40	; 0x28
 8003fa6:	af02      	add	r7, sp, #8
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d17c      	bne.n	80040bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_Transmit+0x2c>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e075      	b.n	80040be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_UART_Transmit+0x3e>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e06e      	b.n	80040be <HAL_UART_Transmit+0x11c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2221      	movs	r2, #33	; 0x21
 8003ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ff6:	f7fd fcab 	bl	8001950 <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d108      	bne.n	8004024 <HAL_UART_Transmit+0x82>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d104      	bne.n	8004024 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	e003      	b.n	800402c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004034:	e02a      	b.n	800408c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f9b0 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e036      	b.n	80040be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	3302      	adds	r3, #2
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e007      	b.n	800407e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	3301      	adds	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1cf      	bne.n	8004036 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2140      	movs	r1, #64	; 0x40
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f980 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e006      	b.n	80040be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e000      	b.n	80040be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
  }
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	4613      	mov	r3, r2
 80040d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d140      	bne.n	8004162 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Receive_IT+0x26>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e039      	b.n	8004164 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Receive_IT+0x38>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e032      	b.n	8004164 <HAL_UART_Receive_IT+0x9e>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	88fa      	ldrh	r2, [r7, #6]
 8004116:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2222      	movs	r2, #34	; 0x22
 8004122:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0220 	orr.w	r2, r2, #32
 800415c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
	...

08004170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10d      	bne.n	80041c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_UART_IRQHandler+0x52>
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9d5 	bl	800456a <UART_Receive_IT>
      return;
 80041c0:	e0d1      	b.n	8004366 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80b0 	beq.w	800432a <HAL_UART_IRQHandler+0x1ba>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <HAL_UART_IRQHandler+0x70>
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a5 	beq.w	800432a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_UART_IRQHandler+0x90>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_UART_IRQHandler+0xb0>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	f043 0202 	orr.w	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_UART_IRQHandler+0xd0>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00f      	beq.n	800426a <HAL_UART_IRQHandler+0xfa>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <HAL_UART_IRQHandler+0xee>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	f043 0208 	orr.w	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d078      	beq.n	8004364 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_UART_IRQHandler+0x11c>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f96f 	bl	800456a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf14      	ite	ne
 800429a:	2301      	movne	r3, #1
 800429c:	2300      	moveq	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_UART_IRQHandler+0x144>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d031      	beq.n	8004318 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8c0 	bl	800443a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d023      	beq.n	8004310 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	4a21      	ldr	r2, [pc, #132]	; (800436c <HAL_UART_IRQHandler+0x1fc>)
 80042e6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe f921 	bl	8002534 <HAL_DMA_Abort_IT>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004302:	4610      	mov	r0, r2
 8004304:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004306:	e00e      	b.n	8004326 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f843 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430e:	e00a      	b.n	8004326 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f83f 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004316:	e006      	b.n	8004326 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f83b 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004324:	e01e      	b.n	8004364 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004326:	bf00      	nop
    return;
 8004328:	e01c      	b.n	8004364 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_UART_IRQHandler+0x1d6>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8ac 	bl	800449c <UART_Transmit_IT>
    return;
 8004344:	e00f      	b.n	8004366 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_UART_IRQHandler+0x1f6>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8ed 	bl	800453a <UART_EndTransmit_IT>
    return;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004364:	bf00      	nop
  }
}
 8004366:	3720      	adds	r7, #32
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	08004475 	.word	0x08004475

08004370 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr

08004382 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b6:	e02c      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043be:	d028      	beq.n	8004412 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c6:	f7fd fac3 	bl	8001950 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d21d      	bcs.n	8004412 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e00f      	b.n	8004432 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	429a      	cmp	r2, r3
 8004420:	bf0c      	ite	eq
 8004422:	2301      	moveq	r3, #1
 8004424:	2300      	movne	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	429a      	cmp	r2, r3
 800442e:	d0c3      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004450:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff ff80 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b21      	cmp	r3, #33	; 0x21
 80044ae:	d13e      	bne.n	800452e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d114      	bne.n	80044e4 <UART_Transmit_IT+0x48>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d110      	bne.n	80044e4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	1c9a      	adds	r2, r3, #2
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]
 80044e2:	e008      	b.n	80044f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6211      	str	r1, [r2, #32]
 80044ee:	781a      	ldrb	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29b      	uxth	r3, r3
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4619      	mov	r1, r3
 8004504:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004518:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004528:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004550:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff ff08 	bl	8004370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b22      	cmp	r3, #34	; 0x22
 800457c:	d170      	bne.n	8004660 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	d117      	bne.n	80045b8 <UART_Receive_IT+0x4e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	1c9a      	adds	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
 80045b6:	e026      	b.n	8004606 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ca:	d007      	beq.n	80045dc <UART_Receive_IT+0x72>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <UART_Receive_IT+0x80>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e008      	b.n	80045fc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4619      	mov	r1, r3
 8004614:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004616:	2b00      	cmp	r3, #0
 8004618:	d120      	bne.n	800465c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0220 	bic.w	r2, r2, #32
 8004628:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fe95 	bl	8004382 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e002      	b.n	8004662 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046a6:	f023 030c 	bic.w	r3, r3, #12
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <UART_SetConfig+0x114>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d103      	bne.n	80046dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046d4:	f7fe fe34 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	e002      	b.n	80046e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046dc:	f7fe fe1c 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80046e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009a      	lsls	r2, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <UART_SetConfig+0x118>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	0119      	lsls	r1, r3, #4
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	009a      	lsls	r2, r3, #2
 800470c:	441a      	add	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	fbb2 f2f3 	udiv	r2, r2, r3
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <UART_SetConfig+0x118>)
 800471a:	fba3 0302 	umull	r0, r3, r3, r2
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	2064      	movs	r0, #100	; 0x64
 8004722:	fb00 f303 	mul.w	r3, r0, r3
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	3332      	adds	r3, #50	; 0x32
 800472c:	4a15      	ldr	r2, [pc, #84]	; (8004784 <UART_SetConfig+0x118>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004738:	4419      	add	r1, r3
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009a      	lsls	r2, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <UART_SetConfig+0x118>)
 8004752:	fba3 0302 	umull	r0, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2064      	movs	r0, #100	; 0x64
 800475a:	fb00 f303 	mul.w	r3, r0, r3
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	3332      	adds	r3, #50	; 0x32
 8004764:	4a07      	ldr	r2, [pc, #28]	; (8004784 <UART_SetConfig+0x118>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	440a      	add	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40013800 	.word	0x40013800
 8004784:	51eb851f 	.word	0x51eb851f

08004788 <__errno>:
 8004788:	4b01      	ldr	r3, [pc, #4]	; (8004790 <__errno+0x8>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000010 	.word	0x20000010

08004794 <__libc_init_array>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	2500      	movs	r5, #0
 8004798:	4e0c      	ldr	r6, [pc, #48]	; (80047cc <__libc_init_array+0x38>)
 800479a:	4c0d      	ldr	r4, [pc, #52]	; (80047d0 <__libc_init_array+0x3c>)
 800479c:	1ba4      	subs	r4, r4, r6
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	42a5      	cmp	r5, r4
 80047a2:	d109      	bne.n	80047b8 <__libc_init_array+0x24>
 80047a4:	f000 fc34 	bl	8005010 <_init>
 80047a8:	2500      	movs	r5, #0
 80047aa:	4e0a      	ldr	r6, [pc, #40]	; (80047d4 <__libc_init_array+0x40>)
 80047ac:	4c0a      	ldr	r4, [pc, #40]	; (80047d8 <__libc_init_array+0x44>)
 80047ae:	1ba4      	subs	r4, r4, r6
 80047b0:	10a4      	asrs	r4, r4, #2
 80047b2:	42a5      	cmp	r5, r4
 80047b4:	d105      	bne.n	80047c2 <__libc_init_array+0x2e>
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047bc:	4798      	blx	r3
 80047be:	3501      	adds	r5, #1
 80047c0:	e7ee      	b.n	80047a0 <__libc_init_array+0xc>
 80047c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047c6:	4798      	blx	r3
 80047c8:	3501      	adds	r5, #1
 80047ca:	e7f2      	b.n	80047b2 <__libc_init_array+0x1e>
 80047cc:	080050e0 	.word	0x080050e0
 80047d0:	080050e0 	.word	0x080050e0
 80047d4:	080050e0 	.word	0x080050e0
 80047d8:	080050e4 	.word	0x080050e4

080047dc <memset>:
 80047dc:	4603      	mov	r3, r0
 80047de:	4402      	add	r2, r0
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d100      	bne.n	80047e6 <memset+0xa>
 80047e4:	4770      	bx	lr
 80047e6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ea:	e7f9      	b.n	80047e0 <memset+0x4>

080047ec <siprintf>:
 80047ec:	b40e      	push	{r1, r2, r3}
 80047ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047f2:	b500      	push	{lr}
 80047f4:	b09c      	sub	sp, #112	; 0x70
 80047f6:	ab1d      	add	r3, sp, #116	; 0x74
 80047f8:	9002      	str	r0, [sp, #8]
 80047fa:	9006      	str	r0, [sp, #24]
 80047fc:	9107      	str	r1, [sp, #28]
 80047fe:	9104      	str	r1, [sp, #16]
 8004800:	4808      	ldr	r0, [pc, #32]	; (8004824 <siprintf+0x38>)
 8004802:	4909      	ldr	r1, [pc, #36]	; (8004828 <siprintf+0x3c>)
 8004804:	f853 2b04 	ldr.w	r2, [r3], #4
 8004808:	9105      	str	r1, [sp, #20]
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	a902      	add	r1, sp, #8
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	f000 f866 	bl	80048e0 <_svfiprintf_r>
 8004814:	2200      	movs	r2, #0
 8004816:	9b02      	ldr	r3, [sp, #8]
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	b01c      	add	sp, #112	; 0x70
 800481c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004820:	b003      	add	sp, #12
 8004822:	4770      	bx	lr
 8004824:	20000010 	.word	0x20000010
 8004828:	ffff0208 	.word	0xffff0208

0800482c <__ssputs_r>:
 800482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	688e      	ldr	r6, [r1, #8]
 8004832:	4682      	mov	sl, r0
 8004834:	429e      	cmp	r6, r3
 8004836:	460c      	mov	r4, r1
 8004838:	4690      	mov	r8, r2
 800483a:	4699      	mov	r9, r3
 800483c:	d837      	bhi.n	80048ae <__ssputs_r+0x82>
 800483e:	898a      	ldrh	r2, [r1, #12]
 8004840:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004844:	d031      	beq.n	80048aa <__ssputs_r+0x7e>
 8004846:	2302      	movs	r3, #2
 8004848:	6825      	ldr	r5, [r4, #0]
 800484a:	6909      	ldr	r1, [r1, #16]
 800484c:	1a6f      	subs	r7, r5, r1
 800484e:	6965      	ldr	r5, [r4, #20]
 8004850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004854:	fb95 f5f3 	sdiv	r5, r5, r3
 8004858:	f109 0301 	add.w	r3, r9, #1
 800485c:	443b      	add	r3, r7
 800485e:	429d      	cmp	r5, r3
 8004860:	bf38      	it	cc
 8004862:	461d      	movcc	r5, r3
 8004864:	0553      	lsls	r3, r2, #21
 8004866:	d530      	bpl.n	80048ca <__ssputs_r+0x9e>
 8004868:	4629      	mov	r1, r5
 800486a:	f000 fb37 	bl	8004edc <_malloc_r>
 800486e:	4606      	mov	r6, r0
 8004870:	b950      	cbnz	r0, 8004888 <__ssputs_r+0x5c>
 8004872:	230c      	movs	r3, #12
 8004874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004878:	f8ca 3000 	str.w	r3, [sl]
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004882:	81a3      	strh	r3, [r4, #12]
 8004884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004888:	463a      	mov	r2, r7
 800488a:	6921      	ldr	r1, [r4, #16]
 800488c:	f000 fab6 	bl	8004dfc <memcpy>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	6126      	str	r6, [r4, #16]
 800489e:	443e      	add	r6, r7
 80048a0:	6026      	str	r6, [r4, #0]
 80048a2:	464e      	mov	r6, r9
 80048a4:	6165      	str	r5, [r4, #20]
 80048a6:	1bed      	subs	r5, r5, r7
 80048a8:	60a5      	str	r5, [r4, #8]
 80048aa:	454e      	cmp	r6, r9
 80048ac:	d900      	bls.n	80048b0 <__ssputs_r+0x84>
 80048ae:	464e      	mov	r6, r9
 80048b0:	4632      	mov	r2, r6
 80048b2:	4641      	mov	r1, r8
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	f000 faac 	bl	8004e12 <memmove>
 80048ba:	68a3      	ldr	r3, [r4, #8]
 80048bc:	2000      	movs	r0, #0
 80048be:	1b9b      	subs	r3, r3, r6
 80048c0:	60a3      	str	r3, [r4, #8]
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	441e      	add	r6, r3
 80048c6:	6026      	str	r6, [r4, #0]
 80048c8:	e7dc      	b.n	8004884 <__ssputs_r+0x58>
 80048ca:	462a      	mov	r2, r5
 80048cc:	f000 fb60 	bl	8004f90 <_realloc_r>
 80048d0:	4606      	mov	r6, r0
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d1e2      	bne.n	800489c <__ssputs_r+0x70>
 80048d6:	6921      	ldr	r1, [r4, #16]
 80048d8:	4650      	mov	r0, sl
 80048da:	f000 fab3 	bl	8004e44 <_free_r>
 80048de:	e7c8      	b.n	8004872 <__ssputs_r+0x46>

080048e0 <_svfiprintf_r>:
 80048e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e4:	461d      	mov	r5, r3
 80048e6:	898b      	ldrh	r3, [r1, #12]
 80048e8:	b09d      	sub	sp, #116	; 0x74
 80048ea:	061f      	lsls	r7, r3, #24
 80048ec:	4680      	mov	r8, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4616      	mov	r6, r2
 80048f2:	d50f      	bpl.n	8004914 <_svfiprintf_r+0x34>
 80048f4:	690b      	ldr	r3, [r1, #16]
 80048f6:	b96b      	cbnz	r3, 8004914 <_svfiprintf_r+0x34>
 80048f8:	2140      	movs	r1, #64	; 0x40
 80048fa:	f000 faef 	bl	8004edc <_malloc_r>
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	6120      	str	r0, [r4, #16]
 8004902:	b928      	cbnz	r0, 8004910 <_svfiprintf_r+0x30>
 8004904:	230c      	movs	r3, #12
 8004906:	f8c8 3000 	str.w	r3, [r8]
 800490a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800490e:	e0c8      	b.n	8004aa2 <_svfiprintf_r+0x1c2>
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	6163      	str	r3, [r4, #20]
 8004914:	2300      	movs	r3, #0
 8004916:	9309      	str	r3, [sp, #36]	; 0x24
 8004918:	2320      	movs	r3, #32
 800491a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800491e:	2330      	movs	r3, #48	; 0x30
 8004920:	f04f 0b01 	mov.w	fp, #1
 8004924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004928:	9503      	str	r5, [sp, #12]
 800492a:	4637      	mov	r7, r6
 800492c:	463d      	mov	r5, r7
 800492e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004932:	b10b      	cbz	r3, 8004938 <_svfiprintf_r+0x58>
 8004934:	2b25      	cmp	r3, #37	; 0x25
 8004936:	d13e      	bne.n	80049b6 <_svfiprintf_r+0xd6>
 8004938:	ebb7 0a06 	subs.w	sl, r7, r6
 800493c:	d00b      	beq.n	8004956 <_svfiprintf_r+0x76>
 800493e:	4653      	mov	r3, sl
 8004940:	4632      	mov	r2, r6
 8004942:	4621      	mov	r1, r4
 8004944:	4640      	mov	r0, r8
 8004946:	f7ff ff71 	bl	800482c <__ssputs_r>
 800494a:	3001      	adds	r0, #1
 800494c:	f000 80a4 	beq.w	8004a98 <_svfiprintf_r+0x1b8>
 8004950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004952:	4453      	add	r3, sl
 8004954:	9309      	str	r3, [sp, #36]	; 0x24
 8004956:	783b      	ldrb	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 809d 	beq.w	8004a98 <_svfiprintf_r+0x1b8>
 800495e:	2300      	movs	r3, #0
 8004960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004968:	9304      	str	r3, [sp, #16]
 800496a:	9307      	str	r3, [sp, #28]
 800496c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004970:	931a      	str	r3, [sp, #104]	; 0x68
 8004972:	462f      	mov	r7, r5
 8004974:	2205      	movs	r2, #5
 8004976:	f817 1b01 	ldrb.w	r1, [r7], #1
 800497a:	4850      	ldr	r0, [pc, #320]	; (8004abc <_svfiprintf_r+0x1dc>)
 800497c:	f000 fa30 	bl	8004de0 <memchr>
 8004980:	9b04      	ldr	r3, [sp, #16]
 8004982:	b9d0      	cbnz	r0, 80049ba <_svfiprintf_r+0xda>
 8004984:	06d9      	lsls	r1, r3, #27
 8004986:	bf44      	itt	mi
 8004988:	2220      	movmi	r2, #32
 800498a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800498e:	071a      	lsls	r2, r3, #28
 8004990:	bf44      	itt	mi
 8004992:	222b      	movmi	r2, #43	; 0x2b
 8004994:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004998:	782a      	ldrb	r2, [r5, #0]
 800499a:	2a2a      	cmp	r2, #42	; 0x2a
 800499c:	d015      	beq.n	80049ca <_svfiprintf_r+0xea>
 800499e:	462f      	mov	r7, r5
 80049a0:	2000      	movs	r0, #0
 80049a2:	250a      	movs	r5, #10
 80049a4:	9a07      	ldr	r2, [sp, #28]
 80049a6:	4639      	mov	r1, r7
 80049a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049ac:	3b30      	subs	r3, #48	; 0x30
 80049ae:	2b09      	cmp	r3, #9
 80049b0:	d94d      	bls.n	8004a4e <_svfiprintf_r+0x16e>
 80049b2:	b1b8      	cbz	r0, 80049e4 <_svfiprintf_r+0x104>
 80049b4:	e00f      	b.n	80049d6 <_svfiprintf_r+0xf6>
 80049b6:	462f      	mov	r7, r5
 80049b8:	e7b8      	b.n	800492c <_svfiprintf_r+0x4c>
 80049ba:	4a40      	ldr	r2, [pc, #256]	; (8004abc <_svfiprintf_r+0x1dc>)
 80049bc:	463d      	mov	r5, r7
 80049be:	1a80      	subs	r0, r0, r2
 80049c0:	fa0b f000 	lsl.w	r0, fp, r0
 80049c4:	4318      	orrs	r0, r3
 80049c6:	9004      	str	r0, [sp, #16]
 80049c8:	e7d3      	b.n	8004972 <_svfiprintf_r+0x92>
 80049ca:	9a03      	ldr	r2, [sp, #12]
 80049cc:	1d11      	adds	r1, r2, #4
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	9103      	str	r1, [sp, #12]
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	db01      	blt.n	80049da <_svfiprintf_r+0xfa>
 80049d6:	9207      	str	r2, [sp, #28]
 80049d8:	e004      	b.n	80049e4 <_svfiprintf_r+0x104>
 80049da:	4252      	negs	r2, r2
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	9207      	str	r2, [sp, #28]
 80049e2:	9304      	str	r3, [sp, #16]
 80049e4:	783b      	ldrb	r3, [r7, #0]
 80049e6:	2b2e      	cmp	r3, #46	; 0x2e
 80049e8:	d10c      	bne.n	8004a04 <_svfiprintf_r+0x124>
 80049ea:	787b      	ldrb	r3, [r7, #1]
 80049ec:	2b2a      	cmp	r3, #42	; 0x2a
 80049ee:	d133      	bne.n	8004a58 <_svfiprintf_r+0x178>
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	3702      	adds	r7, #2
 80049f4:	1d1a      	adds	r2, r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	9203      	str	r2, [sp, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bfb8      	it	lt
 80049fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	4d2e      	ldr	r5, [pc, #184]	; (8004ac0 <_svfiprintf_r+0x1e0>)
 8004a06:	2203      	movs	r2, #3
 8004a08:	7839      	ldrb	r1, [r7, #0]
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 f9e8 	bl	8004de0 <memchr>
 8004a10:	b138      	cbz	r0, 8004a22 <_svfiprintf_r+0x142>
 8004a12:	2340      	movs	r3, #64	; 0x40
 8004a14:	1b40      	subs	r0, r0, r5
 8004a16:	fa03 f000 	lsl.w	r0, r3, r0
 8004a1a:	9b04      	ldr	r3, [sp, #16]
 8004a1c:	3701      	adds	r7, #1
 8004a1e:	4303      	orrs	r3, r0
 8004a20:	9304      	str	r3, [sp, #16]
 8004a22:	7839      	ldrb	r1, [r7, #0]
 8004a24:	2206      	movs	r2, #6
 8004a26:	4827      	ldr	r0, [pc, #156]	; (8004ac4 <_svfiprintf_r+0x1e4>)
 8004a28:	1c7e      	adds	r6, r7, #1
 8004a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a2e:	f000 f9d7 	bl	8004de0 <memchr>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d038      	beq.n	8004aa8 <_svfiprintf_r+0x1c8>
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <_svfiprintf_r+0x1e8>)
 8004a38:	bb13      	cbnz	r3, 8004a80 <_svfiprintf_r+0x1a0>
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	3307      	adds	r3, #7
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	3308      	adds	r3, #8
 8004a44:	9303      	str	r3, [sp, #12]
 8004a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a48:	444b      	add	r3, r9
 8004a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4c:	e76d      	b.n	800492a <_svfiprintf_r+0x4a>
 8004a4e:	fb05 3202 	mla	r2, r5, r2, r3
 8004a52:	2001      	movs	r0, #1
 8004a54:	460f      	mov	r7, r1
 8004a56:	e7a6      	b.n	80049a6 <_svfiprintf_r+0xc6>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	250a      	movs	r5, #10
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	3701      	adds	r7, #1
 8004a60:	9305      	str	r3, [sp, #20]
 8004a62:	4638      	mov	r0, r7
 8004a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a68:	3a30      	subs	r2, #48	; 0x30
 8004a6a:	2a09      	cmp	r2, #9
 8004a6c:	d903      	bls.n	8004a76 <_svfiprintf_r+0x196>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0c8      	beq.n	8004a04 <_svfiprintf_r+0x124>
 8004a72:	9105      	str	r1, [sp, #20]
 8004a74:	e7c6      	b.n	8004a04 <_svfiprintf_r+0x124>
 8004a76:	fb05 2101 	mla	r1, r5, r1, r2
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	e7f0      	b.n	8004a62 <_svfiprintf_r+0x182>
 8004a80:	ab03      	add	r3, sp, #12
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4622      	mov	r2, r4
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <_svfiprintf_r+0x1ec>)
 8004a88:	a904      	add	r1, sp, #16
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	f3af 8000 	nop.w
 8004a90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004a94:	4681      	mov	r9, r0
 8004a96:	d1d6      	bne.n	8004a46 <_svfiprintf_r+0x166>
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	065b      	lsls	r3, r3, #25
 8004a9c:	f53f af35 	bmi.w	800490a <_svfiprintf_r+0x2a>
 8004aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aa2:	b01d      	add	sp, #116	; 0x74
 8004aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa8:	ab03      	add	r3, sp, #12
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	4622      	mov	r2, r4
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <_svfiprintf_r+0x1ec>)
 8004ab0:	a904      	add	r1, sp, #16
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	f000 f882 	bl	8004bbc <_printf_i>
 8004ab8:	e7ea      	b.n	8004a90 <_svfiprintf_r+0x1b0>
 8004aba:	bf00      	nop
 8004abc:	080050ac 	.word	0x080050ac
 8004ac0:	080050b2 	.word	0x080050b2
 8004ac4:	080050b6 	.word	0x080050b6
 8004ac8:	00000000 	.word	0x00000000
 8004acc:	0800482d 	.word	0x0800482d

08004ad0 <_printf_common>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	4691      	mov	r9, r2
 8004ad6:	461f      	mov	r7, r3
 8004ad8:	688a      	ldr	r2, [r1, #8]
 8004ada:	690b      	ldr	r3, [r1, #16]
 8004adc:	4606      	mov	r6, r0
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	bfb8      	it	lt
 8004ae2:	4613      	movlt	r3, r2
 8004ae4:	f8c9 3000 	str.w	r3, [r9]
 8004ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aec:	460c      	mov	r4, r1
 8004aee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004af2:	b112      	cbz	r2, 8004afa <_printf_common+0x2a>
 8004af4:	3301      	adds	r3, #1
 8004af6:	f8c9 3000 	str.w	r3, [r9]
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	0699      	lsls	r1, r3, #26
 8004afe:	bf42      	ittt	mi
 8004b00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b04:	3302      	addmi	r3, #2
 8004b06:	f8c9 3000 	strmi.w	r3, [r9]
 8004b0a:	6825      	ldr	r5, [r4, #0]
 8004b0c:	f015 0506 	ands.w	r5, r5, #6
 8004b10:	d107      	bne.n	8004b22 <_printf_common+0x52>
 8004b12:	f104 0a19 	add.w	sl, r4, #25
 8004b16:	68e3      	ldr	r3, [r4, #12]
 8004b18:	f8d9 2000 	ldr.w	r2, [r9]
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	42ab      	cmp	r3, r5
 8004b20:	dc29      	bgt.n	8004b76 <_printf_common+0xa6>
 8004b22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b26:	6822      	ldr	r2, [r4, #0]
 8004b28:	3300      	adds	r3, #0
 8004b2a:	bf18      	it	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	0692      	lsls	r2, r2, #26
 8004b30:	d42e      	bmi.n	8004b90 <_printf_common+0xc0>
 8004b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b36:	4639      	mov	r1, r7
 8004b38:	4630      	mov	r0, r6
 8004b3a:	47c0      	blx	r8
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d021      	beq.n	8004b84 <_printf_common+0xb4>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	68e5      	ldr	r5, [r4, #12]
 8004b44:	f003 0306 	and.w	r3, r3, #6
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	bf18      	it	ne
 8004b4c:	2500      	movne	r5, #0
 8004b4e:	f8d9 2000 	ldr.w	r2, [r9]
 8004b52:	f04f 0900 	mov.w	r9, #0
 8004b56:	bf08      	it	eq
 8004b58:	1aad      	subeq	r5, r5, r2
 8004b5a:	68a3      	ldr	r3, [r4, #8]
 8004b5c:	6922      	ldr	r2, [r4, #16]
 8004b5e:	bf08      	it	eq
 8004b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b64:	4293      	cmp	r3, r2
 8004b66:	bfc4      	itt	gt
 8004b68:	1a9b      	subgt	r3, r3, r2
 8004b6a:	18ed      	addgt	r5, r5, r3
 8004b6c:	341a      	adds	r4, #26
 8004b6e:	454d      	cmp	r5, r9
 8004b70:	d11a      	bne.n	8004ba8 <_printf_common+0xd8>
 8004b72:	2000      	movs	r0, #0
 8004b74:	e008      	b.n	8004b88 <_printf_common+0xb8>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4652      	mov	r2, sl
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	47c0      	blx	r8
 8004b80:	3001      	adds	r0, #1
 8004b82:	d103      	bne.n	8004b8c <_printf_common+0xbc>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	e7c2      	b.n	8004b16 <_printf_common+0x46>
 8004b90:	2030      	movs	r0, #48	; 0x30
 8004b92:	18e1      	adds	r1, r4, r3
 8004b94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b9e:	4422      	add	r2, r4
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ba6:	e7c4      	b.n	8004b32 <_printf_common+0x62>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4622      	mov	r2, r4
 8004bac:	4639      	mov	r1, r7
 8004bae:	4630      	mov	r0, r6
 8004bb0:	47c0      	blx	r8
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0e6      	beq.n	8004b84 <_printf_common+0xb4>
 8004bb6:	f109 0901 	add.w	r9, r9, #1
 8004bba:	e7d8      	b.n	8004b6e <_printf_common+0x9e>

08004bbc <_printf_i>:
 8004bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	7e09      	ldrb	r1, [r1, #24]
 8004bc8:	b085      	sub	sp, #20
 8004bca:	296e      	cmp	r1, #110	; 0x6e
 8004bcc:	4617      	mov	r7, r2
 8004bce:	4606      	mov	r6, r0
 8004bd0:	4698      	mov	r8, r3
 8004bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bd4:	f000 80b3 	beq.w	8004d3e <_printf_i+0x182>
 8004bd8:	d822      	bhi.n	8004c20 <_printf_i+0x64>
 8004bda:	2963      	cmp	r1, #99	; 0x63
 8004bdc:	d036      	beq.n	8004c4c <_printf_i+0x90>
 8004bde:	d80a      	bhi.n	8004bf6 <_printf_i+0x3a>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	f000 80b9 	beq.w	8004d58 <_printf_i+0x19c>
 8004be6:	2958      	cmp	r1, #88	; 0x58
 8004be8:	f000 8083 	beq.w	8004cf2 <_printf_i+0x136>
 8004bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bf4:	e032      	b.n	8004c5c <_printf_i+0xa0>
 8004bf6:	2964      	cmp	r1, #100	; 0x64
 8004bf8:	d001      	beq.n	8004bfe <_printf_i+0x42>
 8004bfa:	2969      	cmp	r1, #105	; 0x69
 8004bfc:	d1f6      	bne.n	8004bec <_printf_i+0x30>
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	0605      	lsls	r5, r0, #24
 8004c04:	f103 0104 	add.w	r1, r3, #4
 8004c08:	d52a      	bpl.n	8004c60 <_printf_i+0xa4>
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6011      	str	r1, [r2, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	da03      	bge.n	8004c1a <_printf_i+0x5e>
 8004c12:	222d      	movs	r2, #45	; 0x2d
 8004c14:	425b      	negs	r3, r3
 8004c16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c1a:	486f      	ldr	r0, [pc, #444]	; (8004dd8 <_printf_i+0x21c>)
 8004c1c:	220a      	movs	r2, #10
 8004c1e:	e039      	b.n	8004c94 <_printf_i+0xd8>
 8004c20:	2973      	cmp	r1, #115	; 0x73
 8004c22:	f000 809d 	beq.w	8004d60 <_printf_i+0x1a4>
 8004c26:	d808      	bhi.n	8004c3a <_printf_i+0x7e>
 8004c28:	296f      	cmp	r1, #111	; 0x6f
 8004c2a:	d020      	beq.n	8004c6e <_printf_i+0xb2>
 8004c2c:	2970      	cmp	r1, #112	; 0x70
 8004c2e:	d1dd      	bne.n	8004bec <_printf_i+0x30>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	f043 0320 	orr.w	r3, r3, #32
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	e003      	b.n	8004c42 <_printf_i+0x86>
 8004c3a:	2975      	cmp	r1, #117	; 0x75
 8004c3c:	d017      	beq.n	8004c6e <_printf_i+0xb2>
 8004c3e:	2978      	cmp	r1, #120	; 0x78
 8004c40:	d1d4      	bne.n	8004bec <_printf_i+0x30>
 8004c42:	2378      	movs	r3, #120	; 0x78
 8004c44:	4865      	ldr	r0, [pc, #404]	; (8004ddc <_printf_i+0x220>)
 8004c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c4a:	e055      	b.n	8004cf8 <_printf_i+0x13c>
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c52:	1d19      	adds	r1, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6011      	str	r1, [r2, #0]
 8004c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e08c      	b.n	8004d7a <_printf_i+0x1be>
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c66:	6011      	str	r1, [r2, #0]
 8004c68:	bf18      	it	ne
 8004c6a:	b21b      	sxthne	r3, r3
 8004c6c:	e7cf      	b.n	8004c0e <_printf_i+0x52>
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	6825      	ldr	r5, [r4, #0]
 8004c72:	1d18      	adds	r0, r3, #4
 8004c74:	6010      	str	r0, [r2, #0]
 8004c76:	0628      	lsls	r0, r5, #24
 8004c78:	d501      	bpl.n	8004c7e <_printf_i+0xc2>
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	e002      	b.n	8004c84 <_printf_i+0xc8>
 8004c7e:	0668      	lsls	r0, r5, #25
 8004c80:	d5fb      	bpl.n	8004c7a <_printf_i+0xbe>
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	296f      	cmp	r1, #111	; 0x6f
 8004c86:	bf14      	ite	ne
 8004c88:	220a      	movne	r2, #10
 8004c8a:	2208      	moveq	r2, #8
 8004c8c:	4852      	ldr	r0, [pc, #328]	; (8004dd8 <_printf_i+0x21c>)
 8004c8e:	2100      	movs	r1, #0
 8004c90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c94:	6865      	ldr	r5, [r4, #4]
 8004c96:	2d00      	cmp	r5, #0
 8004c98:	60a5      	str	r5, [r4, #8]
 8004c9a:	f2c0 8095 	blt.w	8004dc8 <_printf_i+0x20c>
 8004c9e:	6821      	ldr	r1, [r4, #0]
 8004ca0:	f021 0104 	bic.w	r1, r1, #4
 8004ca4:	6021      	str	r1, [r4, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d13d      	bne.n	8004d26 <_printf_i+0x16a>
 8004caa:	2d00      	cmp	r5, #0
 8004cac:	f040 808e 	bne.w	8004dcc <_printf_i+0x210>
 8004cb0:	4665      	mov	r5, ip
 8004cb2:	2a08      	cmp	r2, #8
 8004cb4:	d10b      	bne.n	8004cce <_printf_i+0x112>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	07db      	lsls	r3, r3, #31
 8004cba:	d508      	bpl.n	8004cce <_printf_i+0x112>
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	6862      	ldr	r2, [r4, #4]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	bfde      	ittt	le
 8004cc4:	2330      	movle	r3, #48	; 0x30
 8004cc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004cce:	ebac 0305 	sub.w	r3, ip, r5
 8004cd2:	6123      	str	r3, [r4, #16]
 8004cd4:	f8cd 8000 	str.w	r8, [sp]
 8004cd8:	463b      	mov	r3, r7
 8004cda:	aa03      	add	r2, sp, #12
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff fef6 	bl	8004ad0 <_printf_common>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d14d      	bne.n	8004d84 <_printf_i+0x1c8>
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cec:	b005      	add	sp, #20
 8004cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cf2:	4839      	ldr	r0, [pc, #228]	; (8004dd8 <_printf_i+0x21c>)
 8004cf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cf8:	6813      	ldr	r3, [r2, #0]
 8004cfa:	6821      	ldr	r1, [r4, #0]
 8004cfc:	1d1d      	adds	r5, r3, #4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6015      	str	r5, [r2, #0]
 8004d02:	060a      	lsls	r2, r1, #24
 8004d04:	d50b      	bpl.n	8004d1e <_printf_i+0x162>
 8004d06:	07ca      	lsls	r2, r1, #31
 8004d08:	bf44      	itt	mi
 8004d0a:	f041 0120 	orrmi.w	r1, r1, #32
 8004d0e:	6021      	strmi	r1, [r4, #0]
 8004d10:	b91b      	cbnz	r3, 8004d1a <_printf_i+0x15e>
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	f022 0220 	bic.w	r2, r2, #32
 8004d18:	6022      	str	r2, [r4, #0]
 8004d1a:	2210      	movs	r2, #16
 8004d1c:	e7b7      	b.n	8004c8e <_printf_i+0xd2>
 8004d1e:	064d      	lsls	r5, r1, #25
 8004d20:	bf48      	it	mi
 8004d22:	b29b      	uxthmi	r3, r3
 8004d24:	e7ef      	b.n	8004d06 <_printf_i+0x14a>
 8004d26:	4665      	mov	r5, ip
 8004d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d2c:	fb02 3311 	mls	r3, r2, r1, r3
 8004d30:	5cc3      	ldrb	r3, [r0, r3]
 8004d32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d36:	460b      	mov	r3, r1
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d1f5      	bne.n	8004d28 <_printf_i+0x16c>
 8004d3c:	e7b9      	b.n	8004cb2 <_printf_i+0xf6>
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	6825      	ldr	r5, [r4, #0]
 8004d42:	1d18      	adds	r0, r3, #4
 8004d44:	6961      	ldr	r1, [r4, #20]
 8004d46:	6010      	str	r0, [r2, #0]
 8004d48:	0628      	lsls	r0, r5, #24
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	d501      	bpl.n	8004d52 <_printf_i+0x196>
 8004d4e:	6019      	str	r1, [r3, #0]
 8004d50:	e002      	b.n	8004d58 <_printf_i+0x19c>
 8004d52:	066a      	lsls	r2, r5, #25
 8004d54:	d5fb      	bpl.n	8004d4e <_printf_i+0x192>
 8004d56:	8019      	strh	r1, [r3, #0]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4665      	mov	r5, ip
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	e7b9      	b.n	8004cd4 <_printf_i+0x118>
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	1d19      	adds	r1, r3, #4
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	681d      	ldr	r5, [r3, #0]
 8004d68:	6862      	ldr	r2, [r4, #4]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f000 f837 	bl	8004de0 <memchr>
 8004d72:	b108      	cbz	r0, 8004d78 <_printf_i+0x1bc>
 8004d74:	1b40      	subs	r0, r0, r5
 8004d76:	6060      	str	r0, [r4, #4]
 8004d78:	6863      	ldr	r3, [r4, #4]
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d82:	e7a7      	b.n	8004cd4 <_printf_i+0x118>
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	462a      	mov	r2, r5
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d0aa      	beq.n	8004ce8 <_printf_i+0x12c>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	079b      	lsls	r3, r3, #30
 8004d96:	d413      	bmi.n	8004dc0 <_printf_i+0x204>
 8004d98:	68e0      	ldr	r0, [r4, #12]
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	4298      	cmp	r0, r3
 8004d9e:	bfb8      	it	lt
 8004da0:	4618      	movlt	r0, r3
 8004da2:	e7a3      	b.n	8004cec <_printf_i+0x130>
 8004da4:	2301      	movs	r3, #1
 8004da6:	464a      	mov	r2, r9
 8004da8:	4639      	mov	r1, r7
 8004daa:	4630      	mov	r0, r6
 8004dac:	47c0      	blx	r8
 8004dae:	3001      	adds	r0, #1
 8004db0:	d09a      	beq.n	8004ce8 <_printf_i+0x12c>
 8004db2:	3501      	adds	r5, #1
 8004db4:	68e3      	ldr	r3, [r4, #12]
 8004db6:	9a03      	ldr	r2, [sp, #12]
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	42ab      	cmp	r3, r5
 8004dbc:	dcf2      	bgt.n	8004da4 <_printf_i+0x1e8>
 8004dbe:	e7eb      	b.n	8004d98 <_printf_i+0x1dc>
 8004dc0:	2500      	movs	r5, #0
 8004dc2:	f104 0919 	add.w	r9, r4, #25
 8004dc6:	e7f5      	b.n	8004db4 <_printf_i+0x1f8>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ac      	bne.n	8004d26 <_printf_i+0x16a>
 8004dcc:	7803      	ldrb	r3, [r0, #0]
 8004dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dd6:	e76c      	b.n	8004cb2 <_printf_i+0xf6>
 8004dd8:	080050bd 	.word	0x080050bd
 8004ddc:	080050ce 	.word	0x080050ce

08004de0 <memchr>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	b2c9      	uxtb	r1, r1
 8004de4:	4402      	add	r2, r0
 8004de6:	4290      	cmp	r0, r2
 8004de8:	4603      	mov	r3, r0
 8004dea:	d101      	bne.n	8004df0 <memchr+0x10>
 8004dec:	2300      	movs	r3, #0
 8004dee:	e003      	b.n	8004df8 <memchr+0x18>
 8004df0:	781c      	ldrb	r4, [r3, #0]
 8004df2:	3001      	adds	r0, #1
 8004df4:	428c      	cmp	r4, r1
 8004df6:	d1f6      	bne.n	8004de6 <memchr+0x6>
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd10      	pop	{r4, pc}

08004dfc <memcpy>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	1e43      	subs	r3, r0, #1
 8004e00:	440a      	add	r2, r1
 8004e02:	4291      	cmp	r1, r2
 8004e04:	d100      	bne.n	8004e08 <memcpy+0xc>
 8004e06:	bd10      	pop	{r4, pc}
 8004e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e10:	e7f7      	b.n	8004e02 <memcpy+0x6>

08004e12 <memmove>:
 8004e12:	4288      	cmp	r0, r1
 8004e14:	b510      	push	{r4, lr}
 8004e16:	eb01 0302 	add.w	r3, r1, r2
 8004e1a:	d807      	bhi.n	8004e2c <memmove+0x1a>
 8004e1c:	1e42      	subs	r2, r0, #1
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	d00a      	beq.n	8004e38 <memmove+0x26>
 8004e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004e2a:	e7f8      	b.n	8004e1e <memmove+0xc>
 8004e2c:	4283      	cmp	r3, r0
 8004e2e:	d9f5      	bls.n	8004e1c <memmove+0xa>
 8004e30:	1881      	adds	r1, r0, r2
 8004e32:	1ad2      	subs	r2, r2, r3
 8004e34:	42d3      	cmn	r3, r2
 8004e36:	d100      	bne.n	8004e3a <memmove+0x28>
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004e42:	e7f7      	b.n	8004e34 <memmove+0x22>

08004e44 <_free_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4605      	mov	r5, r0
 8004e48:	2900      	cmp	r1, #0
 8004e4a:	d043      	beq.n	8004ed4 <_free_r+0x90>
 8004e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e50:	1f0c      	subs	r4, r1, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfb8      	it	lt
 8004e56:	18e4      	addlt	r4, r4, r3
 8004e58:	f000 f8d0 	bl	8004ffc <__malloc_lock>
 8004e5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <_free_r+0x94>)
 8004e5e:	6813      	ldr	r3, [r2, #0]
 8004e60:	4610      	mov	r0, r2
 8004e62:	b933      	cbnz	r3, 8004e72 <_free_r+0x2e>
 8004e64:	6063      	str	r3, [r4, #4]
 8004e66:	6014      	str	r4, [r2, #0]
 8004e68:	4628      	mov	r0, r5
 8004e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e6e:	f000 b8c6 	b.w	8004ffe <__malloc_unlock>
 8004e72:	42a3      	cmp	r3, r4
 8004e74:	d90b      	bls.n	8004e8e <_free_r+0x4a>
 8004e76:	6821      	ldr	r1, [r4, #0]
 8004e78:	1862      	adds	r2, r4, r1
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bf01      	itttt	eq
 8004e7e:	681a      	ldreq	r2, [r3, #0]
 8004e80:	685b      	ldreq	r3, [r3, #4]
 8004e82:	1852      	addeq	r2, r2, r1
 8004e84:	6022      	streq	r2, [r4, #0]
 8004e86:	6063      	str	r3, [r4, #4]
 8004e88:	6004      	str	r4, [r0, #0]
 8004e8a:	e7ed      	b.n	8004e68 <_free_r+0x24>
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	b10a      	cbz	r2, 8004e96 <_free_r+0x52>
 8004e92:	42a2      	cmp	r2, r4
 8004e94:	d9fa      	bls.n	8004e8c <_free_r+0x48>
 8004e96:	6819      	ldr	r1, [r3, #0]
 8004e98:	1858      	adds	r0, r3, r1
 8004e9a:	42a0      	cmp	r0, r4
 8004e9c:	d10b      	bne.n	8004eb6 <_free_r+0x72>
 8004e9e:	6820      	ldr	r0, [r4, #0]
 8004ea0:	4401      	add	r1, r0
 8004ea2:	1858      	adds	r0, r3, r1
 8004ea4:	4282      	cmp	r2, r0
 8004ea6:	6019      	str	r1, [r3, #0]
 8004ea8:	d1de      	bne.n	8004e68 <_free_r+0x24>
 8004eaa:	6810      	ldr	r0, [r2, #0]
 8004eac:	6852      	ldr	r2, [r2, #4]
 8004eae:	4401      	add	r1, r0
 8004eb0:	6019      	str	r1, [r3, #0]
 8004eb2:	605a      	str	r2, [r3, #4]
 8004eb4:	e7d8      	b.n	8004e68 <_free_r+0x24>
 8004eb6:	d902      	bls.n	8004ebe <_free_r+0x7a>
 8004eb8:	230c      	movs	r3, #12
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	e7d4      	b.n	8004e68 <_free_r+0x24>
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	1821      	adds	r1, r4, r0
 8004ec2:	428a      	cmp	r2, r1
 8004ec4:	bf01      	itttt	eq
 8004ec6:	6811      	ldreq	r1, [r2, #0]
 8004ec8:	6852      	ldreq	r2, [r2, #4]
 8004eca:	1809      	addeq	r1, r1, r0
 8004ecc:	6021      	streq	r1, [r4, #0]
 8004ece:	6062      	str	r2, [r4, #4]
 8004ed0:	605c      	str	r4, [r3, #4]
 8004ed2:	e7c9      	b.n	8004e68 <_free_r+0x24>
 8004ed4:	bd38      	pop	{r3, r4, r5, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200000bc 	.word	0x200000bc

08004edc <_malloc_r>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	1ccd      	adds	r5, r1, #3
 8004ee0:	f025 0503 	bic.w	r5, r5, #3
 8004ee4:	3508      	adds	r5, #8
 8004ee6:	2d0c      	cmp	r5, #12
 8004ee8:	bf38      	it	cc
 8004eea:	250c      	movcc	r5, #12
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	4606      	mov	r6, r0
 8004ef0:	db01      	blt.n	8004ef6 <_malloc_r+0x1a>
 8004ef2:	42a9      	cmp	r1, r5
 8004ef4:	d903      	bls.n	8004efe <_malloc_r+0x22>
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	6033      	str	r3, [r6, #0]
 8004efa:	2000      	movs	r0, #0
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
 8004efe:	f000 f87d 	bl	8004ffc <__malloc_lock>
 8004f02:	4a21      	ldr	r2, [pc, #132]	; (8004f88 <_malloc_r+0xac>)
 8004f04:	6814      	ldr	r4, [r2, #0]
 8004f06:	4621      	mov	r1, r4
 8004f08:	b991      	cbnz	r1, 8004f30 <_malloc_r+0x54>
 8004f0a:	4c20      	ldr	r4, [pc, #128]	; (8004f8c <_malloc_r+0xb0>)
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	b91b      	cbnz	r3, 8004f18 <_malloc_r+0x3c>
 8004f10:	4630      	mov	r0, r6
 8004f12:	f000 f863 	bl	8004fdc <_sbrk_r>
 8004f16:	6020      	str	r0, [r4, #0]
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f000 f85e 	bl	8004fdc <_sbrk_r>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d124      	bne.n	8004f6e <_malloc_r+0x92>
 8004f24:	230c      	movs	r3, #12
 8004f26:	4630      	mov	r0, r6
 8004f28:	6033      	str	r3, [r6, #0]
 8004f2a:	f000 f868 	bl	8004ffe <__malloc_unlock>
 8004f2e:	e7e4      	b.n	8004efa <_malloc_r+0x1e>
 8004f30:	680b      	ldr	r3, [r1, #0]
 8004f32:	1b5b      	subs	r3, r3, r5
 8004f34:	d418      	bmi.n	8004f68 <_malloc_r+0x8c>
 8004f36:	2b0b      	cmp	r3, #11
 8004f38:	d90f      	bls.n	8004f5a <_malloc_r+0x7e>
 8004f3a:	600b      	str	r3, [r1, #0]
 8004f3c:	18cc      	adds	r4, r1, r3
 8004f3e:	50cd      	str	r5, [r1, r3]
 8004f40:	4630      	mov	r0, r6
 8004f42:	f000 f85c 	bl	8004ffe <__malloc_unlock>
 8004f46:	f104 000b 	add.w	r0, r4, #11
 8004f4a:	1d23      	adds	r3, r4, #4
 8004f4c:	f020 0007 	bic.w	r0, r0, #7
 8004f50:	1ac3      	subs	r3, r0, r3
 8004f52:	d0d3      	beq.n	8004efc <_malloc_r+0x20>
 8004f54:	425a      	negs	r2, r3
 8004f56:	50e2      	str	r2, [r4, r3]
 8004f58:	e7d0      	b.n	8004efc <_malloc_r+0x20>
 8004f5a:	684b      	ldr	r3, [r1, #4]
 8004f5c:	428c      	cmp	r4, r1
 8004f5e:	bf16      	itet	ne
 8004f60:	6063      	strne	r3, [r4, #4]
 8004f62:	6013      	streq	r3, [r2, #0]
 8004f64:	460c      	movne	r4, r1
 8004f66:	e7eb      	b.n	8004f40 <_malloc_r+0x64>
 8004f68:	460c      	mov	r4, r1
 8004f6a:	6849      	ldr	r1, [r1, #4]
 8004f6c:	e7cc      	b.n	8004f08 <_malloc_r+0x2c>
 8004f6e:	1cc4      	adds	r4, r0, #3
 8004f70:	f024 0403 	bic.w	r4, r4, #3
 8004f74:	42a0      	cmp	r0, r4
 8004f76:	d005      	beq.n	8004f84 <_malloc_r+0xa8>
 8004f78:	1a21      	subs	r1, r4, r0
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f000 f82e 	bl	8004fdc <_sbrk_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d0cf      	beq.n	8004f24 <_malloc_r+0x48>
 8004f84:	6025      	str	r5, [r4, #0]
 8004f86:	e7db      	b.n	8004f40 <_malloc_r+0x64>
 8004f88:	200000bc 	.word	0x200000bc
 8004f8c:	200000c0 	.word	0x200000c0

08004f90 <_realloc_r>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	4607      	mov	r7, r0
 8004f94:	4614      	mov	r4, r2
 8004f96:	460e      	mov	r6, r1
 8004f98:	b921      	cbnz	r1, 8004fa4 <_realloc_r+0x14>
 8004f9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	f7ff bf9c 	b.w	8004edc <_malloc_r>
 8004fa4:	b922      	cbnz	r2, 8004fb0 <_realloc_r+0x20>
 8004fa6:	f7ff ff4d 	bl	8004e44 <_free_r>
 8004faa:	4625      	mov	r5, r4
 8004fac:	4628      	mov	r0, r5
 8004fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb0:	f000 f826 	bl	8005000 <_malloc_usable_size_r>
 8004fb4:	42a0      	cmp	r0, r4
 8004fb6:	d20f      	bcs.n	8004fd8 <_realloc_r+0x48>
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4638      	mov	r0, r7
 8004fbc:	f7ff ff8e 	bl	8004edc <_malloc_r>
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d0f2      	beq.n	8004fac <_realloc_r+0x1c>
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4622      	mov	r2, r4
 8004fca:	f7ff ff17 	bl	8004dfc <memcpy>
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f7ff ff37 	bl	8004e44 <_free_r>
 8004fd6:	e7e9      	b.n	8004fac <_realloc_r+0x1c>
 8004fd8:	4635      	mov	r5, r6
 8004fda:	e7e7      	b.n	8004fac <_realloc_r+0x1c>

08004fdc <_sbrk_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4c05      	ldr	r4, [pc, #20]	; (8004ff8 <_sbrk_r+0x1c>)
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	f7fc f896 	bl	8001118 <_sbrk>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_sbrk_r+0x1a>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_sbrk_r+0x1a>
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	20000450 	.word	0x20000450

08004ffc <__malloc_lock>:
 8004ffc:	4770      	bx	lr

08004ffe <__malloc_unlock>:
 8004ffe:	4770      	bx	lr

08005000 <_malloc_usable_size_r>:
 8005000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005004:	1f18      	subs	r0, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	bfbc      	itt	lt
 800500a:	580b      	ldrlt	r3, [r1, r0]
 800500c:	18c0      	addlt	r0, r0, r3
 800500e:	4770      	bx	lr

08005010 <_init>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr

0800501c <_fini>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	bf00      	nop
 8005020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005022:	bc08      	pop	{r3}
 8005024:	469e      	mov	lr, r3
 8005026:	4770      	bx	lr
