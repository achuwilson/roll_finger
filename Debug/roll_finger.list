
roll_finger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e58  08004e58  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004e58  08004e58  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e58  08004e58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000074  08004ed4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08004ed4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbbd  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002081  00000000  00000000  0002dc5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  0002fce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  00030a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184cd  00000000  00000000  00031700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b114  00000000  00000000  00049bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008eb21  00000000  00000000  00054ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b64  00000000  00000000  000e3880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d94 	.word	0x08004d94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004d94 	.word	0x08004d94

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <lightupLED>:
    }*/

}

void lightupLED(struct pixel *framebuffer)
{
 800015c:	b480      	push	{r7}
 800015e:	b087      	sub	sp, #28
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 8000164:	2300      	movs	r3, #0
 8000166:	617b      	str	r3, [r7, #20]
 8000168:	e01a      	b.n	80001a0 <lightupLED+0x44>
	{
		framebuffer[i].r=0;
 800016a:	697a      	ldr	r2, [r7, #20]
 800016c:	4613      	mov	r3, r2
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	4413      	add	r3, r2
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	4413      	add	r3, r2
 8000176:	2200      	movs	r2, #0
 8000178:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 800017a:	697a      	ldr	r2, [r7, #20]
 800017c:	4613      	mov	r3, r2
 800017e:	005b      	lsls	r3, r3, #1
 8000180:	4413      	add	r3, r2
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 800018a:	697a      	ldr	r2, [r7, #20]
 800018c:	4613      	mov	r3, r2
 800018e:	005b      	lsls	r3, r3, #1
 8000190:	4413      	add	r3, r2
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	22ff      	movs	r2, #255	; 0xff
 8000198:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	3301      	adds	r3, #1
 800019e:	617b      	str	r3, [r7, #20]
 80001a0:	697b      	ldr	r3, [r7, #20]
 80001a2:	2b04      	cmp	r3, #4
 80001a4:	dde1      	ble.n	800016a <lightupLED+0xe>
	}
	for(int i=5;i<12;i++)
 80001a6:	2305      	movs	r3, #5
 80001a8:	613b      	str	r3, [r7, #16]
 80001aa:	e01a      	b.n	80001e2 <lightupLED+0x86>
	{
		framebuffer[i].r=0;
 80001ac:	693a      	ldr	r2, [r7, #16]
 80001ae:	4613      	mov	r3, r2
 80001b0:	005b      	lsls	r3, r3, #1
 80001b2:	4413      	add	r3, r2
 80001b4:	687a      	ldr	r2, [r7, #4]
 80001b6:	4413      	add	r3, r2
 80001b8:	2200      	movs	r2, #0
 80001ba:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	4613      	mov	r3, r2
 80001c0:	005b      	lsls	r3, r3, #1
 80001c2:	4413      	add	r3, r2
 80001c4:	687a      	ldr	r2, [r7, #4]
 80001c6:	4413      	add	r3, r2
 80001c8:	22ff      	movs	r2, #255	; 0xff
 80001ca:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 80001cc:	693a      	ldr	r2, [r7, #16]
 80001ce:	4613      	mov	r3, r2
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	4413      	add	r3, r2
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	4413      	add	r3, r2
 80001d8:	2200      	movs	r2, #0
 80001da:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	3301      	adds	r3, #1
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	693b      	ldr	r3, [r7, #16]
 80001e4:	2b0b      	cmp	r3, #11
 80001e6:	dde1      	ble.n	80001ac <lightupLED+0x50>
	}
	for(int i=12;i<17;i++)
 80001e8:	230c      	movs	r3, #12
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e01a      	b.n	8000224 <lightupLED+0xc8>
	{
		framebuffer[i].r=50;
 80001ee:	68fa      	ldr	r2, [r7, #12]
 80001f0:	4613      	mov	r3, r2
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	4413      	add	r3, r2
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	2232      	movs	r2, #50	; 0x32
 80001fc:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=50;
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	4613      	mov	r3, r2
 8000202:	005b      	lsls	r3, r3, #1
 8000204:	4413      	add	r3, r2
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	2232      	movs	r2, #50	; 0x32
 800020c:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=50;
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	4613      	mov	r3, r2
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	4413      	add	r3, r2
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	2232      	movs	r2, #50	; 0x32
 800021c:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<17;i++)
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	2b10      	cmp	r3, #16
 8000228:	dde1      	ble.n	80001ee <lightupLED+0x92>
	}
	for(int i=17;i<24;i++)
 800022a:	2311      	movs	r3, #17
 800022c:	60bb      	str	r3, [r7, #8]
 800022e:	e01a      	b.n	8000266 <lightupLED+0x10a>
	{
		framebuffer[i].r=255;
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	4613      	mov	r3, r2
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	4413      	add	r3, r2
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	4413      	add	r3, r2
 800023c:	22ff      	movs	r2, #255	; 0xff
 800023e:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	4613      	mov	r3, r2
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	4413      	add	r3, r2
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000250:	68ba      	ldr	r2, [r7, #8]
 8000252:	4613      	mov	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4413      	add	r3, r2
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	4413      	add	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	709a      	strb	r2, [r3, #2]
	for(int i=17;i<24;i++)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	3301      	adds	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	2b17      	cmp	r3, #23
 800026a:	dde1      	ble.n	8000230 <lightupLED+0xd4>
	}
}
 800026c:	bf00      	nop
 800026e:	371c      	adds	r7, #28
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr

08000276 <lightupLED2>:
void lightupLED2(struct pixel *framebuffer)
{
 8000276:	b480      	push	{r7}
 8000278:	b087      	sub	sp, #28
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
	for(int i=0;i<5;i++)
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
 8000282:	e01a      	b.n	80002ba <lightupLED2+0x44>
	{
		framebuffer[i].r=0;
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	4613      	mov	r3, r2
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	4413      	add	r3, r2
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	2200      	movs	r2, #0
 8000292:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000294:	697a      	ldr	r2, [r7, #20]
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	4413      	add	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=255;
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	4613      	mov	r3, r2
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	4413      	add	r3, r2
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4413      	add	r3, r2
 80002b0:	22ff      	movs	r2, #255	; 0xff
 80002b2:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<5;i++)
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	3301      	adds	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	dde1      	ble.n	8000284 <lightupLED2+0xe>
	}
	for(int i=5;i<12;i++)
 80002c0:	2305      	movs	r3, #5
 80002c2:	613b      	str	r3, [r7, #16]
 80002c4:	e01a      	b.n	80002fc <lightupLED2+0x86>
	{
		framebuffer[i].r=0;
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	4613      	mov	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	4413      	add	r3, r2
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	4413      	add	r3, r2
 80002d2:	2200      	movs	r2, #0
 80002d4:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=255;
 80002d6:	693a      	ldr	r2, [r7, #16]
 80002d8:	4613      	mov	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4413      	add	r3, r2
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	22ff      	movs	r2, #255	; 0xff
 80002e4:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 80002e6:	693a      	ldr	r2, [r7, #16]
 80002e8:	4613      	mov	r3, r2
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	4413      	add	r3, r2
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	2200      	movs	r2, #0
 80002f4:	709a      	strb	r2, [r3, #2]
	for(int i=5;i<12;i++)
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	3301      	adds	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	2b0b      	cmp	r3, #11
 8000300:	dde1      	ble.n	80002c6 <lightupLED2+0x50>
	}
	for(int i=12;i<19;i++)
 8000302:	230c      	movs	r3, #12
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	e01a      	b.n	800033e <lightupLED2+0xc8>
	{
		framebuffer[i].r=255;
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	4613      	mov	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	4413      	add	r3, r2
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4413      	add	r3, r2
 8000314:	22ff      	movs	r2, #255	; 0xff
 8000316:	705a      	strb	r2, [r3, #1]
		framebuffer[i].g=0;
 8000318:	68fa      	ldr	r2, [r7, #12]
 800031a:	4613      	mov	r3, r2
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4413      	add	r3, r2
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	4413      	add	r3, r2
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
		framebuffer[i].b=0;
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4613      	mov	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4413      	add	r3, r2
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	4413      	add	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	709a      	strb	r2, [r3, #2]
	for(int i=12;i<19;i++)
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	3301      	adds	r3, #1
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	2b12      	cmp	r3, #18
 8000342:	dde1      	ble.n	8000308 <lightupLED2+0x92>
	}
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
	...

08000350 <open>:
{
	HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
}

void open()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2110      	movs	r1, #16
 8000358:	4813      	ldr	r0, [pc, #76]	; (80003a8 <open+0x58>)
 800035a:	f002 fa97 	bl	800288c <HAL_GPIO_WritePin>
		    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2108      	movs	r1, #8
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <open+0x58>)
 8000364:	f002 fa92 	bl	800288c <HAL_GPIO_WritePin>
		    		 HAL_Delay(100);
 8000368:	2064      	movs	r0, #100	; 0x64
 800036a:	f001 f9a3 	bl	80016b4 <HAL_Delay>
		    		 while(value[2]<forcethres)
 800036e:	bf00      	nop
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <open+0x5c>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <open+0x60>)
 8000376:	6812      	ldr	r2, [r2, #0]
 8000378:	4293      	cmp	r3, r2
 800037a:	d3f9      	bcc.n	8000370 <open+0x20>
		    		 {
	   		  		  }
	         	  	HAL_Delay(30);
 800037c:	201e      	movs	r0, #30
 800037e:	f001 f999 	bl	80016b4 <HAL_Delay>
		    	  	while(value[2]<forcethres)
 8000382:	bf00      	nop
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <open+0x5c>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <open+0x60>)
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	4293      	cmp	r3, r2
 800038e:	d3f9      	bcc.n	8000384 <open+0x34>
		      		  {
	 		  		  }
		    	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2110      	movs	r1, #16
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <open+0x58>)
 8000396:	f002 fa79 	bl	800288c <HAL_GPIO_WritePin>
		    	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2108      	movs	r1, #8
 800039e:	4802      	ldr	r0, [pc, #8]	; (80003a8 <open+0x58>)
 80003a0:	f002 fa74 	bl	800288c <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	2000031c 	.word	0x2000031c
 80003b0:	20000000 	.word	0x20000000

080003b4 <close>:

void close()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2108      	movs	r1, #8
 80003bc:	4813      	ldr	r0, [pc, #76]	; (800040c <close+0x58>)
 80003be:	f002 fa65 	bl	800288c <HAL_GPIO_WritePin>
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2110      	movs	r1, #16
 80003c6:	4811      	ldr	r0, [pc, #68]	; (800040c <close+0x58>)
 80003c8:	f002 fa60 	bl	800288c <HAL_GPIO_WritePin>
		    		  HAL_Delay(100);
 80003cc:	2064      	movs	r0, #100	; 0x64
 80003ce:	f001 f971 	bl	80016b4 <HAL_Delay>
		    		  while(value[2]<forcethres)
 80003d2:	bf00      	nop
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <close+0x5c>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <close+0x60>)
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	4293      	cmp	r3, r2
 80003de:	d3f9      	bcc.n	80003d4 <close+0x20>
		    		  {
		    		  }
		    		  HAL_Delay(30);
 80003e0:	201e      	movs	r0, #30
 80003e2:	f001 f967 	bl	80016b4 <HAL_Delay>
		    		  while(value[2]<forcethres)
 80003e6:	bf00      	nop
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <close+0x5c>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4a09      	ldr	r2, [pc, #36]	; (8000414 <close+0x60>)
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d3f9      	bcc.n	80003e8 <close+0x34>
		    		  {
		    		  }
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <close+0x58>)
 80003fa:	f002 fa47 	bl	800288c <HAL_GPIO_WritePin>
		    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2108      	movs	r1, #8
 8000402:	4802      	ldr	r0, [pc, #8]	; (800040c <close+0x58>)
 8000404:	f002 fa42 	bl	800288c <HAL_GPIO_WritePin>

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010c00 	.word	0x40010c00
 8000410:	2000031c 	.word	0x2000031c
 8000414:	20000000 	.word	0x20000000

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b5b0      	push	{r4, r5, r7, lr}
 800041a:	b0c4      	sub	sp, #272	; 0x110
 800041c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f001 f8e7 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f8ed 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 faa1 	bl	800096c <MX_GPIO_Init>
  MX_DMA_Init();
 800042a:	f000 fa69 	bl	8000900 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800042e:	f000 fa3d 	bl	80008ac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000432:	f000 f941 	bl	80006b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000436:	f000 f9bb 	bl	80007b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, value, 5);
 800043a:	2205      	movs	r2, #5
 800043c:	4965      	ldr	r1, [pc, #404]	; (80005d4 <main+0x1bc>)
 800043e:	4866      	ldr	r0, [pc, #408]	; (80005d8 <main+0x1c0>)
 8000440:	f001 fa32 	bl	80018a8 <HAL_ADC_Start_DMA>
  float MSG[50];// = {'\0'};
  long X = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  int temp;

  struct led_channel_info led_channels[WS2812_NUM_CHANNELS];

      int ch, animation_state = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000450:	b662      	cpsie	i

      __enable_irq();
      HAL_Delay(200);
 8000452:	20c8      	movs	r0, #200	; 0xc8
 8000454:	f001 f92e 	bl	80016b4 <HAL_Delay>
              led_channels[i].framebuffer = channel_framebuffers[i];
              led_channels[i].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
          }
          */
      //channel 0
      led_channels[0].framebuffer = channel_framebuffers[0];
 8000458:	463b      	mov	r3, r7
 800045a:	4a60      	ldr	r2, [pc, #384]	; (80005dc <main+0x1c4>)
 800045c:	601a      	str	r2, [r3, #0]
      led_channels[0].length = FRAMEBUFFER_SIZE * sizeof(struct pixel);
 800045e:	463b      	mov	r3, r7
 8000460:	2248      	movs	r2, #72	; 0x48
 8000462:	605a      	str	r2, [r3, #4]

      //channel1
      led_channels[1].framebuffer = channel_framebuffers[1];
 8000464:	463b      	mov	r3, r7
 8000466:	4a5e      	ldr	r2, [pc, #376]	; (80005e0 <main+0x1c8>)
 8000468:	609a      	str	r2, [r3, #8]
      led_channels[1].length = FRAMEBUFFER2_SIZE * sizeof(struct pixel);
 800046a:	463b      	mov	r3, r7
 800046c:	2239      	movs	r2, #57	; 0x39
 800046e:	60da      	str	r2, [r3, #12]

      HAL_Delay(200);
 8000470:	20c8      	movs	r0, #200	; 0xc8
 8000472:	f001 f91f 	bl	80016b4 <HAL_Delay>
          ws2812_init();
 8000476:	f001 f86f 	bl	8001558 <ws2812_init>
          HAL_Delay(200);
 800047a:	20c8      	movs	r0, #200	; 0xc8
 800047c:	f001 f91a 	bl	80016b4 <HAL_Delay>

       sprintf(MSG, "INIT \r\n ");
 8000480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000484:	4a57      	ldr	r2, [pc, #348]	; (80005e4 <main+0x1cc>)
 8000486:	ca07      	ldmia	r2, {r0, r1, r2}
 8000488:	c303      	stmia	r3!, {r0, r1}
 800048a:	701a      	strb	r2, [r3, #0]
      	  HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 800048c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fe5b 	bl	800014c <strlen>
 8000496:	4603      	mov	r3, r0
 8000498:	b29a      	uxth	r2, r3
 800049a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800049e:	f44f 7316 	mov.w	r3, #600	; 0x258
 80004a2:	4851      	ldr	r0, [pc, #324]	; (80005e8 <main+0x1d0>)
 80004a4:	f003 fc3f 	bl	8003d26 <HAL_UART_Transmit>


  sprintf(MSG, "INIT 2\r\n ");
 80004a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ac:	4a4f      	ldr	r2, [pc, #316]	; (80005ec <main+0x1d4>)
 80004ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80004b0:	c303      	stmia	r3!, {r0, r1}
 80004b2:	801a      	strh	r2, [r3, #0]
   	  HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 80004b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fe47 	bl	800014c <strlen>
 80004be:	4603      	mov	r3, r0
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80004c6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80004ca:	4847      	ldr	r0, [pc, #284]	; (80005e8 <main+0x1d0>)
 80004cc:	f003 fc2b 	bl	8003d26 <HAL_UART_Transmit>

   //	make_pretty_colors(channel_framebuffers[0], 0,0);
   	lightupLED(channel_framebuffers[0]);
 80004d0:	4842      	ldr	r0, [pc, #264]	; (80005dc <main+0x1c4>)
 80004d2:	f7ff fe43 	bl	800015c <lightupLED>
	lightupLED2(channel_framebuffers[1]);
 80004d6:	4842      	ldr	r0, [pc, #264]	; (80005e0 <main+0x1c8>)
 80004d8:	f7ff fecd 	bl	8000276 <lightupLED2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i

   		         // animation_state++;

   		          __disable_irq();
   		       //HAL_Delay(200);
   		          ws2812_refresh(led_channels, GPIOB);
 80004de:	463b      	mov	r3, r7
 80004e0:	4943      	ldr	r1, [pc, #268]	; (80005f0 <main+0x1d8>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fede 	bl	80012a4 <ws2812_refresh>
  __ASM volatile ("cpsie i" : : : "memory");
 80004e8:	b662      	cpsie	i
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// HAL_ADC_Start_DMA(&hadc1, &value, 3);
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //LED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5); //IR LED STROBE
 80004ea:	2120      	movs	r1, #32
 80004ec:	4840      	ldr	r0, [pc, #256]	; (80005f0 <main+0x1d8>)
 80004ee:	f002 f9e5 	bl	80028bc <HAL_GPIO_TogglePin>
	  //HAL_ADC_PollForConversion (&hadc1, 1000);
	  //value = HAL_ADC_GetValue (&hadc1);
	 // HAL_ADC_Start (&hadc1);
	 // HAL_ADC_PollForConversion (&hadc1, 1000);
	  //	  value2 = HAL_ADC_GetValue (&hadc1);
	  HAL_Delay(100);
 80004f2:	2064      	movs	r0, #100	; 0x64
 80004f4:	f001 f8de 	bl	80016b4 <HAL_Delay>
	 sprintf(MSG, "Data = %d \t %d  \t %d %d  \t%d  \t \r\n ",value[0],value[1], value[2], value[3], value[4]);
 80004f8:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <main+0x1bc>)
 80004fa:	681c      	ldr	r4, [r3, #0]
 80004fc:	4b35      	ldr	r3, [pc, #212]	; (80005d4 <main+0x1bc>)
 80004fe:	685d      	ldr	r5, [r3, #4]
 8000500:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <main+0x1bc>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <main+0x1bc>)
 8000506:	68d2      	ldr	r2, [r2, #12]
 8000508:	4932      	ldr	r1, [pc, #200]	; (80005d4 <main+0x1bc>)
 800050a:	6909      	ldr	r1, [r1, #16]
 800050c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000510:	9102      	str	r1, [sp, #8]
 8000512:	9201      	str	r2, [sp, #4]
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	462b      	mov	r3, r5
 8000518:	4622      	mov	r2, r4
 800051a:	4936      	ldr	r1, [pc, #216]	; (80005f4 <main+0x1dc>)
 800051c:	f004 f828 	bl	8004570 <siprintf>
	  //sprintf(MSG, "Hello Dudes! COUNT = %d \r\n ",X);
	 HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 600);
 8000520:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff fe11 	bl	800014c <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000532:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000536:	482c      	ldr	r0, [pc, #176]	; (80005e8 <main+0x1d0>)
 8000538:	f003 fbf5 	bl	8003d26 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "Val is : %d \r\n", X), 10);
	  X=X+1;
 800053c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000540:	3301      	adds	r3, #1
 8000542:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  		  		  {

	  		  		  }

	  	*/
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	482a      	ldr	r0, [pc, #168]	; (80005f8 <main+0x1e0>)
 800054e:	f002 f99d 	bl	800288c <HAL_GPIO_WritePin>
	    if(RX1_Char == 'c') //close
 8000552:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <main+0x1e4>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b63      	cmp	r3, #99	; 0x63
 8000558:	d10a      	bne.n	8000570 <main+0x158>
	    {
	    		close();
 800055a:	f7ff ff2b 	bl	80003b4 <close>

	    		  HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	4926      	ldr	r1, [pc, #152]	; (80005fc <main+0x1e4>)
 8000562:	4821      	ldr	r0, [pc, #132]	; (80005e8 <main+0x1d0>)
 8000564:	f003 fc71 	bl	8003e4a <HAL_UART_Receive_IT>
	    		  RX1_Char = 0x00;
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <main+0x1e4>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	e7bc      	b.n	80004ea <main+0xd2>
	    }
	    else if(RX1_Char == 'o') //open
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <main+0x1e4>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b6f      	cmp	r3, #111	; 0x6f
 8000576:	d10a      	bne.n	800058e <main+0x176>
	    {
	    		open();
 8000578:	f7ff feea 	bl	8000350 <open>

	    	    HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	491f      	ldr	r1, [pc, #124]	; (80005fc <main+0x1e4>)
 8000580:	4819      	ldr	r0, [pc, #100]	; (80005e8 <main+0x1d0>)
 8000582:	f003 fc62 	bl	8003e4a <HAL_UART_Receive_IT>
	    	    RX1_Char = 0x00;
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <main+0x1e4>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	e7ad      	b.n	80004ea <main+0xd2>
	    }
	    else if(RX1_Char == 'b')  //brake
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <main+0x1e4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b62      	cmp	r3, #98	; 0x62
 8000594:	d115      	bne.n	80005c2 <main+0x1aa>
	    	    {
	    	    	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4815      	ldr	r0, [pc, #84]	; (80005f0 <main+0x1d8>)
 800059c:	f002 f976 	bl	800288c <HAL_GPIO_WritePin>
	    	    		  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <main+0x1d8>)
 80005a6:	f002 f971 	bl	800288c <HAL_GPIO_WritePin>
	    	    		  	  HAL_Delay(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f001 f882 	bl	80016b4 <HAL_Delay>

	    	    		  	HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	4912      	ldr	r1, [pc, #72]	; (80005fc <main+0x1e4>)
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <main+0x1d0>)
 80005b6:	f003 fc48 	bl	8003e4a <HAL_UART_Receive_IT>
	    	    		  	RX1_Char = 0x00;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <main+0x1e4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e793      	b.n	80004ea <main+0xd2>

	    	    }
	    else
	    {	//clear buffer by reading out
	    	HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	490d      	ldr	r1, [pc, #52]	; (80005fc <main+0x1e4>)
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <main+0x1d0>)
 80005c8:	f003 fc3f 	bl	8003e4a <HAL_UART_Receive_IT>
	    		    	    		  	RX1_Char = 0x00;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <main+0x1e4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5); //IR LED STROBE
 80005d2:	e78a      	b.n	80004ea <main+0xd2>
 80005d4:	2000031c 	.word	0x2000031c
 80005d8:	20000190 	.word	0x20000190
 80005dc:	2000028c 	.word	0x2000028c
 80005e0:	200002d4 	.word	0x200002d4
 80005e4:	08004dac 	.word	0x08004dac
 80005e8:	200001c0 	.word	0x200001c0
 80005ec:	08004db8 	.word	0x08004db8
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	08004dc4 	.word	0x08004dc4
 80005f8:	40010800 	.word	0x40010800
 80005fc:	20000090 	.word	0x20000090

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060a:	2228      	movs	r2, #40	; 0x28
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 ffa6 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	2301      	movs	r3, #1
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 800064c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000656:	4618      	mov	r0, r3
 8000658:	f002 f94a 	bl	80028f0 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000662:	f000 fa07 	bl	8000a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000676:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2102      	movs	r1, #2
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fbb4 	bl	8002df0 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800068e:	f000 f9f1 	bl	8000a74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000692:	2302      	movs	r3, #2
 8000694:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000696:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800069a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fd42 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 f9e3 	bl	8000a74 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c8:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <MX_ADC1_Init+0xf0>)
 80006ca:	4a38      	ldr	r2, [pc, #224]	; (80007ac <MX_ADC1_Init+0xf4>)
 80006cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <MX_ADC1_Init+0xf0>)
 80006d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006d6:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <MX_ADC1_Init+0xf0>)
 80006d8:	2201      	movs	r2, #1
 80006da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006dc:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <MX_ADC1_Init+0xf0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <MX_ADC1_Init+0xf0>)
 80006e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <MX_ADC1_Init+0xf0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80006f0:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_ADC1_Init+0xf0>)
 80006f2:	2205      	movs	r2, #5
 80006f4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f6:	482c      	ldr	r0, [pc, #176]	; (80007a8 <MX_ADC1_Init+0xf0>)
 80006f8:	f000 fffe 	bl	80016f8 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000702:	f000 f9b7 	bl	8000a74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2301      	movs	r3, #1
 800070c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800070e:	2304      	movs	r3, #4
 8000710:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4824      	ldr	r0, [pc, #144]	; (80007a8 <MX_ADC1_Init+0xf0>)
 8000718:	f001 f9c0 	bl	8001a9c <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000722:	f000 f9a7 	bl	8000a74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000726:	2301      	movs	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800072a:	2302      	movs	r3, #2
 800072c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	481d      	ldr	r0, [pc, #116]	; (80007a8 <MX_ADC1_Init+0xf0>)
 8000734:	f001 f9b2 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800073e:	f000 f999 	bl	8000a74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000742:	2302      	movs	r3, #2
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000746:	2303      	movs	r3, #3
 8000748:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800074a:	2305      	movs	r3, #5
 800074c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4815      	ldr	r0, [pc, #84]	; (80007a8 <MX_ADC1_Init+0xf0>)
 8000754:	f001 f9a2 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800075e:	f000 f989 	bl	8000a74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000762:	2303      	movs	r3, #3
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000766:	2304      	movs	r3, #4
 8000768:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800076a:	2304      	movs	r3, #4
 800076c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_ADC1_Init+0xf0>)
 8000774:	f001 f992 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800077e:	f000 f979 	bl	8000a74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000782:	2304      	movs	r3, #4
 8000784:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000786:	2305      	movs	r3, #5
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_ADC1_Init+0xf0>)
 8000790:	f001 f984 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800079a:	f000 f96b 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000190 	.word	0x20000190
 80007ac:	40012400 	.word	0x40012400

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_TIM2_Init+0xf8>)
 80007e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_TIM2_Init+0xf8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_TIM2_Init+0xf8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_TIM2_Init+0xf8>)
 80007f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_TIM2_Init+0xf8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_TIM2_Init+0xf8>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000808:	4827      	ldr	r0, [pc, #156]	; (80008a8 <MX_TIM2_Init+0xf8>)
 800080a:	f002 fd43 	bl	8003294 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000814:	f000 f92e 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000822:	4619      	mov	r1, r3
 8000824:	4820      	ldr	r0, [pc, #128]	; (80008a8 <MX_TIM2_Init+0xf8>)
 8000826:	f002 fe9b 	bl	8003560 <HAL_TIM_ConfigClockSource>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000830:	f000 f920 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000834:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_TIM2_Init+0xf8>)
 8000836:	f002 fd7c 	bl	8003332 <HAL_TIM_PWM_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000840:	f000 f918 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4619      	mov	r1, r3
 8000852:	4815      	ldr	r0, [pc, #84]	; (80008a8 <MX_TIM2_Init+0xf8>)
 8000854:	f003 f9bc 	bl	8003bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800085e:	f000 f909 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000862:	2360      	movs	r3, #96	; 0x60
 8000864:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	480b      	ldr	r0, [pc, #44]	; (80008a8 <MX_TIM2_Init+0xf8>)
 800087a:	f002 fdb3 	bl	80033e4 <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000884:	f000 f8f6 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2204      	movs	r2, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_TIM2_Init+0xf8>)
 8000890:	f002 fda8 	bl	80033e4 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800089a:	f000 f8eb 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	; 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000244 	.word	0x20000244

080008ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART1_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f003 f9d2 	bl	8003c8c <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f8c1 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200001c0 	.word	0x200001c0
 80008fc:	40013800 	.word	0x40013800

08000900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_DMA_Init+0x68>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <MX_DMA_Init+0x68>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_DMA_Init+0x68>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	200b      	movs	r0, #11
 8000924:	f001 fb7b 	bl	800201e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000928:	200b      	movs	r0, #11
 800092a:	f001 fb94 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	200c      	movs	r0, #12
 8000934:	f001 fb73 	bl	800201e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000938:	200c      	movs	r0, #12
 800093a:	f001 fb8c 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	200f      	movs	r0, #15
 8000944:	f001 fb6b 	bl	800201e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000948:	200f      	movs	r0, #15
 800094a:	f001 fb84 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2011      	movs	r0, #17
 8000954:	f001 fb63 	bl	800201e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000958:	2011      	movs	r0, #17
 800095a:	f001 fb7c 	bl	8002056 <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <MX_GPIO_Init+0xf8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a37      	ldr	r2, [pc, #220]	; (8000a64 <MX_GPIO_Init+0xf8>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <MX_GPIO_Init+0xf8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0310 	and.w	r3, r3, #16
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <MX_GPIO_Init+0xf8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <MX_GPIO_Init+0xf8>)
 800099e:	f043 0320 	orr.w	r3, r3, #32
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0320 	and.w	r3, r3, #32
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	4820      	ldr	r0, [pc, #128]	; (8000a68 <MX_GPIO_Init+0xfc>)
 80009e8:	f001 ff50 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80009ec:	2200      	movs	r2, #0
 80009ee:	213b      	movs	r1, #59	; 0x3b
 80009f0:	481e      	ldr	r0, [pc, #120]	; (8000a6c <MX_GPIO_Init+0x100>)
 80009f2:	f001 ff4b 	bl	800288c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <MX_GPIO_Init+0x104>)
 80009fe:	f001 ff45 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_GPIO_Init+0xfc>)
 8000a1c:	f001 fddc 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000a20:	233b      	movs	r3, #59	; 0x3b
 8000a22:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_GPIO_Init+0x100>)
 8000a38:	f001 fdce 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_GPIO_Init+0x104>)
 8000a56:	f001 fdbf 	bl	80025d8 <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	40010800 	.word	0x40010800

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_MspInit+0x5c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <HAL_MspInit+0x5c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_MspInit+0x5c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x5c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x5c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x5c>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_MspInit+0x60>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_MspInit+0x60>)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <HAL_ADC_MspInit+0xbc>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d149      	bne.n	8000b98 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <HAL_ADC_MspInit+0xc0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <HAL_ADC_MspInit+0xc0>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <HAL_ADC_MspInit+0xc0>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_ADC_MspInit+0xc0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <HAL_ADC_MspInit+0xc0>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <HAL_ADC_MspInit+0xc0>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b34:	231f      	movs	r3, #31
 8000b36:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	4819      	ldr	r0, [pc, #100]	; (8000ba8 <HAL_ADC_MspInit+0xc4>)
 8000b44:	f001 fd48 	bl	80025d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b4a:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_ADC_MspInit+0xcc>)
 8000b4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b72:	2220      	movs	r2, #32
 8000b74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b7e:	f001 fa85 	bl	800208c <HAL_DMA_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b88:	f7ff ff74 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b90:	621a      	str	r2, [r3, #32]
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_ADC_MspInit+0xc8>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40012400 	.word	0x40012400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	20000200 	.word	0x20000200
 8000bb0:	40020008 	.word	0x40020008

08000bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc4:	f040 808d 	bne.w	8000ce2 <HAL_TIM_Base_MspInit+0x12e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc8:	4b48      	ldr	r3, [pc, #288]	; (8000cec <HAL_TIM_Base_MspInit+0x138>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4a47      	ldr	r2, [pc, #284]	; (8000cec <HAL_TIM_Base_MspInit+0x138>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	61d3      	str	r3, [r2, #28]
 8000bd4:	4b45      	ldr	r3, [pc, #276]	; (8000cec <HAL_TIM_Base_MspInit+0x138>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000be0:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000be2:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <HAL_TIM_Base_MspInit+0x140>)
 8000be4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be6:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000be8:	2210      	movs	r2, #16
 8000bea:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bec:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 8000bf2:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf8:	4b3d      	ldr	r3, [pc, #244]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c00:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c06:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000c08:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c0e:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000c10:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000c16:	4836      	ldr	r0, [pc, #216]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000c18:	f001 fa38 	bl	800208c <HAL_DMA_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000c22:	f7ff ff27 	bl	8000a74 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8000c2c:	4a30      	ldr	r2, [pc, #192]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a2e      	ldr	r2, [pc, #184]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
 8000c38:	4a2d      	ldr	r2, [pc, #180]	; (8000cf0 <HAL_TIM_Base_MspInit+0x13c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c40:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <HAL_TIM_Base_MspInit+0x148>)
 8000c42:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c46:	2210      	movs	r2, #16
 8000c48:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c68:	2220      	movs	r2, #32
 8000c6a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c6e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000c74:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c76:	f001 fa09 	bl	800208c <HAL_DMA_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8000c80:	f7ff fef8 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_TIM_Base_MspInit+0x144>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_TIM_Base_MspInit+0x150>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000c98:	2210      	movs	r2, #16
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000cba:	2220      	movs	r2, #32
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000cc0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000cc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000cc8:	f001 f9e0 	bl	800208c <HAL_DMA_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_TIM_Base_MspInit+0x122>
    {
      Error_Handler();
 8000cd2:	f7ff fecf 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000cda:	621a      	str	r2, [r3, #32]
 8000cdc:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_TIM_Base_MspInit+0x14c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	2000014c 	.word	0x2000014c
 8000cf4:	40020080 	.word	0x40020080
 8000cf8:	200000c4 	.word	0x200000c4
 8000cfc:	40020058 	.word	0x40020058
 8000d00:	20000108 	.word	0x20000108
 8000d04:	4002001c 	.word	0x4002001c

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <HAL_UART_MspInit+0x9c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d139      	bne.n	8000d9c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_UART_MspInit+0xa0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <HAL_UART_MspInit+0xa0>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_UART_MspInit+0xa0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0xa0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0xa0>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_UART_MspInit+0xa0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <HAL_UART_MspInit+0xa4>)
 8000d6e:	f001 fc33 	bl	80025d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <HAL_UART_MspInit+0xa4>)
 8000d88:	f001 fc26 	bl	80025d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2025      	movs	r0, #37	; 0x25
 8000d92:	f001 f944 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d96:	2025      	movs	r0, #37	; 0x25
 8000d98:	f001 f95d 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40013800 	.word	0x40013800
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010800 	.word	0x40010800

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <BusFault_Handler+0x4>

08000dce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 fc3e 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <DMA1_Channel1_IRQHandler+0x10>)
 8000e0a:	f001 fab1 	bl	8002370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000200 	.word	0x20000200

08000e18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA1_Channel2_IRQHandler+0x10>)
 8000e1e:	f001 faa7 	bl	8002370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000108 	.word	0x20000108

08000e2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA1_Channel5_IRQHandler+0x10>)
 8000e32:	f001 fa9d 	bl	8002370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000c4 	.word	0x200000c4

08000e40 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA1_Channel7_IRQHandler+0x10>)
 8000e46:	f001 fa93 	bl	8002370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000014c 	.word	0x2000014c

08000e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART1_IRQHandler+0x10>)
 8000e5a:	f003 f84b 	bl	8003ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001c0 	.word	0x200001c0

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f003 fb38 	bl	800450c <__errno>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20005000 	.word	0x20005000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	20000094 	.word	0x20000094
 8000ed0:	20000450 	.word	0x20000450

08000ed4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <ws2812_timer2_init>:
    WS2812_CH14_GPIO,
    WS2812_CH15_GPIO
};

static void ws2812_timer2_init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]

    htimer2.Instance = TIM2;
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f16:	601a      	str	r2, [r3, #0]
    htimer2.Init.Prescaler = 0;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f26:	2246      	movs	r2, #70	; 0x46
 8000f28:	60da      	str	r2, [r3, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htimer2);
 8000f36:	481c      	ldr	r0, [pc, #112]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f38:	f002 f9ac 	bl	8003294 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 8000f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4817      	ldr	r0, [pc, #92]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f4a:	f002 fb09 	bl	8003560 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8000f4e:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f50:	f002 f9ef 	bl	8003332 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4619      	mov	r1, r3
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f64:	f002 fe34 	bl	8003bd0 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	; 0x60
 8000f6a:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8000f6c:	2316      	movs	r3, #22
 8000f6e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f80:	f002 fa30 	bl	80033e4 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f84:	2360      	movs	r3, #96	; 0x60
 8000f86:	607b      	str	r3, [r7, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8000f88:	232c      	movs	r3, #44	; 0x2c
 8000f8a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2204      	movs	r2, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <ws2812_timer2_init+0xc8>)
 8000f9c:	f002 fa22 	bl	80033e4 <HAL_TIM_PWM_ConfigChannel>
}
 8000fa0:	bf00      	nop
 8000fa2:	3738      	adds	r7, #56	; 0x38
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200003fc 	.word	0x200003fc

08000fac <ws2812_dma_start>:

static void ws2812_dma_start(GPIO_TypeDef *gpio_bank)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <ws2812_dma_start+0x13c>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <ws2812_dma_start+0x13c>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	61d3      	str	r3, [r2, #28]
 8000fc0:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <ws2812_dma_start+0x13c>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_update.Instance = DMA1_Channel2;
 8000fcc:	4b47      	ldr	r3, [pc, #284]	; (80010ec <ws2812_dma_start+0x140>)
 8000fce:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <ws2812_dma_start+0x144>)
 8000fd0:	601a      	str	r2, [r3, #0]
    hdma_tim2_update.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd2:	4b46      	ldr	r3, [pc, #280]	; (80010ec <ws2812_dma_start+0x140>)
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	605a      	str	r2, [r3, #4]
    hdma_tim2_update.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd8:	4b44      	ldr	r3, [pc, #272]	; (80010ec <ws2812_dma_start+0x140>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
    hdma_tim2_update.Init.MemInc = DMA_MINC_DISABLE;
 8000fde:	4b43      	ldr	r3, [pc, #268]	; (80010ec <ws2812_dma_start+0x140>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
    hdma_tim2_update.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fe4:	4b41      	ldr	r3, [pc, #260]	; (80010ec <ws2812_dma_start+0x140>)
 8000fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_tim2_update.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fec:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <ws2812_dma_start+0x140>)
 8000fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff2:	615a      	str	r2, [r3, #20]
    hdma_tim2_update.Init.Mode = DMA_CIRCULAR;
 8000ff4:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <ws2812_dma_start+0x140>)
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	619a      	str	r2, [r3, #24]
    hdma_tim2_update.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ffa:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <ws2812_dma_start+0x140>)
 8000ffc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001000:	61da      	str	r2, [r3, #28]

    /* TIM2_CH1 Init */
    hdma_tim2_pwm_ch1.Instance = DMA1_Channel5;
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <ws2812_dma_start+0x148>)
 8001004:	4a3c      	ldr	r2, [pc, #240]	; (80010f8 <ws2812_dma_start+0x14c>)
 8001006:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001008:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <ws2812_dma_start+0x148>)
 800100a:	2210      	movs	r2, #16
 800100c:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <ws2812_dma_start+0x148>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <ws2812_dma_start+0x148>)
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <ws2812_dma_start+0x148>)
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001022:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <ws2812_dma_start+0x148>)
 8001024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001028:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch1.Init.Mode = DMA_CIRCULAR;
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <ws2812_dma_start+0x148>)
 800102c:	2220      	movs	r2, #32
 800102e:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <ws2812_dma_start+0x148>)
 8001032:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001036:	61da      	str	r2, [r3, #28]

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_pwm_ch2.Instance = DMA1_Channel7;
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <ws2812_dma_start+0x150>)
 800103a:	4a31      	ldr	r2, [pc, #196]	; (8001100 <ws2812_dma_start+0x154>)
 800103c:	601a      	str	r2, [r3, #0]
    hdma_tim2_pwm_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <ws2812_dma_start+0x150>)
 8001040:	2210      	movs	r2, #16
 8001042:	605a      	str	r2, [r3, #4]
    hdma_tim2_pwm_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <ws2812_dma_start+0x150>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    hdma_tim2_pwm_ch2.Init.MemInc = DMA_MINC_DISABLE;
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <ws2812_dma_start+0x150>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
    hdma_tim2_pwm_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <ws2812_dma_start+0x150>)
 8001052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001056:	611a      	str	r2, [r3, #16]
    hdma_tim2_pwm_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <ws2812_dma_start+0x150>)
 800105a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105e:	615a      	str	r2, [r3, #20]
    hdma_tim2_pwm_ch2.Init.Mode = DMA_CIRCULAR;
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <ws2812_dma_start+0x150>)
 8001062:	2220      	movs	r2, #32
 8001064:	619a      	str	r2, [r3, #24]
    hdma_tim2_pwm_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <ws2812_dma_start+0x150>)
 8001068:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800106c:	61da      	str	r2, [r3, #28]

    /* I don't know why, but making all DMAs run as long as the buffer size makes things more
     * efficient. Is it the extra full/half-done flags? Only the 2nd DMA needs to run for a given
     * size ...
     */
    HAL_DMA_Init(&hdma_tim2_update);
 800106e:	481f      	ldr	r0, [pc, #124]	; (80010ec <ws2812_dma_start+0x140>)
 8001070:	f001 f80c 	bl	800208c <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch1);
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <ws2812_dma_start+0x148>)
 8001076:	f001 f809 	bl	800208c <HAL_DMA_Init>
    HAL_DMA_Init(&hdma_tim2_pwm_ch2);
 800107a:	4820      	ldr	r0, [pc, #128]	; (80010fc <ws2812_dma_start+0x150>)
 800107c:	f001 f806 	bl	800208c <HAL_DMA_Init>

    HAL_DMA_Start(&hdma_tim2_update, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BSRR, DMA_BUFFER_SIZE);
 8001080:	4920      	ldr	r1, [pc, #128]	; (8001104 <ws2812_dma_start+0x158>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3310      	adds	r3, #16
 8001086:	461a      	mov	r2, r3
 8001088:	2310      	movs	r3, #16
 800108a:	4818      	ldr	r0, [pc, #96]	; (80010ec <ws2812_dma_start+0x140>)
 800108c:	f001 f858 	bl	8002140 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_pwm_ch1, (uint32_t)dma_buffer, (uint32_t) &gpio_bank->BRR, DMA_BUFFER_SIZE);
 8001090:	491d      	ldr	r1, [pc, #116]	; (8001108 <ws2812_dma_start+0x15c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3314      	adds	r3, #20
 8001096:	461a      	mov	r2, r3
 8001098:	2310      	movs	r3, #16
 800109a:	4816      	ldr	r0, [pc, #88]	; (80010f4 <ws2812_dma_start+0x148>)
 800109c:	f001 f850 	bl	8002140 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim2_pwm_ch2, (uint32_t)&ws2812_gpio_set_bits, (uint32_t)&gpio_bank->BRR, DMA_BUFFER_SIZE);
 80010a0:	4918      	ldr	r1, [pc, #96]	; (8001104 <ws2812_dma_start+0x158>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3314      	adds	r3, #20
 80010a6:	461a      	mov	r2, r3
 80010a8:	2310      	movs	r3, #16
 80010aa:	4814      	ldr	r0, [pc, #80]	; (80010fc <ws2812_dma_start+0x150>)
 80010ac:	f001 f848 	bl	8002140 <HAL_DMA_Start>

	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <ws2812_dma_start+0x160>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <ws2812_dma_start+0x160>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010be:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC1);
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <ws2812_dma_start+0x160>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <ws2812_dma_start+0x160>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ce:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htimer2, TIM_DMA_CC2);
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <ws2812_dma_start+0x160>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <ws2812_dma_start+0x160>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010de:	60da      	str	r2, [r3, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000
 80010ec:	200003b8 	.word	0x200003b8
 80010f0:	4002001c 	.word	0x4002001c
 80010f4:	20000374 	.word	0x20000374
 80010f8:	40020058 	.word	0x40020058
 80010fc:	20000330 	.word	0x20000330
 8001100:	40020080 	.word	0x40020080
 8001104:	20000098 	.word	0x20000098
 8001108:	2000009c 	.word	0x2000009c
 800110c:	200003fc 	.word	0x200003fc

08001110 <get_channel_byte>:
        ch_val = get_channel_byte(channels + ch_num, pos);  \
        UNPACK_CHANNEL(gpio_num);                           \
    }

static inline uint8_t get_channel_byte(const struct led_channel_info *channel, int pos)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    /* If all channels are the same length, we can skip the 'pos' range check, and speed up our
     * inner loop *substantially*
     */

    if (WS212_ALL_CHANNELS_SAME_LENGTH || (pos < channel->length))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	da07      	bge.n	8001134 <get_channel_byte+0x24>
        return channel->framebuffer[pos] ^ 0xff;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	43db      	mvns	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	e000      	b.n	8001136 <get_channel_byte+0x26>

    return 0xff;
 8001134:	23ff      	movs	r3, #255	; 0xff
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <fill_dma_buffer>:

static void fill_dma_buffer(uint16_t *dest, int pos, const struct led_channel_info *channels)
{
 8001140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001144:	b087      	sub	sp, #28
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
    register uint16_t cur0 = 0, cur1 = 0, cur2 = 0, cur3 = 0, cur4 = 0, cur5 = 0, cur6 = 0, cur7 = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	f04f 0b00 	mov.w	fp, #0
 8001156:	2600      	movs	r6, #0
 8001158:	2500      	movs	r5, #0
 800115a:	2400      	movs	r4, #0
 800115c:	f04f 0a00 	mov.w	sl, #0
 8001160:	f04f 0900 	mov.w	r9, #0
 8001164:	f04f 0800 	mov.w	r8, #0
     * all the error checks, we don't have the headroom (at least, on an STM32F103 at 72MHz).
     *
     * If you want it to be fast, don't expect it to always be pretty.
     */
    uint8_t ch_val;
    HANDLE_CHANNEL( 0, WS2812_CH0_GPIO);
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffd0 	bl	8001110 <get_channel_byte>
 8001170:	4603      	mov	r3, r0
 8001172:	75fb      	strb	r3, [r7, #23]
 8001174:	7df8      	ldrb	r0, [r7, #23]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	469e      	mov	lr, r3
 800117a:	46dc      	mov	ip, fp
 800117c:	4651      	mov	r1, sl
 800117e:	464a      	mov	r2, r9
 8001180:	4643      	mov	r3, r8
 8001182:	4680      	mov	r8, r0
 8001184:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 8001188:	f360 0e00 	bfi	lr, r0, #0, #1
 800118c:	f3c8 1080 	ubfx	r0, r8, #6, #1
 8001190:	f360 0c00 	bfi	ip, r0, #0, #1
 8001194:	f3c8 1040 	ubfx	r0, r8, #5, #1
 8001198:	f360 0600 	bfi	r6, r0, #0, #1
 800119c:	f3c8 1000 	ubfx	r0, r8, #4, #1
 80011a0:	f360 0500 	bfi	r5, r0, #0, #1
 80011a4:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 80011a8:	f360 0400 	bfi	r4, r0, #0, #1
 80011ac:	f3c8 0080 	ubfx	r0, r8, #2, #1
 80011b0:	f360 0100 	bfi	r1, r0, #0, #1
 80011b4:	f3c8 0040 	ubfx	r0, r8, #1, #1
 80011b8:	f360 0200 	bfi	r2, r0, #0, #1
 80011bc:	f3c8 0000 	ubfx	r0, r8, #0, #1
 80011c0:	f360 0300 	bfi	r3, r0, #0, #1
 80011c4:	fa1f f08e 	uxth.w	r0, lr
 80011c8:	6038      	str	r0, [r7, #0]
 80011ca:	fa1f fb8c 	uxth.w	fp, ip
 80011ce:	b2b6      	uxth	r6, r6
 80011d0:	b2ad      	uxth	r5, r5
 80011d2:	b2a4      	uxth	r4, r4
 80011d4:	fa1f fa81 	uxth.w	sl, r1
 80011d8:	fa1f f982 	uxth.w	r9, r2
 80011dc:	fa1f f883 	uxth.w	r8, r3
    HANDLE_CHANNEL( 1, WS2812_CH1_GPIO);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3308      	adds	r3, #8
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff92 	bl	8001110 <get_channel_byte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	75fb      	strb	r3, [r7, #23]
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	4618      	mov	r0, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	469e      	mov	lr, r3
 80011f8:	46dc      	mov	ip, fp
 80011fa:	4651      	mov	r1, sl
 80011fc:	464a      	mov	r2, r9
 80011fe:	4643      	mov	r3, r8
 8001200:	4680      	mov	r8, r0
 8001202:	f3c8 10c0 	ubfx	r0, r8, #7, #1
 8001206:	f360 0e41 	bfi	lr, r0, #1, #1
 800120a:	f3c8 1080 	ubfx	r0, r8, #6, #1
 800120e:	f360 0c41 	bfi	ip, r0, #1, #1
 8001212:	f3c8 1040 	ubfx	r0, r8, #5, #1
 8001216:	f360 0641 	bfi	r6, r0, #1, #1
 800121a:	f3c8 1000 	ubfx	r0, r8, #4, #1
 800121e:	f360 0541 	bfi	r5, r0, #1, #1
 8001222:	f3c8 00c0 	ubfx	r0, r8, #3, #1
 8001226:	f360 0441 	bfi	r4, r0, #1, #1
 800122a:	f3c8 0080 	ubfx	r0, r8, #2, #1
 800122e:	f360 0141 	bfi	r1, r0, #1, #1
 8001232:	f3c8 0040 	ubfx	r0, r8, #1, #1
 8001236:	f360 0241 	bfi	r2, r0, #1, #1
 800123a:	f3c8 0000 	ubfx	r0, r8, #0, #1
 800123e:	f360 0341 	bfi	r3, r0, #1, #1
 8001242:	fa1f f08e 	uxth.w	r0, lr
 8001246:	fa1f fb8c 	uxth.w	fp, ip
 800124a:	b2b6      	uxth	r6, r6
 800124c:	b2ad      	uxth	r5, r5
 800124e:	b2a4      	uxth	r4, r4
 8001250:	fa1f fa81 	uxth.w	sl, r1
 8001254:	fa1f f982 	uxth.w	r9, r2
 8001258:	fa1f f883 	uxth.w	r8, r3

    /*
     * Store the repacked bits in our DMA buffer, ready to be sent to the GPIO bit-reset register.
     * cur0-cur7 represents bits0 - bits7 of all our channels. Each bit within curX is one channel.
     */
    dest[0] = cur0;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4602      	mov	r2, r0
 8001260:	801a      	strh	r2, [r3, #0]
    dest[1] = cur1;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3302      	adds	r3, #2
 8001266:	465a      	mov	r2, fp
 8001268:	801a      	strh	r2, [r3, #0]
    dest[2] = cur2;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3304      	adds	r3, #4
 800126e:	4632      	mov	r2, r6
 8001270:	801a      	strh	r2, [r3, #0]
    dest[3] = cur3;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3306      	adds	r3, #6
 8001276:	462a      	mov	r2, r5
 8001278:	801a      	strh	r2, [r3, #0]
    dest[4] = cur4;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3308      	adds	r3, #8
 800127e:	4622      	mov	r2, r4
 8001280:	801a      	strh	r2, [r3, #0]
    dest[5] = cur5;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	330a      	adds	r3, #10
 8001286:	4652      	mov	r2, sl
 8001288:	801a      	strh	r2, [r3, #0]
    dest[6] = cur6;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	330c      	adds	r3, #12
 800128e:	464a      	mov	r2, r9
 8001290:	801a      	strh	r2, [r3, #0]
    dest[7] = cur7;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	330e      	adds	r3, #14
 8001296:	4642      	mov	r2, r8
 8001298:	801a      	strh	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012a4 <ws2812_refresh>:

void ws2812_refresh(const struct led_channel_info *channels, GPIO_TypeDef *gpio_bank)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
    int cycles = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    int i;
    int pos = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
    int max_length = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]

    /* This is what gets DMAed to the GPIO BSR / BSRR at the start/end of each bit cycle.
     * We will dynamically build this shortly
     */
    ws2812_gpio_set_bits = 0;
 80012ba:	4b80      	ldr	r3, [pc, #512]	; (80014bc <ws2812_refresh+0x218>)
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]

    /* Pre-fill the DMA buffer, because we won't start filling things on-the-fly until the first
     * half has already been transferred.
     */
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	e00e      	b.n	80012e4 <ws2812_refresh+0x40>
        fill_dma_buffer(dma_buffer + i, pos, channels);
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4a7d      	ldr	r2, [pc, #500]	; (80014c0 <ws2812_refresh+0x21c>)
 80012cc:	4413      	add	r3, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff34 	bl	8001140 <fill_dma_buffer>
        pos++;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
    for (i = 0; i < DMA_BUFFER_SIZE; i+= 8) {
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	3308      	adds	r3, #8
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	dded      	ble.n	80012c6 <ws2812_refresh+0x22>

    /* Go through the channel list, figure out which channels are used, and set up the GPIO set/
     * reset bit masks. While we're at it, find the length of the longest framebuffer, in case
     * they're of unequal length. This determines how many total bits we will clock out.
     */
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	e027      	b.n	8001340 <ws2812_refresh+0x9c>
        if (channels[i].length > max_length)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	da05      	bge.n	800130c <ws2812_refresh+0x68>
            max_length = channels[i].length;
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	613b      	str	r3, [r7, #16]

        if (channels[i].length != 0)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00f      	beq.n	800133a <ws2812_refresh+0x96>
            ws2812_gpio_set_bits |= (1 << ws2812_channel_gpio_map[i]);
 800131a:	4a6a      	ldr	r2, [pc, #424]	; (80014c4 <ws2812_refresh+0x220>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	2301      	movs	r3, #1
 8001326:	4093      	lsls	r3, r2
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b64      	ldr	r3, [pc, #400]	; (80014bc <ws2812_refresh+0x218>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21b      	sxth	r3, r3
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b61      	ldr	r3, [pc, #388]	; (80014bc <ws2812_refresh+0x218>)
 8001338:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < WS2812_NUM_CHANNELS; i++) {
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3301      	adds	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b01      	cmp	r3, #1
 8001344:	ddd4      	ble.n	80012f0 <ws2812_refresh+0x4c>
    }

    /* Give DMA time to finish out the current buffer, before turning it off, plus an extra blank pixel (24 bits) */
    max_length += DMA_BUFFER_SIZE / 8;
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	3302      	adds	r3, #2
 800134a:	613b      	str	r3, [r7, #16]

    /* If per-channel range checks are enabled, add an extra "dummy" pixel to the end of our data stream.
     * This must only be done with range checks enabled, or we'll walk off the end of our framebuffers.
     */
#if !WS212_ALL_CHANNELS_SAME_LENGTH
    max_length += 3;
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	3303      	adds	r3, #3
 8001350:	613b      	str	r3, [r7, #16]
#endif

    /* We're going to use our standard timer to generate the RESET pulse, so for now just run the
     * timer without any DMA.
     */
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_UPDATE);
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <ws2812_refresh+0x224>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <ws2812_refresh+0x224>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001360:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC1);
 8001362:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <ws2812_refresh+0x224>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <ws2812_refresh+0x224>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001370:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htimer2, TIM_DMA_CC2);
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <ws2812_refresh+0x224>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <ws2812_refresh+0x224>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001380:	60da      	str	r2, [r3, #12]

    __HAL_TIM_DISABLE(&htimer2);
 8001382:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <ws2812_refresh+0x224>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a1a      	ldr	r2, [r3, #32]
 8001388:	f241 1311 	movw	r3, #4369	; 0x1111
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10f      	bne.n	80013b2 <ws2812_refresh+0x10e>
 8001392:	4b4d      	ldr	r3, [pc, #308]	; (80014c8 <ws2812_refresh+0x224>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	f240 4344 	movw	r3, #1092	; 0x444
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d107      	bne.n	80013b2 <ws2812_refresh+0x10e>
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <ws2812_refresh+0x224>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <ws2812_refresh+0x224>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs to 0, to begin reset pulse */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 80013b2:	4b42      	ldr	r3, [pc, #264]	; (80014bc <ws2812_refresh+0x218>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	615a      	str	r2, [r3, #20]

    __HAL_TIM_ENABLE(&htimer2);
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <ws2812_refresh+0x224>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <ws2812_refresh+0x224>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

    /* We know the timer overflows every 1.25uS (our bit-time interval). So rather than
     * reprogram the timer for 280uS (reset pulse duration) and back, we're gonna be lazy
     * and just count out ~225 update intervals
     */
    for (i = 0; i < 225; i++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	e00f      	b.n	80013f2 <ws2812_refresh+0x14e>
        while (!__HAL_TIM_GET_FLAG(&htimer2, TIM_FLAG_UPDATE));
 80013d2:	bf00      	nop
 80013d4:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <ws2812_refresh+0x224>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d1f8      	bne.n	80013d4 <ws2812_refresh+0x130>
        __HAL_TIM_CLEAR_FLAG(&htimer2, TIM_FLAG_UPDATE);
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <ws2812_refresh+0x224>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f06f 0201 	mvn.w	r2, #1
 80013ea:	611a      	str	r2, [r3, #16]
    for (i = 0; i < 225; i++) {
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2be0      	cmp	r3, #224	; 0xe0
 80013f6:	ddec      	ble.n	80013d2 <ws2812_refresh+0x12e>
    }

    /* Now that we're done with the RESET pulse, turn off the timer and prepare the DMA stuff */
    __HAL_TIM_DISABLE(&htimer2);
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <ws2812_refresh+0x224>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10f      	bne.n	8001428 <ws2812_refresh+0x184>
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <ws2812_refresh+0x224>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a1a      	ldr	r2, [r3, #32]
 800140e:	f240 4344 	movw	r3, #1092	; 0x444
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d107      	bne.n	8001428 <ws2812_refresh+0x184>
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <ws2812_refresh+0x224>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <ws2812_refresh+0x224>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
    ws2812_dma_start(gpio_bank);
 8001428:	6838      	ldr	r0, [r7, #0]
 800142a:	f7ff fdbf 	bl	8000fac <ws2812_dma_start>

    /* We set the timer to juuust before the overflow condition, so that the UPDATE event happens
     * before the CH1 / CH2 match events. We want this so that the UPDATE event gives us a clean
     * starting "high" level for the first edge of the first bit.
     */
    __HAL_TIM_SET_COUNTER(&htimer2, __HAL_TIM_GET_AUTORELOAD(&htimer2) - 10);
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <ws2812_refresh+0x224>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <ws2812_refresh+0x224>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3a0a      	subs	r2, #10
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Clear the DMA transfer status flags for the DMA we're using */
    DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <ws2812_refresh+0x228>)
 800143e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001442:	605a      	str	r2, [r3, #4]

    /* Enable the timer.... and so it begins */
    __HAL_TIM_ENABLE(&htimer2);
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <ws2812_refresh+0x224>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <ws2812_refresh+0x224>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

    while(1) {
        /* Wait for DMA full-transfer or half-transfer event. This tells us when to fill the next buffer */
        if (!(DMA1->ISR & (DMA_ISR_TCIF5 | DMA_ISR_HTIF5))) {
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <ws2812_refresh+0x228>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <ws2812_refresh+0x1c4>
            cycles++;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	3301      	adds	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
            continue;
 8001466:	e027      	b.n	80014b8 <ws2812_refresh+0x214>
        }

        uint16_t *dest = dma_buffer;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <ws2812_refresh+0x21c>)
 800146a:	60fb      	str	r3, [r7, #12]

        /* Figure out if we're filling the first half of the DMA buffer, or the second half */
        if (DMA1->ISR & DMA_ISR_TCIF5)
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <ws2812_refresh+0x228>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <ws2812_refresh+0x1da>
            dest += DMA_BUFFER_FILL_SIZE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3310      	adds	r3, #16
 800147c:	60fb      	str	r3, [r7, #12]

        /* Clear DMA event flags */
        DMA1->IFCR = (DMA_IFCR_CTCIF5 | DMA_IFCR_CHTIF5);
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <ws2812_refresh+0x228>)
 8001480:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001484:	605a      	str	r2, [r3, #4]

        /* Unpack one new byte from each channel, into eight words in our DMA buffer
         * Each 16-bit word in the DMA buffer contains to one bit of the output byte (from each channel)
         */
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e00e      	b.n	80014aa <ws2812_refresh+0x206>
            fill_dma_buffer(dest + i, pos, channels);
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6979      	ldr	r1, [r7, #20]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fe51 	bl	8001140 <fill_dma_buffer>
            pos++;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
        for (i = 0; i < DMA_BUFFER_FILL_SIZE; i+= 8) {
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	3308      	adds	r3, #8
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b07      	cmp	r3, #7
 80014ae:	dded      	ble.n	800148c <ws2812_refresh+0x1e8>
        }

        if (pos > max_length)
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dc0b      	bgt.n	80014d0 <ws2812_refresh+0x22c>
    while(1) {
 80014b8:	e7cc      	b.n	8001454 <ws2812_refresh+0x1b0>
 80014ba:	bf00      	nop
 80014bc:	20000098 	.word	0x20000098
 80014c0:	2000009c 	.word	0x2000009c
 80014c4:	08004e14 	.word	0x08004e14
 80014c8:	200003fc 	.word	0x200003fc
 80014cc:	40020000 	.word	0x40020000
            break;
 80014d0:	bf00      	nop
    }

    __HAL_TIM_DISABLE(&htimer2);
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <ws2812_refresh+0x2a0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a1a      	ldr	r2, [r3, #32]
 80014d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10f      	bne.n	8001502 <ws2812_refresh+0x25e>
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <ws2812_refresh+0x2a0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a1a      	ldr	r2, [r3, #32]
 80014e8:	f240 4344 	movw	r3, #1092	; 0x444
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d107      	bne.n	8001502 <ws2812_refresh+0x25e>
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <ws2812_refresh+0x2a0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <ws2812_refresh+0x2a0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]

    /* Set all LED GPIOs back to 0 */
    gpio_bank->BRR = ws2812_gpio_set_bits;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <ws2812_refresh+0x2a4>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	615a      	str	r2, [r3, #20]

	__HAL_DMA_DISABLE(&hdma_tim2_update);
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <ws2812_refresh+0x2a8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <ws2812_refresh+0x2a8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <ws2812_refresh+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <ws2812_refresh+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <ws2812_refresh+0x2b0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <ws2812_refresh+0x2b0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200003fc 	.word	0x200003fc
 8001548:	20000098 	.word	0x20000098
 800154c:	200003b8 	.word	0x200003b8
 8001550:	20000374 	.word	0x20000374
 8001554:	20000330 	.word	0x20000330

08001558 <ws2812_init>:

void ws2812_init()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <ws2812_init+0x48>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <ws2812_init+0x48>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <ws2812_init+0x48>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	200c      	movs	r0, #12
 800157c:	f000 fd4f 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	200f      	movs	r0, #15
 8001586:	f000 fd4a 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2011      	movs	r0, #17
 8001590:	f000 fd45 	bl	800201e <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001594:	f7ff fca4 	bl	8000ee0 <ws2812_timer2_init>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015a6:	e003      	b.n	80015b0 <LoopCopyDataInit>

080015a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ae:	3104      	adds	r1, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015b8:	d3f6      	bcc.n	80015a8 <CopyDataInit>
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015bc:	e002      	b.n	80015c4 <LoopFillZerobss>

080015be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015c0:	f842 3b04 	str.w	r3, [r2], #4

080015c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015c8:	d3f9      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ca:	f7ff fc83 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f002 ffa3 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015d2:	f7fe ff21 	bl	8000418 <main>
  bx lr
 80015d6:	4770      	bx	lr
  ldr r3, =_sidata
 80015d8:	08004e60 	.word	0x08004e60
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015e0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80015e4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80015e8:	2000044c 	.word	0x2000044c

080015ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_2_IRQHandler>
	...

080015f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_Init+0x28>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_Init+0x28>)
 80015fa:	f043 0310 	orr.w	r3, r3, #16
 80015fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 fd01 	bl	8002008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	2000      	movs	r0, #0
 8001608:	f000 f808 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7ff fa38 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40022000 	.word	0x40022000

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x54>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd19 	bl	8002072 <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001658:	f000 fce1 	bl	800201e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_InitTick+0x5c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000004 	.word	0x20000004
 8001674:	2000000c 	.word	0x2000000c
 8001678:	20000008 	.word	0x20000008

0800167c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x1c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_IncTick+0x20>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a03      	ldr	r2, [pc, #12]	; (800169c <HAL_IncTick+0x20>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	2000000c 	.word	0x2000000c
 800169c:	20000444 	.word	0x20000444

080016a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <HAL_GetTick+0x10>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000444 	.word	0x20000444

080016b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff fff0 	bl	80016a0 <HAL_GetTick>
 80016c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016cc:	d005      	beq.n	80016da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_Delay+0x40>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016da:	bf00      	nop
 80016dc:	f7ff ffe0 	bl	80016a0 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8f7      	bhi.n	80016dc <HAL_Delay+0x28>
  {
  }
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000000c 	.word	0x2000000c

080016f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0be      	b.n	8001898 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff f9d4 	bl	8000ae4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 faf7 	bl	8001d30 <ADC_ConversionStop_Disable>
 8001742:	4603      	mov	r3, r0
 8001744:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 8099 	bne.w	8001886 <HAL_ADC_Init+0x18e>
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 8095 	bne.w	8001886 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001764:	f023 0302 	bic.w	r3, r3, #2
 8001768:	f043 0202 	orr.w	r2, r3, #2
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001778:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7b1b      	ldrb	r3, [r3, #12]
 800177e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001780:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	4313      	orrs	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001790:	d003      	beq.n	800179a <HAL_ADC_Init+0xa2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d102      	bne.n	80017a0 <HAL_ADC_Init+0xa8>
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	e000      	b.n	80017a2 <HAL_ADC_Init+0xaa>
 80017a0:	2300      	movs	r3, #0
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7d1b      	ldrb	r3, [r3, #20]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d119      	bne.n	80017e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7b1b      	ldrb	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	3b01      	subs	r3, #1
 80017be:	035a      	lsls	r2, r3, #13
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	e00b      	b.n	80017e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	f043 0220 	orr.w	r2, r3, #32
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_ADC_Init+0x1a8>)
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	430b      	orrs	r3, r1
 800180a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001814:	d003      	beq.n	800181e <HAL_ADC_Init+0x126>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d104      	bne.n	8001828 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	3b01      	subs	r3, #1
 8001824:	051b      	lsls	r3, r3, #20
 8001826:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	430a      	orrs	r2, r1
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_ADC_Init+0x1ac>)
 8001844:	4013      	ands	r3, r2
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	429a      	cmp	r2, r3
 800184a:	d10b      	bne.n	8001864 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001862:	e018      	b.n	8001896 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	f023 0312 	bic.w	r3, r3, #18
 800186c:	f043 0210 	orr.w	r2, r3, #16
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001884:	e007      	b.n	8001896 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f043 0210 	orr.w	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001896:	7dfb      	ldrb	r3, [r7, #23]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	ffe1f7fd 	.word	0xffe1f7fd
 80018a4:	ff1f0efe 	.word	0xff1f0efe

080018a8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a64      	ldr	r2, [pc, #400]	; (8001a50 <HAL_ADC_Start_DMA+0x1a8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d004      	beq.n	80018cc <HAL_ADC_Start_DMA+0x24>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a63      	ldr	r2, [pc, #396]	; (8001a54 <HAL_ADC_Start_DMA+0x1ac>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d106      	bne.n	80018da <HAL_ADC_Start_DMA+0x32>
 80018cc:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <HAL_ADC_Start_DMA+0x1a8>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 80b3 	bne.w	8001a40 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_Start_DMA+0x40>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e0ae      	b.n	8001a46 <HAL_ADC_Start_DMA+0x19e>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f9cb 	bl	8001c8c <ADC_Enable>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 809a 	bne.w	8001a36 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a4e      	ldr	r2, [pc, #312]	; (8001a54 <HAL_ADC_Start_DMA+0x1ac>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d105      	bne.n	800192c <HAL_ADC_Start_DMA+0x84>
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_ADC_Start_DMA+0x1a8>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d115      	bne.n	8001958 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d026      	beq.n	8001994 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800194e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001956:	e01d      	b.n	8001994 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a39      	ldr	r2, [pc, #228]	; (8001a50 <HAL_ADC_Start_DMA+0x1a8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_ADC_Start_DMA+0xd0>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a38      	ldr	r2, [pc, #224]	; (8001a54 <HAL_ADC_Start_DMA+0x1ac>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d10d      	bne.n	8001994 <HAL_ADC_Start_DMA+0xec>
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <HAL_ADC_Start_DMA+0x1a8>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800198c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	f023 0206 	bic.w	r2, r3, #6
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ac:	e002      	b.n	80019b4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <HAL_ADC_Start_DMA+0x1b0>)
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_ADC_Start_DMA+0x1b4>)
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_ADC_Start_DMA+0x1b8>)
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f06f 0202 	mvn.w	r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a18      	ldr	r0, [r3, #32]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	334c      	adds	r3, #76	; 0x4c
 80019f8:	4619      	mov	r1, r3
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f000 fbe1 	bl	80021c4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a0c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a10:	d108      	bne.n	8001a24 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a20:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a22:	e00f      	b.n	8001a44 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a32:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a34:	e006      	b.n	8001a44 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001a3e:	e001      	b.n	8001a44 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40012400 	.word	0x40012400
 8001a54:	40012800 	.word	0x40012800
 8001a58:	08001da5 	.word	0x08001da5
 8001a5c:	08001e21 	.word	0x08001e21
 8001a60:	08001e3d 	.word	0x08001e3d

08001a64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x20>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e0dc      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x1da>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b06      	cmp	r3, #6
 8001aca:	d81c      	bhi.n	8001b06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3b05      	subs	r3, #5
 8001ade:	221f      	movs	r2, #31
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4019      	ands	r1, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	3b05      	subs	r3, #5
 8001af8:	fa00 f203 	lsl.w	r2, r0, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34
 8001b04:	e03c      	b.n	8001b80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	d81c      	bhi.n	8001b48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b23      	subs	r3, #35	; 0x23
 8001b20:	221f      	movs	r2, #31
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4019      	ands	r1, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b23      	subs	r3, #35	; 0x23
 8001b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	631a      	str	r2, [r3, #48]	; 0x30
 8001b46:	e01b      	b.n	8001b80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3b41      	subs	r3, #65	; 0x41
 8001b5a:	221f      	movs	r2, #31
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4019      	ands	r1, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b41      	subs	r3, #65	; 0x41
 8001b74:	fa00 f203 	lsl.w	r2, r0, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	d91c      	bls.n	8001bc2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68d9      	ldr	r1, [r3, #12]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	3b1e      	subs	r3, #30
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4019      	ands	r1, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6898      	ldr	r0, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b1e      	subs	r3, #30
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	e019      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6919      	ldr	r1, [r3, #16]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4019      	ands	r1, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6898      	ldr	r0, [r3, #8]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	fa00 f203 	lsl.w	r2, r0, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d003      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c02:	2b11      	cmp	r3, #17
 8001c04:	d132      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d125      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d126      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c2c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d11a      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	0c9a      	lsrs	r2, r3, #18
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c4c:	e002      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f9      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x1b2>
 8001c5a:	e007      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f043 0220 	orr.w	r2, r3, #32
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40012400 	.word	0x40012400
 8001c84:	20000004 	.word	0x20000004
 8001c88:	431bde83 	.word	0x431bde83

08001c8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d039      	beq.n	8001d1e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0201 	orr.w	r2, r2, #1
 8001cb8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <ADC_Enable+0x9c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <ADC_Enable+0xa0>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	0c9b      	lsrs	r3, r3, #18
 8001cc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cc8:	e002      	b.n	8001cd0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f9      	bne.n	8001cca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cd6:	f7ff fce3 	bl	80016a0 <HAL_GetTick>
 8001cda:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cdc:	e018      	b.n	8001d10 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cde:	f7ff fcdf 	bl	80016a0 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d911      	bls.n	8001d10 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f043 0210 	orr.w	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e007      	b.n	8001d20 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d1df      	bne.n	8001cde <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000004 	.word	0x20000004
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d127      	bne.n	8001d9a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d5a:	f7ff fca1 	bl	80016a0 <HAL_GetTick>
 8001d5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d60:	e014      	b.n	8001d8c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d62:	f7ff fc9d 	bl	80016a0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d90d      	bls.n	8001d8c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	f043 0210 	orr.w	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e007      	b.n	8001d9c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d0e3      	beq.n	8001d62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d127      	bne.n	8001e0e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dd4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dd8:	d115      	bne.n	8001e06 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d111      	bne.n	8001e06 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7ff fe2c 	bl	8001a64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e0c:	e004      	b.n	8001e18 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fe21 	bl	8001a76 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f043 0204 	orr.w	r2, r3, #4
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff fe10 	bl	8001a88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0b      	blt.n	8001efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4906      	ldr	r1, [pc, #24]	; (8001f08 <__NVIC_EnableIRQ+0x34>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd4:	d301      	bcc.n	8001fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00f      	b.n	8001ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <SysTick_Config+0x40>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe2:	210f      	movs	r1, #15
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe8:	f7ff ff90 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <SysTick_Config+0x40>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <SysTick_Config+0x40>)
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	e000e010 	.word	0xe000e010

08002008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff2d 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002030:	f7ff ff42 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 8002034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	6978      	ldr	r0, [r7, #20]
 800203c:	f7ff ff90 	bl	8001f60 <NVIC_EncodePriority>
 8002040:	4602      	mov	r2, r0
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff5f 	bl	8001f0c <__NVIC_SetPriority>
}
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff35 	bl	8001ed4 <__NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffa2 	bl	8001fc4 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e043      	b.n	800212a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_DMA_Init+0xa8>)
 80020aa:	4413      	add	r3, r2
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_DMA_Init+0xac>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	009a      	lsls	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a1f      	ldr	r2, [pc, #124]	; (800213c <HAL_DMA_Init+0xb0>)
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	bffdfff8 	.word	0xbffdfff8
 8002138:	cccccccd 	.word	0xcccccccd
 800213c:	40020000 	.word	0x40020000

08002140 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_DMA_Start+0x20>
 800215c:	2302      	movs	r3, #2
 800215e:	e02d      	b.n	80021bc <HAL_DMA_Start+0x7c>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800216e:	2b01      	cmp	r3, #1
 8002170:	d11d      	bne.n	80021ae <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2202      	movs	r2, #2
 8002176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f9f0 	bl	800257c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	e005      	b.n	80021ba <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_DMA_Start_IT+0x20>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e04a      	b.n	800227a <HAL_DMA_Start_IT+0xb6>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d13a      	bne.n	800226c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f9ae 	bl	800257c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 020e 	orr.w	r2, r2, #14
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e00f      	b.n	800225a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0204 	bic.w	r2, r2, #4
 8002248:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 020a 	orr.w	r2, r2, #10
 8002258:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e005      	b.n	8002278 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002274:	2302      	movs	r3, #2
 8002276:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002278:	7dfb      	ldrb	r3, [r7, #23]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002296:	2b02      	cmp	r3, #2
 8002298:	d005      	beq.n	80022a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2204      	movs	r2, #4
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e051      	b.n	800234a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 020e 	bic.w	r2, r2, #14
 80022b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a22      	ldr	r2, [pc, #136]	; (8002354 <HAL_DMA_Abort_IT+0xd0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d029      	beq.n	8002324 <HAL_DMA_Abort_IT+0xa0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a20      	ldr	r2, [pc, #128]	; (8002358 <HAL_DMA_Abort_IT+0xd4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d022      	beq.n	8002320 <HAL_DMA_Abort_IT+0x9c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HAL_DMA_Abort_IT+0xd8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d01a      	beq.n	800231a <HAL_DMA_Abort_IT+0x96>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_DMA_Abort_IT+0xdc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d012      	beq.n	8002314 <HAL_DMA_Abort_IT+0x90>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1c      	ldr	r2, [pc, #112]	; (8002364 <HAL_DMA_Abort_IT+0xe0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00a      	beq.n	800230e <HAL_DMA_Abort_IT+0x8a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_DMA_Abort_IT+0xe4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d102      	bne.n	8002308 <HAL_DMA_Abort_IT+0x84>
 8002302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002306:	e00e      	b.n	8002326 <HAL_DMA_Abort_IT+0xa2>
 8002308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800230c:	e00b      	b.n	8002326 <HAL_DMA_Abort_IT+0xa2>
 800230e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002312:	e008      	b.n	8002326 <HAL_DMA_Abort_IT+0xa2>
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	e005      	b.n	8002326 <HAL_DMA_Abort_IT+0xa2>
 800231a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231e:	e002      	b.n	8002326 <HAL_DMA_Abort_IT+0xa2>
 8002320:	2310      	movs	r3, #16
 8002322:	e000      	b.n	8002326 <HAL_DMA_Abort_IT+0xa2>
 8002324:	2301      	movs	r3, #1
 8002326:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_DMA_Abort_IT+0xe8>)
 8002328:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
    } 
  }
  return status;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40020008 	.word	0x40020008
 8002358:	4002001c 	.word	0x4002001c
 800235c:	40020030 	.word	0x40020030
 8002360:	40020044 	.word	0x40020044
 8002364:	40020058 	.word	0x40020058
 8002368:	4002006c 	.word	0x4002006c
 800236c:	40020000 	.word	0x40020000

08002370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2204      	movs	r2, #4
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d04f      	beq.n	8002438 <HAL_DMA_IRQHandler+0xc8>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d04a      	beq.n	8002438 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0204 	bic.w	r2, r2, #4
 80023be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a66      	ldr	r2, [pc, #408]	; (8002560 <HAL_DMA_IRQHandler+0x1f0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d029      	beq.n	800241e <HAL_DMA_IRQHandler+0xae>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a65      	ldr	r2, [pc, #404]	; (8002564 <HAL_DMA_IRQHandler+0x1f4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d022      	beq.n	800241a <HAL_DMA_IRQHandler+0xaa>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a63      	ldr	r2, [pc, #396]	; (8002568 <HAL_DMA_IRQHandler+0x1f8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01a      	beq.n	8002414 <HAL_DMA_IRQHandler+0xa4>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a62      	ldr	r2, [pc, #392]	; (800256c <HAL_DMA_IRQHandler+0x1fc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d012      	beq.n	800240e <HAL_DMA_IRQHandler+0x9e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a60      	ldr	r2, [pc, #384]	; (8002570 <HAL_DMA_IRQHandler+0x200>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00a      	beq.n	8002408 <HAL_DMA_IRQHandler+0x98>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5f      	ldr	r2, [pc, #380]	; (8002574 <HAL_DMA_IRQHandler+0x204>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d102      	bne.n	8002402 <HAL_DMA_IRQHandler+0x92>
 80023fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002400:	e00e      	b.n	8002420 <HAL_DMA_IRQHandler+0xb0>
 8002402:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002406:	e00b      	b.n	8002420 <HAL_DMA_IRQHandler+0xb0>
 8002408:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800240c:	e008      	b.n	8002420 <HAL_DMA_IRQHandler+0xb0>
 800240e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002412:	e005      	b.n	8002420 <HAL_DMA_IRQHandler+0xb0>
 8002414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002418:	e002      	b.n	8002420 <HAL_DMA_IRQHandler+0xb0>
 800241a:	2340      	movs	r3, #64	; 0x40
 800241c:	e000      	b.n	8002420 <HAL_DMA_IRQHandler+0xb0>
 800241e:	2304      	movs	r3, #4
 8002420:	4a55      	ldr	r2, [pc, #340]	; (8002578 <HAL_DMA_IRQHandler+0x208>)
 8002422:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 8094 	beq.w	8002556 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002436:	e08e      	b.n	8002556 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2202      	movs	r2, #2
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d056      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x186>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d051      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 020a 	bic.w	r2, r2, #10
 800246e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a38      	ldr	r2, [pc, #224]	; (8002560 <HAL_DMA_IRQHandler+0x1f0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d029      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x166>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a37      	ldr	r2, [pc, #220]	; (8002564 <HAL_DMA_IRQHandler+0x1f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x162>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a35      	ldr	r2, [pc, #212]	; (8002568 <HAL_DMA_IRQHandler+0x1f8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01a      	beq.n	80024cc <HAL_DMA_IRQHandler+0x15c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_DMA_IRQHandler+0x1fc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d012      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x156>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a32      	ldr	r2, [pc, #200]	; (8002570 <HAL_DMA_IRQHandler+0x200>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00a      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x150>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a31      	ldr	r2, [pc, #196]	; (8002574 <HAL_DMA_IRQHandler+0x204>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <HAL_DMA_IRQHandler+0x14a>
 80024b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024b8:	e00e      	b.n	80024d8 <HAL_DMA_IRQHandler+0x168>
 80024ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024be:	e00b      	b.n	80024d8 <HAL_DMA_IRQHandler+0x168>
 80024c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c4:	e008      	b.n	80024d8 <HAL_DMA_IRQHandler+0x168>
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	e005      	b.n	80024d8 <HAL_DMA_IRQHandler+0x168>
 80024cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d0:	e002      	b.n	80024d8 <HAL_DMA_IRQHandler+0x168>
 80024d2:	2320      	movs	r3, #32
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_IRQHandler+0x168>
 80024d6:	2302      	movs	r3, #2
 80024d8:	4a27      	ldr	r2, [pc, #156]	; (8002578 <HAL_DMA_IRQHandler+0x208>)
 80024da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d034      	beq.n	8002556 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024f4:	e02f      	b.n	8002556 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2208      	movs	r2, #8
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d028      	beq.n	8002558 <HAL_DMA_IRQHandler+0x1e8>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d023      	beq.n	8002558 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 020e 	bic.w	r2, r2, #14
 800251e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
    }
  }
  return;
 8002556:	bf00      	nop
 8002558:	bf00      	nop
}
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40020008 	.word	0x40020008
 8002564:	4002001c 	.word	0x4002001c
 8002568:	40020030 	.word	0x40020030
 800256c:	40020044 	.word	0x40020044
 8002570:	40020058 	.word	0x40020058
 8002574:	4002006c 	.word	0x4002006c
 8002578:	40020000 	.word	0x40020000

0800257c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d108      	bne.n	80025bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025ba:	e007      	b.n	80025cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	60da      	str	r2, [r3, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d8:	b480      	push	{r7}
 80025da:	b08b      	sub	sp, #44	; 0x2c
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ea:	e127      	b.n	800283c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025ec:	2201      	movs	r2, #1
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	429a      	cmp	r2, r3
 8002606:	f040 8116 	bne.w	8002836 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b12      	cmp	r3, #18
 8002610:	d034      	beq.n	800267c <HAL_GPIO_Init+0xa4>
 8002612:	2b12      	cmp	r3, #18
 8002614:	d80d      	bhi.n	8002632 <HAL_GPIO_Init+0x5a>
 8002616:	2b02      	cmp	r3, #2
 8002618:	d02b      	beq.n	8002672 <HAL_GPIO_Init+0x9a>
 800261a:	2b02      	cmp	r3, #2
 800261c:	d804      	bhi.n	8002628 <HAL_GPIO_Init+0x50>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d031      	beq.n	8002686 <HAL_GPIO_Init+0xae>
 8002622:	2b01      	cmp	r3, #1
 8002624:	d01c      	beq.n	8002660 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002626:	e048      	b.n	80026ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002628:	2b03      	cmp	r3, #3
 800262a:	d043      	beq.n	80026b4 <HAL_GPIO_Init+0xdc>
 800262c:	2b11      	cmp	r3, #17
 800262e:	d01b      	beq.n	8002668 <HAL_GPIO_Init+0x90>
          break;
 8002630:	e043      	b.n	80026ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002632:	4a89      	ldr	r2, [pc, #548]	; (8002858 <HAL_GPIO_Init+0x280>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d026      	beq.n	8002686 <HAL_GPIO_Init+0xae>
 8002638:	4a87      	ldr	r2, [pc, #540]	; (8002858 <HAL_GPIO_Init+0x280>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d806      	bhi.n	800264c <HAL_GPIO_Init+0x74>
 800263e:	4a87      	ldr	r2, [pc, #540]	; (800285c <HAL_GPIO_Init+0x284>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d020      	beq.n	8002686 <HAL_GPIO_Init+0xae>
 8002644:	4a86      	ldr	r2, [pc, #536]	; (8002860 <HAL_GPIO_Init+0x288>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_GPIO_Init+0xae>
          break;
 800264a:	e036      	b.n	80026ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800264c:	4a85      	ldr	r2, [pc, #532]	; (8002864 <HAL_GPIO_Init+0x28c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d019      	beq.n	8002686 <HAL_GPIO_Init+0xae>
 8002652:	4a85      	ldr	r2, [pc, #532]	; (8002868 <HAL_GPIO_Init+0x290>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d016      	beq.n	8002686 <HAL_GPIO_Init+0xae>
 8002658:	4a84      	ldr	r2, [pc, #528]	; (800286c <HAL_GPIO_Init+0x294>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0xae>
          break;
 800265e:	e02c      	b.n	80026ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	623b      	str	r3, [r7, #32]
          break;
 8002666:	e028      	b.n	80026ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	3304      	adds	r3, #4
 800266e:	623b      	str	r3, [r7, #32]
          break;
 8002670:	e023      	b.n	80026ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	3308      	adds	r3, #8
 8002678:	623b      	str	r3, [r7, #32]
          break;
 800267a:	e01e      	b.n	80026ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	330c      	adds	r3, #12
 8002682:	623b      	str	r3, [r7, #32]
          break;
 8002684:	e019      	b.n	80026ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800268e:	2304      	movs	r3, #4
 8002690:	623b      	str	r3, [r7, #32]
          break;
 8002692:	e012      	b.n	80026ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800269c:	2308      	movs	r3, #8
 800269e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	611a      	str	r2, [r3, #16]
          break;
 80026a6:	e008      	b.n	80026ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	615a      	str	r2, [r3, #20]
          break;
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
          break;
 80026b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2bff      	cmp	r3, #255	; 0xff
 80026be:	d801      	bhi.n	80026c4 <HAL_GPIO_Init+0xec>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	e001      	b.n	80026c8 <HAL_GPIO_Init+0xf0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2bff      	cmp	r3, #255	; 0xff
 80026ce:	d802      	bhi.n	80026d6 <HAL_GPIO_Init+0xfe>
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_Init+0x104>
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	3b08      	subs	r3, #8
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	210f      	movs	r1, #15
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	401a      	ands	r2, r3
 80026ee:	6a39      	ldr	r1, [r7, #32]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	431a      	orrs	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8096 	beq.w	8002836 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800270a:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_GPIO_Init+0x298>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	4a58      	ldr	r2, [pc, #352]	; (8002870 <HAL_GPIO_Init+0x298>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6193      	str	r3, [r2, #24]
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_GPIO_Init+0x298>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002722:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_GPIO_Init+0x29c>)
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4013      	ands	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4b      	ldr	r2, [pc, #300]	; (8002878 <HAL_GPIO_Init+0x2a0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0x19e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4a      	ldr	r2, [pc, #296]	; (800287c <HAL_GPIO_Init+0x2a4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_Init+0x19a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a49      	ldr	r2, [pc, #292]	; (8002880 <HAL_GPIO_Init+0x2a8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x196>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a48      	ldr	r2, [pc, #288]	; (8002884 <HAL_GPIO_Init+0x2ac>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_Init+0x192>
 8002766:	2303      	movs	r3, #3
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x1a0>
 800276a:	2304      	movs	r3, #4
 800276c:	e004      	b.n	8002778 <HAL_GPIO_Init+0x1a0>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_Init+0x1a0>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x1a0>
 8002776:	2300      	movs	r3, #0
 8002778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277a:	f002 0203 	and.w	r2, r2, #3
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	4093      	lsls	r3, r2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002788:	493a      	ldr	r1, [pc, #232]	; (8002874 <HAL_GPIO_Init+0x29c>)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4938      	ldr	r1, [pc, #224]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
 80027ae:	e006      	b.n	80027be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	4933      	ldr	r1, [pc, #204]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	492e      	ldr	r1, [pc, #184]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
 80027d6:	e006      	b.n	80027e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	43db      	mvns	r3, r3
 80027e0:	4929      	ldr	r1, [pc, #164]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	4924      	ldr	r1, [pc, #144]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
 80027fe:	e006      	b.n	800280e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	43db      	mvns	r3, r3
 8002808:	491f      	ldr	r1, [pc, #124]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 800280a:	4013      	ands	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	491a      	ldr	r1, [pc, #104]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
 8002826:	e006      	b.n	8002836 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	43db      	mvns	r3, r3
 8002830:	4915      	ldr	r1, [pc, #84]	; (8002888 <HAL_GPIO_Init+0x2b0>)
 8002832:	4013      	ands	r3, r2
 8002834:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	3301      	adds	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	f47f aed0 	bne.w	80025ec <HAL_GPIO_Init+0x14>
  }
}
 800284c:	bf00      	nop
 800284e:	372c      	adds	r7, #44	; 0x2c
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	10210000 	.word	0x10210000
 800285c:	10110000 	.word	0x10110000
 8002860:	10120000 	.word	0x10120000
 8002864:	10310000 	.word	0x10310000
 8002868:	10320000 	.word	0x10320000
 800286c:	10220000 	.word	0x10220000
 8002870:	40021000 	.word	0x40021000
 8002874:	40010000 	.word	0x40010000
 8002878:	40010800 	.word	0x40010800
 800287c:	40010c00 	.word	0x40010c00
 8002880:	40011000 	.word	0x40011000
 8002884:	40011400 	.word	0x40011400
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	611a      	str	r2, [r3, #16]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	041a      	lsls	r2, r3, #16
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43d9      	mvns	r1, r3
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	400b      	ands	r3, r1
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e26c      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8087 	beq.w	8002a1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002910:	4b92      	ldr	r3, [pc, #584]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b04      	cmp	r3, #4
 800291a:	d00c      	beq.n	8002936 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800291c:	4b8f      	ldr	r3, [pc, #572]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d112      	bne.n	800294e <HAL_RCC_OscConfig+0x5e>
 8002928:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d10b      	bne.n	800294e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002936:	4b89      	ldr	r3, [pc, #548]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d06c      	beq.n	8002a1c <HAL_RCC_OscConfig+0x12c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d168      	bne.n	8002a1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e246      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x76>
 8002958:	4b80      	ldr	r3, [pc, #512]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a7f      	ldr	r2, [pc, #508]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800295e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e02e      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x98>
 800296e:	4b7b      	ldr	r3, [pc, #492]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7a      	ldr	r2, [pc, #488]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b78      	ldr	r3, [pc, #480]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a77      	ldr	r2, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0xbc>
 8002992:	4b72      	ldr	r3, [pc, #456]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a71      	ldr	r2, [pc, #452]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b6f      	ldr	r3, [pc, #444]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a6e      	ldr	r2, [pc, #440]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 80029ac:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fe68 	bl	80016a0 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe fe64 	bl	80016a0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1fa      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe4>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fe54 	bl	80016a0 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fe50 	bl	80016a0 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1e6      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x10c>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d063      	beq.n	8002af2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2a:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a36:	4b49      	ldr	r3, [pc, #292]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d11c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x18c>
 8002a42:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x176>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1ba      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4939      	ldr	r1, [pc, #228]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e03a      	b.n	8002af2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <HAL_RCC_OscConfig+0x270>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fe09 	bl	80016a0 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fe05 	bl	80016a0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e19b      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4927      	ldr	r1, [pc, #156]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe fde8 	bl	80016a0 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fde4 	bl	80016a0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e17a      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03a      	beq.n	8002b74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d019      	beq.n	8002b3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fdc8 	bl	80016a0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fe fdc4 	bl	80016a0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e15a      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f000 fada 	bl	80030ec <RCC_Delay>
 8002b38:	e01c      	b.n	8002b74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fdae 	bl	80016a0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b46:	e00f      	b.n	8002b68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fe fdaa 	bl	80016a0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d908      	bls.n	8002b68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e140      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	42420000 	.word	0x42420000
 8002b64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	4b9e      	ldr	r3, [pc, #632]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e9      	bne.n	8002b48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a6 	beq.w	8002cce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b97      	ldr	r3, [pc, #604]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b94      	ldr	r3, [pc, #592]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a93      	ldr	r2, [pc, #588]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	61d3      	str	r3, [r2, #28]
 8002b9e:	4b91      	ldr	r3, [pc, #580]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b8e      	ldr	r3, [pc, #568]	; (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b8b      	ldr	r3, [pc, #556]	; (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a8a      	ldr	r2, [pc, #552]	; (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fd6b 	bl	80016a0 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe fd67 	bl	80016a0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e0fd      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x312>
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4a7a      	ldr	r2, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	e02d      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x334>
 8002c0a:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a75      	ldr	r2, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6213      	str	r3, [r2, #32]
 8002c16:	4b73      	ldr	r3, [pc, #460]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a72      	ldr	r2, [pc, #456]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c1c:	f023 0304 	bic.w	r3, r3, #4
 8002c20:	6213      	str	r3, [r2, #32]
 8002c22:	e01c      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x356>
 8002c2c:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a6c      	ldr	r2, [pc, #432]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	4b6a      	ldr	r3, [pc, #424]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4a69      	ldr	r2, [pc, #420]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6213      	str	r3, [r2, #32]
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c46:	4b67      	ldr	r3, [pc, #412]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a66      	ldr	r2, [pc, #408]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a63      	ldr	r2, [pc, #396]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d015      	beq.n	8002c92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fd1b 	bl	80016a0 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fd17 	bl	80016a0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0ab      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b57      	ldr	r3, [pc, #348]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ee      	beq.n	8002c6e <HAL_RCC_OscConfig+0x37e>
 8002c90:	e014      	b.n	8002cbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe fd05 	bl	80016a0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fd01 	bl	80016a0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e095      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc2:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a47      	ldr	r2, [pc, #284]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8081 	beq.w	8002dda <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d061      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d146      	bne.n	8002d7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_OscConfig+0x4fc>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fcd5 	bl	80016a0 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe fcd1 	bl	80016a0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e067      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0c:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d108      	bne.n	8002d34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d22:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	492d      	ldr	r1, [pc, #180]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a19      	ldr	r1, [r3, #32]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	430b      	orrs	r3, r1
 8002d46:	4927      	ldr	r1, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4c:	4b27      	ldr	r3, [pc, #156]	; (8002dec <HAL_RCC_OscConfig+0x4fc>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fe fca5 	bl	80016a0 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe fca1 	bl	80016a0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e037      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x46a>
 8002d78:	e02f      	b.n	8002dda <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <HAL_RCC_OscConfig+0x4fc>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fc8e 	bl	80016a0 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe fc8a 	bl	80016a0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e020      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x498>
 8002da6:	e018      	b.n	8002dda <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e013      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42420060 	.word	0x42420060

08002df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d0      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d910      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b67      	ldr	r3, [pc, #412]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 0207 	bic.w	r2, r3, #7
 8002e1a:	4965      	ldr	r1, [pc, #404]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d040      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d115      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e073      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06b      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f023 0203 	bic.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4936      	ldr	r1, [pc, #216]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fbde 	bl	80016a0 <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee8:	f7fe fbda 	bl	80016a0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e053      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 020c 	and.w	r2, r3, #12
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1eb      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d210      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 0207 	bic.w	r2, r3, #7
 8002f26:	4922      	ldr	r1, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	fa21 f303 	lsr.w	r3, r1, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1cc>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fb3c 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08004dfc 	.word	0x08004dfc
 8002fbc:	20000004 	.word	0x20000004
 8002fc0:	20000008 	.word	0x20000008

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	b490      	push	{r4, r7}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fca:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fcc:	1d3c      	adds	r4, r7, #4
 8002fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fd4:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fee:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x46>
 8003002:	e02d      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003006:	623b      	str	r3, [r7, #32]
      break;
 8003008:	e02d      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	0c9b      	lsrs	r3, r3, #18
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003016:	4413      	add	r3, r2
 8003018:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800301c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_RCC_GetSysClockFreq+0xb8>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	0c5b      	lsrs	r3, r3, #17
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003036:	4413      	add	r3, r2
 8003038:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800303c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003042:	fb02 f203 	mul.w	r2, r2, r3
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
 800304e:	e004      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	623b      	str	r3, [r7, #32]
      break;
 800305e:	e002      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003062:	623b      	str	r3, [r7, #32]
      break;
 8003064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003066:	6a3b      	ldr	r3, [r7, #32]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bc90      	pop	{r4, r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	08004de8 	.word	0x08004de8
 8003078:	08004df8 	.word	0x08004df8
 800307c:	40021000 	.word	0x40021000
 8003080:	007a1200 	.word	0x007a1200
 8003084:	003d0900 	.word	0x003d0900

08003088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800308c:	4b02      	ldr	r3, [pc, #8]	; (8003098 <HAL_RCC_GetHCLKFreq+0x10>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a0:	f7ff fff2 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030a4:	4601      	mov	r1, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4a03      	ldr	r2, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08004e0c 	.word	0x08004e0c

080030c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c8:	f7ff ffde 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030cc:	4601      	mov	r1, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0adb      	lsrs	r3, r3, #11
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	08004e0c 	.word	0x08004e0c

080030ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <RCC_Delay+0x34>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <RCC_Delay+0x38>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0a5b      	lsrs	r3, r3, #9
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003108:	bf00      	nop
  }
  while (Delay --);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e5a      	subs	r2, r3, #1
 800310e:	60fa      	str	r2, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f9      	bne.n	8003108 <RCC_Delay+0x1c>
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000004 	.word	0x20000004
 8003124:	10624dd3 	.word	0x10624dd3

08003128 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d07d      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003148:	4b4f      	ldr	r3, [pc, #316]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10d      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	4a4b      	ldr	r2, [pc, #300]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315e:	61d3      	str	r3, [r2, #28]
 8003160:	4b49      	ldr	r3, [pc, #292]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316c:	2301      	movs	r3, #1
 800316e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d118      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003188:	f7fe fa8a 	bl	80016a0 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	e008      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003190:	f7fe fa86 	bl	80016a0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e06d      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b3a      	ldr	r3, [pc, #232]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ae:	4b36      	ldr	r3, [pc, #216]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02e      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d027      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031cc:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031d6:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031dc:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031e2:	4a29      	ldr	r2, [pc, #164]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d014      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fe fa55 	bl	80016a0 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe fa51 	bl	80016a0 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e036      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ee      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4917      	ldr	r1, [pc, #92]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	4313      	orrs	r3, r2
 800322c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4a13      	ldr	r2, [pc, #76]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	490b      	ldr	r1, [pc, #44]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4904      	ldr	r1, [pc, #16]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	40007000 	.word	0x40007000
 8003290:	42420440 	.word	0x42420440

08003294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e041      	b.n	800332a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd fc7a 	bl	8000bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f000 f9fc 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e041      	b.n	80033c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f839 	bl	80033d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f000 f9ad 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e0ac      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x174>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	f200 809f 	bhi.w	800354c <HAL_TIM_PWM_ConfigChannel+0x168>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003449 	.word	0x08003449
 8003418:	0800354d 	.word	0x0800354d
 800341c:	0800354d 	.word	0x0800354d
 8003420:	0800354d 	.word	0x0800354d
 8003424:	08003489 	.word	0x08003489
 8003428:	0800354d 	.word	0x0800354d
 800342c:	0800354d 	.word	0x0800354d
 8003430:	0800354d 	.word	0x0800354d
 8003434:	080034cb 	.word	0x080034cb
 8003438:	0800354d 	.word	0x0800354d
 800343c:	0800354d 	.word	0x0800354d
 8003440:	0800354d 	.word	0x0800354d
 8003444:	0800350b 	.word	0x0800350b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f9a0 	bl	8003794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0208 	orr.w	r2, r2, #8
 8003462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0204 	bic.w	r2, r2, #4
 8003472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6999      	ldr	r1, [r3, #24]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	619a      	str	r2, [r3, #24]
      break;
 8003486:	e062      	b.n	800354e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f9e6 	bl	8003860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6999      	ldr	r1, [r3, #24]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]
      break;
 80034c8:	e041      	b.n	800354e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fa2f 	bl	8003934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0208 	orr.w	r2, r2, #8
 80034e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0204 	bic.w	r2, r2, #4
 80034f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69d9      	ldr	r1, [r3, #28]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	61da      	str	r2, [r3, #28]
      break;
 8003508:	e021      	b.n	800354e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fa79 	bl	8003a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69d9      	ldr	r1, [r3, #28]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	61da      	str	r2, [r3, #28]
      break;
 800354a:	e000      	b.n	800354e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800354c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIM_ConfigClockSource+0x18>
 8003574:	2302      	movs	r3, #2
 8003576:	e0a6      	b.n	80036c6 <HAL_TIM_ConfigClockSource+0x166>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d067      	beq.n	8003680 <HAL_TIM_ConfigClockSource+0x120>
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d80b      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x6c>
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d073      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x140>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d802      	bhi.n	80035c2 <HAL_TIM_ConfigClockSource+0x62>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d06f      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035c0:	e078      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d06c      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x140>
 80035c6:	2b30      	cmp	r3, #48	; 0x30
 80035c8:	d06a      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035ca:	e073      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035cc:	2b70      	cmp	r3, #112	; 0x70
 80035ce:	d00d      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x8c>
 80035d0:	2b70      	cmp	r3, #112	; 0x70
 80035d2:	d804      	bhi.n	80035de <HAL_TIM_ConfigClockSource+0x7e>
 80035d4:	2b50      	cmp	r3, #80	; 0x50
 80035d6:	d033      	beq.n	8003640 <HAL_TIM_ConfigClockSource+0xe0>
 80035d8:	2b60      	cmp	r3, #96	; 0x60
 80035da:	d041      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035dc:	e06a      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d066      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x152>
 80035e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e8:	d017      	beq.n	800361a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035ea:	e063      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f000 fac9 	bl	8003b92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800360e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	609a      	str	r2, [r3, #8]
      break;
 8003618:	e04c      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f000 fab2 	bl	8003b92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363c:	609a      	str	r2, [r3, #8]
      break;
 800363e:	e039      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	461a      	mov	r2, r3
 800364e:	f000 fa29 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2150      	movs	r1, #80	; 0x50
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fa80 	bl	8003b5e <TIM_ITRx_SetConfig>
      break;
 800365e:	e029      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	461a      	mov	r2, r3
 800366e:	f000 fa47 	bl	8003b00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2160      	movs	r1, #96	; 0x60
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fa70 	bl	8003b5e <TIM_ITRx_SetConfig>
      break;
 800367e:	e019      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	461a      	mov	r2, r3
 800368e:	f000 fa09 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2140      	movs	r1, #64	; 0x40
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fa60 	bl	8003b5e <TIM_ITRx_SetConfig>
      break;
 800369e:	e009      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 fa57 	bl	8003b5e <TIM_ITRx_SetConfig>
        break;
 80036b0:	e000      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80036b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a29      	ldr	r2, [pc, #164]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00b      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d007      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a26      	ldr	r2, [pc, #152]	; (800378c <TIM_Base_SetConfig+0xbc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a25      	ldr	r2, [pc, #148]	; (8003790 <TIM_Base_SetConfig+0xc0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d007      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <TIM_Base_SetConfig+0xbc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <TIM_Base_SetConfig+0xc0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d108      	bne.n	8003744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d103      	bne.n	8003778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	615a      	str	r2, [r3, #20]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800

08003794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0302 	bic.w	r3, r3, #2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <TIM_OC1_SetConfig+0xc8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10c      	bne.n	800380a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0308 	bic.w	r3, r3, #8
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a13      	ldr	r2, [pc, #76]	; (800385c <TIM_OC1_SetConfig+0xc8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d111      	bne.n	8003836 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40012c00 	.word	0x40012c00

08003860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0210 	bic.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0320 	bic.w	r3, r3, #32
 80038aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <TIM_OC2_SetConfig+0xd0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10d      	bne.n	80038dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <TIM_OC2_SetConfig+0xd0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d113      	bne.n	800390c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	40012c00 	.word	0x40012c00

08003934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0303 	bic.w	r3, r3, #3
 800396a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800397c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <TIM_OC3_SetConfig+0xd0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10d      	bne.n	80039ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <TIM_OC3_SetConfig+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d113      	bne.n	80039de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	621a      	str	r2, [r3, #32]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40012c00 	.word	0x40012c00

08003a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	031b      	lsls	r3, r3, #12
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <TIM_OC4_SetConfig+0x98>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d109      	bne.n	8003a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00

08003aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0201 	bic.w	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 030a 	bic.w	r3, r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 0210 	bic.w	r2, r3, #16
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	031b      	lsls	r3, r3, #12
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f043 0307 	orr.w	r3, r3, #7
 8003b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b087      	sub	sp, #28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	021a      	lsls	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e046      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800

08003c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e03f      	b.n	8003d1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fd f828 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2224      	movs	r2, #36	; 0x24
 8003cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fb8d 	bl	80043f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08a      	sub	sp, #40	; 0x28
 8003d2a:	af02      	add	r7, sp, #8
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d17c      	bne.n	8003e40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_Transmit+0x2c>
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e075      	b.n	8003e42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Transmit+0x3e>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e06e      	b.n	8003e42 <HAL_UART_Transmit+0x11c>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2221      	movs	r2, #33	; 0x21
 8003d76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fc91 	bl	80016a0 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d108      	bne.n	8003da8 <HAL_UART_Transmit+0x82>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e003      	b.n	8003db0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003db8:	e02a      	b.n	8003e10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f9b0 	bl	800412a <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e036      	b.n	8003e42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	3302      	adds	r3, #2
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	e007      	b.n	8003e02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1cf      	bne.n	8003dba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f980 	bl	800412a <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e006      	b.n	8003e42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d140      	bne.n	8003ee6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_UART_Receive_IT+0x26>
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e039      	b.n	8003ee8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Receive_IT+0x38>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e032      	b.n	8003ee8 <HAL_UART_Receive_IT+0x9e>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2222      	movs	r2, #34	; 0x22
 8003ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0220 	orr.w	r2, r2, #32
 8003ee0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
  }
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr
	...

08003ef4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10d      	bne.n	8003f46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_UART_IRQHandler+0x52>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9d5 	bl	80042ee <UART_Receive_IT>
      return;
 8003f44:	e0d1      	b.n	80040ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80b0 	beq.w	80040ae <HAL_UART_IRQHandler+0x1ba>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_UART_IRQHandler+0x70>
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80a5 	beq.w	80040ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_UART_IRQHandler+0x90>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	f043 0201 	orr.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_UART_IRQHandler+0xb0>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9c:	f043 0202 	orr.w	r2, r3, #2
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_UART_IRQHandler+0xd0>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	f043 0204 	orr.w	r2, r3, #4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00f      	beq.n	8003fee <HAL_UART_IRQHandler+0xfa>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_UART_IRQHandler+0xee>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	f043 0208 	orr.w	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d078      	beq.n	80040e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_UART_IRQHandler+0x11c>
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f96f 	bl	80042ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf14      	ite	ne
 800401e:	2301      	movne	r3, #1
 8004020:	2300      	moveq	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_UART_IRQHandler+0x144>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d031      	beq.n	800409c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8c0 	bl	80041be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d023      	beq.n	8004094 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <HAL_UART_IRQHandler+0x1fc>)
 800406a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe f907 	bl	8002284 <HAL_DMA_Abort_IT>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d016      	beq.n	80040aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004086:	4610      	mov	r0, r2
 8004088:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408a:	e00e      	b.n	80040aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f843 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004092:	e00a      	b.n	80040aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f83f 	bl	8004118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409a:	e006      	b.n	80040aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f83b 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80040a8:	e01e      	b.n	80040e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040aa:	bf00      	nop
    return;
 80040ac:	e01c      	b.n	80040e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_UART_IRQHandler+0x1d6>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8ac 	bl	8004220 <UART_Transmit_IT>
    return;
 80040c8:	e00f      	b.n	80040ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_UART_IRQHandler+0x1f6>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f8ed 	bl	80042be <UART_EndTransmit_IT>
    return;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80040e8:	bf00      	nop
  }
}
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	080041f9 	.word	0x080041f9

080040f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413a:	e02c      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004142:	d028      	beq.n	8004196 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x30>
 800414a:	f7fd faa9 	bl	80016a0 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	429a      	cmp	r2, r3
 8004158:	d21d      	bcs.n	8004196 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004168:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e00f      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d0c3      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff ff80 	bl	8004118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b21      	cmp	r3, #33	; 0x21
 8004232:	d13e      	bne.n	80042b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d114      	bne.n	8004268 <UART_Transmit_IT+0x48>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d110      	bne.n	8004268 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800425a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]
 8004266:	e008      	b.n	800427a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6211      	str	r1, [r2, #32]
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4619      	mov	r1, r3
 8004288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800429c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ff08 	bl	80040f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b22      	cmp	r3, #34	; 0x22
 8004300:	d170      	bne.n	80043e4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430a:	d117      	bne.n	800433c <UART_Receive_IT+0x4e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d113      	bne.n	800433c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	b29a      	uxth	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	1c9a      	adds	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	629a      	str	r2, [r3, #40]	; 0x28
 800433a:	e026      	b.n	800438a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434e:	d007      	beq.n	8004360 <UART_Receive_IT+0x72>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <UART_Receive_IT+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e008      	b.n	8004380 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	4619      	mov	r1, r3
 8004398:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800439a:	2b00      	cmp	r3, #0
 800439c:	d120      	bne.n	80043e0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0220 	bic.w	r2, r2, #32
 80043ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fe95 	bl	8004106 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e002      	b.n	80043e6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800442a:	f023 030c 	bic.w	r3, r3, #12
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	430b      	orrs	r3, r1
 8004436:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <UART_SetConfig+0x114>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d103      	bne.n	8004460 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004458:	f7fe fe34 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	e002      	b.n	8004466 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7fe fe1c 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004464:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009a      	lsls	r2, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	4a22      	ldr	r2, [pc, #136]	; (8004508 <UART_SetConfig+0x118>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	0119      	lsls	r1, r3, #4
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	fbb2 f2f3 	udiv	r2, r2, r3
 800449c:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <UART_SetConfig+0x118>)
 800449e:	fba3 0302 	umull	r0, r3, r3, r2
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2064      	movs	r0, #100	; 0x64
 80044a6:	fb00 f303 	mul.w	r3, r0, r3
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	3332      	adds	r3, #50	; 0x32
 80044b0:	4a15      	ldr	r2, [pc, #84]	; (8004508 <UART_SetConfig+0x118>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044bc:	4419      	add	r1, r3
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009a      	lsls	r2, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <UART_SetConfig+0x118>)
 80044d6:	fba3 0302 	umull	r0, r3, r3, r2
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	2064      	movs	r0, #100	; 0x64
 80044de:	fb00 f303 	mul.w	r3, r0, r3
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	3332      	adds	r3, #50	; 0x32
 80044e8:	4a07      	ldr	r2, [pc, #28]	; (8004508 <UART_SetConfig+0x118>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	440a      	add	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40013800 	.word	0x40013800
 8004508:	51eb851f 	.word	0x51eb851f

0800450c <__errno>:
 800450c:	4b01      	ldr	r3, [pc, #4]	; (8004514 <__errno+0x8>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000010 	.word	0x20000010

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	2500      	movs	r5, #0
 800451c:	4e0c      	ldr	r6, [pc, #48]	; (8004550 <__libc_init_array+0x38>)
 800451e:	4c0d      	ldr	r4, [pc, #52]	; (8004554 <__libc_init_array+0x3c>)
 8004520:	1ba4      	subs	r4, r4, r6
 8004522:	10a4      	asrs	r4, r4, #2
 8004524:	42a5      	cmp	r5, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	f000 fc34 	bl	8004d94 <_init>
 800452c:	2500      	movs	r5, #0
 800452e:	4e0a      	ldr	r6, [pc, #40]	; (8004558 <__libc_init_array+0x40>)
 8004530:	4c0a      	ldr	r4, [pc, #40]	; (800455c <__libc_init_array+0x44>)
 8004532:	1ba4      	subs	r4, r4, r6
 8004534:	10a4      	asrs	r4, r4, #2
 8004536:	42a5      	cmp	r5, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004540:	4798      	blx	r3
 8004542:	3501      	adds	r5, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800454a:	4798      	blx	r3
 800454c:	3501      	adds	r5, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08004e58 	.word	0x08004e58
 8004554:	08004e58 	.word	0x08004e58
 8004558:	08004e58 	.word	0x08004e58
 800455c:	08004e5c 	.word	0x08004e5c

08004560 <memset>:
 8004560:	4603      	mov	r3, r0
 8004562:	4402      	add	r2, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <siprintf>:
 8004570:	b40e      	push	{r1, r2, r3}
 8004572:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004576:	b500      	push	{lr}
 8004578:	b09c      	sub	sp, #112	; 0x70
 800457a:	ab1d      	add	r3, sp, #116	; 0x74
 800457c:	9002      	str	r0, [sp, #8]
 800457e:	9006      	str	r0, [sp, #24]
 8004580:	9107      	str	r1, [sp, #28]
 8004582:	9104      	str	r1, [sp, #16]
 8004584:	4808      	ldr	r0, [pc, #32]	; (80045a8 <siprintf+0x38>)
 8004586:	4909      	ldr	r1, [pc, #36]	; (80045ac <siprintf+0x3c>)
 8004588:	f853 2b04 	ldr.w	r2, [r3], #4
 800458c:	9105      	str	r1, [sp, #20]
 800458e:	6800      	ldr	r0, [r0, #0]
 8004590:	a902      	add	r1, sp, #8
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	f000 f866 	bl	8004664 <_svfiprintf_r>
 8004598:	2200      	movs	r2, #0
 800459a:	9b02      	ldr	r3, [sp, #8]
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	b01c      	add	sp, #112	; 0x70
 80045a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a4:	b003      	add	sp, #12
 80045a6:	4770      	bx	lr
 80045a8:	20000010 	.word	0x20000010
 80045ac:	ffff0208 	.word	0xffff0208

080045b0 <__ssputs_r>:
 80045b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b4:	688e      	ldr	r6, [r1, #8]
 80045b6:	4682      	mov	sl, r0
 80045b8:	429e      	cmp	r6, r3
 80045ba:	460c      	mov	r4, r1
 80045bc:	4690      	mov	r8, r2
 80045be:	4699      	mov	r9, r3
 80045c0:	d837      	bhi.n	8004632 <__ssputs_r+0x82>
 80045c2:	898a      	ldrh	r2, [r1, #12]
 80045c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045c8:	d031      	beq.n	800462e <__ssputs_r+0x7e>
 80045ca:	2302      	movs	r3, #2
 80045cc:	6825      	ldr	r5, [r4, #0]
 80045ce:	6909      	ldr	r1, [r1, #16]
 80045d0:	1a6f      	subs	r7, r5, r1
 80045d2:	6965      	ldr	r5, [r4, #20]
 80045d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80045dc:	f109 0301 	add.w	r3, r9, #1
 80045e0:	443b      	add	r3, r7
 80045e2:	429d      	cmp	r5, r3
 80045e4:	bf38      	it	cc
 80045e6:	461d      	movcc	r5, r3
 80045e8:	0553      	lsls	r3, r2, #21
 80045ea:	d530      	bpl.n	800464e <__ssputs_r+0x9e>
 80045ec:	4629      	mov	r1, r5
 80045ee:	f000 fb37 	bl	8004c60 <_malloc_r>
 80045f2:	4606      	mov	r6, r0
 80045f4:	b950      	cbnz	r0, 800460c <__ssputs_r+0x5c>
 80045f6:	230c      	movs	r3, #12
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045fc:	f8ca 3000 	str.w	r3, [sl]
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004606:	81a3      	strh	r3, [r4, #12]
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	463a      	mov	r2, r7
 800460e:	6921      	ldr	r1, [r4, #16]
 8004610:	f000 fab6 	bl	8004b80 <memcpy>
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800461a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461e:	81a3      	strh	r3, [r4, #12]
 8004620:	6126      	str	r6, [r4, #16]
 8004622:	443e      	add	r6, r7
 8004624:	6026      	str	r6, [r4, #0]
 8004626:	464e      	mov	r6, r9
 8004628:	6165      	str	r5, [r4, #20]
 800462a:	1bed      	subs	r5, r5, r7
 800462c:	60a5      	str	r5, [r4, #8]
 800462e:	454e      	cmp	r6, r9
 8004630:	d900      	bls.n	8004634 <__ssputs_r+0x84>
 8004632:	464e      	mov	r6, r9
 8004634:	4632      	mov	r2, r6
 8004636:	4641      	mov	r1, r8
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	f000 faac 	bl	8004b96 <memmove>
 800463e:	68a3      	ldr	r3, [r4, #8]
 8004640:	2000      	movs	r0, #0
 8004642:	1b9b      	subs	r3, r3, r6
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	441e      	add	r6, r3
 800464a:	6026      	str	r6, [r4, #0]
 800464c:	e7dc      	b.n	8004608 <__ssputs_r+0x58>
 800464e:	462a      	mov	r2, r5
 8004650:	f000 fb60 	bl	8004d14 <_realloc_r>
 8004654:	4606      	mov	r6, r0
 8004656:	2800      	cmp	r0, #0
 8004658:	d1e2      	bne.n	8004620 <__ssputs_r+0x70>
 800465a:	6921      	ldr	r1, [r4, #16]
 800465c:	4650      	mov	r0, sl
 800465e:	f000 fab3 	bl	8004bc8 <_free_r>
 8004662:	e7c8      	b.n	80045f6 <__ssputs_r+0x46>

08004664 <_svfiprintf_r>:
 8004664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	461d      	mov	r5, r3
 800466a:	898b      	ldrh	r3, [r1, #12]
 800466c:	b09d      	sub	sp, #116	; 0x74
 800466e:	061f      	lsls	r7, r3, #24
 8004670:	4680      	mov	r8, r0
 8004672:	460c      	mov	r4, r1
 8004674:	4616      	mov	r6, r2
 8004676:	d50f      	bpl.n	8004698 <_svfiprintf_r+0x34>
 8004678:	690b      	ldr	r3, [r1, #16]
 800467a:	b96b      	cbnz	r3, 8004698 <_svfiprintf_r+0x34>
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	f000 faef 	bl	8004c60 <_malloc_r>
 8004682:	6020      	str	r0, [r4, #0]
 8004684:	6120      	str	r0, [r4, #16]
 8004686:	b928      	cbnz	r0, 8004694 <_svfiprintf_r+0x30>
 8004688:	230c      	movs	r3, #12
 800468a:	f8c8 3000 	str.w	r3, [r8]
 800468e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004692:	e0c8      	b.n	8004826 <_svfiprintf_r+0x1c2>
 8004694:	2340      	movs	r3, #64	; 0x40
 8004696:	6163      	str	r3, [r4, #20]
 8004698:	2300      	movs	r3, #0
 800469a:	9309      	str	r3, [sp, #36]	; 0x24
 800469c:	2320      	movs	r3, #32
 800469e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046a2:	2330      	movs	r3, #48	; 0x30
 80046a4:	f04f 0b01 	mov.w	fp, #1
 80046a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046ac:	9503      	str	r5, [sp, #12]
 80046ae:	4637      	mov	r7, r6
 80046b0:	463d      	mov	r5, r7
 80046b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046b6:	b10b      	cbz	r3, 80046bc <_svfiprintf_r+0x58>
 80046b8:	2b25      	cmp	r3, #37	; 0x25
 80046ba:	d13e      	bne.n	800473a <_svfiprintf_r+0xd6>
 80046bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80046c0:	d00b      	beq.n	80046da <_svfiprintf_r+0x76>
 80046c2:	4653      	mov	r3, sl
 80046c4:	4632      	mov	r2, r6
 80046c6:	4621      	mov	r1, r4
 80046c8:	4640      	mov	r0, r8
 80046ca:	f7ff ff71 	bl	80045b0 <__ssputs_r>
 80046ce:	3001      	adds	r0, #1
 80046d0:	f000 80a4 	beq.w	800481c <_svfiprintf_r+0x1b8>
 80046d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d6:	4453      	add	r3, sl
 80046d8:	9309      	str	r3, [sp, #36]	; 0x24
 80046da:	783b      	ldrb	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 809d 	beq.w	800481c <_svfiprintf_r+0x1b8>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ec:	9304      	str	r3, [sp, #16]
 80046ee:	9307      	str	r3, [sp, #28]
 80046f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046f4:	931a      	str	r3, [sp, #104]	; 0x68
 80046f6:	462f      	mov	r7, r5
 80046f8:	2205      	movs	r2, #5
 80046fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80046fe:	4850      	ldr	r0, [pc, #320]	; (8004840 <_svfiprintf_r+0x1dc>)
 8004700:	f000 fa30 	bl	8004b64 <memchr>
 8004704:	9b04      	ldr	r3, [sp, #16]
 8004706:	b9d0      	cbnz	r0, 800473e <_svfiprintf_r+0xda>
 8004708:	06d9      	lsls	r1, r3, #27
 800470a:	bf44      	itt	mi
 800470c:	2220      	movmi	r2, #32
 800470e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004712:	071a      	lsls	r2, r3, #28
 8004714:	bf44      	itt	mi
 8004716:	222b      	movmi	r2, #43	; 0x2b
 8004718:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800471c:	782a      	ldrb	r2, [r5, #0]
 800471e:	2a2a      	cmp	r2, #42	; 0x2a
 8004720:	d015      	beq.n	800474e <_svfiprintf_r+0xea>
 8004722:	462f      	mov	r7, r5
 8004724:	2000      	movs	r0, #0
 8004726:	250a      	movs	r5, #10
 8004728:	9a07      	ldr	r2, [sp, #28]
 800472a:	4639      	mov	r1, r7
 800472c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004730:	3b30      	subs	r3, #48	; 0x30
 8004732:	2b09      	cmp	r3, #9
 8004734:	d94d      	bls.n	80047d2 <_svfiprintf_r+0x16e>
 8004736:	b1b8      	cbz	r0, 8004768 <_svfiprintf_r+0x104>
 8004738:	e00f      	b.n	800475a <_svfiprintf_r+0xf6>
 800473a:	462f      	mov	r7, r5
 800473c:	e7b8      	b.n	80046b0 <_svfiprintf_r+0x4c>
 800473e:	4a40      	ldr	r2, [pc, #256]	; (8004840 <_svfiprintf_r+0x1dc>)
 8004740:	463d      	mov	r5, r7
 8004742:	1a80      	subs	r0, r0, r2
 8004744:	fa0b f000 	lsl.w	r0, fp, r0
 8004748:	4318      	orrs	r0, r3
 800474a:	9004      	str	r0, [sp, #16]
 800474c:	e7d3      	b.n	80046f6 <_svfiprintf_r+0x92>
 800474e:	9a03      	ldr	r2, [sp, #12]
 8004750:	1d11      	adds	r1, r2, #4
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	9103      	str	r1, [sp, #12]
 8004756:	2a00      	cmp	r2, #0
 8004758:	db01      	blt.n	800475e <_svfiprintf_r+0xfa>
 800475a:	9207      	str	r2, [sp, #28]
 800475c:	e004      	b.n	8004768 <_svfiprintf_r+0x104>
 800475e:	4252      	negs	r2, r2
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	9207      	str	r2, [sp, #28]
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	783b      	ldrb	r3, [r7, #0]
 800476a:	2b2e      	cmp	r3, #46	; 0x2e
 800476c:	d10c      	bne.n	8004788 <_svfiprintf_r+0x124>
 800476e:	787b      	ldrb	r3, [r7, #1]
 8004770:	2b2a      	cmp	r3, #42	; 0x2a
 8004772:	d133      	bne.n	80047dc <_svfiprintf_r+0x178>
 8004774:	9b03      	ldr	r3, [sp, #12]
 8004776:	3702      	adds	r7, #2
 8004778:	1d1a      	adds	r2, r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	9203      	str	r2, [sp, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfb8      	it	lt
 8004782:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004786:	9305      	str	r3, [sp, #20]
 8004788:	4d2e      	ldr	r5, [pc, #184]	; (8004844 <_svfiprintf_r+0x1e0>)
 800478a:	2203      	movs	r2, #3
 800478c:	7839      	ldrb	r1, [r7, #0]
 800478e:	4628      	mov	r0, r5
 8004790:	f000 f9e8 	bl	8004b64 <memchr>
 8004794:	b138      	cbz	r0, 80047a6 <_svfiprintf_r+0x142>
 8004796:	2340      	movs	r3, #64	; 0x40
 8004798:	1b40      	subs	r0, r0, r5
 800479a:	fa03 f000 	lsl.w	r0, r3, r0
 800479e:	9b04      	ldr	r3, [sp, #16]
 80047a0:	3701      	adds	r7, #1
 80047a2:	4303      	orrs	r3, r0
 80047a4:	9304      	str	r3, [sp, #16]
 80047a6:	7839      	ldrb	r1, [r7, #0]
 80047a8:	2206      	movs	r2, #6
 80047aa:	4827      	ldr	r0, [pc, #156]	; (8004848 <_svfiprintf_r+0x1e4>)
 80047ac:	1c7e      	adds	r6, r7, #1
 80047ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047b2:	f000 f9d7 	bl	8004b64 <memchr>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d038      	beq.n	800482c <_svfiprintf_r+0x1c8>
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <_svfiprintf_r+0x1e8>)
 80047bc:	bb13      	cbnz	r3, 8004804 <_svfiprintf_r+0x1a0>
 80047be:	9b03      	ldr	r3, [sp, #12]
 80047c0:	3307      	adds	r3, #7
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	3308      	adds	r3, #8
 80047c8:	9303      	str	r3, [sp, #12]
 80047ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047cc:	444b      	add	r3, r9
 80047ce:	9309      	str	r3, [sp, #36]	; 0x24
 80047d0:	e76d      	b.n	80046ae <_svfiprintf_r+0x4a>
 80047d2:	fb05 3202 	mla	r2, r5, r2, r3
 80047d6:	2001      	movs	r0, #1
 80047d8:	460f      	mov	r7, r1
 80047da:	e7a6      	b.n	800472a <_svfiprintf_r+0xc6>
 80047dc:	2300      	movs	r3, #0
 80047de:	250a      	movs	r5, #10
 80047e0:	4619      	mov	r1, r3
 80047e2:	3701      	adds	r7, #1
 80047e4:	9305      	str	r3, [sp, #20]
 80047e6:	4638      	mov	r0, r7
 80047e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ec:	3a30      	subs	r2, #48	; 0x30
 80047ee:	2a09      	cmp	r2, #9
 80047f0:	d903      	bls.n	80047fa <_svfiprintf_r+0x196>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0c8      	beq.n	8004788 <_svfiprintf_r+0x124>
 80047f6:	9105      	str	r1, [sp, #20]
 80047f8:	e7c6      	b.n	8004788 <_svfiprintf_r+0x124>
 80047fa:	fb05 2101 	mla	r1, r5, r1, r2
 80047fe:	2301      	movs	r3, #1
 8004800:	4607      	mov	r7, r0
 8004802:	e7f0      	b.n	80047e6 <_svfiprintf_r+0x182>
 8004804:	ab03      	add	r3, sp, #12
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	4622      	mov	r2, r4
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <_svfiprintf_r+0x1ec>)
 800480c:	a904      	add	r1, sp, #16
 800480e:	4640      	mov	r0, r8
 8004810:	f3af 8000 	nop.w
 8004814:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004818:	4681      	mov	r9, r0
 800481a:	d1d6      	bne.n	80047ca <_svfiprintf_r+0x166>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	065b      	lsls	r3, r3, #25
 8004820:	f53f af35 	bmi.w	800468e <_svfiprintf_r+0x2a>
 8004824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004826:	b01d      	add	sp, #116	; 0x74
 8004828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482c:	ab03      	add	r3, sp, #12
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4622      	mov	r2, r4
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <_svfiprintf_r+0x1ec>)
 8004834:	a904      	add	r1, sp, #16
 8004836:	4640      	mov	r0, r8
 8004838:	f000 f882 	bl	8004940 <_printf_i>
 800483c:	e7ea      	b.n	8004814 <_svfiprintf_r+0x1b0>
 800483e:	bf00      	nop
 8004840:	08004e24 	.word	0x08004e24
 8004844:	08004e2a 	.word	0x08004e2a
 8004848:	08004e2e 	.word	0x08004e2e
 800484c:	00000000 	.word	0x00000000
 8004850:	080045b1 	.word	0x080045b1

08004854 <_printf_common>:
 8004854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	4691      	mov	r9, r2
 800485a:	461f      	mov	r7, r3
 800485c:	688a      	ldr	r2, [r1, #8]
 800485e:	690b      	ldr	r3, [r1, #16]
 8004860:	4606      	mov	r6, r0
 8004862:	4293      	cmp	r3, r2
 8004864:	bfb8      	it	lt
 8004866:	4613      	movlt	r3, r2
 8004868:	f8c9 3000 	str.w	r3, [r9]
 800486c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004870:	460c      	mov	r4, r1
 8004872:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004876:	b112      	cbz	r2, 800487e <_printf_common+0x2a>
 8004878:	3301      	adds	r3, #1
 800487a:	f8c9 3000 	str.w	r3, [r9]
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	0699      	lsls	r1, r3, #26
 8004882:	bf42      	ittt	mi
 8004884:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004888:	3302      	addmi	r3, #2
 800488a:	f8c9 3000 	strmi.w	r3, [r9]
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	f015 0506 	ands.w	r5, r5, #6
 8004894:	d107      	bne.n	80048a6 <_printf_common+0x52>
 8004896:	f104 0a19 	add.w	sl, r4, #25
 800489a:	68e3      	ldr	r3, [r4, #12]
 800489c:	f8d9 2000 	ldr.w	r2, [r9]
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	42ab      	cmp	r3, r5
 80048a4:	dc29      	bgt.n	80048fa <_printf_common+0xa6>
 80048a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	3300      	adds	r3, #0
 80048ae:	bf18      	it	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	0692      	lsls	r2, r2, #26
 80048b4:	d42e      	bmi.n	8004914 <_printf_common+0xc0>
 80048b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ba:	4639      	mov	r1, r7
 80048bc:	4630      	mov	r0, r6
 80048be:	47c0      	blx	r8
 80048c0:	3001      	adds	r0, #1
 80048c2:	d021      	beq.n	8004908 <_printf_common+0xb4>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	68e5      	ldr	r5, [r4, #12]
 80048c8:	f003 0306 	and.w	r3, r3, #6
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	bf18      	it	ne
 80048d0:	2500      	movne	r5, #0
 80048d2:	f8d9 2000 	ldr.w	r2, [r9]
 80048d6:	f04f 0900 	mov.w	r9, #0
 80048da:	bf08      	it	eq
 80048dc:	1aad      	subeq	r5, r5, r2
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	6922      	ldr	r2, [r4, #16]
 80048e2:	bf08      	it	eq
 80048e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048e8:	4293      	cmp	r3, r2
 80048ea:	bfc4      	itt	gt
 80048ec:	1a9b      	subgt	r3, r3, r2
 80048ee:	18ed      	addgt	r5, r5, r3
 80048f0:	341a      	adds	r4, #26
 80048f2:	454d      	cmp	r5, r9
 80048f4:	d11a      	bne.n	800492c <_printf_common+0xd8>
 80048f6:	2000      	movs	r0, #0
 80048f8:	e008      	b.n	800490c <_printf_common+0xb8>
 80048fa:	2301      	movs	r3, #1
 80048fc:	4652      	mov	r2, sl
 80048fe:	4639      	mov	r1, r7
 8004900:	4630      	mov	r0, r6
 8004902:	47c0      	blx	r8
 8004904:	3001      	adds	r0, #1
 8004906:	d103      	bne.n	8004910 <_printf_common+0xbc>
 8004908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004910:	3501      	adds	r5, #1
 8004912:	e7c2      	b.n	800489a <_printf_common+0x46>
 8004914:	2030      	movs	r0, #48	; 0x30
 8004916:	18e1      	adds	r1, r4, r3
 8004918:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004922:	4422      	add	r2, r4
 8004924:	3302      	adds	r3, #2
 8004926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800492a:	e7c4      	b.n	80048b6 <_printf_common+0x62>
 800492c:	2301      	movs	r3, #1
 800492e:	4622      	mov	r2, r4
 8004930:	4639      	mov	r1, r7
 8004932:	4630      	mov	r0, r6
 8004934:	47c0      	blx	r8
 8004936:	3001      	adds	r0, #1
 8004938:	d0e6      	beq.n	8004908 <_printf_common+0xb4>
 800493a:	f109 0901 	add.w	r9, r9, #1
 800493e:	e7d8      	b.n	80048f2 <_printf_common+0x9e>

08004940 <_printf_i>:
 8004940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004944:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004948:	460c      	mov	r4, r1
 800494a:	7e09      	ldrb	r1, [r1, #24]
 800494c:	b085      	sub	sp, #20
 800494e:	296e      	cmp	r1, #110	; 0x6e
 8004950:	4617      	mov	r7, r2
 8004952:	4606      	mov	r6, r0
 8004954:	4698      	mov	r8, r3
 8004956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004958:	f000 80b3 	beq.w	8004ac2 <_printf_i+0x182>
 800495c:	d822      	bhi.n	80049a4 <_printf_i+0x64>
 800495e:	2963      	cmp	r1, #99	; 0x63
 8004960:	d036      	beq.n	80049d0 <_printf_i+0x90>
 8004962:	d80a      	bhi.n	800497a <_printf_i+0x3a>
 8004964:	2900      	cmp	r1, #0
 8004966:	f000 80b9 	beq.w	8004adc <_printf_i+0x19c>
 800496a:	2958      	cmp	r1, #88	; 0x58
 800496c:	f000 8083 	beq.w	8004a76 <_printf_i+0x136>
 8004970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004974:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004978:	e032      	b.n	80049e0 <_printf_i+0xa0>
 800497a:	2964      	cmp	r1, #100	; 0x64
 800497c:	d001      	beq.n	8004982 <_printf_i+0x42>
 800497e:	2969      	cmp	r1, #105	; 0x69
 8004980:	d1f6      	bne.n	8004970 <_printf_i+0x30>
 8004982:	6820      	ldr	r0, [r4, #0]
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	0605      	lsls	r5, r0, #24
 8004988:	f103 0104 	add.w	r1, r3, #4
 800498c:	d52a      	bpl.n	80049e4 <_printf_i+0xa4>
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	da03      	bge.n	800499e <_printf_i+0x5e>
 8004996:	222d      	movs	r2, #45	; 0x2d
 8004998:	425b      	negs	r3, r3
 800499a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800499e:	486f      	ldr	r0, [pc, #444]	; (8004b5c <_printf_i+0x21c>)
 80049a0:	220a      	movs	r2, #10
 80049a2:	e039      	b.n	8004a18 <_printf_i+0xd8>
 80049a4:	2973      	cmp	r1, #115	; 0x73
 80049a6:	f000 809d 	beq.w	8004ae4 <_printf_i+0x1a4>
 80049aa:	d808      	bhi.n	80049be <_printf_i+0x7e>
 80049ac:	296f      	cmp	r1, #111	; 0x6f
 80049ae:	d020      	beq.n	80049f2 <_printf_i+0xb2>
 80049b0:	2970      	cmp	r1, #112	; 0x70
 80049b2:	d1dd      	bne.n	8004970 <_printf_i+0x30>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f043 0320 	orr.w	r3, r3, #32
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	e003      	b.n	80049c6 <_printf_i+0x86>
 80049be:	2975      	cmp	r1, #117	; 0x75
 80049c0:	d017      	beq.n	80049f2 <_printf_i+0xb2>
 80049c2:	2978      	cmp	r1, #120	; 0x78
 80049c4:	d1d4      	bne.n	8004970 <_printf_i+0x30>
 80049c6:	2378      	movs	r3, #120	; 0x78
 80049c8:	4865      	ldr	r0, [pc, #404]	; (8004b60 <_printf_i+0x220>)
 80049ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049ce:	e055      	b.n	8004a7c <_printf_i+0x13c>
 80049d0:	6813      	ldr	r3, [r2, #0]
 80049d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d6:	1d19      	adds	r1, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6011      	str	r1, [r2, #0]
 80049dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e0:	2301      	movs	r3, #1
 80049e2:	e08c      	b.n	8004afe <_printf_i+0x1be>
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049ea:	6011      	str	r1, [r2, #0]
 80049ec:	bf18      	it	ne
 80049ee:	b21b      	sxthne	r3, r3
 80049f0:	e7cf      	b.n	8004992 <_printf_i+0x52>
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	6825      	ldr	r5, [r4, #0]
 80049f6:	1d18      	adds	r0, r3, #4
 80049f8:	6010      	str	r0, [r2, #0]
 80049fa:	0628      	lsls	r0, r5, #24
 80049fc:	d501      	bpl.n	8004a02 <_printf_i+0xc2>
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	e002      	b.n	8004a08 <_printf_i+0xc8>
 8004a02:	0668      	lsls	r0, r5, #25
 8004a04:	d5fb      	bpl.n	80049fe <_printf_i+0xbe>
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	296f      	cmp	r1, #111	; 0x6f
 8004a0a:	bf14      	ite	ne
 8004a0c:	220a      	movne	r2, #10
 8004a0e:	2208      	moveq	r2, #8
 8004a10:	4852      	ldr	r0, [pc, #328]	; (8004b5c <_printf_i+0x21c>)
 8004a12:	2100      	movs	r1, #0
 8004a14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a18:	6865      	ldr	r5, [r4, #4]
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	60a5      	str	r5, [r4, #8]
 8004a1e:	f2c0 8095 	blt.w	8004b4c <_printf_i+0x20c>
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	f021 0104 	bic.w	r1, r1, #4
 8004a28:	6021      	str	r1, [r4, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d13d      	bne.n	8004aaa <_printf_i+0x16a>
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	f040 808e 	bne.w	8004b50 <_printf_i+0x210>
 8004a34:	4665      	mov	r5, ip
 8004a36:	2a08      	cmp	r2, #8
 8004a38:	d10b      	bne.n	8004a52 <_printf_i+0x112>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	07db      	lsls	r3, r3, #31
 8004a3e:	d508      	bpl.n	8004a52 <_printf_i+0x112>
 8004a40:	6923      	ldr	r3, [r4, #16]
 8004a42:	6862      	ldr	r2, [r4, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	bfde      	ittt	le
 8004a48:	2330      	movle	r3, #48	; 0x30
 8004a4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a52:	ebac 0305 	sub.w	r3, ip, r5
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	f8cd 8000 	str.w	r8, [sp]
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	aa03      	add	r2, sp, #12
 8004a60:	4621      	mov	r1, r4
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7ff fef6 	bl	8004854 <_printf_common>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d14d      	bne.n	8004b08 <_printf_i+0x1c8>
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a70:	b005      	add	sp, #20
 8004a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a76:	4839      	ldr	r0, [pc, #228]	; (8004b5c <_printf_i+0x21c>)
 8004a78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	6821      	ldr	r1, [r4, #0]
 8004a80:	1d1d      	adds	r5, r3, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6015      	str	r5, [r2, #0]
 8004a86:	060a      	lsls	r2, r1, #24
 8004a88:	d50b      	bpl.n	8004aa2 <_printf_i+0x162>
 8004a8a:	07ca      	lsls	r2, r1, #31
 8004a8c:	bf44      	itt	mi
 8004a8e:	f041 0120 	orrmi.w	r1, r1, #32
 8004a92:	6021      	strmi	r1, [r4, #0]
 8004a94:	b91b      	cbnz	r3, 8004a9e <_printf_i+0x15e>
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	f022 0220 	bic.w	r2, r2, #32
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	e7b7      	b.n	8004a12 <_printf_i+0xd2>
 8004aa2:	064d      	lsls	r5, r1, #25
 8004aa4:	bf48      	it	mi
 8004aa6:	b29b      	uxthmi	r3, r3
 8004aa8:	e7ef      	b.n	8004a8a <_printf_i+0x14a>
 8004aaa:	4665      	mov	r5, ip
 8004aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ab0:	fb02 3311 	mls	r3, r2, r1, r3
 8004ab4:	5cc3      	ldrb	r3, [r0, r3]
 8004ab6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004aba:	460b      	mov	r3, r1
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d1f5      	bne.n	8004aac <_printf_i+0x16c>
 8004ac0:	e7b9      	b.n	8004a36 <_printf_i+0xf6>
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	6825      	ldr	r5, [r4, #0]
 8004ac6:	1d18      	adds	r0, r3, #4
 8004ac8:	6961      	ldr	r1, [r4, #20]
 8004aca:	6010      	str	r0, [r2, #0]
 8004acc:	0628      	lsls	r0, r5, #24
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	d501      	bpl.n	8004ad6 <_printf_i+0x196>
 8004ad2:	6019      	str	r1, [r3, #0]
 8004ad4:	e002      	b.n	8004adc <_printf_i+0x19c>
 8004ad6:	066a      	lsls	r2, r5, #25
 8004ad8:	d5fb      	bpl.n	8004ad2 <_printf_i+0x192>
 8004ada:	8019      	strh	r1, [r3, #0]
 8004adc:	2300      	movs	r3, #0
 8004ade:	4665      	mov	r5, ip
 8004ae0:	6123      	str	r3, [r4, #16]
 8004ae2:	e7b9      	b.n	8004a58 <_printf_i+0x118>
 8004ae4:	6813      	ldr	r3, [r2, #0]
 8004ae6:	1d19      	adds	r1, r3, #4
 8004ae8:	6011      	str	r1, [r2, #0]
 8004aea:	681d      	ldr	r5, [r3, #0]
 8004aec:	6862      	ldr	r2, [r4, #4]
 8004aee:	2100      	movs	r1, #0
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 f837 	bl	8004b64 <memchr>
 8004af6:	b108      	cbz	r0, 8004afc <_printf_i+0x1bc>
 8004af8:	1b40      	subs	r0, r0, r5
 8004afa:	6060      	str	r0, [r4, #4]
 8004afc:	6863      	ldr	r3, [r4, #4]
 8004afe:	6123      	str	r3, [r4, #16]
 8004b00:	2300      	movs	r3, #0
 8004b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b06:	e7a7      	b.n	8004a58 <_printf_i+0x118>
 8004b08:	6923      	ldr	r3, [r4, #16]
 8004b0a:	462a      	mov	r2, r5
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	4630      	mov	r0, r6
 8004b10:	47c0      	blx	r8
 8004b12:	3001      	adds	r0, #1
 8004b14:	d0aa      	beq.n	8004a6c <_printf_i+0x12c>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	079b      	lsls	r3, r3, #30
 8004b1a:	d413      	bmi.n	8004b44 <_printf_i+0x204>
 8004b1c:	68e0      	ldr	r0, [r4, #12]
 8004b1e:	9b03      	ldr	r3, [sp, #12]
 8004b20:	4298      	cmp	r0, r3
 8004b22:	bfb8      	it	lt
 8004b24:	4618      	movlt	r0, r3
 8004b26:	e7a3      	b.n	8004a70 <_printf_i+0x130>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	464a      	mov	r2, r9
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	4630      	mov	r0, r6
 8004b30:	47c0      	blx	r8
 8004b32:	3001      	adds	r0, #1
 8004b34:	d09a      	beq.n	8004a6c <_printf_i+0x12c>
 8004b36:	3501      	adds	r5, #1
 8004b38:	68e3      	ldr	r3, [r4, #12]
 8004b3a:	9a03      	ldr	r2, [sp, #12]
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	42ab      	cmp	r3, r5
 8004b40:	dcf2      	bgt.n	8004b28 <_printf_i+0x1e8>
 8004b42:	e7eb      	b.n	8004b1c <_printf_i+0x1dc>
 8004b44:	2500      	movs	r5, #0
 8004b46:	f104 0919 	add.w	r9, r4, #25
 8004b4a:	e7f5      	b.n	8004b38 <_printf_i+0x1f8>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ac      	bne.n	8004aaa <_printf_i+0x16a>
 8004b50:	7803      	ldrb	r3, [r0, #0]
 8004b52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b5a:	e76c      	b.n	8004a36 <_printf_i+0xf6>
 8004b5c:	08004e35 	.word	0x08004e35
 8004b60:	08004e46 	.word	0x08004e46

08004b64 <memchr>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	b2c9      	uxtb	r1, r1
 8004b68:	4402      	add	r2, r0
 8004b6a:	4290      	cmp	r0, r2
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	d101      	bne.n	8004b74 <memchr+0x10>
 8004b70:	2300      	movs	r3, #0
 8004b72:	e003      	b.n	8004b7c <memchr+0x18>
 8004b74:	781c      	ldrb	r4, [r3, #0]
 8004b76:	3001      	adds	r0, #1
 8004b78:	428c      	cmp	r4, r1
 8004b7a:	d1f6      	bne.n	8004b6a <memchr+0x6>
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd10      	pop	{r4, pc}

08004b80 <memcpy>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	1e43      	subs	r3, r0, #1
 8004b84:	440a      	add	r2, r1
 8004b86:	4291      	cmp	r1, r2
 8004b88:	d100      	bne.n	8004b8c <memcpy+0xc>
 8004b8a:	bd10      	pop	{r4, pc}
 8004b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b94:	e7f7      	b.n	8004b86 <memcpy+0x6>

08004b96 <memmove>:
 8004b96:	4288      	cmp	r0, r1
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	eb01 0302 	add.w	r3, r1, r2
 8004b9e:	d807      	bhi.n	8004bb0 <memmove+0x1a>
 8004ba0:	1e42      	subs	r2, r0, #1
 8004ba2:	4299      	cmp	r1, r3
 8004ba4:	d00a      	beq.n	8004bbc <memmove+0x26>
 8004ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004baa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bae:	e7f8      	b.n	8004ba2 <memmove+0xc>
 8004bb0:	4283      	cmp	r3, r0
 8004bb2:	d9f5      	bls.n	8004ba0 <memmove+0xa>
 8004bb4:	1881      	adds	r1, r0, r2
 8004bb6:	1ad2      	subs	r2, r2, r3
 8004bb8:	42d3      	cmn	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memmove+0x28>
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004bc6:	e7f7      	b.n	8004bb8 <memmove+0x22>

08004bc8 <_free_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4605      	mov	r5, r0
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	d043      	beq.n	8004c58 <_free_r+0x90>
 8004bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd4:	1f0c      	subs	r4, r1, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bfb8      	it	lt
 8004bda:	18e4      	addlt	r4, r4, r3
 8004bdc:	f000 f8d0 	bl	8004d80 <__malloc_lock>
 8004be0:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <_free_r+0x94>)
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	4610      	mov	r0, r2
 8004be6:	b933      	cbnz	r3, 8004bf6 <_free_r+0x2e>
 8004be8:	6063      	str	r3, [r4, #4]
 8004bea:	6014      	str	r4, [r2, #0]
 8004bec:	4628      	mov	r0, r5
 8004bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf2:	f000 b8c6 	b.w	8004d82 <__malloc_unlock>
 8004bf6:	42a3      	cmp	r3, r4
 8004bf8:	d90b      	bls.n	8004c12 <_free_r+0x4a>
 8004bfa:	6821      	ldr	r1, [r4, #0]
 8004bfc:	1862      	adds	r2, r4, r1
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	bf01      	itttt	eq
 8004c02:	681a      	ldreq	r2, [r3, #0]
 8004c04:	685b      	ldreq	r3, [r3, #4]
 8004c06:	1852      	addeq	r2, r2, r1
 8004c08:	6022      	streq	r2, [r4, #0]
 8004c0a:	6063      	str	r3, [r4, #4]
 8004c0c:	6004      	str	r4, [r0, #0]
 8004c0e:	e7ed      	b.n	8004bec <_free_r+0x24>
 8004c10:	4613      	mov	r3, r2
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	b10a      	cbz	r2, 8004c1a <_free_r+0x52>
 8004c16:	42a2      	cmp	r2, r4
 8004c18:	d9fa      	bls.n	8004c10 <_free_r+0x48>
 8004c1a:	6819      	ldr	r1, [r3, #0]
 8004c1c:	1858      	adds	r0, r3, r1
 8004c1e:	42a0      	cmp	r0, r4
 8004c20:	d10b      	bne.n	8004c3a <_free_r+0x72>
 8004c22:	6820      	ldr	r0, [r4, #0]
 8004c24:	4401      	add	r1, r0
 8004c26:	1858      	adds	r0, r3, r1
 8004c28:	4282      	cmp	r2, r0
 8004c2a:	6019      	str	r1, [r3, #0]
 8004c2c:	d1de      	bne.n	8004bec <_free_r+0x24>
 8004c2e:	6810      	ldr	r0, [r2, #0]
 8004c30:	6852      	ldr	r2, [r2, #4]
 8004c32:	4401      	add	r1, r0
 8004c34:	6019      	str	r1, [r3, #0]
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	e7d8      	b.n	8004bec <_free_r+0x24>
 8004c3a:	d902      	bls.n	8004c42 <_free_r+0x7a>
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	e7d4      	b.n	8004bec <_free_r+0x24>
 8004c42:	6820      	ldr	r0, [r4, #0]
 8004c44:	1821      	adds	r1, r4, r0
 8004c46:	428a      	cmp	r2, r1
 8004c48:	bf01      	itttt	eq
 8004c4a:	6811      	ldreq	r1, [r2, #0]
 8004c4c:	6852      	ldreq	r2, [r2, #4]
 8004c4e:	1809      	addeq	r1, r1, r0
 8004c50:	6021      	streq	r1, [r4, #0]
 8004c52:	6062      	str	r2, [r4, #4]
 8004c54:	605c      	str	r4, [r3, #4]
 8004c56:	e7c9      	b.n	8004bec <_free_r+0x24>
 8004c58:	bd38      	pop	{r3, r4, r5, pc}
 8004c5a:	bf00      	nop
 8004c5c:	200000bc 	.word	0x200000bc

08004c60 <_malloc_r>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	1ccd      	adds	r5, r1, #3
 8004c64:	f025 0503 	bic.w	r5, r5, #3
 8004c68:	3508      	adds	r5, #8
 8004c6a:	2d0c      	cmp	r5, #12
 8004c6c:	bf38      	it	cc
 8004c6e:	250c      	movcc	r5, #12
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	4606      	mov	r6, r0
 8004c74:	db01      	blt.n	8004c7a <_malloc_r+0x1a>
 8004c76:	42a9      	cmp	r1, r5
 8004c78:	d903      	bls.n	8004c82 <_malloc_r+0x22>
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	2000      	movs	r0, #0
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	f000 f87d 	bl	8004d80 <__malloc_lock>
 8004c86:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <_malloc_r+0xac>)
 8004c88:	6814      	ldr	r4, [r2, #0]
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	b991      	cbnz	r1, 8004cb4 <_malloc_r+0x54>
 8004c8e:	4c20      	ldr	r4, [pc, #128]	; (8004d10 <_malloc_r+0xb0>)
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	b91b      	cbnz	r3, 8004c9c <_malloc_r+0x3c>
 8004c94:	4630      	mov	r0, r6
 8004c96:	f000 f863 	bl	8004d60 <_sbrk_r>
 8004c9a:	6020      	str	r0, [r4, #0]
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f000 f85e 	bl	8004d60 <_sbrk_r>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d124      	bne.n	8004cf2 <_malloc_r+0x92>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	4630      	mov	r0, r6
 8004cac:	6033      	str	r3, [r6, #0]
 8004cae:	f000 f868 	bl	8004d82 <__malloc_unlock>
 8004cb2:	e7e4      	b.n	8004c7e <_malloc_r+0x1e>
 8004cb4:	680b      	ldr	r3, [r1, #0]
 8004cb6:	1b5b      	subs	r3, r3, r5
 8004cb8:	d418      	bmi.n	8004cec <_malloc_r+0x8c>
 8004cba:	2b0b      	cmp	r3, #11
 8004cbc:	d90f      	bls.n	8004cde <_malloc_r+0x7e>
 8004cbe:	600b      	str	r3, [r1, #0]
 8004cc0:	18cc      	adds	r4, r1, r3
 8004cc2:	50cd      	str	r5, [r1, r3]
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f000 f85c 	bl	8004d82 <__malloc_unlock>
 8004cca:	f104 000b 	add.w	r0, r4, #11
 8004cce:	1d23      	adds	r3, r4, #4
 8004cd0:	f020 0007 	bic.w	r0, r0, #7
 8004cd4:	1ac3      	subs	r3, r0, r3
 8004cd6:	d0d3      	beq.n	8004c80 <_malloc_r+0x20>
 8004cd8:	425a      	negs	r2, r3
 8004cda:	50e2      	str	r2, [r4, r3]
 8004cdc:	e7d0      	b.n	8004c80 <_malloc_r+0x20>
 8004cde:	684b      	ldr	r3, [r1, #4]
 8004ce0:	428c      	cmp	r4, r1
 8004ce2:	bf16      	itet	ne
 8004ce4:	6063      	strne	r3, [r4, #4]
 8004ce6:	6013      	streq	r3, [r2, #0]
 8004ce8:	460c      	movne	r4, r1
 8004cea:	e7eb      	b.n	8004cc4 <_malloc_r+0x64>
 8004cec:	460c      	mov	r4, r1
 8004cee:	6849      	ldr	r1, [r1, #4]
 8004cf0:	e7cc      	b.n	8004c8c <_malloc_r+0x2c>
 8004cf2:	1cc4      	adds	r4, r0, #3
 8004cf4:	f024 0403 	bic.w	r4, r4, #3
 8004cf8:	42a0      	cmp	r0, r4
 8004cfa:	d005      	beq.n	8004d08 <_malloc_r+0xa8>
 8004cfc:	1a21      	subs	r1, r4, r0
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f000 f82e 	bl	8004d60 <_sbrk_r>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d0cf      	beq.n	8004ca8 <_malloc_r+0x48>
 8004d08:	6025      	str	r5, [r4, #0]
 8004d0a:	e7db      	b.n	8004cc4 <_malloc_r+0x64>
 8004d0c:	200000bc 	.word	0x200000bc
 8004d10:	200000c0 	.word	0x200000c0

08004d14 <_realloc_r>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	4607      	mov	r7, r0
 8004d18:	4614      	mov	r4, r2
 8004d1a:	460e      	mov	r6, r1
 8004d1c:	b921      	cbnz	r1, 8004d28 <_realloc_r+0x14>
 8004d1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d22:	4611      	mov	r1, r2
 8004d24:	f7ff bf9c 	b.w	8004c60 <_malloc_r>
 8004d28:	b922      	cbnz	r2, 8004d34 <_realloc_r+0x20>
 8004d2a:	f7ff ff4d 	bl	8004bc8 <_free_r>
 8004d2e:	4625      	mov	r5, r4
 8004d30:	4628      	mov	r0, r5
 8004d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d34:	f000 f826 	bl	8004d84 <_malloc_usable_size_r>
 8004d38:	42a0      	cmp	r0, r4
 8004d3a:	d20f      	bcs.n	8004d5c <_realloc_r+0x48>
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f7ff ff8e 	bl	8004c60 <_malloc_r>
 8004d44:	4605      	mov	r5, r0
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d0f2      	beq.n	8004d30 <_realloc_r+0x1c>
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	f7ff ff17 	bl	8004b80 <memcpy>
 8004d52:	4631      	mov	r1, r6
 8004d54:	4638      	mov	r0, r7
 8004d56:	f7ff ff37 	bl	8004bc8 <_free_r>
 8004d5a:	e7e9      	b.n	8004d30 <_realloc_r+0x1c>
 8004d5c:	4635      	mov	r5, r6
 8004d5e:	e7e7      	b.n	8004d30 <_realloc_r+0x1c>

08004d60 <_sbrk_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	2300      	movs	r3, #0
 8004d64:	4c05      	ldr	r4, [pc, #20]	; (8004d7c <_sbrk_r+0x1c>)
 8004d66:	4605      	mov	r5, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	6023      	str	r3, [r4, #0]
 8004d6c:	f7fc f87c 	bl	8000e68 <_sbrk>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_sbrk_r+0x1a>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_sbrk_r+0x1a>
 8004d78:	602b      	str	r3, [r5, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	20000448 	.word	0x20000448

08004d80 <__malloc_lock>:
 8004d80:	4770      	bx	lr

08004d82 <__malloc_unlock>:
 8004d82:	4770      	bx	lr

08004d84 <_malloc_usable_size_r>:
 8004d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d88:	1f18      	subs	r0, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bfbc      	itt	lt
 8004d8e:	580b      	ldrlt	r3, [r1, r0]
 8004d90:	18c0      	addlt	r0, r0, r3
 8004d92:	4770      	bx	lr

08004d94 <_init>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	bf00      	nop
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr

08004da0 <_fini>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr
